(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
    /**
     * @namespace Chart
     */
    var Chart = require('./core/core')();
    
    Chart.helpers = require('./helpers/index');
    
    // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
    require('./core/core.helpers')(Chart);
    
    Chart.defaults = require('./core/core.defaults');
    Chart.Element = require('./core/core.element');
    Chart.elements = require('./elements/index');
    Chart.Interaction = require('./core/core.interaction');
    Chart.platform = require('./platforms/platform');
    
    require('./core/core.plugin')(Chart);
    require('./core/core.animation')(Chart);
    require('./core/core.controller')(Chart);
    require('./core/core.datasetController')(Chart);
    require('./core/core.layoutService')(Chart);
    require('./core/core.scaleService')(Chart);
    require('./core/core.scale')(Chart);
    require('./core/core.tooltip')(Chart);
    
    require('./scales/scale.linearbase')(Chart);
    require('./scales/scale.category')(Chart);
    require('./scales/scale.linear')(Chart);
    require('./scales/scale.logarithmic')(Chart);
    require('./scales/scale.radialLinear')(Chart);
    require('./scales/scale.time')(Chart);
    
    // Controllers must be loaded after elements
    // See Chart.core.datasetController.dataElementType
    require('./controllers/controller.bar')(Chart);
    require('./controllers/controller.bubble')(Chart);
    require('./controllers/controller.doughnut')(Chart);
    require('./controllers/controller.line')(Chart);
    require('./controllers/controller.polarArea')(Chart);
    require('./controllers/controller.radar')(Chart);
    require('./controllers/controller.scatter')(Chart);
    
    require('./charts/Chart.Bar')(Chart);
    require('./charts/Chart.Bubble')(Chart);
    require('./charts/Chart.Doughnut')(Chart);
    require('./charts/Chart.Line')(Chart);
    require('./charts/Chart.PolarArea')(Chart);
    require('./charts/Chart.Radar')(Chart);
    require('./charts/Chart.Scatter')(Chart);
    
    // Loading built-it plugins
    var plugins = [];
    
    plugins.push(
        require('./plugins/plugin.filler')(Chart),
        require('./plugins/plugin.legend')(Chart),
        require('./plugins/plugin.title')(Chart)
    );
    
    Chart.plugins.register(plugins);
    
    Chart.platform.initialize();
    
    module.exports = Chart;
    if (typeof window !== 'undefined') {
        window.Chart = Chart;
    }
    
    // DEPRECATIONS
    
    /**
     * Provided for backward compatibility, use Chart.helpers.canvas instead.
     * @namespace Chart.canvasHelpers
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    Chart.canvasHelpers = Chart.helpers.canvas;
    
    },{"./charts/Chart.Bar":2,"./charts/Chart.Bubble":3,"./charts/Chart.Doughnut":4,"./charts/Chart.Line":5,"./charts/Chart.PolarArea":6,"./charts/Chart.Radar":7,"./charts/Chart.Scatter":8,"./controllers/controller.bar":9,"./controllers/controller.bubble":10,"./controllers/controller.doughnut":11,"./controllers/controller.line":12,"./controllers/controller.polarArea":13,"./controllers/controller.radar":14,"./controllers/controller.scatter":15,"./core/core":23,"./core/core.animation":16,"./core/core.controller":17,"./core/core.datasetController":18,"./core/core.defaults":19,"./core/core.element":20,"./core/core.helpers":21,"./core/core.interaction":22,"./core/core.layoutService":24,"./core/core.plugin":25,"./core/core.scale":26,"./core/core.scaleService":27,"./core/core.tooltip":29,"./elements/index":34,"./helpers/index":39,"./platforms/platform":42,"./plugins/plugin.filler":43,"./plugins/plugin.legend":44,"./plugins/plugin.title":45,"./scales/scale.category":46,"./scales/scale.linear":47,"./scales/scale.linearbase":48,"./scales/scale.logarithmic":49,"./scales/scale.radialLinear":50,"./scales/scale.time":51}],2:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
    
        Chart.Bar = function(context, config) {
            config.type = 'bar';
    
            return new Chart(context, config);
        };
    
    };
    
    },{}],3:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
    
        Chart.Bubble = function(context, config) {
            config.type = 'bubble';
            return new Chart(context, config);
        };
    
    };
    
    },{}],4:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
    
        Chart.Doughnut = function(context, config) {
            config.type = 'doughnut';
    
            return new Chart(context, config);
        };
    
    };
    
    },{}],5:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
    
        Chart.Line = function(context, config) {
            config.type = 'line';
    
            return new Chart(context, config);
        };
    
    };
    
    },{}],6:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
    
        Chart.PolarArea = function(context, config) {
            config.type = 'polarArea';
    
            return new Chart(context, config);
        };
    
    };
    
    },{}],7:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
    
        Chart.Radar = function(context, config) {
            config.type = 'radar';
    
            return new Chart(context, config);
        };
    
    };
    
    },{}],8:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
        Chart.Scatter = function(context, config) {
            config.type = 'scatter';
            return new Chart(context, config);
        };
    };
    
    },{}],9:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var elements = require('../elements/index');
    var helpers = require('../helpers/index');
    
    defaults._set('bar', {
        hover: {
            mode: 'label'
        },
    
        scales: {
            xAxes: [{
                type: 'category',
    
                // Specific to Bar Controller
                categoryPercentage: 0.8,
                barPercentage: 0.9,
    
                // offset settings
                offset: true,
    
                // grid line settings
                gridLines: {
                    offsetGridLines: true
                }
            }],
    
            yAxes: [{
                type: 'linear'
            }]
        }
    });
    
    defaults._set('horizontalBar', {
        hover: {
            mode: 'index',
            axis: 'y'
        },
    
        scales: {
            xAxes: [{
                type: 'linear',
                position: 'bottom'
            }],
    
            yAxes: [{
                position: 'left',
                type: 'category',
    
                // Specific to Horizontal Bar Controller
                categoryPercentage: 0.8,
                barPercentage: 0.9,
    
                // offset settings
                offset: true,
    
                // grid line settings
                gridLines: {
                    offsetGridLines: true
                }
            }]
        },
    
        elements: {
            rectangle: {
                borderSkipped: 'left'
            }
        },
    
        tooltips: {
            callbacks: {
                title: function(item, data) {
                    // Pick first xLabel for now
                    var title = '';
    
                    if (item.length > 0) {
                        if (item[0].yLabel) {
                            title = item[0].yLabel;
                        } else if (data.labels.length > 0 && item[0].index < data.labels.length) {
                            title = data.labels[item[0].index];
                        }
                    }
    
                    return title;
                },
    
                label: function(item, data) {
                    var datasetLabel = data.datasets[item.datasetIndex].label || '';
                    return datasetLabel + ': ' + item.xLabel;
                }
            },
            mode: 'index',
            axis: 'y'
        }
    });
    
    module.exports = function(Chart) {
    
        Chart.controllers.bar = Chart.DatasetController.extend({
    
            dataElementType: elements.Rectangle,
    
            initialize: function() {
                var me = this;
                var meta;
    
                Chart.DatasetController.prototype.initialize.apply(me, arguments);
    
                meta = me.getMeta();
                meta.stack = me.getDataset().stack;
                meta.bar = true;
            },
    
            update: function(reset) {
                var me = this;
                var rects = me.getMeta().data;
                var i, ilen;
    
                me._ruler = me.getRuler();
    
                for (i = 0, ilen = rects.length; i < ilen; ++i) {
                    me.updateElement(rects[i], i, reset);
                }
            },
    
            updateElement: function(rectangle, index, reset) {
                var me = this;
                var chart = me.chart;
                var meta = me.getMeta();
                var dataset = me.getDataset();
                var custom = rectangle.custom || {};
                var rectangleOptions = chart.options.elements.rectangle;
    
                rectangle._xScale = me.getScaleForId(meta.xAxisID);
                rectangle._yScale = me.getScaleForId(meta.yAxisID);
                rectangle._datasetIndex = me.index;
                rectangle._index = index;
    
                rectangle._model = {
                    datasetLabel: dataset.label,
                    label: chart.data.labels[index],
                    borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleOptions.borderSkipped,
                    backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleOptions.backgroundColor),
                    borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleOptions.borderColor),
                    borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleOptions.borderWidth)
                };
    
                me.updateElementGeometry(rectangle, index, reset);
    
                rectangle.pivot();
            },
    
            /**
             * @private
             */
            updateElementGeometry: function(rectangle, index, reset) {
                var me = this;
                var model = rectangle._model;
                var vscale = me.getValueScale();
                var base = vscale.getBasePixel();
                var horizontal = vscale.isHorizontal();
                var ruler = me._ruler || me.getRuler();
                var vpixels = me.calculateBarValuePixels(me.index, index);
                var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);
    
                model.horizontal = horizontal;
                model.base = reset ? base : vpixels.base;
                model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
                model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
                model.height = horizontal ? ipixels.size : undefined;
                model.width = horizontal ? undefined : ipixels.size;
            },
    
            /**
             * @private
             */
            getValueScaleId: function() {
                return this.getMeta().yAxisID;
            },
    
            /**
             * @private
             */
            getIndexScaleId: function() {
                return this.getMeta().xAxisID;
            },
    
            /**
             * @private
             */
            getValueScale: function() {
                return this.getScaleForId(this.getValueScaleId());
            },
    
            /**
             * @private
             */
            getIndexScale: function() {
                return this.getScaleForId(this.getIndexScaleId());
            },
    
            /**
             * Returns the effective number of stacks based on groups and bar visibility.
             * @private
             */
            getStackCount: function(last) {
                var me = this;
                var chart = me.chart;
                var scale = me.getIndexScale();
                var stacked = scale.options.stacked;
                var ilen = last === undefined ? chart.data.datasets.length : last + 1;
                var stacks = [];
                var i, meta;
    
                for (i = 0; i < ilen; ++i) {
                    meta = chart.getDatasetMeta(i);
                    if (meta.bar && chart.isDatasetVisible(i) &&
                        (stacked === false ||
                        (stacked === true && stacks.indexOf(meta.stack) === -1) ||
                        (stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1)))) {
                        stacks.push(meta.stack);
                    }
                }
    
                return stacks.length;
            },
    
            /**
             * Returns the stack index for the given dataset based on groups and bar visibility.
             * @private
             */
            getStackIndex: function(datasetIndex) {
                return this.getStackCount(datasetIndex) - 1;
            },
    
            /**
             * @private
             */
            getRuler: function() {
                var me = this;
                var scale = me.getIndexScale();
                var stackCount = me.getStackCount();
                var datasetIndex = me.index;
                var pixels = [];
                var isHorizontal = scale.isHorizontal();
                var start = isHorizontal ? scale.left : scale.top;
                var end = start + (isHorizontal ? scale.width : scale.height);
                var i, ilen;
    
                for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
                    pixels.push(scale.getPixelForValue(null, i, datasetIndex));
                }
    
                return {
                    pixels: pixels,
                    start: start,
                    end: end,
                    stackCount: stackCount,
                    scale: scale
                };
            },
    
            /**
             * Note: pixel values are not clamped to the scale area.
             * @private
             */
            calculateBarValuePixels: function(datasetIndex, index) {
                var me = this;
                var chart = me.chart;
                var meta = me.getMeta();
                var scale = me.getValueScale();
                var datasets = chart.data.datasets;
                var value = scale.getRightValue(datasets[datasetIndex].data[index]);
                var stacked = scale.options.stacked;
                var stack = meta.stack;
                var start = 0;
                var i, imeta, ivalue, base, head, size;
    
                if (stacked || (stacked === undefined && stack !== undefined)) {
                    for (i = 0; i < datasetIndex; ++i) {
                        imeta = chart.getDatasetMeta(i);
    
                        if (imeta.bar &&
                            imeta.stack === stack &&
                            imeta.controller.getValueScaleId() === scale.id &&
                            chart.isDatasetVisible(i)) {
    
                            ivalue = scale.getRightValue(datasets[i].data[index]);
                            if ((value < 0 && ivalue < 0) || (value >= 0 && ivalue > 0)) {
                                start += ivalue;
                            }
                        }
                    }
                }
    
                base = scale.getPixelForValue(start);
                head = scale.getPixelForValue(start + value);
                size = (head - base) / 2;
    
                return {
                    size: size,
                    base: base,
                    head: head,
                    center: head + size / 2
                };
            },
    
            /**
             * @private
             */
            calculateBarIndexPixels: function(datasetIndex, index, ruler) {
                var me = this;
                var options = ruler.scale.options;
                var stackIndex = me.getStackIndex(datasetIndex);
                var pixels = ruler.pixels;
                var base = pixels[index];
                var length = pixels.length;
                var start = ruler.start;
                var end = ruler.end;
                var leftSampleSize, rightSampleSize, leftCategorySize, rightCategorySize, fullBarSize, size;
    
                if (length === 1) {
                    leftSampleSize = base > start ? base - start : end - base;
                    rightSampleSize = base < end ? end - base : base - start;
                } else {
                    if (index > 0) {
                        leftSampleSize = (base - pixels[index - 1]) / 2;
                        if (index === length - 1) {
                            rightSampleSize = leftSampleSize;
                        }
                    }
                    if (index < length - 1) {
                        rightSampleSize = (pixels[index + 1] - base) / 2;
                        if (index === 0) {
                            leftSampleSize = rightSampleSize;
                        }
                    }
                }
    
                leftCategorySize = leftSampleSize * options.categoryPercentage;
                rightCategorySize = rightSampleSize * options.categoryPercentage;
                fullBarSize = (leftCategorySize + rightCategorySize) / ruler.stackCount;
                size = fullBarSize * options.barPercentage;
    
                size = Math.min(
                    helpers.valueOrDefault(options.barThickness, size),
                    helpers.valueOrDefault(options.maxBarThickness, Infinity));
    
                base -= leftCategorySize;
                base += fullBarSize * stackIndex;
                base += (fullBarSize - size) / 2;
    
                return {
                    size: size,
                    base: base,
                    head: base + size,
                    center: base + size / 2
                };
            },
    
            draw: function() {
                var me = this;
                var chart = me.chart;
                var scale = me.getValueScale();
                var rects = me.getMeta().data;
                var dataset = me.getDataset();
                var ilen = rects.length;
                var i = 0;
    
                helpers.canvas.clipArea(chart.ctx, chart.chartArea);
    
                for (; i < ilen; ++i) {
                    if (!isNaN(scale.getRightValue(dataset.data[i]))) {
                        rects[i].draw();
                    }
                }
    
                helpers.canvas.unclipArea(chart.ctx);
            },
    
            setHoverStyle: function(rectangle) {
                var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                var index = rectangle._index;
                var custom = rectangle.custom || {};
                var model = rectangle._model;
    
                model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
            },
    
            removeHoverStyle: function(rectangle) {
                var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                var index = rectangle._index;
                var custom = rectangle.custom || {};
                var model = rectangle._model;
                var rectangleElementOptions = this.chart.options.elements.rectangle;
    
                model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
                model.borderColor = custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
                model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
            }
        });
    
        Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
            /**
             * @private
             */
            getValueScaleId: function() {
                return this.getMeta().xAxisID;
            },
    
            /**
             * @private
             */
            getIndexScaleId: function() {
                return this.getMeta().yAxisID;
            }
        });
    };
    
    },{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],10:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var elements = require('../elements/index');
    var helpers = require('../helpers/index');
    
    defaults._set('bubble', {
        hover: {
            mode: 'single'
        },
    
        scales: {
            xAxes: [{
                type: 'linear', // bubble should probably use a linear scale by default
                position: 'bottom',
                id: 'x-axis-0' // need an ID so datasets can reference the scale
            }],
            yAxes: [{
                type: 'linear',
                position: 'left',
                id: 'y-axis-0'
            }]
        },
    
        tooltips: {
            callbacks: {
                title: function() {
                    // Title doesn't make sense for scatter since we format the data as a point
                    return '';
                },
                label: function(item, data) {
                    var datasetLabel = data.datasets[item.datasetIndex].label || '';
                    var dataPoint = data.datasets[item.datasetIndex].data[item.index];
                    return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
                }
            }
        }
    });
    
    
    module.exports = function(Chart) {
    
        Chart.controllers.bubble = Chart.DatasetController.extend({
            /**
             * @protected
             */
            dataElementType: elements.Point,
    
            /**
             * @protected
             */
            update: function(reset) {
                var me = this;
                var meta = me.getMeta();
                var points = meta.data;
    
                // Update Points
                helpers.each(points, function(point, index) {
                    me.updateElement(point, index, reset);
                });
            },
    
            /**
             * @protected
             */
            updateElement: function(point, index, reset) {
                var me = this;
                var meta = me.getMeta();
                var custom = point.custom || {};
                var xScale = me.getScaleForId(meta.xAxisID);
                var yScale = me.getScaleForId(meta.yAxisID);
                var options = me._resolveElementOptions(point, index);
                var data = me.getDataset().data[index];
                var dsIndex = me.index;
    
                var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
                var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
    
                point._xScale = xScale;
                point._yScale = yScale;
                point._options = options;
                point._datasetIndex = dsIndex;
                point._index = index;
                point._model = {
                    backgroundColor: options.backgroundColor,
                    borderColor: options.borderColor,
                    borderWidth: options.borderWidth,
                    hitRadius: options.hitRadius,
                    pointStyle: options.pointStyle,
                    radius: reset ? 0 : options.radius,
                    skip: custom.skip || isNaN(x) || isNaN(y),
                    x: x,
                    y: y,
                };
    
                point.pivot();
            },
    
            /**
             * @protected
             */
            setHoverStyle: function(point) {
                var model = point._model;
                var options = point._options;
    
                model.backgroundColor = helpers.valueOrDefault(options.hoverBackgroundColor, helpers.getHoverColor(options.backgroundColor));
                model.borderColor = helpers.valueOrDefault(options.hoverBorderColor, helpers.getHoverColor(options.borderColor));
                model.borderWidth = helpers.valueOrDefault(options.hoverBorderWidth, options.borderWidth);
                model.radius = options.radius + options.hoverRadius;
            },
    
            /**
             * @protected
             */
            removeHoverStyle: function(point) {
                var model = point._model;
                var options = point._options;
    
                model.backgroundColor = options.backgroundColor;
                model.borderColor = options.borderColor;
                model.borderWidth = options.borderWidth;
                model.radius = options.radius;
            },
    
            /**
             * @private
             */
            _resolveElementOptions: function(point, index) {
                var me = this;
                var chart = me.chart;
                var datasets = chart.data.datasets;
                var dataset = datasets[me.index];
                var custom = point.custom || {};
                var options = chart.options.elements.point;
                var resolve = helpers.options.resolve;
                var data = dataset.data[index];
                var values = {};
                var i, ilen, key;
    
                // Scriptable options
                var context = {
                    chart: chart,
                    dataIndex: index,
                    dataset: dataset,
                    datasetIndex: me.index
                };
    
                var keys = [
                    'backgroundColor',
                    'borderColor',
                    'borderWidth',
                    'hoverBackgroundColor',
                    'hoverBorderColor',
                    'hoverBorderWidth',
                    'hoverRadius',
                    'hitRadius',
                    'pointStyle'
                ];
    
                for (i = 0, ilen = keys.length; i < ilen; ++i) {
                    key = keys[i];
                    values[key] = resolve([
                        custom[key],
                        dataset[key],
                        options[key]
                    ], context, index);
                }
    
                // Custom radius resolution
                values.radius = resolve([
                    custom.radius,
                    data ? data.r : undefined,
                    dataset.radius,
                    options.radius
                ], context, index);
    
                return values;
            }
        });
    };
    
    },{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],11:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var elements = require('../elements/index');
    var helpers = require('../helpers/index');
    
    defaults._set('doughnut', {
        animation: {
            // Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            // Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false
        },
        hover: {
            mode: 'single'
        },
        legendCallback: function(chart) {
            var text = [];
            text.push('<ul class="' + chart.id + '-legend">');
    
            var data = chart.data;
            var datasets = data.datasets;
            var labels = data.labels;
    
            if (datasets.length) {
                for (var i = 0; i < datasets[0].data.length; ++i) {
                    text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                    if (labels[i]) {
                        text.push(labels[i]);
                    }
                    text.push('</li>');
                }
            }
    
            text.push('</ul>');
            return text.join('');
        },
        legend: {
            labels: {
                generateLabels: function(chart) {
                    var data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        return data.labels.map(function(label, i) {
                            var meta = chart.getDatasetMeta(0);
                            var ds = data.datasets[0];
                            var arc = meta.data[i];
                            var custom = arc && arc.custom || {};
                            var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                            var arcOpts = chart.options.elements.arc;
                            var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                            var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                            var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
    
                            return {
                                text: label,
                                fillStyle: fill,
                                strokeStyle: stroke,
                                lineWidth: bw,
                                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
    
                                // Extra data used for toggling the correct item
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
    
            onClick: function(e, legendItem) {
                var index = legendItem.index;
                var chart = this.chart;
                var i, ilen, meta;
    
                for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                    meta = chart.getDatasetMeta(i);
                    // toggle visibility of index if exists
                    if (meta.data[index]) {
                        meta.data[index].hidden = !meta.data[index].hidden;
                    }
                }
    
                chart.update();
            }
        },
    
        // The percentage of the chart that we cut out of the middle.
        cutoutPercentage: 50,
    
        // The rotation of the chart, where the first data arc begins.
        rotation: Math.PI * -0.5,
    
        // The total circumference of the chart.
        circumference: Math.PI * 2.0,
    
        // Need to override these to give a nice default
        tooltips: {
            callbacks: {
                title: function() {
                    return '';
                },
                label: function(tooltipItem, data) {
                    var dataLabel = data.labels[tooltipItem.index];
                    var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
    
                    if (helpers.isArray(dataLabel)) {
                        // show value on first line of multiline label
                        // need to clone because we are changing the value
                        dataLabel = dataLabel.slice();
                        dataLabel[0] += value;
                    } else {
                        dataLabel += value;
                    }
    
                    return dataLabel;
                }
            }
        }
    });
    
    defaults._set('pie', helpers.clone(defaults.doughnut));
    defaults._set('pie', {
        cutoutPercentage: 0
    });
    
    module.exports = function(Chart) {
    
        Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
    
            dataElementType: elements.Arc,
    
            linkScales: helpers.noop,
    
            // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
            getRingIndex: function(datasetIndex) {
                var ringIndex = 0;
    
                for (var j = 0; j < datasetIndex; ++j) {
                    if (this.chart.isDatasetVisible(j)) {
                        ++ringIndex;
                    }
                }
    
                return ringIndex;
            },
    
            update: function(reset) {
                var me = this;
                var chart = me.chart;
                var chartArea = chart.chartArea;
                var opts = chart.options;
                var arcOpts = opts.elements.arc;
                var availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth;
                var availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth;
                var minSize = Math.min(availableWidth, availableHeight);
                var offset = {x: 0, y: 0};
                var meta = me.getMeta();
                var cutoutPercentage = opts.cutoutPercentage;
                var circumference = opts.circumference;
    
                // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
                if (circumference < Math.PI * 2.0) {
                    var startAngle = opts.rotation % (Math.PI * 2.0);
                    startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
                    var endAngle = startAngle + circumference;
                    var start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};
                    var end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};
                    var contains0 = (startAngle <= 0 && endAngle >= 0) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);
                    var contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);
                    var contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);
                    var contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);
                    var cutout = cutoutPercentage / 100.0;
                    var min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};
                    var max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};
                    var size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};
                    minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
                    offset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};
                }
    
                chart.borderWidth = me.getMaxBorderWidth(meta.data);
                chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
                chart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);
                chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
                chart.offsetX = offset.x * chart.outerRadius;
                chart.offsetY = offset.y * chart.outerRadius;
    
                meta.total = me.calculateTotal();
    
                me.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));
                me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
    
                helpers.each(meta.data, function(arc, index) {
                    me.updateElement(arc, index, reset);
                });
            },
    
            updateElement: function(arc, index, reset) {
                var me = this;
                var chart = me.chart;
                var chartArea = chart.chartArea;
                var opts = chart.options;
                var animationOpts = opts.animation;
                var centerX = (chartArea.left + chartArea.right) / 2;
                var centerY = (chartArea.top + chartArea.bottom) / 2;
                var startAngle = opts.rotation; // non reset case handled later
                var endAngle = opts.rotation; // non reset case handled later
                var dataset = me.getDataset();
                var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));
                var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
                var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
                var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
    
                helpers.extend(arc, {
                    // Utility
                    _datasetIndex: me.index,
                    _index: index,
    
                    // Desired view properties
                    _model: {
                        x: centerX + chart.offsetX,
                        y: centerY + chart.offsetY,
                        startAngle: startAngle,
                        endAngle: endAngle,
                        circumference: circumference,
                        outerRadius: outerRadius,
                        innerRadius: innerRadius,
                        label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
                    }
                });
    
                var model = arc._model;
                // Resets the visual styles
                this.removeHoverStyle(arc);
    
                // Set correct angles if not resetting
                if (!reset || !animationOpts.animateRotate) {
                    if (index === 0) {
                        model.startAngle = opts.rotation;
                    } else {
                        model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
                    }
    
                    model.endAngle = model.startAngle + model.circumference;
                }
    
                arc.pivot();
            },
    
            removeHoverStyle: function(arc) {
                Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
            },
    
            calculateTotal: function() {
                var dataset = this.getDataset();
                var meta = this.getMeta();
                var total = 0;
                var value;
    
                helpers.each(meta.data, function(element, index) {
                    value = dataset.data[index];
                    if (!isNaN(value) && !element.hidden) {
                        total += Math.abs(value);
                    }
                });
    
                /* if (total === 0) {
                    total = NaN;
                }*/
    
                return total;
            },
    
            calculateCircumference: function(value) {
                var total = this.getMeta().total;
                if (total > 0 && !isNaN(value)) {
                    return (Math.PI * 2.0) * (value / total);
                }
                return 0;
            },
    
            // gets the max border or hover width to properly scale pie charts
            getMaxBorderWidth: function(arcs) {
                var max = 0;
                var index = this.index;
                var length = arcs.length;
                var borderWidth;
                var hoverWidth;
    
                for (var i = 0; i < length; i++) {
                    borderWidth = arcs[i]._model ? arcs[i]._model.borderWidth : 0;
                    hoverWidth = arcs[i]._chart ? arcs[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
    
                    max = borderWidth > max ? borderWidth : max;
                    max = hoverWidth > max ? hoverWidth : max;
                }
                return max;
            }
        });
    };
    
    },{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],12:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var elements = require('../elements/index');
    var helpers = require('../helpers/index');
    
    defaults._set('line', {
        showLines: true,
        spanGaps: false,
    
        hover: {
            mode: 'label'
        },
    
        scales: {
            xAxes: [{
                type: 'category',
                id: 'x-axis-0'
            }],
            yAxes: [{
                type: 'linear',
                id: 'y-axis-0'
            }]
        }
    });
    
    module.exports = function(Chart) {
    
        function lineEnabled(dataset, options) {
            return helpers.valueOrDefault(dataset.showLine, options.showLines);
        }
    
        Chart.controllers.line = Chart.DatasetController.extend({
    
            datasetElementType: elements.Line,
    
            dataElementType: elements.Point,
    
            update: function(reset) {
                var me = this;
                var meta = me.getMeta();
                var line = meta.dataset;
                var points = meta.data || [];
                var options = me.chart.options;
                var lineElementOptions = options.elements.line;
                var scale = me.getScaleForId(meta.yAxisID);
                var i, ilen, custom;
                var dataset = me.getDataset();
                var showLine = lineEnabled(dataset, options);
    
                // Update Line
                if (showLine) {
                    custom = line.custom || {};
    
                    // Compatibility: If the properties are defined with only the old name, use those values
                    if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
                        dataset.lineTension = dataset.tension;
                    }
    
                    // Utility
                    line._scale = scale;
                    line._datasetIndex = me.index;
                    // Data
                    line._children = points;
                    // Model
                    line._model = {
                        // Appearance
                        // The default behavior of lines is to break at null values, according
                        // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
                        // This option gives lines the ability to span gaps
                        spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
                        tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
                        backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
                        borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
                        borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
                        borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
                        borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
                        borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
                        borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
                        fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
                        steppedLine: custom.steppedLine ? custom.steppedLine : helpers.valueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
                        cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.valueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
                    };
    
                    line.pivot();
                }
    
                // Update Points
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                    me.updateElement(points[i], i, reset);
                }
    
                if (showLine && line._model.tension !== 0) {
                    me.updateBezierControlPoints();
                }
    
                // Now pivot the point for animation
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                    points[i].pivot();
                }
            },
    
            getPointBackgroundColor: function(point, index) {
                var backgroundColor = this.chart.options.elements.point.backgroundColor;
                var dataset = this.getDataset();
                var custom = point.custom || {};
    
                if (custom.backgroundColor) {
                    backgroundColor = custom.backgroundColor;
                } else if (dataset.pointBackgroundColor) {
                    backgroundColor = helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
                } else if (dataset.backgroundColor) {
                    backgroundColor = dataset.backgroundColor;
                }
    
                return backgroundColor;
            },
    
            getPointBorderColor: function(point, index) {
                var borderColor = this.chart.options.elements.point.borderColor;
                var dataset = this.getDataset();
                var custom = point.custom || {};
    
                if (custom.borderColor) {
                    borderColor = custom.borderColor;
                } else if (dataset.pointBorderColor) {
                    borderColor = helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
                } else if (dataset.borderColor) {
                    borderColor = dataset.borderColor;
                }
    
                return borderColor;
            },
    
            getPointBorderWidth: function(point, index) {
                var borderWidth = this.chart.options.elements.point.borderWidth;
                var dataset = this.getDataset();
                var custom = point.custom || {};
    
                if (!isNaN(custom.borderWidth)) {
                    borderWidth = custom.borderWidth;
                } else if (!isNaN(dataset.pointBorderWidth) || helpers.isArray(dataset.pointBorderWidth)) {
                    borderWidth = helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
                } else if (!isNaN(dataset.borderWidth)) {
                    borderWidth = dataset.borderWidth;
                }
    
                return borderWidth;
            },
    
            updateElement: function(point, index, reset) {
                var me = this;
                var meta = me.getMeta();
                var custom = point.custom || {};
                var dataset = me.getDataset();
                var datasetIndex = me.index;
                var value = dataset.data[index];
                var yScale = me.getScaleForId(meta.yAxisID);
                var xScale = me.getScaleForId(meta.xAxisID);
                var pointOptions = me.chart.options.elements.point;
                var x, y;
    
                // Compatibility: If the properties are defined with only the old name, use those values
                if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
                    dataset.pointRadius = dataset.radius;
                }
                if ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {
                    dataset.pointHitRadius = dataset.hitRadius;
                }
    
                x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
                y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
    
                // Utility
                point._xScale = xScale;
                point._yScale = yScale;
                point._datasetIndex = datasetIndex;
                point._index = index;
    
                // Desired view properties
                point._model = {
                    x: x,
                    y: y,
                    skip: custom.skip || isNaN(x) || isNaN(y),
                    // Appearance
                    radius: custom.radius || helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
                    pointStyle: custom.pointStyle || helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
                    backgroundColor: me.getPointBackgroundColor(point, index),
                    borderColor: me.getPointBorderColor(point, index),
                    borderWidth: me.getPointBorderWidth(point, index),
                    tension: meta.dataset._model ? meta.dataset._model.tension : 0,
                    steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
                    // Tooltip
                    hitRadius: custom.hitRadius || helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
                };
            },
    
            calculatePointY: function(value, index, datasetIndex) {
                var me = this;
                var chart = me.chart;
                var meta = me.getMeta();
                var yScale = me.getScaleForId(meta.yAxisID);
                var sumPos = 0;
                var sumNeg = 0;
                var i, ds, dsMeta;
    
                if (yScale.options.stacked) {
                    for (i = 0; i < datasetIndex; i++) {
                        ds = chart.data.datasets[i];
                        dsMeta = chart.getDatasetMeta(i);
                        if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                            var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
                            if (stackedRightValue < 0) {
                                sumNeg += stackedRightValue || 0;
                            } else {
                                sumPos += stackedRightValue || 0;
                            }
                        }
                    }
    
                    var rightValue = Number(yScale.getRightValue(value));
                    if (rightValue < 0) {
                        return yScale.getPixelForValue(sumNeg + rightValue);
                    }
                    return yScale.getPixelForValue(sumPos + rightValue);
                }
    
                return yScale.getPixelForValue(value);
            },
    
            updateBezierControlPoints: function() {
                var me = this;
                var meta = me.getMeta();
                var area = me.chart.chartArea;
                var points = (meta.data || []);
                var i, ilen, point, model, controlPoints;
    
                // Only consider points that are drawn in case the spanGaps option is used
                if (meta.dataset._model.spanGaps) {
                    points = points.filter(function(pt) {
                        return !pt._model.skip;
                    });
                }
    
                function capControlPoint(pt, min, max) {
                    return Math.max(Math.min(pt, max), min);
                }
    
                if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
                    helpers.splineCurveMonotone(points);
                } else {
                    for (i = 0, ilen = points.length; i < ilen; ++i) {
                        point = points[i];
                        model = point._model;
                        controlPoints = helpers.splineCurve(
                            helpers.previousItem(points, i)._model,
                            model,
                            helpers.nextItem(points, i)._model,
                            meta.dataset._model.tension
                        );
                        model.controlPointPreviousX = controlPoints.previous.x;
                        model.controlPointPreviousY = controlPoints.previous.y;
                        model.controlPointNextX = controlPoints.next.x;
                        model.controlPointNextY = controlPoints.next.y;
                    }
                }
    
                if (me.chart.options.elements.line.capBezierPoints) {
                    for (i = 0, ilen = points.length; i < ilen; ++i) {
                        model = points[i]._model;
                        model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                        model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                        model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                        model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                    }
                }
            },
    
            draw: function() {
                var me = this;
                var chart = me.chart;
                var meta = me.getMeta();
                var points = meta.data || [];
                var area = chart.chartArea;
                var ilen = points.length;
                var i = 0;
    
                helpers.canvas.clipArea(chart.ctx, area);
    
                if (lineEnabled(me.getDataset(), chart.options)) {
                    meta.dataset.draw();
                }
    
                helpers.canvas.unclipArea(chart.ctx);
    
                // Draw the points
                for (; i < ilen; ++i) {
                    points[i].draw(area);
                }
            },
    
            setHoverStyle: function(point) {
                // Point
                var dataset = this.chart.data.datasets[point._datasetIndex];
                var index = point._index;
                var custom = point.custom || {};
                var model = point._model;
    
                model.radius = custom.hoverRadius || helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
                model.backgroundColor = custom.hoverBackgroundColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                model.borderColor = custom.hoverBorderColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                model.borderWidth = custom.hoverBorderWidth || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
            },
    
            removeHoverStyle: function(point) {
                var me = this;
                var dataset = me.chart.data.datasets[point._datasetIndex];
                var index = point._index;
                var custom = point.custom || {};
                var model = point._model;
    
                // Compatibility: If the properties are defined with only the old name, use those values
                if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
                    dataset.pointRadius = dataset.radius;
                }
    
                model.radius = custom.radius || helpers.valueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
                model.backgroundColor = me.getPointBackgroundColor(point, index);
                model.borderColor = me.getPointBorderColor(point, index);
                model.borderWidth = me.getPointBorderWidth(point, index);
            }
        });
    };
    
    },{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],13:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var elements = require('../elements/index');
    var helpers = require('../helpers/index');
    
    defaults._set('polarArea', {
        scale: {
            type: 'radialLinear',
            angleLines: {
                display: false
            },
            gridLines: {
                circular: true
            },
            pointLabels: {
                display: false
            },
            ticks: {
                beginAtZero: true
            }
        },
    
        // Boolean - Whether to animate the rotation of the chart
        animation: {
            animateRotate: true,
            animateScale: true
        },
    
        startAngle: -0.5 * Math.PI,
        legendCallback: function(chart) {
            var text = [];
            text.push('<ul class="' + chart.id + '-legend">');
    
            var data = chart.data;
            var datasets = data.datasets;
            var labels = data.labels;
    
            if (datasets.length) {
                for (var i = 0; i < datasets[0].data.length; ++i) {
                    text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                    if (labels[i]) {
                        text.push(labels[i]);
                    }
                    text.push('</li>');
                }
            }
    
            text.push('</ul>');
            return text.join('');
        },
        legend: {
            labels: {
                generateLabels: function(chart) {
                    var data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        return data.labels.map(function(label, i) {
                            var meta = chart.getDatasetMeta(0);
                            var ds = data.datasets[0];
                            var arc = meta.data[i];
                            var custom = arc.custom || {};
                            var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                            var arcOpts = chart.options.elements.arc;
                            var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                            var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                            var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
    
                            return {
                                text: label,
                                fillStyle: fill,
                                strokeStyle: stroke,
                                lineWidth: bw,
                                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
    
                                // Extra data used for toggling the correct item
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
    
            onClick: function(e, legendItem) {
                var index = legendItem.index;
                var chart = this.chart;
                var i, ilen, meta;
    
                for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                    meta = chart.getDatasetMeta(i);
                    meta.data[index].hidden = !meta.data[index].hidden;
                }
    
                chart.update();
            }
        },
    
        // Need to override these to give a nice default
        tooltips: {
            callbacks: {
                title: function() {
                    return '';
                },
                label: function(item, data) {
                    return data.labels[item.index] + ': ' + item.yLabel;
                }
            }
        }
    });
    
    module.exports = function(Chart) {
    
        Chart.controllers.polarArea = Chart.DatasetController.extend({
    
            dataElementType: elements.Arc,
    
            linkScales: helpers.noop,
    
            update: function(reset) {
                var me = this;
                var chart = me.chart;
                var chartArea = chart.chartArea;
                var meta = me.getMeta();
                var opts = chart.options;
                var arcOpts = opts.elements.arc;
                var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
                chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
                chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
                chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
    
                me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
                me.innerRadius = me.outerRadius - chart.radiusLength;
    
                meta.count = me.countVisibleElements();
    
                helpers.each(meta.data, function(arc, index) {
                    me.updateElement(arc, index, reset);
                });
            },
    
            updateElement: function(arc, index, reset) {
                var me = this;
                var chart = me.chart;
                var dataset = me.getDataset();
                var opts = chart.options;
                var animationOpts = opts.animation;
                var scale = chart.scale;
                var labels = chart.data.labels;
    
                var circumference = me.calculateCircumference(dataset.data[index]);
                var centerX = scale.xCenter;
                var centerY = scale.yCenter;
    
                // If there is NaN data before us, we need to calculate the starting angle correctly.
                // We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data
                var visibleCount = 0;
                var meta = me.getMeta();
                for (var i = 0; i < index; ++i) {
                    if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
                        ++visibleCount;
                    }
                }
    
                // var negHalfPI = -0.5 * Math.PI;
                var datasetStartAngle = opts.startAngle;
                var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
                var startAngle = datasetStartAngle + (circumference * visibleCount);
                var endAngle = startAngle + (arc.hidden ? 0 : circumference);
    
                var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    
                helpers.extend(arc, {
                    // Utility
                    _datasetIndex: me.index,
                    _index: index,
                    _scale: scale,
    
                    // Desired view properties
                    _model: {
                        x: centerX,
                        y: centerY,
                        innerRadius: 0,
                        outerRadius: reset ? resetRadius : distance,
                        startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
                        endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
                        label: helpers.valueAtIndexOrDefault(labels, index, labels[index])
                    }
                });
    
                // Apply border and fill style
                me.removeHoverStyle(arc);
    
                arc.pivot();
            },
    
            removeHoverStyle: function(arc) {
                Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
            },
    
            countVisibleElements: function() {
                var dataset = this.getDataset();
                var meta = this.getMeta();
                var count = 0;
    
                helpers.each(meta.data, function(element, index) {
                    if (!isNaN(dataset.data[index]) && !element.hidden) {
                        count++;
                    }
                });
    
                return count;
            },
    
            calculateCircumference: function(value) {
                var count = this.getMeta().count;
                if (count > 0 && !isNaN(value)) {
                    return (2 * Math.PI) / count;
                }
                return 0;
            }
        });
    };
    
    },{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],14:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var elements = require('../elements/index');
    var helpers = require('../helpers/index');
    
    defaults._set('radar', {
        scale: {
            type: 'radialLinear'
        },
        elements: {
            line: {
                tension: 0 // no bezier in radar
            }
        }
    });
    
    module.exports = function(Chart) {
    
        Chart.controllers.radar = Chart.DatasetController.extend({
    
            datasetElementType: elements.Line,
    
            dataElementType: elements.Point,
    
            linkScales: helpers.noop,
    
            update: function(reset) {
                var me = this;
                var meta = me.getMeta();
                var line = meta.dataset;
                var points = meta.data;
                var custom = line.custom || {};
                var dataset = me.getDataset();
                var lineElementOptions = me.chart.options.elements.line;
                var scale = me.chart.scale;
    
                // Compatibility: If the properties are defined with only the old name, use those values
                if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
                    dataset.lineTension = dataset.tension;
                }
    
                helpers.extend(meta.dataset, {
                    // Utility
                    _datasetIndex: me.index,
                    _scale: scale,
                    // Data
                    _children: points,
                    _loop: true,
                    // Model
                    _model: {
                        // Appearance
                        tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
                        backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
                        borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
                        borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
                        fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
                        borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
                        borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
                        borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
                        borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
                    }
                });
    
                meta.dataset.pivot();
    
                // Update Points
                helpers.each(points, function(point, index) {
                    me.updateElement(point, index, reset);
                }, me);
    
                // Update bezier control points
                me.updateBezierControlPoints();
            },
            updateElement: function(point, index, reset) {
                var me = this;
                var custom = point.custom || {};
                var dataset = me.getDataset();
                var scale = me.chart.scale;
                var pointElementOptions = me.chart.options.elements.point;
                var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
    
                // Compatibility: If the properties are defined with only the old name, use those values
                if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
                    dataset.pointRadius = dataset.radius;
                }
                if ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {
                    dataset.pointHitRadius = dataset.hitRadius;
                }
    
                helpers.extend(point, {
                    // Utility
                    _datasetIndex: me.index,
                    _index: index,
                    _scale: scale,
    
                    // Desired view properties
                    _model: {
                        x: reset ? scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales
                        y: reset ? scale.yCenter : pointPosition.y,
    
                        // Appearance
                        tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
                        radius: custom.radius ? custom.radius : helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
                        backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
                        borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
                        borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
                        pointStyle: custom.pointStyle ? custom.pointStyle : helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
    
                        // Tooltip
                        hitRadius: custom.hitRadius ? custom.hitRadius : helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointElementOptions.hitRadius)
                    }
                });
    
                point._model.skip = custom.skip ? custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));
            },
            updateBezierControlPoints: function() {
                var chartArea = this.chart.chartArea;
                var meta = this.getMeta();
    
                helpers.each(meta.data, function(point, index) {
                    var model = point._model;
                    var controlPoints = helpers.splineCurve(
                        helpers.previousItem(meta.data, index, true)._model,
                        model,
                        helpers.nextItem(meta.data, index, true)._model,
                        model.tension
                    );
    
                    // Prevent the bezier going outside of the bounds of the graph
                    model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
                    model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
    
                    model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
                    model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
    
                    // Now pivot the point for animation
                    point.pivot();
                });
            },
    
            setHoverStyle: function(point) {
                // Point
                var dataset = this.chart.data.datasets[point._datasetIndex];
                var custom = point.custom || {};
                var index = point._index;
                var model = point._model;
    
                model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
                model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
            },
    
            removeHoverStyle: function(point) {
                var dataset = this.chart.data.datasets[point._datasetIndex];
                var custom = point.custom || {};
                var index = point._index;
                var model = point._model;
                var pointElementOptions = this.chart.options.elements.point;
    
                model.radius = custom.radius ? custom.radius : helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius);
                model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
                model.borderColor = custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
                model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
            }
        });
    };
    
    },{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],15:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    
    defaults._set('scatter', {
        hover: {
            mode: 'single'
        },
    
        scales: {
            xAxes: [{
                id: 'x-axis-1',    // need an ID so datasets can reference the scale
                type: 'linear',    // scatter should not use a category axis
                position: 'bottom'
            }],
            yAxes: [{
                id: 'y-axis-1',
                type: 'linear',
                position: 'left'
            }]
        },
    
        showLines: false,
    
        tooltips: {
            callbacks: {
                title: function() {
                    return '';     // doesn't make sense for scatter since data are formatted as a point
                },
                label: function(item) {
                    return '(' + item.xLabel + ', ' + item.yLabel + ')';
                }
            }
        }
    });
    
    module.exports = function(Chart) {
    
        // Scatter charts use line controllers
        Chart.controllers.scatter = Chart.controllers.line;
    
    };
    
    },{"../core/core.defaults":19}],16:[function(require,module,exports){
    /* global window: false */
    'use strict';
    
    var defaults = require('./core.defaults');
    var Element = require('./core.element');
    var helpers = require('../helpers/index');
    
    defaults._set('global', {
        animation: {
            duration: 1000,
            easing: 'easeOutQuart',
            onProgress: helpers.noop,
            onComplete: helpers.noop
        }
    });
    
    module.exports = function(Chart) {
    
        Chart.Animation = Element.extend({
            chart: null, // the animation associated chart instance
            currentStep: 0, // the current animation step
            numSteps: 60, // default number of steps
            easing: '', // the easing to use for this animation
            render: null, // render function used by the animation service
    
            onAnimationProgress: null, // user specified callback to fire on each step of the animation
            onAnimationComplete: null, // user specified callback to fire when the animation finishes
        });
    
        Chart.animationService = {
            frameDuration: 17,
            animations: [],
            dropFrames: 0,
            request: null,
    
            /**
             * @param {Chart} chart - The chart to animate.
             * @param {Chart.Animation} animation - The animation that we will animate.
             * @param {Number} duration - The animation duration in ms.
             * @param {Boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
             */
            addAnimation: function(chart, animation, duration, lazy) {
                var animations = this.animations;
                var i, ilen;
    
                animation.chart = chart;
    
                if (!lazy) {
                    chart.animating = true;
                }
    
                for (i = 0, ilen = animations.length; i < ilen; ++i) {
                    if (animations[i].chart === chart) {
                        animations[i] = animation;
                        return;
                    }
                }
    
                animations.push(animation);
    
                // If there are no animations queued, manually kickstart a digest, for lack of a better word
                if (animations.length === 1) {
                    this.requestAnimationFrame();
                }
            },
    
            cancelAnimation: function(chart) {
                var index = helpers.findIndex(this.animations, function(animation) {
                    return animation.chart === chart;
                });
    
                if (index !== -1) {
                    this.animations.splice(index, 1);
                    chart.animating = false;
                }
            },
    
            requestAnimationFrame: function() {
                var me = this;
                if (me.request === null) {
                    // Skip animation frame requests until the active one is executed.
                    // This can happen when processing mouse events, e.g. 'mousemove'
                    // and 'mouseout' events will trigger multiple renders.
                    me.request = helpers.requestAnimFrame.call(window, function() {
                        me.request = null;
                        me.startDigest();
                    });
                }
            },
    
            /**
             * @private
             */
            startDigest: function() {
                var me = this;
                var startTime = Date.now();
                var framesToDrop = 0;
    
                if (me.dropFrames > 1) {
                    framesToDrop = Math.floor(me.dropFrames);
                    me.dropFrames = me.dropFrames % 1;
                }
    
                me.advance(1 + framesToDrop);
    
                var endTime = Date.now();
    
                me.dropFrames += (endTime - startTime) / me.frameDuration;
    
                // Do we have more stuff to animate?
                if (me.animations.length > 0) {
                    me.requestAnimationFrame();
                }
            },
    
            /**
             * @private
             */
            advance: function(count) {
                var animations = this.animations;
                var animation, chart;
                var i = 0;
    
                while (i < animations.length) {
                    animation = animations[i];
                    chart = animation.chart;
    
                    animation.currentStep = (animation.currentStep || 0) + count;
                    animation.currentStep = Math.min(animation.currentStep, animation.numSteps);
    
                    helpers.callback(animation.render, [chart, animation], chart);
                    helpers.callback(animation.onAnimationProgress, [animation], chart);
    
                    if (animation.currentStep >= animation.numSteps) {
                        helpers.callback(animation.onAnimationComplete, [animation], chart);
                        chart.animating = false;
                        animations.splice(i, 1);
                    } else {
                        ++i;
                    }
                }
            }
        };
    
        /**
         * Provided for backward compatibility, use Chart.Animation instead
         * @prop Chart.Animation#animationObject
         * @deprecated since version 2.6.0
         * @todo remove at version 3
         */
        Object.defineProperty(Chart.Animation.prototype, 'animationObject', {
            get: function() {
                return this;
            }
        });
    
        /**
         * Provided for backward compatibility, use Chart.Animation#chart instead
         * @prop Chart.Animation#chartInstance
         * @deprecated since version 2.6.0
         * @todo remove at version 3
         */
        Object.defineProperty(Chart.Animation.prototype, 'chartInstance', {
            get: function() {
                return this.chart;
            },
            set: function(value) {
                this.chart = value;
            }
        });
    
    };
    
    },{"../helpers/index":39,"./core.defaults":19,"./core.element":20}],17:[function(require,module,exports){
    'use strict';
    
    var defaults = require('./core.defaults');
    var helpers = require('../helpers/index');
    var Interaction = require('./core.interaction');
    var platform = require('../platforms/platform');
    
    module.exports = function(Chart) {
        var plugins = Chart.plugins;
    
        // Create a dictionary of chart types, to allow for extension of existing types
        Chart.types = {};
    
        // Store a reference to each instance - allowing us to globally resize chart instances on window resize.
        // Destroy method on the chart will remove the instance of the chart from this reference.
        Chart.instances = {};
    
        // Controllers available for dataset visualization eg. bar, line, slice, etc.
        Chart.controllers = {};
    
        /**
         * Initializes the given config with global and chart default values.
         */
        function initConfig(config) {
            config = config || {};
    
            // Do NOT use configMerge() for the data object because this method merges arrays
            // and so would change references to labels and datasets, preventing data updates.
            var data = config.data = config.data || {};
            data.datasets = data.datasets || [];
            data.labels = data.labels || [];
    
            config.options = helpers.configMerge(
                defaults.global,
                defaults[config.type],
                config.options || {});
    
            return config;
        }
    
        /**
         * Updates the config of the chart
         * @param chart {Chart} chart to update the options for
         */
        function updateConfig(chart) {
            var newOptions = chart.options;
    
            // Update Scale(s) with options
            if (newOptions.scale) {
                chart.scale.options = newOptions.scale;
            } else if (newOptions.scales) {
                newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function(scaleOptions) {
                    chart.scales[scaleOptions.id].options = scaleOptions;
                });
            }
    
            // Tooltip
            chart.tooltip._options = newOptions.tooltips;
        }
    
        function positionIsHorizontal(position) {
            return position === 'top' || position === 'bottom';
        }
    
        helpers.extend(Chart.prototype, /** @lends Chart */ {
            /**
             * @private
             */
            construct: function(item, config) {
                var me = this;
    
                config = initConfig(config);
    
                var context = platform.acquireContext(item, config);
                var canvas = context && context.canvas;
                var height = canvas && canvas.height;
                var width = canvas && canvas.width;
    
                me.id = helpers.uid();
                me.ctx = context;
                me.canvas = canvas;
                me.config = config;
                me.width = width;
                me.height = height;
                me.aspectRatio = height ? width / height : null;
                me.options = config.options;
                me._bufferedRender = false;
    
                /**
                 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
                 * the "instance" still need to be defined since it might be called from plugins.
                 * @prop Chart#chart
                 * @deprecated since version 2.6.0
                 * @todo remove at version 3
                 * @private
                 */
                me.chart = me;
                me.controller = me; // chart.chart.controller #inception
    
                // Add the chart instance to the global namespace
                Chart.instances[me.id] = me;
    
                // Define alias to the config data: `chart.data === chart.config.data`
                Object.defineProperty(me, 'data', {
                    get: function() {
                        return me.config.data;
                    },
                    set: function(value) {
                        me.config.data = value;
                    }
                });
    
                if (!context || !canvas) {
                    // The given item is not a compatible context2d element, let's return before finalizing
                    // the chart initialization but after setting basic chart / controller properties that
                    // can help to figure out that the chart is not valid (e.g chart.canvas !== null);
                    // https://github.com/chartjs/Chart.js/issues/2807
                    console.error("Failed to create chart: can't acquire context from the given item");
                    return;
                }
    
                me.initialize();
                me.update();
            },
    
            /**
             * @private
             */
            initialize: function() {
                var me = this;
    
                // Before init plugin notification
                plugins.notify(me, 'beforeInit');
    
                helpers.retinaScale(me, me.options.devicePixelRatio);
    
                me.bindEvents();
    
                if (me.options.responsive) {
                    // Initial resize before chart draws (must be silent to preserve initial animations).
                    me.resize(true);
                }
    
                // Make sure scales have IDs and are built before we build any controllers.
                me.ensureScalesHaveIDs();
                me.buildScales();
                me.initToolTip();
    
                // After init plugin notification
                plugins.notify(me, 'afterInit');
    
                return me;
            },
    
            clear: function() {
                helpers.canvas.clear(this);
                return this;
            },
    
            stop: function() {
                // Stops any current animation loop occurring
                Chart.animationService.cancelAnimation(this);
                return this;
            },
    
            resize: function(silent) {
                var me = this;
                var options = me.options;
                var canvas = me.canvas;
                var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;
    
                // the canvas render width and height will be casted to integers so make sure that
                // the canvas display style uses the same integer values to avoid blurring effect.
    
                // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collased
                var newWidth = Math.max(0, Math.floor(helpers.getMaximumWidth(canvas)));
                var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas)));
    
                if (me.width === newWidth && me.height === newHeight) {
                    return;
                }
    
                canvas.width = me.width = newWidth;
                canvas.height = me.height = newHeight;
                canvas.style.width = newWidth + 'px';
                canvas.style.height = newHeight + 'px';
    
                helpers.retinaScale(me, options.devicePixelRatio);
    
                if (!silent) {
                    // Notify any plugins about the resize
                    var newSize = {width: newWidth, height: newHeight};
                    plugins.notify(me, 'resize', [newSize]);
    
                    // Notify of resize
                    if (me.options.onResize) {
                        me.options.onResize(me, newSize);
                    }
    
                    me.stop();
                    me.update(me.options.responsiveAnimationDuration);
                }
            },
    
            ensureScalesHaveIDs: function() {
                var options = this.options;
                var scalesOptions = options.scales || {};
                var scaleOptions = options.scale;
    
                helpers.each(scalesOptions.xAxes, function(xAxisOptions, index) {
                    xAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);
                });
    
                helpers.each(scalesOptions.yAxes, function(yAxisOptions, index) {
                    yAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);
                });
    
                if (scaleOptions) {
                    scaleOptions.id = scaleOptions.id || 'scale';
                }
            },
    
            /**
             * Builds a map of scale ID to scale object for future lookup.
             */
            buildScales: function() {
                var me = this;
                var options = me.options;
                var scales = me.scales = {};
                var items = [];
    
                if (options.scales) {
                    items = items.concat(
                        (options.scales.xAxes || []).map(function(xAxisOptions) {
                            return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
                        }),
                        (options.scales.yAxes || []).map(function(yAxisOptions) {
                            return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
                        })
                    );
                }
    
                if (options.scale) {
                    items.push({
                        options: options.scale,
                        dtype: 'radialLinear',
                        isDefault: true,
                        dposition: 'chartArea'
                    });
                }
    
                helpers.each(items, function(item) {
                    var scaleOptions = item.options;
                    var scaleType = helpers.valueOrDefault(scaleOptions.type, item.dtype);
                    var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
                    if (!scaleClass) {
                        return;
                    }
    
                    if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
                        scaleOptions.position = item.dposition;
                    }
    
                    var scale = new scaleClass({
                        id: scaleOptions.id,
                        options: scaleOptions,
                        ctx: me.ctx,
                        chart: me
                    });
    
                    scales[scale.id] = scale;
                    scale.mergeTicksOptions();
    
                    // TODO(SB): I think we should be able to remove this custom case (options.scale)
                    // and consider it as a regular scale part of the "scales"" map only! This would
                    // make the logic easier and remove some useless? custom code.
                    if (item.isDefault) {
                        me.scale = scale;
                    }
                });
    
                Chart.scaleService.addScalesToLayout(this);
            },
    
            buildOrUpdateControllers: function() {
                var me = this;
                var types = [];
                var newControllers = [];
    
                helpers.each(me.data.datasets, function(dataset, datasetIndex) {
                    var meta = me.getDatasetMeta(datasetIndex);
                    var type = dataset.type || me.config.type;
    
                    if (meta.type && meta.type !== type) {
                        me.destroyDatasetMeta(datasetIndex);
                        meta = me.getDatasetMeta(datasetIndex);
                    }
                    meta.type = type;
    
                    types.push(meta.type);
    
                    if (meta.controller) {
                        meta.controller.updateIndex(datasetIndex);
                    } else {
                        var ControllerClass = Chart.controllers[meta.type];
                        if (ControllerClass === undefined) {
                            throw new Error('"' + meta.type + '" is not a chart type.');
                        }
    
                        meta.controller = new ControllerClass(me, datasetIndex);
                        newControllers.push(meta.controller);
                    }
                }, me);
    
                return newControllers;
            },
    
            /**
             * Reset the elements of all datasets
             * @private
             */
            resetElements: function() {
                var me = this;
                helpers.each(me.data.datasets, function(dataset, datasetIndex) {
                    me.getDatasetMeta(datasetIndex).controller.reset();
                }, me);
            },
    
            /**
            * Resets the chart back to it's state before the initial animation
            */
            reset: function() {
                this.resetElements();
                this.tooltip.initialize();
            },
    
            update: function(config) {
                var me = this;
    
                if (!config || typeof config !== 'object') {
                    // backwards compatibility
                    config = {
                        duration: config,
                        lazy: arguments[1]
                    };
                }
    
                updateConfig(me);
    
                if (plugins.notify(me, 'beforeUpdate') === false) {
                    return;
                }
    
                // In case the entire data object changed
                me.tooltip._data = me.data;
    
                // Make sure dataset controllers are updated and new controllers are reset
                var newControllers = me.buildOrUpdateControllers();
    
                // Make sure all dataset controllers have correct meta data counts
                helpers.each(me.data.datasets, function(dataset, datasetIndex) {
                    me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
                }, me);
    
                me.updateLayout();
    
                // Can only reset the new controllers after the scales have been updated
                helpers.each(newControllers, function(controller) {
                    controller.reset();
                });
    
                me.updateDatasets();
    
                // Need to reset tooltip in case it is displayed with elements that are removed
                // after update.
                me.tooltip.initialize();
    
                // Last active contains items that were previously in the tooltip.
                // When we reset the tooltip, we need to clear it
                me.lastActive = [];
    
                // Do this before render so that any plugins that need final scale updates can use it
                plugins.notify(me, 'afterUpdate');
    
                if (me._bufferedRender) {
                    me._bufferedRequest = {
                        duration: config.duration,
                        easing: config.easing,
                        lazy: config.lazy
                    };
                } else {
                    me.render(config);
                }
            },
    
            /**
             * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
             * hook, in which case, plugins will not be called on `afterLayout`.
             * @private
             */
            updateLayout: function() {
                var me = this;
    
                if (plugins.notify(me, 'beforeLayout') === false) {
                    return;
                }
    
                Chart.layoutService.update(this, this.width, this.height);
    
                /**
                 * Provided for backward compatibility, use `afterLayout` instead.
                 * @method IPlugin#afterScaleUpdate
                 * @deprecated since version 2.5.0
                 * @todo remove at version 3
                 * @private
                 */
                plugins.notify(me, 'afterScaleUpdate');
                plugins.notify(me, 'afterLayout');
            },
    
            /**
             * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
             * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
             * @private
             */
            updateDatasets: function() {
                var me = this;
    
                if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
                    return;
                }
    
                for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                    me.updateDataset(i);
                }
    
                plugins.notify(me, 'afterDatasetsUpdate');
            },
    
            /**
             * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
             * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
             * @private
             */
            updateDataset: function(index) {
                var me = this;
                var meta = me.getDatasetMeta(index);
                var args = {
                    meta: meta,
                    index: index
                };
    
                if (plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
                    return;
                }
    
                meta.controller.update();
    
                plugins.notify(me, 'afterDatasetUpdate', [args]);
            },
    
            render: function(config) {
                var me = this;
    
                if (!config || typeof config !== 'object') {
                    // backwards compatibility
                    config = {
                        duration: config,
                        lazy: arguments[1]
                    };
                }
    
                var duration = config.duration;
                var lazy = config.lazy;
    
                if (plugins.notify(me, 'beforeRender') === false) {
                    return;
                }
    
                var animationOptions = me.options.animation;
                var onComplete = function(animation) {
                    plugins.notify(me, 'afterRender');
                    helpers.callback(animationOptions && animationOptions.onComplete, [animation], me);
                };
    
                if (animationOptions && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && animationOptions.duration !== 0))) {
                    var animation = new Chart.Animation({
                        numSteps: (duration || animationOptions.duration) / 16.66, // 60 fps
                        easing: config.easing || animationOptions.easing,
    
                        render: function(chart, animationObject) {
                            var easingFunction = helpers.easing.effects[animationObject.easing];
                            var currentStep = animationObject.currentStep;
                            var stepDecimal = currentStep / animationObject.numSteps;
    
                            chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
                        },
    
                        onAnimationProgress: animationOptions.onProgress,
                        onAnimationComplete: onComplete
                    });
    
                    Chart.animationService.addAnimation(me, animation, duration, lazy);
                } else {
                    me.draw();
    
                    // See https://github.com/chartjs/Chart.js/issues/3781
                    onComplete(new Chart.Animation({numSteps: 0, chart: me}));
                }
    
                return me;
            },
    
            draw: function(easingValue) {
                var me = this;
    
                me.clear();
    
                if (helpers.isNullOrUndef(easingValue)) {
                    easingValue = 1;
                }
    
                me.transition(easingValue);
    
                if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
                    return;
                }
    
                // Draw all the scales
                helpers.each(me.boxes, function(box) {
                    box.draw(me.chartArea);
                }, me);
    
                if (me.scale) {
                    me.scale.draw();
                }
    
                me.drawDatasets(easingValue);
                me._drawTooltip(easingValue);
    
                plugins.notify(me, 'afterDraw', [easingValue]);
            },
    
            /**
             * @private
             */
            transition: function(easingValue) {
                var me = this;
    
                for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
                    if (me.isDatasetVisible(i)) {
                        me.getDatasetMeta(i).controller.transition(easingValue);
                    }
                }
    
                me.tooltip.transition(easingValue);
            },
    
            /**
             * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
             * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
             * @private
             */
            drawDatasets: function(easingValue) {
                var me = this;
    
                if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
                    return;
                }
    
                // Draw datasets reversed to support proper line stacking
                for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {
                    if (me.isDatasetVisible(i)) {
                        me.drawDataset(i, easingValue);
                    }
                }
    
                plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
            },
    
            /**
             * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
             * hook, in which case, plugins will not be called on `afterDatasetDraw`.
             * @private
             */
            drawDataset: function(index, easingValue) {
                var me = this;
                var meta = me.getDatasetMeta(index);
                var args = {
                    meta: meta,
                    index: index,
                    easingValue: easingValue
                };
    
                if (plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
                    return;
                }
    
                meta.controller.draw(easingValue);
    
                plugins.notify(me, 'afterDatasetDraw', [args]);
            },
    
            /**
             * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
             * hook, in which case, plugins will not be called on `afterTooltipDraw`.
             * @private
             */
            _drawTooltip: function(easingValue) {
                var me = this;
                var tooltip = me.tooltip;
                var args = {
                    tooltip: tooltip,
                    easingValue: easingValue
                };
    
                if (plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
                    return;
                }
    
                tooltip.draw();
    
                plugins.notify(me, 'afterTooltipDraw', [args]);
            },
    
            // Get the single element that was clicked on
            // @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
            getElementAtEvent: function(e) {
                return Interaction.modes.single(this, e);
            },
    
            getElementsAtEvent: function(e) {
                return Interaction.modes.label(this, e, {intersect: true});
            },
    
            getElementsAtXAxis: function(e) {
                return Interaction.modes['x-axis'](this, e, {intersect: true});
            },
    
            getElementsAtEventForMode: function(e, mode, options) {
                var method = Interaction.modes[mode];
                if (typeof method === 'function') {
                    return method(this, e, options);
                }
    
                return [];
            },
    
            getDatasetAtEvent: function(e) {
                return Interaction.modes.dataset(this, e, {intersect: true});
            },
    
            getDatasetMeta: function(datasetIndex) {
                var me = this;
                var dataset = me.data.datasets[datasetIndex];
                if (!dataset._meta) {
                    dataset._meta = {};
                }
    
                var meta = dataset._meta[me.id];
                if (!meta) {
                    meta = dataset._meta[me.id] = {
                        type: null,
                        data: [],
                        dataset: null,
                        controller: null,
                        hidden: null,			// See isDatasetVisible() comment
                        xAxisID: null,
                        yAxisID: null
                    };
                }
    
                return meta;
            },
    
            getVisibleDatasetCount: function() {
                var count = 0;
                for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
                    if (this.isDatasetVisible(i)) {
                        count++;
                    }
                }
                return count;
            },
    
            isDatasetVisible: function(datasetIndex) {
                var meta = this.getDatasetMeta(datasetIndex);
    
                // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
                // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
                return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
            },
    
            generateLegend: function() {
                return this.options.legendCallback(this);
            },
    
            /**
             * @private
             */
            destroyDatasetMeta: function(datasetIndex) {
                var id = this.id;
                var dataset = this.data.datasets[datasetIndex];
                var meta = dataset._meta && dataset._meta[id];
    
                if (meta) {
                    meta.controller.destroy();
                    delete dataset._meta[id];
                }
            },
    
            destroy: function() {
                var me = this;
                var canvas = me.canvas;
                var i, ilen;
    
                me.stop();
    
                // dataset controllers need to cleanup associated data
                for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                    me.destroyDatasetMeta(i);
                }
    
                if (canvas) {
                    me.unbindEvents();
                    helpers.canvas.clear(me);
                    platform.releaseContext(me.ctx);
                    me.canvas = null;
                    me.ctx = null;
                }
    
                plugins.notify(me, 'destroy');
    
                delete Chart.instances[me.id];
            },
    
            toBase64Image: function() {
                return this.canvas.toDataURL.apply(this.canvas, arguments);
            },
    
            initToolTip: function() {
                var me = this;
                me.tooltip = new Chart.Tooltip({
                    _chart: me,
                    _chartInstance: me, // deprecated, backward compatibility
                    _data: me.data,
                    _options: me.options.tooltips
                }, me);
            },
    
            /**
             * @private
             */
            bindEvents: function() {
                var me = this;
                var listeners = me._listeners = {};
                var listener = function() {
                    me.eventHandler.apply(me, arguments);
                };
    
                helpers.each(me.options.events, function(type) {
                    platform.addEventListener(me, type, listener);
                    listeners[type] = listener;
                });
    
                // Elements used to detect size change should not be injected for non responsive charts.
                // See https://github.com/chartjs/Chart.js/issues/2210
                if (me.options.responsive) {
                    listener = function() {
                        me.resize();
                    };
    
                    platform.addEventListener(me, 'resize', listener);
                    listeners.resize = listener;
                }
            },
    
            /**
             * @private
             */
            unbindEvents: function() {
                var me = this;
                var listeners = me._listeners;
                if (!listeners) {
                    return;
                }
    
                delete me._listeners;
                helpers.each(listeners, function(listener, type) {
                    platform.removeEventListener(me, type, listener);
                });
            },
    
            updateHoverStyle: function(elements, mode, enabled) {
                var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
                var element, i, ilen;
    
                for (i = 0, ilen = elements.length; i < ilen; ++i) {
                    element = elements[i];
                    if (element) {
                        this.getDatasetMeta(element._datasetIndex).controller[method](element);
                    }
                }
            },
    
            /**
             * @private
             */
            eventHandler: function(e) {
                var me = this;
                var tooltip = me.tooltip;
    
                if (plugins.notify(me, 'beforeEvent', [e]) === false) {
                    return;
                }
    
                // Buffer any update calls so that renders do not occur
                me._bufferedRender = true;
                me._bufferedRequest = null;
    
                var changed = me.handleEvent(e);
                changed |= tooltip && tooltip.handleEvent(e);
    
                plugins.notify(me, 'afterEvent', [e]);
    
                var bufferedRequest = me._bufferedRequest;
                if (bufferedRequest) {
                    // If we have an update that was triggered, we need to do a normal render
                    me.render(bufferedRequest);
                } else if (changed && !me.animating) {
                    // If entering, leaving, or changing elements, animate the change via pivot
                    me.stop();
    
                    // We only need to render at this point. Updating will cause scales to be
                    // recomputed generating flicker & using more memory than necessary.
                    me.render(me.options.hover.animationDuration, true);
                }
    
                me._bufferedRender = false;
                me._bufferedRequest = null;
    
                return me;
            },
    
            /**
             * Handle an event
             * @private
             * @param {IEvent} event the event to handle
             * @return {Boolean} true if the chart needs to re-render
             */
            handleEvent: function(e) {
                var me = this;
                var options = me.options || {};
                var hoverOptions = options.hover;
                var changed = false;
    
                me.lastActive = me.lastActive || [];
    
                // Find Active Elements for hover and tooltips
                if (e.type === 'mouseout') {
                    me.active = [];
                } else {
                    me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
                }
    
                // Invoke onHover hook
                // Need to call with native event here to not break backwards compatibility
                helpers.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);
    
                if (e.type === 'mouseup' || e.type === 'click') {
                    if (options.onClick) {
                        // Use e.native here for backwards compatibility
                        options.onClick.call(me, e.native, me.active);
                    }
                }
    
                // Remove styling for last active (even if it may still be active)
                if (me.lastActive.length) {
                    me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
                }
    
                // Built in hover styling
                if (me.active.length && hoverOptions.mode) {
                    me.updateHoverStyle(me.active, hoverOptions.mode, true);
                }
    
                changed = !helpers.arrayEquals(me.active, me.lastActive);
    
                // Remember Last Actives
                me.lastActive = me.active;
    
                return changed;
            }
        });
    
        /**
         * Provided for backward compatibility, use Chart instead.
         * @class Chart.Controller
         * @deprecated since version 2.6.0
         * @todo remove at version 3
         * @private
         */
        Chart.Controller = Chart;
    };
    
    },{"../helpers/index":39,"../platforms/platform":42,"./core.defaults":19,"./core.interaction":22}],18:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    
    module.exports = function(Chart) {
    
        var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
    
        /**
         * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
         * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
         * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
         */
        function listenArrayEvents(array, listener) {
            if (array._chartjs) {
                array._chartjs.listeners.push(listener);
                return;
            }
    
            Object.defineProperty(array, '_chartjs', {
                configurable: true,
                enumerable: false,
                value: {
                    listeners: [listener]
                }
            });
    
            arrayEvents.forEach(function(key) {
                var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
                var base = array[key];
    
                Object.defineProperty(array, key, {
                    configurable: true,
                    enumerable: false,
                    value: function() {
                        var args = Array.prototype.slice.call(arguments);
                        var res = base.apply(this, args);
    
                        helpers.each(array._chartjs.listeners, function(object) {
                            if (typeof object[method] === 'function') {
                                object[method].apply(object, args);
                            }
                        });
    
                        return res;
                    }
                });
            });
        }
    
        /**
         * Removes the given array event listener and cleanup extra attached properties (such as
         * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
         */
        function unlistenArrayEvents(array, listener) {
            var stub = array._chartjs;
            if (!stub) {
                return;
            }
    
            var listeners = stub.listeners;
            var index = listeners.indexOf(listener);
            if (index !== -1) {
                listeners.splice(index, 1);
            }
    
            if (listeners.length > 0) {
                return;
            }
    
            arrayEvents.forEach(function(key) {
                delete array[key];
            });
    
            delete array._chartjs;
        }
    
        // Base class for all dataset controllers (line, bar, etc)
        Chart.DatasetController = function(chart, datasetIndex) {
            this.initialize(chart, datasetIndex);
        };
    
        helpers.extend(Chart.DatasetController.prototype, {
    
            /**
             * Element type used to generate a meta dataset (e.g. Chart.element.Line).
             * @type {Chart.core.element}
             */
            datasetElementType: null,
    
            /**
             * Element type used to generate a meta data (e.g. Chart.element.Point).
             * @type {Chart.core.element}
             */
            dataElementType: null,
    
            initialize: function(chart, datasetIndex) {
                var me = this;
                me.chart = chart;
                me.index = datasetIndex;
                me.linkScales();
                me.addElements();
            },
    
            updateIndex: function(datasetIndex) {
                this.index = datasetIndex;
            },
    
            linkScales: function() {
                var me = this;
                var meta = me.getMeta();
                var dataset = me.getDataset();
    
                if (meta.xAxisID === null) {
                    meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
                }
                if (meta.yAxisID === null) {
                    meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
                }
            },
    
            getDataset: function() {
                return this.chart.data.datasets[this.index];
            },
    
            getMeta: function() {
                return this.chart.getDatasetMeta(this.index);
            },
    
            getScaleForId: function(scaleID) {
                return this.chart.scales[scaleID];
            },
    
            reset: function() {
                this.update(true);
            },
    
            /**
             * @private
             */
            destroy: function() {
                if (this._data) {
                    unlistenArrayEvents(this._data, this);
                }
            },
    
            createMetaDataset: function() {
                var me = this;
                var type = me.datasetElementType;
                return type && new type({
                    _chart: me.chart,
                    _datasetIndex: me.index
                });
            },
    
            createMetaData: function(index) {
                var me = this;
                var type = me.dataElementType;
                return type && new type({
                    _chart: me.chart,
                    _datasetIndex: me.index,
                    _index: index
                });
            },
    
            addElements: function() {
                var me = this;
                var meta = me.getMeta();
                var data = me.getDataset().data || [];
                var metaData = meta.data;
                var i, ilen;
    
                for (i = 0, ilen = data.length; i < ilen; ++i) {
                    metaData[i] = metaData[i] || me.createMetaData(i);
                }
    
                meta.dataset = meta.dataset || me.createMetaDataset();
            },
    
            addElementAndReset: function(index) {
                var element = this.createMetaData(index);
                this.getMeta().data.splice(index, 0, element);
                this.updateElement(element, index, true);
            },
    
            buildOrUpdateElements: function() {
                var me = this;
                var dataset = me.getDataset();
                var data = dataset.data || (dataset.data = []);
    
                // In order to correctly handle data addition/deletion animation (an thus simulate
                // real-time charts), we need to monitor these data modifications and synchronize
                // the internal meta data accordingly.
                if (me._data !== data) {
                    if (me._data) {
                        // This case happens when the user replaced the data array instance.
                        unlistenArrayEvents(me._data, me);
                    }
    
                    listenArrayEvents(data, me);
                    me._data = data;
                }
    
                // Re-sync meta data in case the user replaced the data array or if we missed
                // any updates and so make sure that we handle number of datapoints changing.
                me.resyncElements();
            },
    
            update: helpers.noop,
    
            transition: function(easingValue) {
                var meta = this.getMeta();
                var elements = meta.data || [];
                var ilen = elements.length;
                var i = 0;
    
                for (; i < ilen; ++i) {
                    elements[i].transition(easingValue);
                }
    
                if (meta.dataset) {
                    meta.dataset.transition(easingValue);
                }
            },
    
            draw: function() {
                var meta = this.getMeta();
                var elements = meta.data || [];
                var ilen = elements.length;
                var i = 0;
    
                if (meta.dataset) {
                    meta.dataset.draw();
                }
    
                for (; i < ilen; ++i) {
                    elements[i].draw();
                }
            },
    
            removeHoverStyle: function(element, elementOpts) {
                var dataset = this.chart.data.datasets[element._datasetIndex];
                var index = element._index;
                var custom = element.custom || {};
                var valueOrDefault = helpers.valueAtIndexOrDefault;
                var model = element._model;
    
                model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
                model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
                model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
            },
    
            setHoverStyle: function(element) {
                var dataset = this.chart.data.datasets[element._datasetIndex];
                var index = element._index;
                var custom = element.custom || {};
                var valueOrDefault = helpers.valueAtIndexOrDefault;
                var getHoverColor = helpers.getHoverColor;
                var model = element._model;
    
                model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
                model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
                model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
            },
    
            /**
             * @private
             */
            resyncElements: function() {
                var me = this;
                var meta = me.getMeta();
                var data = me.getDataset().data;
                var numMeta = meta.data.length;
                var numData = data.length;
    
                if (numData < numMeta) {
                    meta.data.splice(numData, numMeta - numData);
                } else if (numData > numMeta) {
                    me.insertElements(numMeta, numData - numMeta);
                }
            },
    
            /**
             * @private
             */
            insertElements: function(start, count) {
                for (var i = 0; i < count; ++i) {
                    this.addElementAndReset(start + i);
                }
            },
    
            /**
             * @private
             */
            onDataPush: function() {
                this.insertElements(this.getDataset().data.length - 1, arguments.length);
            },
    
            /**
             * @private
             */
            onDataPop: function() {
                this.getMeta().data.pop();
            },
    
            /**
             * @private
             */
            onDataShift: function() {
                this.getMeta().data.shift();
            },
    
            /**
             * @private
             */
            onDataSplice: function(start, count) {
                this.getMeta().data.splice(start, count);
                this.insertElements(start, arguments.length - 2);
            },
    
            /**
             * @private
             */
            onDataUnshift: function() {
                this.insertElements(0, arguments.length);
            }
        });
    
        Chart.DatasetController.extend = helpers.inherits;
    };
    
    },{"../helpers/index":39}],19:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    
    module.exports = {
        /**
         * @private
         */
        _set: function(scope, values) {
            return helpers.merge(this[scope] || (this[scope] = {}), values);
        }
    };
    
    },{"../helpers/index":39}],20:[function(require,module,exports){
    'use strict';
    
    var color = require('chartjs-color');
    var helpers = require('../helpers/index');
    
    function interpolate(start, view, model, ease) {
        var keys = Object.keys(model);
        var i, ilen, key, actual, origin, target, type, c0, c1;
    
        for (i = 0, ilen = keys.length; i < ilen; ++i) {
            key = keys[i];
    
            target = model[key];
    
            // if a value is added to the model after pivot() has been called, the view
            // doesn't contain it, so let's initialize the view to the target value.
            if (!view.hasOwnProperty(key)) {
                view[key] = target;
            }
    
            actual = view[key];
    
            if (actual === target || key[0] === '_') {
                continue;
            }
    
            if (!start.hasOwnProperty(key)) {
                start[key] = actual;
            }
    
            origin = start[key];
    
            type = typeof target;
    
            if (type === typeof origin) {
                if (type === 'string') {
                    c0 = color(origin);
                    if (c0.valid) {
                        c1 = color(target);
                        if (c1.valid) {
                            view[key] = c1.mix(c0, ease).rgbString();
                            continue;
                        }
                    }
                } else if (type === 'number' && isFinite(origin) && isFinite(target)) {
                    view[key] = origin + (target - origin) * ease;
                    continue;
                }
            }
    
            view[key] = target;
        }
    }
    
    var Element = function(configuration) {
        helpers.extend(this, configuration);
        this.initialize.apply(this, arguments);
    };
    
    helpers.extend(Element.prototype, {
    
        initialize: function() {
            this.hidden = false;
        },
    
        pivot: function() {
            var me = this;
            if (!me._view) {
                me._view = helpers.clone(me._model);
            }
            me._start = {};
            return me;
        },
    
        transition: function(ease) {
            var me = this;
            var model = me._model;
            var start = me._start;
            var view = me._view;
    
            // No animation -> No Transition
            if (!model || ease === 1) {
                me._view = model;
                me._start = null;
                return me;
            }
    
            if (!view) {
                view = me._view = {};
            }
    
            if (!start) {
                start = me._start = {};
            }
    
            interpolate(start, view, model, ease);
    
            return me;
        },
    
        tooltipPosition: function() {
            return {
                x: this._model.x,
                y: this._model.y
            };
        },
    
        hasValue: function() {
            return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
        }
    });
    
    Element.extend = helpers.inherits;
    
    module.exports = Element;
    
    },{"../helpers/index":39,"chartjs-color":53}],21:[function(require,module,exports){
    /* global window: false */
    /* global document: false */
    'use strict';
    
    var color = require('chartjs-color');
    var defaults = require('./core.defaults');
    var helpers = require('../helpers/index');
    
    module.exports = function(Chart) {
    
        // -- Basic js utility methods
    
        helpers.configMerge = function(/* objects ... */) {
            return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
                merger: function(key, target, source, options) {
                    var tval = target[key] || {};
                    var sval = source[key];
    
                    if (key === 'scales') {
                        // scale config merging is complex. Add our own function here for that
                        target[key] = helpers.scaleMerge(tval, sval);
                    } else if (key === 'scale') {
                        // used in polar area & radar charts since there is only one scale
                        target[key] = helpers.merge(tval, [Chart.scaleService.getScaleDefaults(sval.type), sval]);
                    } else {
                        helpers._merger(key, target, source, options);
                    }
                }
            });
        };
    
        helpers.scaleMerge = function(/* objects ... */) {
            return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
                merger: function(key, target, source, options) {
                    if (key === 'xAxes' || key === 'yAxes') {
                        var slen = source[key].length;
                        var i, type, scale;
    
                        if (!target[key]) {
                            target[key] = [];
                        }
    
                        for (i = 0; i < slen; ++i) {
                            scale = source[key][i];
                            type = helpers.valueOrDefault(scale.type, key === 'xAxes' ? 'category' : 'linear');
    
                            if (i >= target[key].length) {
                                target[key].push({});
                            }
    
                            if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
                                // new/untyped scale or type changed: let's apply the new defaults
                                // then merge source scale to correctly overwrite the defaults.
                                helpers.merge(target[key][i], [Chart.scaleService.getScaleDefaults(type), scale]);
                            } else {
                                // scales type are the same
                                helpers.merge(target[key][i], scale);
                            }
                        }
                    } else {
                        helpers._merger(key, target, source, options);
                    }
                }
            });
        };
    
        helpers.where = function(collection, filterCallback) {
            if (helpers.isArray(collection) && Array.prototype.filter) {
                return collection.filter(filterCallback);
            }
            var filtered = [];
    
            helpers.each(collection, function(item) {
                if (filterCallback(item)) {
                    filtered.push(item);
                }
            });
    
            return filtered;
        };
        helpers.findIndex = Array.prototype.findIndex ?
            function(array, callback, scope) {
                return array.findIndex(callback, scope);
            } :
            function(array, callback, scope) {
                scope = scope === undefined ? array : scope;
                for (var i = 0, ilen = array.length; i < ilen; ++i) {
                    if (callback.call(scope, array[i], i, array)) {
                        return i;
                    }
                }
                return -1;
            };
        helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
            // Default to start of the array
            if (helpers.isNullOrUndef(startIndex)) {
                startIndex = -1;
            }
            for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
                var currentItem = arrayToSearch[i];
                if (filterCallback(currentItem)) {
                    return currentItem;
                }
            }
        };
        helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
            // Default to end of the array
            if (helpers.isNullOrUndef(startIndex)) {
                startIndex = arrayToSearch.length;
            }
            for (var i = startIndex - 1; i >= 0; i--) {
                var currentItem = arrayToSearch[i];
                if (filterCallback(currentItem)) {
                    return currentItem;
                }
            }
        };
    
        // -- Math methods
        helpers.isNumber = function(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        };
        helpers.almostEquals = function(x, y, epsilon) {
            return Math.abs(x - y) < epsilon;
        };
        helpers.almostWhole = function(x, epsilon) {
            var rounded = Math.round(x);
            return (((rounded - epsilon) < x) && ((rounded + epsilon) > x));
        };
        helpers.max = function(array) {
            return array.reduce(function(max, value) {
                if (!isNaN(value)) {
                    return Math.max(max, value);
                }
                return max;
            }, Number.NEGATIVE_INFINITY);
        };
        helpers.min = function(array) {
            return array.reduce(function(min, value) {
                if (!isNaN(value)) {
                    return Math.min(min, value);
                }
                return min;
            }, Number.POSITIVE_INFINITY);
        };
        helpers.sign = Math.sign ?
            function(x) {
                return Math.sign(x);
            } :
            function(x) {
                x = +x; // convert to a number
                if (x === 0 || isNaN(x)) {
                    return x;
                }
                return x > 0 ? 1 : -1;
            };
        helpers.log10 = Math.log10 ?
            function(x) {
                return Math.log10(x);
            } :
            function(x) {
                return Math.log(x) / Math.LN10;
            };
        helpers.toRadians = function(degrees) {
            return degrees * (Math.PI / 180);
        };
        helpers.toDegrees = function(radians) {
            return radians * (180 / Math.PI);
        };
        // Gets the angle from vertical upright to the point about a centre.
        helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
            var distanceFromXCenter = anglePoint.x - centrePoint.x;
            var distanceFromYCenter = anglePoint.y - centrePoint.y;
            var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    
            var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    
            if (angle < (-0.5 * Math.PI)) {
                angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
            }
    
            return {
                angle: angle,
                distance: radialDistanceFromCenter
            };
        };
        helpers.distanceBetweenPoints = function(pt1, pt2) {
            return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
        };
        helpers.aliasPixel = function(pixelWidth) {
            return (pixelWidth % 2 === 0) ? 0 : 0.5;
        };
        helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
            // Props to Rob Spencer at scaled innovation for his post on splining between points
            // http://scaledinnovation.com/analytics/splines/aboutSplines.html
    
            // This function must also respect "skipped" points
    
            var previous = firstPoint.skip ? middlePoint : firstPoint;
            var current = middlePoint;
            var next = afterPoint.skip ? middlePoint : afterPoint;
    
            var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
            var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
    
            var s01 = d01 / (d01 + d12);
            var s12 = d12 / (d01 + d12);
    
            // If all points are the same, s01 & s02 will be inf
            s01 = isNaN(s01) ? 0 : s01;
            s12 = isNaN(s12) ? 0 : s12;
    
            var fa = t * s01; // scaling factor for triangle Ta
            var fb = t * s12;
    
            return {
                previous: {
                    x: current.x - fa * (next.x - previous.x),
                    y: current.y - fa * (next.y - previous.y)
                },
                next: {
                    x: current.x + fb * (next.x - previous.x),
                    y: current.y + fb * (next.y - previous.y)
                }
            };
        };
        helpers.EPSILON = Number.EPSILON || 1e-14;
        helpers.splineCurveMonotone = function(points) {
            // This function calculates BÃ©zier control points in a similar way than |splineCurve|,
            // but preserves monotonicity of the provided data and ensures no local extremums are added
            // between the dataset discrete points due to the interpolation.
            // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
    
            var pointsWithTangents = (points || []).map(function(point) {
                return {
                    model: point._model,
                    deltaK: 0,
                    mK: 0
                };
            });
    
            // Calculate slopes (deltaK) and initialize tangents (mK)
            var pointsLen = pointsWithTangents.length;
            var i, pointBefore, pointCurrent, pointAfter;
            for (i = 0; i < pointsLen; ++i) {
                pointCurrent = pointsWithTangents[i];
                if (pointCurrent.model.skip) {
                    continue;
                }
    
                pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
                pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
                if (pointAfter && !pointAfter.model.skip) {
                    var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);
    
                    // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
                    pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
                }
    
                if (!pointBefore || pointBefore.model.skip) {
                    pointCurrent.mK = pointCurrent.deltaK;
                } else if (!pointAfter || pointAfter.model.skip) {
                    pointCurrent.mK = pointBefore.deltaK;
                } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
                    pointCurrent.mK = 0;
                } else {
                    pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
                }
            }
    
            // Adjust tangents to ensure monotonic properties
            var alphaK, betaK, tauK, squaredMagnitude;
            for (i = 0; i < pointsLen - 1; ++i) {
                pointCurrent = pointsWithTangents[i];
                pointAfter = pointsWithTangents[i + 1];
                if (pointCurrent.model.skip || pointAfter.model.skip) {
                    continue;
                }
    
                if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
                    pointCurrent.mK = pointAfter.mK = 0;
                    continue;
                }
    
                alphaK = pointCurrent.mK / pointCurrent.deltaK;
                betaK = pointAfter.mK / pointCurrent.deltaK;
                squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
                if (squaredMagnitude <= 9) {
                    continue;
                }
    
                tauK = 3 / Math.sqrt(squaredMagnitude);
                pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
                pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
            }
    
            // Compute control points
            var deltaX;
            for (i = 0; i < pointsLen; ++i) {
                pointCurrent = pointsWithTangents[i];
                if (pointCurrent.model.skip) {
                    continue;
                }
    
                pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
                pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
                if (pointBefore && !pointBefore.model.skip) {
                    deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
                    pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
                    pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
                }
                if (pointAfter && !pointAfter.model.skip) {
                    deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
                    pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
                    pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
                }
            }
        };
        helpers.nextItem = function(collection, index, loop) {
            if (loop) {
                return index >= collection.length - 1 ? collection[0] : collection[index + 1];
            }
            return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
        };
        helpers.previousItem = function(collection, index, loop) {
            if (loop) {
                return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
            }
            return index <= 0 ? collection[0] : collection[index - 1];
        };
        // Implementation of the nice number algorithm used in determining where axis labels will go
        helpers.niceNum = function(range, round) {
            var exponent = Math.floor(helpers.log10(range));
            var fraction = range / Math.pow(10, exponent);
            var niceFraction;
    
            if (round) {
                if (fraction < 1.5) {
                    niceFraction = 1;
                } else if (fraction < 3) {
                    niceFraction = 2;
                } else if (fraction < 7) {
                    niceFraction = 5;
                } else {
                    niceFraction = 10;
                }
            } else if (fraction <= 1.0) {
                niceFraction = 1;
            } else if (fraction <= 2) {
                niceFraction = 2;
            } else if (fraction <= 5) {
                niceFraction = 5;
            } else {
                niceFraction = 10;
            }
    
            return niceFraction * Math.pow(10, exponent);
        };
        // Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
        helpers.requestAnimFrame = (function() {
            if (typeof window === 'undefined') {
                return function(callback) {
                    callback();
                };
            }
            return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function(callback) {
                    return window.setTimeout(callback, 1000 / 60);
                };
        }());
        // -- DOM methods
        helpers.getRelativePosition = function(evt, chart) {
            var mouseX, mouseY;
            var e = evt.originalEvent || evt;
            var canvas = evt.currentTarget || evt.srcElement;
            var boundingRect = canvas.getBoundingClientRect();
    
            var touches = e.touches;
            if (touches && touches.length > 0) {
                mouseX = touches[0].clientX;
                mouseY = touches[0].clientY;
    
            } else {
                mouseX = e.clientX;
                mouseY = e.clientY;
            }
    
            // Scale mouse coordinates into canvas coordinates
            // by following the pattern laid out by 'jerryj' in the comments of
            // http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
            var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
            var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
            var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
            var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
            var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
            var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
    
            // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
            // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
            mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
            mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);
    
            return {
                x: mouseX,
                y: mouseY
            };
    
        };
    
        // Private helper function to convert max-width/max-height values that may be percentages into a number
        function parseMaxStyle(styleValue, node, parentProperty) {
            var valueInPixels;
            if (typeof styleValue === 'string') {
                valueInPixels = parseInt(styleValue, 10);
    
                if (styleValue.indexOf('%') !== -1) {
                    // percentage * size in dimension
                    valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
                }
            } else {
                valueInPixels = styleValue;
            }
    
            return valueInPixels;
        }
    
        /**
         * Returns if the given value contains an effective constraint.
         * @private
         */
        function isConstrainedValue(value) {
            return value !== undefined && value !== null && value !== 'none';
        }
    
        // Private helper to get a constraint dimension
        // @param domNode : the node to check the constraint on
        // @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
        // @param percentageProperty : property of parent to use when calculating width as a percentage
        // @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
        function getConstraintDimension(domNode, maxStyle, percentageProperty) {
            var view = document.defaultView;
            var parentNode = domNode.parentNode;
            var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
            var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
            var hasCNode = isConstrainedValue(constrainedNode);
            var hasCContainer = isConstrainedValue(constrainedContainer);
            var infinity = Number.POSITIVE_INFINITY;
    
            if (hasCNode || hasCContainer) {
                return Math.min(
                    hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
                    hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
            }
    
            return 'none';
        }
        // returns Number or undefined if no constraint
        helpers.getConstraintWidth = function(domNode) {
            return getConstraintDimension(domNode, 'max-width', 'clientWidth');
        };
        // returns Number or undefined if no constraint
        helpers.getConstraintHeight = function(domNode) {
            return getConstraintDimension(domNode, 'max-height', 'clientHeight');
        };
        helpers.getMaximumWidth = function(domNode) {
            var container = domNode.parentNode;
            if (!container) {
                return domNode.clientWidth;
            }
    
            var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
            var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
            var w = container.clientWidth - paddingLeft - paddingRight;
            var cw = helpers.getConstraintWidth(domNode);
            return isNaN(cw) ? w : Math.min(w, cw);
        };
        helpers.getMaximumHeight = function(domNode) {
            var container = domNode.parentNode;
            if (!container) {
                return domNode.clientHeight;
            }
    
            var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
            var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
            var h = container.clientHeight - paddingTop - paddingBottom;
            var ch = helpers.getConstraintHeight(domNode);
            return isNaN(ch) ? h : Math.min(h, ch);
        };
        helpers.getStyle = function(el, property) {
            return el.currentStyle ?
                el.currentStyle[property] :
                document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
        };
        helpers.retinaScale = function(chart, forceRatio) {
            var pixelRatio = chart.currentDevicePixelRatio = forceRatio || window.devicePixelRatio || 1;
            if (pixelRatio === 1) {
                return;
            }
    
            var canvas = chart.canvas;
            var height = chart.height;
            var width = chart.width;
    
            canvas.height = height * pixelRatio;
            canvas.width = width * pixelRatio;
            chart.ctx.scale(pixelRatio, pixelRatio);
    
            // If no style has been set on the canvas, the render size is used as display size,
            // making the chart visually bigger, so let's enforce it to the "correct" values.
            // See https://github.com/chartjs/Chart.js/issues/3575
            canvas.style.height = height + 'px';
            canvas.style.width = width + 'px';
        };
        // -- Canvas methods
        helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
            return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
        };
        helpers.longestText = function(ctx, font, arrayOfThings, cache) {
            cache = cache || {};
            var data = cache.data = cache.data || {};
            var gc = cache.garbageCollect = cache.garbageCollect || [];
    
            if (cache.font !== font) {
                data = cache.data = {};
                gc = cache.garbageCollect = [];
                cache.font = font;
            }
    
            ctx.font = font;
            var longest = 0;
            helpers.each(arrayOfThings, function(thing) {
                // Undefined strings and arrays should not be measured
                if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
                    longest = helpers.measureText(ctx, data, gc, longest, thing);
                } else if (helpers.isArray(thing)) {
                    // if it is an array lets measure each element
                    // to do maybe simplify this function a bit so we can do this more recursively?
                    helpers.each(thing, function(nestedThing) {
                        // Undefined strings and arrays should not be measured
                        if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                            longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
                        }
                    });
                }
            });
    
            var gcLen = gc.length / 2;
            if (gcLen > arrayOfThings.length) {
                for (var i = 0; i < gcLen; i++) {
                    delete data[gc[i]];
                }
                gc.splice(0, gcLen);
            }
            return longest;
        };
        helpers.measureText = function(ctx, data, gc, longest, string) {
            var textWidth = data[string];
            if (!textWidth) {
                textWidth = data[string] = ctx.measureText(string).width;
                gc.push(string);
            }
            if (textWidth > longest) {
                longest = textWidth;
            }
            return longest;
        };
        helpers.numberOfLabelLines = function(arrayOfThings) {
            var numberOfLines = 1;
            helpers.each(arrayOfThings, function(thing) {
                if (helpers.isArray(thing)) {
                    if (thing.length > numberOfLines) {
                        numberOfLines = thing.length;
                    }
                }
            });
            return numberOfLines;
        };
    
        helpers.color = !color ?
            function(value) {
                console.error('Color.js not found!');
                return value;
            } :
            function(value) {
                /* global CanvasGradient */
                if (value instanceof CanvasGradient) {
                    value = defaults.global.defaultColor;
                }
    
                return color(value);
            };
    
        helpers.getHoverColor = function(colorValue) {
            /* global CanvasPattern */
            return (colorValue instanceof CanvasPattern) ?
                colorValue :
                helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
        };
    };
    
    },{"../helpers/index":39,"./core.defaults":19,"chartjs-color":53}],22:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    
    /**
     * Helper function to get relative position for an event
     * @param {Event|IEvent} event - The event to get the position for
     * @param {Chart} chart - The chart
     * @returns {Point} the event position
     */
    function getRelativePosition(e, chart) {
        if (e.native) {
            return {
                x: e.x,
                y: e.y
            };
        }
    
        return helpers.getRelativePosition(e, chart);
    }
    
    /**
     * Helper function to traverse all of the visible elements in the chart
     * @param chart {chart} the chart
     * @param handler {Function} the callback to execute for each visible item
     */
    function parseVisibleItems(chart, handler) {
        var datasets = chart.data.datasets;
        var meta, i, j, ilen, jlen;
    
        for (i = 0, ilen = datasets.length; i < ilen; ++i) {
            if (!chart.isDatasetVisible(i)) {
                continue;
            }
    
            meta = chart.getDatasetMeta(i);
            for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
                var element = meta.data[j];
                if (!element._view.skip) {
                    handler(element);
                }
            }
        }
    }
    
    /**
     * Helper function to get the items that intersect the event position
     * @param items {ChartElement[]} elements to filter
     * @param position {Point} the point to be nearest to
     * @return {ChartElement[]} the nearest items
     */
    function getIntersectItems(chart, position) {
        var elements = [];
    
        parseVisibleItems(chart, function(element) {
            if (element.inRange(position.x, position.y)) {
                elements.push(element);
            }
        });
    
        return elements;
    }
    
    /**
     * Helper function to get the items nearest to the event position considering all visible items in teh chart
     * @param chart {Chart} the chart to look at elements from
     * @param position {Point} the point to be nearest to
     * @param intersect {Boolean} if true, only consider items that intersect the position
     * @param distanceMetric {Function} function to provide the distance between points
     * @return {ChartElement[]} the nearest items
     */
    function getNearestItems(chart, position, intersect, distanceMetric) {
        var minDistance = Number.POSITIVE_INFINITY;
        var nearestItems = [];
    
        parseVisibleItems(chart, function(element) {
            if (intersect && !element.inRange(position.x, position.y)) {
                return;
            }
    
            var center = element.getCenterPoint();
            var distance = distanceMetric(position, center);
    
            if (distance < minDistance) {
                nearestItems = [element];
                minDistance = distance;
            } else if (distance === minDistance) {
                // Can have multiple items at the same distance in which case we sort by size
                nearestItems.push(element);
            }
        });
    
        return nearestItems;
    }
    
    /**
     * Get a distance metric function for two points based on the
     * axis mode setting
     * @param {String} axis the axis mode. x|y|xy
     */
    function getDistanceMetricForAxis(axis) {
        var useX = axis.indexOf('x') !== -1;
        var useY = axis.indexOf('y') !== -1;
    
        return function(pt1, pt2) {
            var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
            var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
            return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
        };
    }
    
    function indexMode(chart, e, options) {
        var position = getRelativePosition(e, chart);
        // Default axis for index mode is 'x' to match old behaviour
        options.axis = options.axis || 'x';
        var distanceMetric = getDistanceMetricForAxis(options.axis);
        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
        var elements = [];
    
        if (!items.length) {
            return [];
        }
    
        chart.data.datasets.forEach(function(dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
                var meta = chart.getDatasetMeta(datasetIndex);
                var element = meta.data[items[0]._index];
    
                // don't count items that are skipped (null data)
                if (element && !element._view.skip) {
                    elements.push(element);
                }
            }
        });
    
        return elements;
    }
    
    /**
     * @interface IInteractionOptions
     */
    /**
     * If true, only consider items that intersect the point
     * @name IInterfaceOptions#boolean
     * @type Boolean
     */
    
    /**
     * Contains interaction related functions
     * @namespace Chart.Interaction
     */
    module.exports = {
        // Helper function for different modes
        modes: {
            single: function(chart, e) {
                var position = getRelativePosition(e, chart);
                var elements = [];
    
                parseVisibleItems(chart, function(element) {
                    if (element.inRange(position.x, position.y)) {
                        elements.push(element);
                        return elements;
                    }
                });
    
                return elements.slice(0, 1);
            },
    
            /**
             * @function Chart.Interaction.modes.label
             * @deprecated since version 2.4.0
             * @todo remove at version 3
             * @private
             */
            label: indexMode,
    
            /**
             * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
             * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
             * @function Chart.Interaction.modes.index
             * @since v2.4.0
             * @param chart {chart} the chart we are returning items from
             * @param e {Event} the event we are find things at
             * @param options {IInteractionOptions} options to use during interaction
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            index: indexMode,
    
            /**
             * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
             * If the options.intersect is false, we find the nearest item and return the items in that dataset
             * @function Chart.Interaction.modes.dataset
             * @param chart {chart} the chart we are returning items from
             * @param e {Event} the event we are find things at
             * @param options {IInteractionOptions} options to use during interaction
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            dataset: function(chart, e, options) {
                var position = getRelativePosition(e, chart);
                options.axis = options.axis || 'xy';
                var distanceMetric = getDistanceMetricForAxis(options.axis);
                var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
    
                if (items.length > 0) {
                    items = chart.getDatasetMeta(items[0]._datasetIndex).data;
                }
    
                return items;
            },
    
            /**
             * @function Chart.Interaction.modes.x-axis
             * @deprecated since version 2.4.0. Use index mode and intersect == true
             * @todo remove at version 3
             * @private
             */
            'x-axis': function(chart, e) {
                return indexMode(chart, e, {intersect: false});
            },
    
            /**
             * Point mode returns all elements that hit test based on the event position
             * of the event
             * @function Chart.Interaction.modes.intersect
             * @param chart {chart} the chart we are returning items from
             * @param e {Event} the event we are find things at
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            point: function(chart, e) {
                var position = getRelativePosition(e, chart);
                return getIntersectItems(chart, position);
            },
    
            /**
             * nearest mode returns the element closest to the point
             * @function Chart.Interaction.modes.intersect
             * @param chart {chart} the chart we are returning items from
             * @param e {Event} the event we are find things at
             * @param options {IInteractionOptions} options to use
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            nearest: function(chart, e, options) {
                var position = getRelativePosition(e, chart);
                options.axis = options.axis || 'xy';
                var distanceMetric = getDistanceMetricForAxis(options.axis);
                var nearestItems = getNearestItems(chart, position, options.intersect, distanceMetric);
    
                // We have multiple items at the same distance from the event. Now sort by smallest
                if (nearestItems.length > 1) {
                    nearestItems.sort(function(a, b) {
                        var sizeA = a.getArea();
                        var sizeB = b.getArea();
                        var ret = sizeA - sizeB;
    
                        if (ret === 0) {
                            // if equal sort by dataset index
                            ret = a._datasetIndex - b._datasetIndex;
                        }
    
                        return ret;
                    });
                }
    
                // Return only 1 item
                return nearestItems.slice(0, 1);
            },
    
            /**
             * x mode returns the elements that hit-test at the current x coordinate
             * @function Chart.Interaction.modes.x
             * @param chart {chart} the chart we are returning items from
             * @param e {Event} the event we are find things at
             * @param options {IInteractionOptions} options to use
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            x: function(chart, e, options) {
                var position = getRelativePosition(e, chart);
                var items = [];
                var intersectsItem = false;
    
                parseVisibleItems(chart, function(element) {
                    if (element.inXRange(position.x)) {
                        items.push(element);
                    }
    
                    if (element.inRange(position.x, position.y)) {
                        intersectsItem = true;
                    }
                });
    
                // If we want to trigger on an intersect and we don't have any items
                // that intersect the position, return nothing
                if (options.intersect && !intersectsItem) {
                    items = [];
                }
                return items;
            },
    
            /**
             * y mode returns the elements that hit-test at the current y coordinate
             * @function Chart.Interaction.modes.y
             * @param chart {chart} the chart we are returning items from
             * @param e {Event} the event we are find things at
             * @param options {IInteractionOptions} options to use
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            y: function(chart, e, options) {
                var position = getRelativePosition(e, chart);
                var items = [];
                var intersectsItem = false;
    
                parseVisibleItems(chart, function(element) {
                    if (element.inYRange(position.y)) {
                        items.push(element);
                    }
    
                    if (element.inRange(position.x, position.y)) {
                        intersectsItem = true;
                    }
                });
    
                // If we want to trigger on an intersect and we don't have any items
                // that intersect the position, return nothing
                if (options.intersect && !intersectsItem) {
                    items = [];
                }
                return items;
            }
        }
    };
    
    },{"../helpers/index":39}],23:[function(require,module,exports){
    'use strict';
    
    var defaults = require('./core.defaults');
    
    defaults._set('global', {
        responsive: true,
        responsiveAnimationDuration: 0,
        maintainAspectRatio: true,
        events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
        hover: {
            onHover: null,
            mode: 'nearest',
            intersect: true,
            animationDuration: 400
        },
        onClick: null,
        defaultColor: 'rgba(0,0,0,0.1)',
        defaultFontColor: '#666',
        defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        defaultFontSize: 12,
        defaultFontStyle: 'normal',
        showLines: true,
    
        // Element defaults defined in element extensions
        elements: {},
    
        // Layout options such as padding
        layout: {
            padding: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            }
        }
    });
    
    module.exports = function() {
    
        // Occupy the global variable of Chart, and create a simple base class
        var Chart = function(item, config) {
            this.construct(item, config);
            return this;
        };
    
        Chart.Chart = Chart;
    
        return Chart;
    };
    
    },{"./core.defaults":19}],24:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    
    module.exports = function(Chart) {
    
        function filterByPosition(array, position) {
            return helpers.where(array, function(v) {
                return v.position === position;
            });
        }
    
        function sortByWeight(array, reverse) {
            array.forEach(function(v, i) {
                v._tmpIndex_ = i;
                return v;
            });
            array.sort(function(a, b) {
                var v0 = reverse ? b : a;
                var v1 = reverse ? a : b;
                return v0.weight === v1.weight ?
                    v0._tmpIndex_ - v1._tmpIndex_ :
                    v0.weight - v1.weight;
            });
            array.forEach(function(v) {
                delete v._tmpIndex_;
            });
        }
    
        /**
         * @interface ILayoutItem
         * @prop {String} position - The position of the item in the chart layout. Possible values are
         * 'left', 'top', 'right', 'bottom', and 'chartArea'
         * @prop {Number} weight - The weight used to sort the item. Higher weights are further away from the chart area
         * @prop {Boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
         * @prop {Function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
         * @prop {Function} update - Takes two parameters: width and height. Returns size of item
         * @prop {Function} getPadding -  Returns an object with padding on the edges
         * @prop {Number} width - Width of item. Must be valid after update()
         * @prop {Number} height - Height of item. Must be valid after update()
         * @prop {Number} left - Left edge of the item. Set by layout system and cannot be used in update
         * @prop {Number} top - Top edge of the item. Set by layout system and cannot be used in update
         * @prop {Number} right - Right edge of the item. Set by layout system and cannot be used in update
         * @prop {Number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
         */
    
        // The layout service is very self explanatory.  It's responsible for the layout within a chart.
        // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
        // It is this service's responsibility of carrying out that layout.
        Chart.layoutService = {
            defaults: {},
    
            /**
             * Register a box to a chart.
             * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
             * @param {Chart} chart - the chart to use
             * @param {ILayoutItem} item - the item to add to be layed out
             */
            addBox: function(chart, item) {
                if (!chart.boxes) {
                    chart.boxes = [];
                }
    
                // initialize item with default values
                item.fullWidth = item.fullWidth || false;
                item.position = item.position || 'top';
                item.weight = item.weight || 0;
    
                chart.boxes.push(item);
            },
    
            /**
             * Remove a layoutItem from a chart
             * @param {Chart} chart - the chart to remove the box from
             * @param {Object} layoutItem - the item to remove from the layout
             */
            removeBox: function(chart, layoutItem) {
                var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
                if (index !== -1) {
                    chart.boxes.splice(index, 1);
                }
            },
    
            /**
             * Sets (or updates) options on the given `item`.
             * @param {Chart} chart - the chart in which the item lives (or will be added to)
             * @param {Object} item - the item to configure with the given options
             * @param {Object} options - the new item options.
             */
            configure: function(chart, item, options) {
                var props = ['fullWidth', 'position', 'weight'];
                var ilen = props.length;
                var i = 0;
                var prop;
    
                for (; i < ilen; ++i) {
                    prop = props[i];
                    if (options.hasOwnProperty(prop)) {
                        item[prop] = options[prop];
                    }
                }
            },
    
            /**
             * Fits boxes of the given chart into the given size by having each box measure itself
             * then running a fitting algorithm
             * @param {Chart} chart - the chart
             * @param {Number} width - the width to fit into
             * @param {Number} height - the height to fit into
             */
            update: function(chart, width, height) {
                if (!chart) {
                    return;
                }
    
                var layoutOptions = chart.options.layout || {};
                var padding = helpers.options.toPadding(layoutOptions.padding);
                var leftPadding = padding.left;
                var rightPadding = padding.right;
                var topPadding = padding.top;
                var bottomPadding = padding.bottom;
    
                var leftBoxes = filterByPosition(chart.boxes, 'left');
                var rightBoxes = filterByPosition(chart.boxes, 'right');
                var topBoxes = filterByPosition(chart.boxes, 'top');
                var bottomBoxes = filterByPosition(chart.boxes, 'bottom');
                var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea');
    
                // Sort boxes by weight. A higher weight is further away from the chart area
                sortByWeight(leftBoxes, true);
                sortByWeight(rightBoxes, false);
                sortByWeight(topBoxes, true);
                sortByWeight(bottomBoxes, false);
    
                // Essentially we now have any number of boxes on each of the 4 sides.
                // Our canvas looks like the following.
                // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
                // B1 is the bottom axis
                // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
                // These locations are single-box locations only, when trying to register a chartArea location that is already taken,
                // an error will be thrown.
                //
                // |----------------------------------------------------|
                // |                  T1 (Full Width)                   |
                // |----------------------------------------------------|
                // |    |    |                 T2                  |    |
                // |    |----|-------------------------------------|----|
                // |    |    | C1 |                           | C2 |    |
                // |    |    |----|                           |----|    |
                // |    |    |                                     |    |
                // | L1 | L2 |           ChartArea (C0)            | R1 |
                // |    |    |                                     |    |
                // |    |    |----|                           |----|    |
                // |    |    | C3 |                           | C4 |    |
                // |    |----|-------------------------------------|----|
                // |    |    |                 B1                  |    |
                // |----------------------------------------------------|
                // |                  B2 (Full Width)                   |
                // |----------------------------------------------------|
                //
                // What we do to find the best sizing, we do the following
                // 1. Determine the minimum size of the chart area.
                // 2. Split the remaining width equally between each vertical axis
                // 3. Split the remaining height equally between each horizontal axis
                // 4. Give each layout the maximum size it can be. The layout will return it's minimum size
                // 5. Adjust the sizes of each axis based on it's minimum reported size.
                // 6. Refit each axis
                // 7. Position each axis in the final location
                // 8. Tell the chart the final location of the chart area
                // 9. Tell any axes that overlay the chart area the positions of the chart area
    
                // Step 1
                var chartWidth = width - leftPadding - rightPadding;
                var chartHeight = height - topPadding - bottomPadding;
                var chartAreaWidth = chartWidth / 2; // min 50%
                var chartAreaHeight = chartHeight / 2; // min 50%
    
                // Step 2
                var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
    
                // Step 3
                var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
    
                // Step 4
                var maxChartAreaWidth = chartWidth;
                var maxChartAreaHeight = chartHeight;
                var minBoxSizes = [];
    
                function getMinimumBoxSize(box) {
                    var minSize;
                    var isHorizontal = box.isHorizontal();
    
                    if (isHorizontal) {
                        minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
                        maxChartAreaHeight -= minSize.height;
                    } else {
                        minSize = box.update(verticalBoxWidth, chartAreaHeight);
                        maxChartAreaWidth -= minSize.width;
                    }
    
                    minBoxSizes.push({
                        horizontal: isHorizontal,
                        minSize: minSize,
                        box: box,
                    });
                }
    
                helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
    
                // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)
                var maxHorizontalLeftPadding = 0;
                var maxHorizontalRightPadding = 0;
                var maxVerticalTopPadding = 0;
                var maxVerticalBottomPadding = 0;
    
                helpers.each(topBoxes.concat(bottomBoxes), function(horizontalBox) {
                    if (horizontalBox.getPadding) {
                        var boxPadding = horizontalBox.getPadding();
                        maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
                        maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
                    }
                });
    
                helpers.each(leftBoxes.concat(rightBoxes), function(verticalBox) {
                    if (verticalBox.getPadding) {
                        var boxPadding = verticalBox.getPadding();
                        maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
                        maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
                    }
                });
    
                // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
                // be if the axes are drawn at their minimum sizes.
                // Steps 5 & 6
                var totalLeftBoxesWidth = leftPadding;
                var totalRightBoxesWidth = rightPadding;
                var totalTopBoxesHeight = topPadding;
                var totalBottomBoxesHeight = bottomPadding;
    
                // Function to fit a box
                function fitBox(box) {
                    var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {
                        return minBox.box === box;
                    });
    
                    if (minBoxSize) {
                        if (box.isHorizontal()) {
                            var scaleMargin = {
                                left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                                right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                                top: 0,
                                bottom: 0
                            };
    
                            // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
                            // on the margin. Sometimes they need to increase in size slightly
                            box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
                        } else {
                            box.update(minBoxSize.minSize.width, maxChartAreaHeight);
                        }
                    }
                }
    
                // Update, and calculate the left and right margins for the horizontal boxes
                helpers.each(leftBoxes.concat(rightBoxes), fitBox);
    
                helpers.each(leftBoxes, function(box) {
                    totalLeftBoxesWidth += box.width;
                });
    
                helpers.each(rightBoxes, function(box) {
                    totalRightBoxesWidth += box.width;
                });
    
                // Set the Left and Right margins for the horizontal boxes
                helpers.each(topBoxes.concat(bottomBoxes), fitBox);
    
                // Figure out how much margin is on the top and bottom of the vertical boxes
                helpers.each(topBoxes, function(box) {
                    totalTopBoxesHeight += box.height;
                });
    
                helpers.each(bottomBoxes, function(box) {
                    totalBottomBoxesHeight += box.height;
                });
    
                function finalFitVerticalBox(box) {
                    var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {
                        return minSize.box === box;
                    });
    
                    var scaleMargin = {
                        left: 0,
                        right: 0,
                        top: totalTopBoxesHeight,
                        bottom: totalBottomBoxesHeight
                    };
    
                    if (minBoxSize) {
                        box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
                    }
                }
    
                // Let the left layout know the final margin
                helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
    
                // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
                totalLeftBoxesWidth = leftPadding;
                totalRightBoxesWidth = rightPadding;
                totalTopBoxesHeight = topPadding;
                totalBottomBoxesHeight = bottomPadding;
    
                helpers.each(leftBoxes, function(box) {
                    totalLeftBoxesWidth += box.width;
                });
    
                helpers.each(rightBoxes, function(box) {
                    totalRightBoxesWidth += box.width;
                });
    
                helpers.each(topBoxes, function(box) {
                    totalTopBoxesHeight += box.height;
                });
                helpers.each(bottomBoxes, function(box) {
                    totalBottomBoxesHeight += box.height;
                });
    
                // We may be adding some padding to account for rotated x axis labels
                var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
                totalLeftBoxesWidth += leftPaddingAddition;
                totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
    
                var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
                totalTopBoxesHeight += topPaddingAddition;
                totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
    
                // Figure out if our chart area changed. This would occur if the dataset layout label rotation
                // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
                // without calling `fit` again
                var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
                var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
    
                if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
                    helpers.each(leftBoxes, function(box) {
                        box.height = newMaxChartAreaHeight;
                    });
    
                    helpers.each(rightBoxes, function(box) {
                        box.height = newMaxChartAreaHeight;
                    });
    
                    helpers.each(topBoxes, function(box) {
                        if (!box.fullWidth) {
                            box.width = newMaxChartAreaWidth;
                        }
                    });
    
                    helpers.each(bottomBoxes, function(box) {
                        if (!box.fullWidth) {
                            box.width = newMaxChartAreaWidth;
                        }
                    });
    
                    maxChartAreaHeight = newMaxChartAreaHeight;
                    maxChartAreaWidth = newMaxChartAreaWidth;
                }
    
                // Step 7 - Position the boxes
                var left = leftPadding + leftPaddingAddition;
                var top = topPadding + topPaddingAddition;
    
                function placeBox(box) {
                    if (box.isHorizontal()) {
                        box.left = box.fullWidth ? leftPadding : totalLeftBoxesWidth;
                        box.right = box.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
                        box.top = top;
                        box.bottom = top + box.height;
    
                        // Move to next point
                        top = box.bottom;
    
                    } else {
    
                        box.left = left;
                        box.right = left + box.width;
                        box.top = totalTopBoxesHeight;
                        box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
    
                        // Move to next point
                        left = box.right;
                    }
                }
    
                helpers.each(leftBoxes.concat(topBoxes), placeBox);
    
                // Account for chart width and height
                left += maxChartAreaWidth;
                top += maxChartAreaHeight;
    
                helpers.each(rightBoxes, placeBox);
                helpers.each(bottomBoxes, placeBox);
    
                // Step 8
                chart.chartArea = {
                    left: totalLeftBoxesWidth,
                    top: totalTopBoxesHeight,
                    right: totalLeftBoxesWidth + maxChartAreaWidth,
                    bottom: totalTopBoxesHeight + maxChartAreaHeight
                };
    
                // Step 9
                helpers.each(chartAreaBoxes, function(box) {
                    box.left = chart.chartArea.left;
                    box.top = chart.chartArea.top;
                    box.right = chart.chartArea.right;
                    box.bottom = chart.chartArea.bottom;
    
                    box.update(maxChartAreaWidth, maxChartAreaHeight);
                });
            }
        };
    };
    
    },{"../helpers/index":39}],25:[function(require,module,exports){
    'use strict';
    
    var defaults = require('./core.defaults');
    var Element = require('./core.element');
    var helpers = require('../helpers/index');
    
    defaults._set('global', {
        plugins: {}
    });
    
    module.exports = function(Chart) {
    
        /**
         * The plugin service singleton
         * @namespace Chart.plugins
         * @since 2.1.0
         */
        Chart.plugins = {
            /**
             * Globally registered plugins.
             * @private
             */
            _plugins: [],
    
            /**
             * This identifier is used to invalidate the descriptors cache attached to each chart
             * when a global plugin is registered or unregistered. In this case, the cache ID is
             * incremented and descriptors are regenerated during following API calls.
             * @private
             */
            _cacheId: 0,
    
            /**
             * Registers the given plugin(s) if not already registered.
             * @param {Array|Object} plugins plugin instance(s).
             */
            register: function(plugins) {
                var p = this._plugins;
                ([]).concat(plugins).forEach(function(plugin) {
                    if (p.indexOf(plugin) === -1) {
                        p.push(plugin);
                    }
                });
    
                this._cacheId++;
            },
    
            /**
             * Unregisters the given plugin(s) only if registered.
             * @param {Array|Object} plugins plugin instance(s).
             */
            unregister: function(plugins) {
                var p = this._plugins;
                ([]).concat(plugins).forEach(function(plugin) {
                    var idx = p.indexOf(plugin);
                    if (idx !== -1) {
                        p.splice(idx, 1);
                    }
                });
    
                this._cacheId++;
            },
    
            /**
             * Remove all registered plugins.
             * @since 2.1.5
             */
            clear: function() {
                this._plugins = [];
                this._cacheId++;
            },
    
            /**
             * Returns the number of registered plugins?
             * @returns {Number}
             * @since 2.1.5
             */
            count: function() {
                return this._plugins.length;
            },
    
            /**
             * Returns all registered plugin instances.
             * @returns {Array} array of plugin objects.
             * @since 2.1.5
             */
            getAll: function() {
                return this._plugins;
            },
    
            /**
             * Calls enabled plugins for `chart` on the specified hook and with the given args.
             * This method immediately returns as soon as a plugin explicitly returns false. The
             * returned value can be used, for instance, to interrupt the current action.
             * @param {Object} chart - The chart instance for which plugins should be called.
             * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
             * @param {Array} [args] - Extra arguments to apply to the hook call.
             * @returns {Boolean} false if any of the plugins return false, else returns true.
             */
            notify: function(chart, hook, args) {
                var descriptors = this.descriptors(chart);
                var ilen = descriptors.length;
                var i, descriptor, plugin, params, method;
    
                for (i = 0; i < ilen; ++i) {
                    descriptor = descriptors[i];
                    plugin = descriptor.plugin;
                    method = plugin[hook];
                    if (typeof method === 'function') {
                        params = [chart].concat(args || []);
                        params.push(descriptor.options);
                        if (method.apply(plugin, params) === false) {
                            return false;
                        }
                    }
                }
    
                return true;
            },
    
            /**
             * Returns descriptors of enabled plugins for the given chart.
             * @returns {Array} [{ plugin, options }]
             * @private
             */
            descriptors: function(chart) {
                var cache = chart._plugins || (chart._plugins = {});
                if (cache.id === this._cacheId) {
                    return cache.descriptors;
                }
    
                var plugins = [];
                var descriptors = [];
                var config = (chart && chart.config) || {};
                var options = (config.options && config.options.plugins) || {};
    
                this._plugins.concat(config.plugins || []).forEach(function(plugin) {
                    var idx = plugins.indexOf(plugin);
                    if (idx !== -1) {
                        return;
                    }
    
                    var id = plugin.id;
                    var opts = options[id];
                    if (opts === false) {
                        return;
                    }
    
                    if (opts === true) {
                        opts = helpers.clone(defaults.global.plugins[id]);
                    }
    
                    plugins.push(plugin);
                    descriptors.push({
                        plugin: plugin,
                        options: opts || {}
                    });
                });
    
                cache.descriptors = descriptors;
                cache.id = this._cacheId;
                return descriptors;
            }
        };
    
        /**
         * Plugin extension hooks.
         * @interface IPlugin
         * @since 2.1.0
         */
        /**
         * @method IPlugin#beforeInit
         * @desc Called before initializing `chart`.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#afterInit
         * @desc Called after `chart` has been initialized and before the first update.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#beforeUpdate
         * @desc Called before updating `chart`. If any plugin returns `false`, the update
         * is cancelled (and thus subsequent render(s)) until another `update` is triggered.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart update.
         */
        /**
         * @method IPlugin#afterUpdate
         * @desc Called after `chart` has been updated and before rendering. Note that this
         * hook will not be called if the chart update has been previously cancelled.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#beforeDatasetsUpdate
          * @desc Called before updating the `chart` datasets. If any plugin returns `false`,
         * the datasets update is cancelled until another `update` is triggered.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} false to cancel the datasets update.
         * @since version 2.1.5
         */
        /**
         * @method IPlugin#afterDatasetsUpdate
         * @desc Called after the `chart` datasets have been updated. Note that this hook
         * will not be called if the datasets update has been previously cancelled.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         * @since version 2.1.5
         */
        /**
         * @method IPlugin#beforeDatasetUpdate
          * @desc Called before updating the `chart` dataset at the given `args.index`. If any plugin
         * returns `false`, the datasets update is cancelled until another `update` is triggered.
         * @param {Chart} chart - The chart instance.
         * @param {Object} args - The call arguments.
         * @param {Number} args.index - The dataset index.
         * @param {Object} args.meta - The dataset metadata.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart datasets drawing.
         */
        /**
         * @method IPlugin#afterDatasetUpdate
          * @desc Called after the `chart` datasets at the given `args.index` has been updated. Note
         * that this hook will not be called if the datasets update has been previously cancelled.
         * @param {Chart} chart - The chart instance.
         * @param {Object} args - The call arguments.
         * @param {Number} args.index - The dataset index.
         * @param {Object} args.meta - The dataset metadata.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#beforeLayout
         * @desc Called before laying out `chart`. If any plugin returns `false`,
         * the layout update is cancelled until another `update` is triggered.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart layout.
         */
        /**
         * @method IPlugin#afterLayout
         * @desc Called after the `chart` has been layed out. Note that this hook will not
         * be called if the layout update has been previously cancelled.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#beforeRender
         * @desc Called before rendering `chart`. If any plugin returns `false`,
         * the rendering is cancelled until another `render` is triggered.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart rendering.
         */
        /**
         * @method IPlugin#afterRender
         * @desc Called after the `chart` has been fully rendered (and animation completed). Note
         * that this hook will not be called if the rendering has been previously cancelled.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#beforeDraw
         * @desc Called before drawing `chart` at every animation frame specified by the given
         * easing value. If any plugin returns `false`, the frame drawing is cancelled until
         * another `render` is triggered.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart drawing.
         */
        /**
         * @method IPlugin#afterDraw
         * @desc Called after the `chart` has been drawn for the specific easing value. Note
         * that this hook will not be called if the drawing has been previously cancelled.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#beforeDatasetsDraw
          * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,
         * the datasets drawing is cancelled until another `render` is triggered.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart datasets drawing.
         */
        /**
         * @method IPlugin#afterDatasetsDraw
         * @desc Called after the `chart` datasets have been drawn. Note that this hook
         * will not be called if the datasets drawing has been previously cancelled.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#beforeDatasetDraw
          * @desc Called before drawing the `chart` dataset at the given `args.index` (datasets
         * are drawn in the reverse order). If any plugin returns `false`, the datasets drawing
         * is cancelled until another `render` is triggered.
         * @param {Chart} chart - The chart instance.
         * @param {Object} args - The call arguments.
         * @param {Number} args.index - The dataset index.
         * @param {Object} args.meta - The dataset metadata.
         * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart datasets drawing.
         */
        /**
         * @method IPlugin#afterDatasetDraw
          * @desc Called after the `chart` datasets at the given `args.index` have been drawn
         * (datasets are drawn in the reverse order). Note that this hook will not be called
         * if the datasets drawing has been previously cancelled.
         * @param {Chart} chart - The chart instance.
         * @param {Object} args - The call arguments.
         * @param {Number} args.index - The dataset index.
         * @param {Object} args.meta - The dataset metadata.
         * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
         * @param {Object} options - The plugin options.
         */
        /**
           * @method IPlugin#beforeTooltipDraw
         * @desc Called before drawing the `tooltip`. If any plugin returns `false`,
         * the tooltip drawing is cancelled until another `render` is triggered.
         * @param {Chart} chart - The chart instance.
         * @param {Object} args - The call arguments.
         * @param {Object} args.tooltip - The tooltip.
         * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
         * @param {Object} options - The plugin options.
         * @returns {Boolean} `false` to cancel the chart tooltip drawing.
           */
        /**
          * @method IPlugin#afterTooltipDraw
           * @desc Called after drawing the `tooltip`. Note that this hook will not
          * be called if the tooltip drawing has been previously cancelled.
          * @param {Chart} chart - The chart instance.
          * @param {Object} args - The call arguments.
          * @param {Object} args.tooltip - The tooltip.
         * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
          * @param {Object} options - The plugin options.
          */
        /**
         * @method IPlugin#beforeEvent
          * @desc Called before processing the specified `event`. If any plugin returns `false`,
         * the event will be discarded.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {IEvent} event - The event object.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#afterEvent
         * @desc Called after the `event` has been consumed. Note that this hook
         * will not be called if the `event` has been previously discarded.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {IEvent} event - The event object.
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#resize
         * @desc Called after the chart as been resized.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Number} size - The new canvas display size (eq. canvas.style width & height).
         * @param {Object} options - The plugin options.
         */
        /**
         * @method IPlugin#destroy
         * @desc Called after the chart as been destroyed.
         * @param {Chart.Controller} chart - The chart instance.
         * @param {Object} options - The plugin options.
         */
    
        /**
         * Provided for backward compatibility, use Chart.plugins instead
         * @namespace Chart.pluginService
         * @deprecated since version 2.1.5
         * @todo remove at version 3
         * @private
         */
        Chart.pluginService = Chart.plugins;
    
        /**
         * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
         * effect, instead simply create/register plugins via plain JavaScript objects.
         * @interface Chart.PluginBase
         * @deprecated since version 2.5.0
         * @todo remove at version 3
         * @private
         */
        Chart.PluginBase = Element.extend({});
    };
    
    },{"../helpers/index":39,"./core.defaults":19,"./core.element":20}],26:[function(require,module,exports){
    'use strict';
    
    var defaults = require('./core.defaults');
    var Element = require('./core.element');
    var helpers = require('../helpers/index');
    var Ticks = require('./core.ticks');
    
    defaults._set('scale', {
        display: true,
        position: 'left',
        offset: false,
    
        // grid line settings
        gridLines: {
            display: true,
            color: 'rgba(0, 0, 0, 0.1)',
            lineWidth: 1,
            drawBorder: true,
            drawOnChartArea: true,
            drawTicks: true,
            tickMarkLength: 10,
            zeroLineWidth: 1,
            zeroLineColor: 'rgba(0,0,0,0.25)',
            zeroLineBorderDash: [],
            zeroLineBorderDashOffset: 0.0,
            offsetGridLines: false,
            borderDash: [],
            borderDashOffset: 0.0
        },
    
        // scale label
        scaleLabel: {
            // display property
            display: false,
    
            // actual label
            labelString: '',
    
            // line height
            lineHeight: 1.2,
    
            // top/bottom padding
            padding: {
                top: 4,
                bottom: 4
            }
        },
    
        // label settings
        ticks: {
            beginAtZero: false,
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            padding: 0,
            reverse: false,
            display: true,
            autoSkip: true,
            autoSkipPadding: 0,
            labelOffset: 0,
            // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
            callback: Ticks.formatters.values,
            minor: {},
            major: {}
        }
    });
    
    function labelsFromTicks(ticks) {
        var labels = [];
        var i, ilen;
    
        for (i = 0, ilen = ticks.length; i < ilen; ++i) {
            labels.push(ticks[i].label);
        }
    
        return labels;
    }
    
    function getLineValue(scale, index, offsetGridLines) {
        var lineValue = scale.getPixelForTick(index);
    
        if (offsetGridLines) {
            if (index === 0) {
                lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;
            } else {
                lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;
            }
        }
        return lineValue;
    }
    
    module.exports = function(Chart) {
    
        function computeTextSize(context, tick, font) {
            return helpers.isArray(tick) ?
                helpers.longestText(context, font, tick) :
                context.measureText(tick).width;
        }
    
        function parseFontOptions(options) {
            var valueOrDefault = helpers.valueOrDefault;
            var globalDefaults = defaults.global;
            var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
            var style = valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
            var family = valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
    
            return {
                size: size,
                style: style,
                family: family,
                font: helpers.fontString(size, style, family)
            };
        }
    
        function parseLineHeight(options) {
            return helpers.options.toLineHeight(
                helpers.valueOrDefault(options.lineHeight, 1.2),
                helpers.valueOrDefault(options.fontSize, defaults.global.defaultFontSize));
        }
    
        Chart.Scale = Element.extend({
            /**
             * Get the padding needed for the scale
             * @method getPadding
             * @private
             * @returns {Padding} the necessary padding
             */
            getPadding: function() {
                var me = this;
                return {
                    left: me.paddingLeft || 0,
                    top: me.paddingTop || 0,
                    right: me.paddingRight || 0,
                    bottom: me.paddingBottom || 0
                };
            },
    
            /**
             * Returns the scale tick objects ({label, major})
             * @since 2.7
             */
            getTicks: function() {
                return this._ticks;
            },
    
            // These methods are ordered by lifecyle. Utilities then follow.
            // Any function defined here is inherited by all scale types.
            // Any function can be extended by the scale type
    
            mergeTicksOptions: function() {
                var ticks = this.options.ticks;
                if (ticks.minor === false) {
                    ticks.minor = {
                        display: false
                    };
                }
                if (ticks.major === false) {
                    ticks.major = {
                        display: false
                    };
                }
                for (var key in ticks) {
                    if (key !== 'major' && key !== 'minor') {
                        if (typeof ticks.minor[key] === 'undefined') {
                            ticks.minor[key] = ticks[key];
                        }
                        if (typeof ticks.major[key] === 'undefined') {
                            ticks.major[key] = ticks[key];
                        }
                    }
                }
            },
            beforeUpdate: function() {
                helpers.callback(this.options.beforeUpdate, [this]);
            },
            update: function(maxWidth, maxHeight, margins) {
                var me = this;
                var i, ilen, labels, label, ticks, tick;
    
                // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                me.beforeUpdate();
    
                // Absorb the master measurements
                me.maxWidth = maxWidth;
                me.maxHeight = maxHeight;
                me.margins = helpers.extend({
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                }, margins);
                me.longestTextCache = me.longestTextCache || {};
    
                // Dimensions
                me.beforeSetDimensions();
                me.setDimensions();
                me.afterSetDimensions();
    
                // Data min/max
                me.beforeDataLimits();
                me.determineDataLimits();
                me.afterDataLimits();
    
                // Ticks - `this.ticks` is now DEPRECATED!
                // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
                // and must not be accessed directly from outside this class. `this.ticks` being
                // around for long time and not marked as private, we can't change its structure
                // without unexpected breaking changes. If you need to access the scale ticks,
                // use scale.getTicks() instead.
    
                me.beforeBuildTicks();
    
                // New implementations should return an array of objects but for BACKWARD COMPAT,
                // we still support no return (`this.ticks` internally set by calling this method).
                ticks = me.buildTicks() || [];
    
                me.afterBuildTicks();
    
                me.beforeTickToLabelConversion();
    
                // New implementations should return the formatted tick labels but for BACKWARD
                // COMPAT, we still support no return (`this.ticks` internally changed by calling
                // this method and supposed to contain only string values).
                labels = me.convertTicksToLabels(ticks) || me.ticks;
    
                me.afterTickToLabelConversion();
    
                me.ticks = labels;   // BACKWARD COMPATIBILITY
    
                // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!
    
                // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
                for (i = 0, ilen = labels.length; i < ilen; ++i) {
                    label = labels[i];
                    tick = ticks[i];
                    if (!tick) {
                        ticks.push(tick = {
                            label: label,
                            major: false
                        });
                    } else {
                        tick.label = label;
                    }
                }
    
                me._ticks = ticks;
    
                // Tick Rotation
                me.beforeCalculateTickRotation();
                me.calculateTickRotation();
                me.afterCalculateTickRotation();
                // Fit
                me.beforeFit();
                me.fit();
                me.afterFit();
                //
                me.afterUpdate();
    
                return me.minSize;
    
            },
            afterUpdate: function() {
                helpers.callback(this.options.afterUpdate, [this]);
            },
    
            //
    
            beforeSetDimensions: function() {
                helpers.callback(this.options.beforeSetDimensions, [this]);
            },
            setDimensions: function() {
                var me = this;
                // Set the unconstrained dimension before label rotation
                if (me.isHorizontal()) {
                    // Reset position before calculating rotation
                    me.width = me.maxWidth;
                    me.left = 0;
                    me.right = me.width;
                } else {
                    me.height = me.maxHeight;
    
                    // Reset position before calculating rotation
                    me.top = 0;
                    me.bottom = me.height;
                }
    
                // Reset padding
                me.paddingLeft = 0;
                me.paddingTop = 0;
                me.paddingRight = 0;
                me.paddingBottom = 0;
            },
            afterSetDimensions: function() {
                helpers.callback(this.options.afterSetDimensions, [this]);
            },
    
            // Data limits
            beforeDataLimits: function() {
                helpers.callback(this.options.beforeDataLimits, [this]);
            },
            determineDataLimits: helpers.noop,
            afterDataLimits: function() {
                helpers.callback(this.options.afterDataLimits, [this]);
            },
    
            //
            beforeBuildTicks: function() {
                helpers.callback(this.options.beforeBuildTicks, [this]);
            },
            buildTicks: helpers.noop,
            afterBuildTicks: function() {
                helpers.callback(this.options.afterBuildTicks, [this]);
            },
    
            beforeTickToLabelConversion: function() {
                helpers.callback(this.options.beforeTickToLabelConversion, [this]);
            },
            convertTicksToLabels: function() {
                var me = this;
                // Convert ticks to strings
                var tickOpts = me.options.ticks;
                me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
            },
            afterTickToLabelConversion: function() {
                helpers.callback(this.options.afterTickToLabelConversion, [this]);
            },
    
            //
    
            beforeCalculateTickRotation: function() {
                helpers.callback(this.options.beforeCalculateTickRotation, [this]);
            },
            calculateTickRotation: function() {
                var me = this;
                var context = me.ctx;
                var tickOpts = me.options.ticks;
                var labels = labelsFromTicks(me._ticks);
    
                // Get the width of each grid by calculating the difference
                // between x offsets between 0 and 1.
                var tickFont = parseFontOptions(tickOpts);
                context.font = tickFont.font;
    
                var labelRotation = tickOpts.minRotation || 0;
    
                if (labels.length && me.options.display && me.isHorizontal()) {
                    var originalLabelWidth = helpers.longestText(context, tickFont.font, labels, me.longestTextCache);
                    var labelWidth = originalLabelWidth;
                    var cosRotation, sinRotation;
    
                    // Allow 3 pixels x2 padding either side for label readability
                    var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
    
                    // Max label rotation can be set or default to 90 - also act as a loop counter
                    while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
                        var angleRadians = helpers.toRadians(labelRotation);
                        cosRotation = Math.cos(angleRadians);
                        sinRotation = Math.sin(angleRadians);
    
                        if (sinRotation * originalLabelWidth > me.maxHeight) {
                            // go back one step
                            labelRotation--;
                            break;
                        }
    
                        labelRotation++;
                        labelWidth = cosRotation * originalLabelWidth;
                    }
                }
    
                me.labelRotation = labelRotation;
            },
            afterCalculateTickRotation: function() {
                helpers.callback(this.options.afterCalculateTickRotation, [this]);
            },
    
            //
    
            beforeFit: function() {
                helpers.callback(this.options.beforeFit, [this]);
            },
            fit: function() {
                var me = this;
                // Reset
                var minSize = me.minSize = {
                    width: 0,
                    height: 0
                };
    
                var labels = labelsFromTicks(me._ticks);
    
                var opts = me.options;
                var tickOpts = opts.ticks;
                var scaleLabelOpts = opts.scaleLabel;
                var gridLineOpts = opts.gridLines;
                var display = opts.display;
                var isHorizontal = me.isHorizontal();
    
                var tickFont = parseFontOptions(tickOpts);
                var tickMarkLength = opts.gridLines.tickMarkLength;
    
                // Width
                if (isHorizontal) {
                    // subtract the margins to line up with the chartArea if we are a full width scale
                    minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
                } else {
                    minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
                }
    
                // height
                if (isHorizontal) {
                    minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
                } else {
                    minSize.height = me.maxHeight; // fill all the height
                }
    
                // Are we showing a title for the scale?
                if (scaleLabelOpts.display && display) {
                    var scaleLabelLineHeight = parseLineHeight(scaleLabelOpts);
                    var scaleLabelPadding = helpers.options.toPadding(scaleLabelOpts.padding);
                    var deltaHeight = scaleLabelLineHeight + scaleLabelPadding.height;
    
                    if (isHorizontal) {
                        minSize.height += deltaHeight;
                    } else {
                        minSize.width += deltaHeight;
                    }
                }
    
                // Don't bother fitting the ticks if we are not showing them
                if (tickOpts.display && display) {
                    var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, labels, me.longestTextCache);
                    var tallestLabelHeightInLines = helpers.numberOfLabelLines(labels);
                    var lineSpace = tickFont.size * 0.5;
                    var tickPadding = me.options.ticks.padding;
    
                    if (isHorizontal) {
                        // A horizontal axis is more constrained by the height.
                        me.longestLabelWidth = largestTextWidth;
    
                        var angleRadians = helpers.toRadians(me.labelRotation);
                        var cosRotation = Math.cos(angleRadians);
                        var sinRotation = Math.sin(angleRadians);
    
                        // TODO - improve this calculation
                        var labelHeight = (sinRotation * largestTextWidth)
                            + (tickFont.size * tallestLabelHeightInLines)
                            + (lineSpace * (tallestLabelHeightInLines - 1))
                            + lineSpace; // padding
    
                        minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
    
                        me.ctx.font = tickFont.font;
                        var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.font);
                        var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.font);
    
                        // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
                        // which means that the right padding is dominated by the font height
                        if (me.labelRotation !== 0) {
                            me.paddingLeft = opts.position === 'bottom' ? (cosRotation * firstLabelWidth) + 3 : (cosRotation * lineSpace) + 3; // add 3 px to move away from canvas edges
                            me.paddingRight = opts.position === 'bottom' ? (cosRotation * lineSpace) + 3 : (cosRotation * lastLabelWidth) + 3;
                        } else {
                            me.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges
                            me.paddingRight = lastLabelWidth / 2 + 3;
                        }
                    } else {
                        // A vertical axis is more constrained by the width. Labels are the
                        // dominant factor here, so get that length first and account for padding
                        if (tickOpts.mirror) {
                            largestTextWidth = 0;
                        } else {
                            // use lineSpace for consistency with horizontal axis
                            // tickPadding is not implemented for horizontal
                            largestTextWidth += tickPadding + lineSpace;
                        }
    
                        minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);
    
                        me.paddingTop = tickFont.size / 2;
                        me.paddingBottom = tickFont.size / 2;
                    }
                }
    
                me.handleMargins();
    
                me.width = minSize.width;
                me.height = minSize.height;
            },
    
            /**
             * Handle margins and padding interactions
             * @private
             */
            handleMargins: function() {
                var me = this;
                if (me.margins) {
                    me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
                    me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
                    me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
                    me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
                }
            },
    
            afterFit: function() {
                helpers.callback(this.options.afterFit, [this]);
            },
    
            // Shared Methods
            isHorizontal: function() {
                return this.options.position === 'top' || this.options.position === 'bottom';
            },
            isFullWidth: function() {
                return (this.options.fullWidth);
            },
    
            // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
            getRightValue: function(rawValue) {
                // Null and undefined values first
                if (helpers.isNullOrUndef(rawValue)) {
                    return NaN;
                }
                // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
                if (typeof rawValue === 'number' && !isFinite(rawValue)) {
                    return NaN;
                }
                // If it is in fact an object, dive in one more level
                if (rawValue) {
                    if (this.isHorizontal()) {
                        if (rawValue.x !== undefined) {
                            return this.getRightValue(rawValue.x);
                        }
                    } else if (rawValue.y !== undefined) {
                        return this.getRightValue(rawValue.y);
                    }
                }
    
                // Value is good, return it
                return rawValue;
            },
    
            /**
             * Used to get the value to display in the tooltip for the data at the given index
             * @param index
             * @param datasetIndex
             */
            getLabelForIndex: helpers.noop,
    
            /**
             * Returns the location of the given data point. Value can either be an index or a numerical value
             * The coordinate (0, 0) is at the upper-left corner of the canvas
             * @param value
             * @param index
             * @param datasetIndex
             */
            getPixelForValue: helpers.noop,
    
            /**
             * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
             * The coordinate (0, 0) is at the upper-left corner of the canvas
             * @param pixel
             */
            getValueForPixel: helpers.noop,
    
            /**
             * Returns the location of the tick at the given index
             * The coordinate (0, 0) is at the upper-left corner of the canvas
             */
            getPixelForTick: function(index) {
                var me = this;
                var offset = me.options.offset;
                if (me.isHorizontal()) {
                    var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                    var tickWidth = innerWidth / Math.max((me._ticks.length - (offset ? 0 : 1)), 1);
                    var pixel = (tickWidth * index) + me.paddingLeft;
    
                    if (offset) {
                        pixel += tickWidth / 2;
                    }
    
                    var finalVal = me.left + Math.round(pixel);
                    finalVal += me.isFullWidth() ? me.margins.left : 0;
                    return finalVal;
                }
                var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
                return me.top + (index * (innerHeight / (me._ticks.length - 1)));
            },
    
            /**
             * Utility for getting the pixel location of a percentage of scale
             * The coordinate (0, 0) is at the upper-left corner of the canvas
             */
            getPixelForDecimal: function(decimal) {
                var me = this;
                if (me.isHorizontal()) {
                    var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                    var valueOffset = (innerWidth * decimal) + me.paddingLeft;
    
                    var finalVal = me.left + Math.round(valueOffset);
                    finalVal += me.isFullWidth() ? me.margins.left : 0;
                    return finalVal;
                }
                return me.top + (decimal * me.height);
            },
    
            /**
             * Returns the pixel for the minimum chart value
             * The coordinate (0, 0) is at the upper-left corner of the canvas
             */
            getBasePixel: function() {
                return this.getPixelForValue(this.getBaseValue());
            },
    
            getBaseValue: function() {
                var me = this;
                var min = me.min;
                var max = me.max;
    
                return me.beginAtZero ? 0 :
                    min < 0 && max < 0 ? max :
                    min > 0 && max > 0 ? min :
                    0;
            },
    
            /**
             * Returns a subset of ticks to be plotted to avoid overlapping labels.
             * @private
             */
            _autoSkip: function(ticks) {
                var skipRatio;
                var me = this;
                var isHorizontal = me.isHorizontal();
                var optionTicks = me.options.ticks.minor;
                var tickCount = ticks.length;
                var labelRotationRadians = helpers.toRadians(me.labelRotation);
                var cosRotation = Math.cos(labelRotationRadians);
                var longestRotatedLabel = me.longestLabelWidth * cosRotation;
                var result = [];
                var i, tick, shouldSkip;
    
                // figure out the maximum number of gridlines to show
                var maxTicks;
                if (optionTicks.maxTicksLimit) {
                    maxTicks = optionTicks.maxTicksLimit;
                }
    
                if (isHorizontal) {
                    skipRatio = false;
    
                    if ((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount > (me.width - (me.paddingLeft + me.paddingRight))) {
                        skipRatio = 1 + Math.floor(((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount) / (me.width - (me.paddingLeft + me.paddingRight)));
                    }
    
                    // if they defined a max number of optionTicks,
                    // increase skipRatio until that number is met
                    if (maxTicks && tickCount > maxTicks) {
                        skipRatio = Math.max(skipRatio, Math.floor(tickCount / maxTicks));
                    }
                }
    
                for (i = 0; i < tickCount; i++) {
                    tick = ticks[i];
    
                    // Since we always show the last tick,we need may need to hide the last shown one before
                    shouldSkip = (skipRatio > 1 && i % skipRatio > 0) || (i % skipRatio === 0 && i + skipRatio >= tickCount);
                    if (shouldSkip && i !== tickCount - 1) {
                        // leave tick in place but make sure it's not displayed (#4635)
                        delete tick.label;
                    }
                    result.push(tick);
                }
                return result;
            },
    
            // Actually draw the scale on the canvas
            // @param {rectangle} chartArea : the area of the chart to draw full grid lines on
            draw: function(chartArea) {
                var me = this;
                var options = me.options;
                if (!options.display) {
                    return;
                }
    
                var context = me.ctx;
                var globalDefaults = defaults.global;
                var optionTicks = options.ticks.minor;
                var optionMajorTicks = options.ticks.major || optionTicks;
                var gridLines = options.gridLines;
                var scaleLabel = options.scaleLabel;
    
                var isRotated = me.labelRotation !== 0;
                var isHorizontal = me.isHorizontal();
    
                var ticks = optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();
                var tickFontColor = helpers.valueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
                var tickFont = parseFontOptions(optionTicks);
                var majorTickFontColor = helpers.valueOrDefault(optionMajorTicks.fontColor, globalDefaults.defaultFontColor);
                var majorTickFont = parseFontOptions(optionMajorTicks);
    
                var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
    
                var scaleLabelFontColor = helpers.valueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
                var scaleLabelFont = parseFontOptions(scaleLabel);
                var scaleLabelPadding = helpers.options.toPadding(scaleLabel.padding);
                var labelRotationRadians = helpers.toRadians(me.labelRotation);
    
                var itemsToDraw = [];
    
                var xTickStart = options.position === 'right' ? me.left : me.right - tl;
                var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
                var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
                var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
    
                helpers.each(ticks, function(tick, index) {
                    // autoskipper skipped this tick (#4635)
                    if (helpers.isNullOrUndef(tick.label)) {
                        return;
                    }
    
                    var label = tick.label;
                    var lineWidth, lineColor, borderDash, borderDashOffset;
                    if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {
                        // Draw the first index specially
                        lineWidth = gridLines.zeroLineWidth;
                        lineColor = gridLines.zeroLineColor;
                        borderDash = gridLines.zeroLineBorderDash;
                        borderDashOffset = gridLines.zeroLineBorderDashOffset;
                    } else {
                        lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, index);
                        lineColor = helpers.valueAtIndexOrDefault(gridLines.color, index);
                        borderDash = helpers.valueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
                        borderDashOffset = helpers.valueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
                    }
    
                    // Common properties
                    var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
                    var textAlign = 'middle';
                    var textBaseline = 'middle';
                    var tickPadding = optionTicks.padding;
    
                    if (isHorizontal) {
                        var labelYOffset = tl + tickPadding;
    
                        if (options.position === 'bottom') {
                            // bottom
                            textBaseline = !isRotated ? 'top' : 'middle';
                            textAlign = !isRotated ? 'center' : 'right';
                            labelY = me.top + labelYOffset;
                        } else {
                            // top
                            textBaseline = !isRotated ? 'bottom' : 'middle';
                            textAlign = !isRotated ? 'center' : 'left';
                            labelY = me.bottom - labelYOffset;
                        }
    
                        var xLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);
                        if (xLineValue < me.left) {
                            lineColor = 'rgba(0,0,0,0)';
                        }
                        xLineValue += helpers.aliasPixel(lineWidth);
    
                        labelX = me.getPixelForTick(index) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)
    
                        tx1 = tx2 = x1 = x2 = xLineValue;
                        ty1 = yTickStart;
                        ty2 = yTickEnd;
                        y1 = chartArea.top;
                        y2 = chartArea.bottom;
                    } else {
                        var isLeft = options.position === 'left';
                        var labelXOffset;
    
                        if (optionTicks.mirror) {
                            textAlign = isLeft ? 'left' : 'right';
                            labelXOffset = tickPadding;
                        } else {
                            textAlign = isLeft ? 'right' : 'left';
                            labelXOffset = tl + tickPadding;
                        }
    
                        labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
    
                        var yLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);
                        if (yLineValue < me.top) {
                            lineColor = 'rgba(0,0,0,0)';
                        }
                        yLineValue += helpers.aliasPixel(lineWidth);
    
                        labelY = me.getPixelForTick(index) + optionTicks.labelOffset;
    
                        tx1 = xTickStart;
                        tx2 = xTickEnd;
                        x1 = chartArea.left;
                        x2 = chartArea.right;
                        ty1 = ty2 = y1 = y2 = yLineValue;
                    }
    
                    itemsToDraw.push({
                        tx1: tx1,
                        ty1: ty1,
                        tx2: tx2,
                        ty2: ty2,
                        x1: x1,
                        y1: y1,
                        x2: x2,
                        y2: y2,
                        labelX: labelX,
                        labelY: labelY,
                        glWidth: lineWidth,
                        glColor: lineColor,
                        glBorderDash: borderDash,
                        glBorderDashOffset: borderDashOffset,
                        rotation: -1 * labelRotationRadians,
                        label: label,
                        major: tick.major,
                        textBaseline: textBaseline,
                        textAlign: textAlign
                    });
                });
    
                // Draw all of the tick labels, tick marks, and grid lines at the correct places
                helpers.each(itemsToDraw, function(itemToDraw) {
                    if (gridLines.display) {
                        context.save();
                        context.lineWidth = itemToDraw.glWidth;
                        context.strokeStyle = itemToDraw.glColor;
                        if (context.setLineDash) {
                            context.setLineDash(itemToDraw.glBorderDash);
                            context.lineDashOffset = itemToDraw.glBorderDashOffset;
                        }
    
                        context.beginPath();
    
                        if (gridLines.drawTicks) {
                            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
                            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
                        }
    
                        if (gridLines.drawOnChartArea) {
                            context.moveTo(itemToDraw.x1, itemToDraw.y1);
                            context.lineTo(itemToDraw.x2, itemToDraw.y2);
                        }
    
                        context.stroke();
                        context.restore();
                    }
    
                    if (optionTicks.display) {
                        // Make sure we draw text in the correct color and font
                        context.save();
                        context.translate(itemToDraw.labelX, itemToDraw.labelY);
                        context.rotate(itemToDraw.rotation);
                        context.font = itemToDraw.major ? majorTickFont.font : tickFont.font;
                        context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;
                        context.textBaseline = itemToDraw.textBaseline;
                        context.textAlign = itemToDraw.textAlign;
    
                        var label = itemToDraw.label;
                        if (helpers.isArray(label)) {
                            for (var i = 0, y = 0; i < label.length; ++i) {
                                // We just make sure the multiline element is a string here..
                                context.fillText('' + label[i], 0, y);
                                // apply same lineSpacing as calculated @ L#320
                                y += (tickFont.size * 1.5);
                            }
                        } else {
                            context.fillText(label, 0, 0);
                        }
                        context.restore();
                    }
                });
    
                if (scaleLabel.display) {
                    // Draw the scale label
                    var scaleLabelX;
                    var scaleLabelY;
                    var rotation = 0;
                    var halfLineHeight = parseLineHeight(scaleLabel) / 2;
    
                    if (isHorizontal) {
                        scaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width
                        scaleLabelY = options.position === 'bottom'
                            ? me.bottom - halfLineHeight - scaleLabelPadding.bottom
                            : me.top + halfLineHeight + scaleLabelPadding.top;
                    } else {
                        var isLeft = options.position === 'left';
                        scaleLabelX = isLeft
                            ? me.left + halfLineHeight + scaleLabelPadding.top
                            : me.right - halfLineHeight - scaleLabelPadding.top;
                        scaleLabelY = me.top + ((me.bottom - me.top) / 2);
                        rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
                    }
    
                    context.save();
                    context.translate(scaleLabelX, scaleLabelY);
                    context.rotate(rotation);
                    context.textAlign = 'center';
                    context.textBaseline = 'middle';
                    context.fillStyle = scaleLabelFontColor; // render in correct colour
                    context.font = scaleLabelFont.font;
                    context.fillText(scaleLabel.labelString, 0, 0);
                    context.restore();
                }
    
                if (gridLines.drawBorder) {
                    // Draw the line at the edge of the axis
                    context.lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, 0);
                    context.strokeStyle = helpers.valueAtIndexOrDefault(gridLines.color, 0);
                    var x1 = me.left;
                    var x2 = me.right;
                    var y1 = me.top;
                    var y2 = me.bottom;
    
                    var aliasPixel = helpers.aliasPixel(context.lineWidth);
                    if (isHorizontal) {
                        y1 = y2 = options.position === 'top' ? me.bottom : me.top;
                        y1 += aliasPixel;
                        y2 += aliasPixel;
                    } else {
                        x1 = x2 = options.position === 'left' ? me.right : me.left;
                        x1 += aliasPixel;
                        x2 += aliasPixel;
                    }
    
                    context.beginPath();
                    context.moveTo(x1, y1);
                    context.lineTo(x2, y2);
                    context.stroke();
                }
            }
        });
    };
    
    },{"../helpers/index":39,"./core.defaults":19,"./core.element":20,"./core.ticks":28}],27:[function(require,module,exports){
    'use strict';
    
    var defaults = require('./core.defaults');
    var helpers = require('../helpers/index');
    
    module.exports = function(Chart) {
    
        Chart.scaleService = {
            // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
            // use the new chart options to grab the correct scale
            constructors: {},
            // Use a registration function so that we can move to an ES6 map when we no longer need to support
            // old browsers
    
            // Scale config defaults
            defaults: {},
            registerScaleType: function(type, scaleConstructor, scaleDefaults) {
                this.constructors[type] = scaleConstructor;
                this.defaults[type] = helpers.clone(scaleDefaults);
            },
            getScaleConstructor: function(type) {
                return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
            },
            getScaleDefaults: function(type) {
                // Return the scale defaults merged with the global settings so that we always use the latest ones
                return this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults.scale, this.defaults[type]]) : {};
            },
            updateScaleDefaults: function(type, additions) {
                var me = this;
                if (me.defaults.hasOwnProperty(type)) {
                    me.defaults[type] = helpers.extend(me.defaults[type], additions);
                }
            },
            addScalesToLayout: function(chart) {
                // Adds each scale to the chart.boxes array to be sized accordingly
                helpers.each(chart.scales, function(scale) {
                    // Set ILayoutItem parameters for backwards compatibility
                    scale.fullWidth = scale.options.fullWidth;
                    scale.position = scale.options.position;
                    scale.weight = scale.options.weight;
                    Chart.layoutService.addBox(chart, scale);
                });
            }
        };
    };
    
    },{"../helpers/index":39,"./core.defaults":19}],28:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    
    /**
     * Namespace to hold static tick generation functions
     * @namespace Chart.Ticks
     */
    module.exports = {
        /**
         * Namespace to hold generators for different types of ticks
         * @namespace Chart.Ticks.generators
         */
        generators: {
            /**
             * Interface for the options provided to the numeric tick generator
             * @interface INumericTickGenerationOptions
             */
            /**
             * The maximum number of ticks to display
             * @name INumericTickGenerationOptions#maxTicks
             * @type Number
             */
            /**
             * The distance between each tick.
             * @name INumericTickGenerationOptions#stepSize
             * @type Number
             * @optional
             */
            /**
             * Forced minimum for the ticks. If not specified, the minimum of the data range is used to calculate the tick minimum
             * @name INumericTickGenerationOptions#min
             * @type Number
             * @optional
             */
            /**
             * The maximum value of the ticks. If not specified, the maximum of the data range is used to calculate the tick maximum
             * @name INumericTickGenerationOptions#max
             * @type Number
             * @optional
             */
    
            /**
             * Generate a set of linear ticks
             * @method Chart.Ticks.generators.linear
             * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
             * @param dataRange {IRange} the range of the data
             * @returns {Array<Number>} array of tick values
             */
            linear: function(generationOptions, dataRange) {
                var ticks = [];
                // To get a "nice" value for the tick spacing, we will use the appropriately named
                // "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
                // for details.
    
                var spacing;
                if (generationOptions.stepSize && generationOptions.stepSize > 0) {
                    spacing = generationOptions.stepSize;
                } else {
                    var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
                    spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
                }
                var niceMin = Math.floor(dataRange.min / spacing) * spacing;
                var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
    
                // If min, max and stepSize is set and they make an evenly spaced scale use it.
                if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
                    // If very close to our whole number, use it.
                    if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
                        niceMin = generationOptions.min;
                        niceMax = generationOptions.max;
                    }
                }
    
                var numSpaces = (niceMax - niceMin) / spacing;
                // If very close to our rounded value, use it.
                if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
                    numSpaces = Math.round(numSpaces);
                } else {
                    numSpaces = Math.ceil(numSpaces);
                }
    
                // Put the values into the ticks array
                ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
                for (var j = 1; j < numSpaces; ++j) {
                    ticks.push(niceMin + (j * spacing));
                }
                ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
    
                return ticks;
            },
    
            /**
             * Generate a set of logarithmic ticks
             * @method Chart.Ticks.generators.logarithmic
             * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
             * @param dataRange {IRange} the range of the data
             * @returns {Array<Number>} array of tick values
             */
            logarithmic: function(generationOptions, dataRange) {
                var ticks = [];
                var valueOrDefault = helpers.valueOrDefault;
    
                // Figure out what the max number of ticks we can support it is based on the size of
                // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
                // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
                // the graph
                var tickVal = valueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
    
                var endExp = Math.floor(helpers.log10(dataRange.max));
                var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
                var exp, significand;
    
                if (tickVal === 0) {
                    exp = Math.floor(helpers.log10(dataRange.minNotZero));
                    significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
    
                    ticks.push(tickVal);
                    tickVal = significand * Math.pow(10, exp);
                } else {
                    exp = Math.floor(helpers.log10(tickVal));
                    significand = Math.floor(tickVal / Math.pow(10, exp));
                }
    
                do {
                    ticks.push(tickVal);
    
                    ++significand;
                    if (significand === 10) {
                        significand = 1;
                        ++exp;
                    }
    
                    tickVal = significand * Math.pow(10, exp);
                } while (exp < endExp || (exp === endExp && significand < endSignificand));
    
                var lastTick = valueOrDefault(generationOptions.max, tickVal);
                ticks.push(lastTick);
    
                return ticks;
            }
        },
    
        /**
         * Namespace to hold formatters for different types of ticks
         * @namespace Chart.Ticks.formatters
         */
        formatters: {
            /**
             * Formatter for value labels
             * @method Chart.Ticks.formatters.values
             * @param value the value to display
             * @return {String|Array} the label to display
             */
            values: function(value) {
                return helpers.isArray(value) ? value : '' + value;
            },
    
            /**
             * Formatter for linear numeric ticks
             * @method Chart.Ticks.formatters.linear
             * @param tickValue {Number} the value to be formatted
             * @param index {Number} the position of the tickValue parameter in the ticks array
             * @param ticks {Array<Number>} the list of ticks being converted
             * @return {String} string representation of the tickValue parameter
             */
            linear: function(tickValue, index, ticks) {
                // If we have lots of ticks, don't use the ones
                var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
    
                // If we have a number like 2.5 as the delta, figure out how many decimal places we need
                if (Math.abs(delta) > 1) {
                    if (tickValue !== Math.floor(tickValue)) {
                        // not an integer
                        delta = tickValue - Math.floor(tickValue);
                    }
                }
    
                var logDelta = helpers.log10(Math.abs(delta));
                var tickString = '';
    
                if (tickValue !== 0) {
                    var numDecimal = -1 * Math.floor(logDelta);
                    numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
                    tickString = tickValue.toFixed(numDecimal);
                } else {
                    tickString = '0'; // never show decimal places for 0
                }
    
                return tickString;
            },
    
            logarithmic: function(tickValue, index, ticks) {
                var remain = tickValue / (Math.pow(10, Math.floor(helpers.log10(tickValue))));
    
                if (tickValue === 0) {
                    return '0';
                } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
                    return tickValue.toExponential();
                }
                return '';
            }
        }
    };
    
    },{"../helpers/index":39}],29:[function(require,module,exports){
    'use strict';
    
    var defaults = require('./core.defaults');
    var Element = require('./core.element');
    var helpers = require('../helpers/index');
    
    defaults._set('global', {
        tooltips: {
            enabled: true,
            custom: null,
            mode: 'nearest',
            position: 'average',
            intersect: true,
            backgroundColor: 'rgba(0,0,0,0.8)',
            titleFontStyle: 'bold',
            titleSpacing: 2,
            titleMarginBottom: 6,
            titleFontColor: '#fff',
            titleAlign: 'left',
            bodySpacing: 2,
            bodyFontColor: '#fff',
            bodyAlign: 'left',
            footerFontStyle: 'bold',
            footerSpacing: 2,
            footerMarginTop: 6,
            footerFontColor: '#fff',
            footerAlign: 'left',
            yPadding: 6,
            xPadding: 6,
            caretPadding: 2,
            caretSize: 5,
            cornerRadius: 6,
            multiKeyBackground: '#fff',
            displayColors: true,
            borderColor: 'rgba(0,0,0,0)',
            borderWidth: 0,
            callbacks: {
                // Args are: (tooltipItems, data)
                beforeTitle: helpers.noop,
                title: function(tooltipItems, data) {
                    // Pick first xLabel for now
                    var title = '';
                    var labels = data.labels;
                    var labelCount = labels ? labels.length : 0;
    
                    if (tooltipItems.length > 0) {
                        var item = tooltipItems[0];
    
                        if (item.xLabel) {
                            title = item.xLabel;
                        } else if (labelCount > 0 && item.index < labelCount) {
                            title = labels[item.index];
                        }
                    }
    
                    return title;
                },
                afterTitle: helpers.noop,
    
                // Args are: (tooltipItems, data)
                beforeBody: helpers.noop,
    
                // Args are: (tooltipItem, data)
                beforeLabel: helpers.noop,
                label: function(tooltipItem, data) {
                    var label = data.datasets[tooltipItem.datasetIndex].label || '';
    
                    if (label) {
                        label += ': ';
                    }
                    label += tooltipItem.yLabel;
                    return label;
                },
                labelColor: function(tooltipItem, chart) {
                    var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
                    var activeElement = meta.data[tooltipItem.index];
                    var view = activeElement._view;
                    return {
                        borderColor: view.borderColor,
                        backgroundColor: view.backgroundColor
                    };
                },
                labelTextColor: function() {
                    return this._options.bodyFontColor;
                },
                afterLabel: helpers.noop,
    
                // Args are: (tooltipItems, data)
                afterBody: helpers.noop,
    
                // Args are: (tooltipItems, data)
                beforeFooter: helpers.noop,
                footer: helpers.noop,
                afterFooter: helpers.noop
            }
        }
    });
    
    module.exports = function(Chart) {
    
        /**
          * Helper method to merge the opacity into a color
          */
        function mergeOpacity(colorString, opacity) {
            var color = helpers.color(colorString);
            return color.alpha(opacity * color.alpha()).rgbaString();
        }
    
        // Helper to push or concat based on if the 2nd parameter is an array or not
        function pushOrConcat(base, toPush) {
            if (toPush) {
                if (helpers.isArray(toPush)) {
                    // base = base.concat(toPush);
                    Array.prototype.push.apply(base, toPush);
                } else {
                    base.push(toPush);
                }
            }
    
            return base;
        }
    
        // Private helper to create a tooltip item model
        // @param element : the chart element (point, arc, bar) to create the tooltip item for
        // @return : new tooltip item
        function createTooltipItem(element) {
            var xScale = element._xScale;
            var yScale = element._yScale || element._scale; // handle radar || polarArea charts
            var index = element._index;
            var datasetIndex = element._datasetIndex;
    
            return {
                xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
                yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
                index: index,
                datasetIndex: datasetIndex,
                x: element._model.x,
                y: element._model.y
            };
        }
    
        /**
         * Helper to get the reset model for the tooltip
         * @param tooltipOpts {Object} the tooltip options
         */
        function getBaseModel(tooltipOpts) {
            var globalDefaults = defaults.global;
            var valueOrDefault = helpers.valueOrDefault;
    
            return {
                // Positioning
                xPadding: tooltipOpts.xPadding,
                yPadding: tooltipOpts.yPadding,
                xAlign: tooltipOpts.xAlign,
                yAlign: tooltipOpts.yAlign,
    
                // Body
                bodyFontColor: tooltipOpts.bodyFontColor,
                _bodyFontFamily: valueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
                _bodyFontStyle: valueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
                _bodyAlign: tooltipOpts.bodyAlign,
                bodyFontSize: valueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
                bodySpacing: tooltipOpts.bodySpacing,
    
                // Title
                titleFontColor: tooltipOpts.titleFontColor,
                _titleFontFamily: valueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
                _titleFontStyle: valueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
                titleFontSize: valueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
                _titleAlign: tooltipOpts.titleAlign,
                titleSpacing: tooltipOpts.titleSpacing,
                titleMarginBottom: tooltipOpts.titleMarginBottom,
    
                // Footer
                footerFontColor: tooltipOpts.footerFontColor,
                _footerFontFamily: valueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
                _footerFontStyle: valueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
                footerFontSize: valueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
                _footerAlign: tooltipOpts.footerAlign,
                footerSpacing: tooltipOpts.footerSpacing,
                footerMarginTop: tooltipOpts.footerMarginTop,
    
                // Appearance
                caretSize: tooltipOpts.caretSize,
                cornerRadius: tooltipOpts.cornerRadius,
                backgroundColor: tooltipOpts.backgroundColor,
                opacity: 0,
                legendColorBackground: tooltipOpts.multiKeyBackground,
                displayColors: tooltipOpts.displayColors,
                borderColor: tooltipOpts.borderColor,
                borderWidth: tooltipOpts.borderWidth
            };
        }
    
        /**
         * Get the size of the tooltip
         */
        function getTooltipSize(tooltip, model) {
            var ctx = tooltip._chart.ctx;
    
            var height = model.yPadding * 2; // Tooltip Padding
            var width = 0;
    
            // Count of all lines in the body
            var body = model.body;
            var combinedBodyLength = body.reduce(function(count, bodyItem) {
                return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
            }, 0);
            combinedBodyLength += model.beforeBody.length + model.afterBody.length;
    
            var titleLineCount = model.title.length;
            var footerLineCount = model.footer.length;
            var titleFontSize = model.titleFontSize;
            var bodyFontSize = model.bodyFontSize;
            var footerFontSize = model.footerFontSize;
    
            height += titleLineCount * titleFontSize; // Title Lines
            height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
            height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
            height += combinedBodyLength * bodyFontSize; // Body Lines
            height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
            height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
            height += footerLineCount * (footerFontSize); // Footer Lines
            height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
    
            // Title width
            var widthPadding = 0;
            var maxLineWidth = function(line) {
                width = Math.max(width, ctx.measureText(line).width + widthPadding);
            };
    
            ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
            helpers.each(model.title, maxLineWidth);
    
            // Body width
            ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
            helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
    
            // Body lines may include some extra width due to the color box
            widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
            helpers.each(body, function(bodyItem) {
                helpers.each(bodyItem.before, maxLineWidth);
                helpers.each(bodyItem.lines, maxLineWidth);
                helpers.each(bodyItem.after, maxLineWidth);
            });
    
            // Reset back to 0
            widthPadding = 0;
    
            // Footer width
            ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
            helpers.each(model.footer, maxLineWidth);
    
            // Add padding
            width += 2 * model.xPadding;
    
            return {
                width: width,
                height: height
            };
        }
    
        /**
         * Helper to get the alignment of a tooltip given the size
         */
        function determineAlignment(tooltip, size) {
            var model = tooltip._model;
            var chart = tooltip._chart;
            var chartArea = tooltip._chart.chartArea;
            var xAlign = 'center';
            var yAlign = 'center';
    
            if (model.y < size.height) {
                yAlign = 'top';
            } else if (model.y > (chart.height - size.height)) {
                yAlign = 'bottom';
            }
    
            var lf, rf; // functions to determine left, right alignment
            var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
            var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
            var midX = (chartArea.left + chartArea.right) / 2;
            var midY = (chartArea.top + chartArea.bottom) / 2;
    
            if (yAlign === 'center') {
                lf = function(x) {
                    return x <= midX;
                };
                rf = function(x) {
                    return x > midX;
                };
            } else {
                lf = function(x) {
                    return x <= (size.width / 2);
                };
                rf = function(x) {
                    return x >= (chart.width - (size.width / 2));
                };
            }
    
            olf = function(x) {
                return x + size.width > chart.width;
            };
            orf = function(x) {
                return x - size.width < 0;
            };
            yf = function(y) {
                return y <= midY ? 'top' : 'bottom';
            };
    
            if (lf(model.x)) {
                xAlign = 'left';
    
                // Is tooltip too wide and goes over the right side of the chart.?
                if (olf(model.x)) {
                    xAlign = 'center';
                    yAlign = yf(model.y);
                }
            } else if (rf(model.x)) {
                xAlign = 'right';
    
                // Is tooltip too wide and goes outside left edge of canvas?
                if (orf(model.x)) {
                    xAlign = 'center';
                    yAlign = yf(model.y);
                }
            }
    
            var opts = tooltip._options;
            return {
                xAlign: opts.xAlign ? opts.xAlign : xAlign,
                yAlign: opts.yAlign ? opts.yAlign : yAlign
            };
        }
    
        /**
         * @Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
         */
        function getBackgroundPoint(vm, size, alignment) {
            // Background Position
            var x = vm.x;
            var y = vm.y;
    
            var caretSize = vm.caretSize;
            var caretPadding = vm.caretPadding;
            var cornerRadius = vm.cornerRadius;
            var xAlign = alignment.xAlign;
            var yAlign = alignment.yAlign;
            var paddingAndSize = caretSize + caretPadding;
            var radiusAndPadding = cornerRadius + caretPadding;
    
            if (xAlign === 'right') {
                x -= size.width;
            } else if (xAlign === 'center') {
                x -= (size.width / 2);
            }
    
            if (yAlign === 'top') {
                y += paddingAndSize;
            } else if (yAlign === 'bottom') {
                y -= size.height + paddingAndSize;
            } else {
                y -= (size.height / 2);
            }
    
            if (yAlign === 'center') {
                if (xAlign === 'left') {
                    x += paddingAndSize;
                } else if (xAlign === 'right') {
                    x -= paddingAndSize;
                }
            } else if (xAlign === 'left') {
                x -= radiusAndPadding;
            } else if (xAlign === 'right') {
                x += radiusAndPadding;
            }
    
            return {
                x: x,
                y: y
            };
        }
    
        Chart.Tooltip = Element.extend({
            initialize: function() {
                this._model = getBaseModel(this._options);
                this._lastActive = [];
            },
    
            // Get the title
            // Args are: (tooltipItem, data)
            getTitle: function() {
                var me = this;
                var opts = me._options;
                var callbacks = opts.callbacks;
    
                var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
                var title = callbacks.title.apply(me, arguments);
                var afterTitle = callbacks.afterTitle.apply(me, arguments);
    
                var lines = [];
                lines = pushOrConcat(lines, beforeTitle);
                lines = pushOrConcat(lines, title);
                lines = pushOrConcat(lines, afterTitle);
    
                return lines;
            },
    
            // Args are: (tooltipItem, data)
            getBeforeBody: function() {
                var lines = this._options.callbacks.beforeBody.apply(this, arguments);
                return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
            },
    
            // Args are: (tooltipItem, data)
            getBody: function(tooltipItems, data) {
                var me = this;
                var callbacks = me._options.callbacks;
                var bodyItems = [];
    
                helpers.each(tooltipItems, function(tooltipItem) {
                    var bodyItem = {
                        before: [],
                        lines: [],
                        after: []
                    };
                    pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
                    pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
                    pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
    
                    bodyItems.push(bodyItem);
                });
    
                return bodyItems;
            },
    
            // Args are: (tooltipItem, data)
            getAfterBody: function() {
                var lines = this._options.callbacks.afterBody.apply(this, arguments);
                return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
            },
    
            // Get the footer and beforeFooter and afterFooter lines
            // Args are: (tooltipItem, data)
            getFooter: function() {
                var me = this;
                var callbacks = me._options.callbacks;
    
                var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
                var footer = callbacks.footer.apply(me, arguments);
                var afterFooter = callbacks.afterFooter.apply(me, arguments);
    
                var lines = [];
                lines = pushOrConcat(lines, beforeFooter);
                lines = pushOrConcat(lines, footer);
                lines = pushOrConcat(lines, afterFooter);
    
                return lines;
            },
    
            update: function(changed) {
                var me = this;
                var opts = me._options;
    
                // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
                // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
                // which breaks any animations.
                var existingModel = me._model;
                var model = me._model = getBaseModel(opts);
                var active = me._active;
    
                var data = me._data;
    
                // In the case where active.length === 0 we need to keep these at existing values for good animations
                var alignment = {
                    xAlign: existingModel.xAlign,
                    yAlign: existingModel.yAlign
                };
                var backgroundPoint = {
                    x: existingModel.x,
                    y: existingModel.y
                };
                var tooltipSize = {
                    width: existingModel.width,
                    height: existingModel.height
                };
                var tooltipPosition = {
                    x: existingModel.caretX,
                    y: existingModel.caretY
                };
    
                var i, len;
    
                if (active.length) {
                    model.opacity = 1;
    
                    var labelColors = [];
                    var labelTextColors = [];
                    tooltipPosition = Chart.Tooltip.positioners[opts.position].call(me, active, me._eventPosition);
    
                    var tooltipItems = [];
                    for (i = 0, len = active.length; i < len; ++i) {
                        tooltipItems.push(createTooltipItem(active[i]));
                    }
    
                    // If the user provided a filter function, use it to modify the tooltip items
                    if (opts.filter) {
                        tooltipItems = tooltipItems.filter(function(a) {
                            return opts.filter(a, data);
                        });
                    }
    
                    // If the user provided a sorting function, use it to modify the tooltip items
                    if (opts.itemSort) {
                        tooltipItems = tooltipItems.sort(function(a, b) {
                            return opts.itemSort(a, b, data);
                        });
                    }
    
                    // Determine colors for boxes
                    helpers.each(tooltipItems, function(tooltipItem) {
                        labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
                        labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
                    });
    
    
                    // Build the Text Lines
                    model.title = me.getTitle(tooltipItems, data);
                    model.beforeBody = me.getBeforeBody(tooltipItems, data);
                    model.body = me.getBody(tooltipItems, data);
                    model.afterBody = me.getAfterBody(tooltipItems, data);
                    model.footer = me.getFooter(tooltipItems, data);
    
                    // Initial positioning and colors
                    model.x = Math.round(tooltipPosition.x);
                    model.y = Math.round(tooltipPosition.y);
                    model.caretPadding = opts.caretPadding;
                    model.labelColors = labelColors;
                    model.labelTextColors = labelTextColors;
    
                    // data points
                    model.dataPoints = tooltipItems;
    
                    // We need to determine alignment of the tooltip
                    tooltipSize = getTooltipSize(this, model);
                    alignment = determineAlignment(this, tooltipSize);
                    // Final Size and Position
                    backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
                } else {
                    model.opacity = 0;
                }
    
                model.xAlign = alignment.xAlign;
                model.yAlign = alignment.yAlign;
                model.x = backgroundPoint.x;
                model.y = backgroundPoint.y;
                model.width = tooltipSize.width;
                model.height = tooltipSize.height;
    
                // Point where the caret on the tooltip points to
                model.caretX = tooltipPosition.x;
                model.caretY = tooltipPosition.y;
    
                me._model = model;
    
                if (changed && opts.custom) {
                    opts.custom.call(me, model);
                }
    
                return me;
            },
            drawCaret: function(tooltipPoint, size) {
                var ctx = this._chart.ctx;
                var vm = this._view;
                var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
    
                ctx.lineTo(caretPosition.x1, caretPosition.y1);
                ctx.lineTo(caretPosition.x2, caretPosition.y2);
                ctx.lineTo(caretPosition.x3, caretPosition.y3);
            },
            getCaretPosition: function(tooltipPoint, size, vm) {
                var x1, x2, x3, y1, y2, y3;
                var caretSize = vm.caretSize;
                var cornerRadius = vm.cornerRadius;
                var xAlign = vm.xAlign;
                var yAlign = vm.yAlign;
                var ptX = tooltipPoint.x;
                var ptY = tooltipPoint.y;
                var width = size.width;
                var height = size.height;
    
                if (yAlign === 'center') {
                    y2 = ptY + (height / 2);
    
                    if (xAlign === 'left') {
                        x1 = ptX;
                        x2 = x1 - caretSize;
                        x3 = x1;
    
                        y1 = y2 + caretSize;
                        y3 = y2 - caretSize;
                    } else {
                        x1 = ptX + width;
                        x2 = x1 + caretSize;
                        x3 = x1;
    
                        y1 = y2 - caretSize;
                        y3 = y2 + caretSize;
                    }
                } else {
                    if (xAlign === 'left') {
                        x2 = ptX + cornerRadius + (caretSize);
                        x1 = x2 - caretSize;
                        x3 = x2 + caretSize;
                    } else if (xAlign === 'right') {
                        x2 = ptX + width - cornerRadius - caretSize;
                        x1 = x2 - caretSize;
                        x3 = x2 + caretSize;
                    } else {
                        x2 = ptX + (width / 2);
                        x1 = x2 - caretSize;
                        x3 = x2 + caretSize;
                    }
                    if (yAlign === 'top') {
                        y1 = ptY;
                        y2 = y1 - caretSize;
                        y3 = y1;
                    } else {
                        y1 = ptY + height;
                        y2 = y1 + caretSize;
                        y3 = y1;
                        // invert drawing order
                        var tmp = x3;
                        x3 = x1;
                        x1 = tmp;
                    }
                }
                return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
            },
            drawTitle: function(pt, vm, ctx, opacity) {
                var title = vm.title;
    
                if (title.length) {
                    ctx.textAlign = vm._titleAlign;
                    ctx.textBaseline = 'top';
    
                    var titleFontSize = vm.titleFontSize;
                    var titleSpacing = vm.titleSpacing;
    
                    ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
                    ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
    
                    var i, len;
                    for (i = 0, len = title.length; i < len; ++i) {
                        ctx.fillText(title[i], pt.x, pt.y);
                        pt.y += titleFontSize + titleSpacing; // Line Height and spacing
    
                        if (i + 1 === title.length) {
                            pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
                        }
                    }
                }
            },
            drawBody: function(pt, vm, ctx, opacity) {
                var bodyFontSize = vm.bodyFontSize;
                var bodySpacing = vm.bodySpacing;
                var body = vm.body;
    
                ctx.textAlign = vm._bodyAlign;
                ctx.textBaseline = 'top';
                ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
    
                // Before Body
                var xLinePadding = 0;
                var fillLineOfText = function(line) {
                    ctx.fillText(line, pt.x + xLinePadding, pt.y);
                    pt.y += bodyFontSize + bodySpacing;
                };
    
                // Before body lines
                ctx.fillStyle = mergeOpacity(vm.bodyFontColor, opacity);
                helpers.each(vm.beforeBody, fillLineOfText);
    
                var drawColorBoxes = vm.displayColors;
                xLinePadding = drawColorBoxes ? (bodyFontSize + 2) : 0;
    
                // Draw body lines now
                helpers.each(body, function(bodyItem, i) {
                    var textColor = mergeOpacity(vm.labelTextColors[i], opacity);
                    ctx.fillStyle = textColor;
                    helpers.each(bodyItem.before, fillLineOfText);
    
                    helpers.each(bodyItem.lines, function(line) {
                        // Draw Legend-like boxes if needed
                        if (drawColorBoxes) {
                            // Fill a white rect so that colours merge nicely if the opacity is < 1
                            ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
                            ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
    
                            // Border
                            ctx.lineWidth = 1;
                            ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
                            ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
    
                            // Inner square
                            ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
                            ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                            ctx.fillStyle = textColor;
                        }
    
                        fillLineOfText(line);
                    });
    
                    helpers.each(bodyItem.after, fillLineOfText);
                });
    
                // Reset back to 0 for after body
                xLinePadding = 0;
    
                // After body lines
                helpers.each(vm.afterBody, fillLineOfText);
                pt.y -= bodySpacing; // Remove last body spacing
            },
            drawFooter: function(pt, vm, ctx, opacity) {
                var footer = vm.footer;
    
                if (footer.length) {
                    pt.y += vm.footerMarginTop;
    
                    ctx.textAlign = vm._footerAlign;
                    ctx.textBaseline = 'top';
    
                    ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
                    ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
    
                    helpers.each(footer, function(line) {
                        ctx.fillText(line, pt.x, pt.y);
                        pt.y += vm.footerFontSize + vm.footerSpacing;
                    });
                }
            },
            drawBackground: function(pt, vm, ctx, tooltipSize, opacity) {
                ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
                ctx.strokeStyle = mergeOpacity(vm.borderColor, opacity);
                ctx.lineWidth = vm.borderWidth;
                var xAlign = vm.xAlign;
                var yAlign = vm.yAlign;
                var x = pt.x;
                var y = pt.y;
                var width = tooltipSize.width;
                var height = tooltipSize.height;
                var radius = vm.cornerRadius;
    
                ctx.beginPath();
                ctx.moveTo(x + radius, y);
                if (yAlign === 'top') {
                    this.drawCaret(pt, tooltipSize);
                }
                ctx.lineTo(x + width - radius, y);
                ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
                if (yAlign === 'center' && xAlign === 'right') {
                    this.drawCaret(pt, tooltipSize);
                }
                ctx.lineTo(x + width, y + height - radius);
                ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
                if (yAlign === 'bottom') {
                    this.drawCaret(pt, tooltipSize);
                }
                ctx.lineTo(x + radius, y + height);
                ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
                if (yAlign === 'center' && xAlign === 'left') {
                    this.drawCaret(pt, tooltipSize);
                }
                ctx.lineTo(x, y + radius);
                ctx.quadraticCurveTo(x, y, x + radius, y);
                ctx.closePath();
    
                ctx.fill();
    
                if (vm.borderWidth > 0) {
                    ctx.stroke();
                }
            },
            draw: function() {
                var ctx = this._chart.ctx;
                var vm = this._view;
    
                if (vm.opacity === 0) {
                    return;
                }
    
                var tooltipSize = {
                    width: vm.width,
                    height: vm.height
                };
                var pt = {
                    x: vm.x,
                    y: vm.y
                };
    
                // IE11/Edge does not like very small opacities, so snap to 0
                var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
    
                // Truthy/falsey value for empty tooltip
                var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;
    
                if (this._options.enabled && hasTooltipContent) {
                    // Draw Background
                    this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
    
                    // Draw Title, Body, and Footer
                    pt.x += vm.xPadding;
                    pt.y += vm.yPadding;
    
                    // Titles
                    this.drawTitle(pt, vm, ctx, opacity);
    
                    // Body
                    this.drawBody(pt, vm, ctx, opacity);
    
                    // Footer
                    this.drawFooter(pt, vm, ctx, opacity);
                }
            },
    
            /**
             * Handle an event
             * @private
             * @param {IEvent} event - The event to handle
             * @returns {Boolean} true if the tooltip changed
             */
            handleEvent: function(e) {
                var me = this;
                var options = me._options;
                var changed = false;
    
                me._lastActive = me._lastActive || [];
    
                // Find Active Elements for tooltips
                if (e.type === 'mouseout') {
                    me._active = [];
                } else {
                    me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
                }
    
                // Remember Last Actives
                changed = !helpers.arrayEquals(me._active, me._lastActive);
    
                // If tooltip didn't change, do not handle the target event
                if (!changed) {
                    return false;
                }
    
                me._lastActive = me._active;
    
                if (options.enabled || options.custom) {
                    me._eventPosition = {
                        x: e.x,
                        y: e.y
                    };
    
                    var model = me._model;
                    me.update(true);
                    me.pivot();
    
                    // See if our tooltip position changed
                    changed |= (model.x !== me._model.x) || (model.y !== me._model.y);
                }
    
                return changed;
            }
        });
    
        /**
         * @namespace Chart.Tooltip.positioners
         */
        Chart.Tooltip.positioners = {
            /**
             * Average mode places the tooltip at the average position of the elements shown
             * @function Chart.Tooltip.positioners.average
             * @param elements {ChartElement[]} the elements being displayed in the tooltip
             * @returns {Point} tooltip position
             */
            average: function(elements) {
                if (!elements.length) {
                    return false;
                }
    
                var i, len;
                var x = 0;
                var y = 0;
                var count = 0;
    
                for (i = 0, len = elements.length; i < len; ++i) {
                    var el = elements[i];
                    if (el && el.hasValue()) {
                        var pos = el.tooltipPosition();
                        x += pos.x;
                        y += pos.y;
                        ++count;
                    }
                }
    
                return {
                    x: Math.round(x / count),
                    y: Math.round(y / count)
                };
            },
    
            /**
             * Gets the tooltip position nearest of the item nearest to the event position
             * @function Chart.Tooltip.positioners.nearest
             * @param elements {Chart.Element[]} the tooltip elements
             * @param eventPosition {Point} the position of the event in canvas coordinates
             * @returns {Point} the tooltip position
             */
            nearest: function(elements, eventPosition) {
                var x = eventPosition.x;
                var y = eventPosition.y;
                var minDistance = Number.POSITIVE_INFINITY;
                var i, len, nearestElement;
    
                for (i = 0, len = elements.length; i < len; ++i) {
                    var el = elements[i];
                    if (el && el.hasValue()) {
                        var center = el.getCenterPoint();
                        var d = helpers.distanceBetweenPoints(eventPosition, center);
    
                        if (d < minDistance) {
                            minDistance = d;
                            nearestElement = el;
                        }
                    }
                }
    
                if (nearestElement) {
                    var tp = nearestElement.tooltipPosition();
                    x = tp.x;
                    y = tp.y;
                }
    
                return {
                    x: x,
                    y: y
                };
            }
        };
    };
    
    },{"../helpers/index":39,"./core.defaults":19,"./core.element":20}],30:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var Element = require('../core/core.element');
    var helpers = require('../helpers/index');
    
    defaults._set('global', {
        elements: {
            arc: {
                backgroundColor: defaults.global.defaultColor,
                borderColor: '#fff',
                borderWidth: 2
            }
        }
    });
    
    module.exports = Element.extend({
        inLabelRange: function(mouseX) {
            var vm = this._view;
    
            if (vm) {
                return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
            }
            return false;
        },
    
        inRange: function(chartX, chartY) {
            var vm = this._view;
    
            if (vm) {
                var pointRelativePosition = helpers.getAngleFromPoint(vm, {x: chartX, y: chartY});
                var	angle = pointRelativePosition.angle;
                var distance = pointRelativePosition.distance;
    
                // Sanitise angle range
                var startAngle = vm.startAngle;
                var endAngle = vm.endAngle;
                while (endAngle < startAngle) {
                    endAngle += 2.0 * Math.PI;
                }
                while (angle > endAngle) {
                    angle -= 2.0 * Math.PI;
                }
                while (angle < startAngle) {
                    angle += 2.0 * Math.PI;
                }
    
                // Check if within the range of the open/close angle
                var betweenAngles = (angle >= startAngle && angle <= endAngle);
                var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);
    
                return (betweenAngles && withinRadius);
            }
            return false;
        },
    
        getCenterPoint: function() {
            var vm = this._view;
            var halfAngle = (vm.startAngle + vm.endAngle) / 2;
            var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
            return {
                x: vm.x + Math.cos(halfAngle) * halfRadius,
                y: vm.y + Math.sin(halfAngle) * halfRadius
            };
        },
    
        getArea: function() {
            var vm = this._view;
            return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
        },
    
        tooltipPosition: function() {
            var vm = this._view;
            var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
            var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
    
            return {
                x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
                y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
            };
        },
    
        draw: function() {
            var ctx = this._chart.ctx;
            var vm = this._view;
            var sA = vm.startAngle;
            var eA = vm.endAngle;
    
            ctx.beginPath();
    
            ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
            ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
    
            ctx.closePath();
            ctx.strokeStyle = vm.borderColor;
            ctx.lineWidth = vm.borderWidth;
    
            ctx.fillStyle = vm.backgroundColor;
    
            ctx.fill();
            ctx.lineJoin = 'bevel';
    
            if (vm.borderWidth) {
                ctx.stroke();
            }
        }
    });
    
    },{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],31:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var Element = require('../core/core.element');
    var helpers = require('../helpers/index');
    
    var globalDefaults = defaults.global;
    
    defaults._set('global', {
        elements: {
            line: {
                tension: 0.4,
                backgroundColor: globalDefaults.defaultColor,
                borderWidth: 3,
                borderColor: globalDefaults.defaultColor,
                borderCapStyle: 'butt',
                borderDash: [],
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                capBezierPoints: true,
                fill: true, // do we fill in the area between the line and its base axis
            }
        }
    });
    
    module.exports = Element.extend({
        draw: function() {
            var me = this;
            var vm = me._view;
            var ctx = me._chart.ctx;
            var spanGaps = vm.spanGaps;
            var points = me._children.slice(); // clone array
            var globalOptionLineElements = globalDefaults.elements.line;
            var lastDrawnIndex = -1;
            var index, current, previous, currentVM;
    
            // If we are looping, adding the first point again
            if (me._loop && points.length) {
                points.push(points[0]);
            }
    
            ctx.save();
    
            // Stroke Line Options
            ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
    
            // IE 9 and 10 do not support line dash
            if (ctx.setLineDash) {
                ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
            }
    
            ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
            ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
            ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
            ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
    
            // Stroke Line
            ctx.beginPath();
            lastDrawnIndex = -1;
    
            for (index = 0; index < points.length; ++index) {
                current = points[index];
                previous = helpers.previousItem(points, index);
                currentVM = current._view;
    
                // First point moves to it's starting position no matter what
                if (index === 0) {
                    if (!currentVM.skip) {
                        ctx.moveTo(currentVM.x, currentVM.y);
                        lastDrawnIndex = index;
                    }
                } else {
                    previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
    
                    if (!currentVM.skip) {
                        if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
                            // There was a gap and this is the first point after the gap
                            ctx.moveTo(currentVM.x, currentVM.y);
                        } else {
                            // Line to next point
                            helpers.canvas.lineTo(ctx, previous._view, current._view);
                        }
                        lastDrawnIndex = index;
                    }
                }
            }
    
            ctx.stroke();
            ctx.restore();
        }
    });
    
    },{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],32:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var Element = require('../core/core.element');
    var helpers = require('../helpers/index');
    
    var defaultColor = defaults.global.defaultColor;
    
    defaults._set('global', {
        elements: {
            point: {
                radius: 3,
                pointStyle: 'circle',
                backgroundColor: defaultColor,
                borderColor: defaultColor,
                borderWidth: 1,
                // Hover
                hitRadius: 1,
                hoverRadius: 4,
                hoverBorderWidth: 1
            }
        }
    });
    
    function xRange(mouseX) {
        var vm = this._view;
        return vm ? (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
    }
    
    function yRange(mouseY) {
        var vm = this._view;
        return vm ? (Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
    }
    
    module.exports = Element.extend({
        inRange: function(mouseX, mouseY) {
            var vm = this._view;
            return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
        },
    
        inLabelRange: xRange,
        inXRange: xRange,
        inYRange: yRange,
    
        getCenterPoint: function() {
            var vm = this._view;
            return {
                x: vm.x,
                y: vm.y
            };
        },
    
        getArea: function() {
            return Math.PI * Math.pow(this._view.radius, 2);
        },
    
        tooltipPosition: function() {
            var vm = this._view;
            return {
                x: vm.x,
                y: vm.y,
                padding: vm.radius + vm.borderWidth
            };
        },
    
        draw: function(chartArea) {
            var vm = this._view;
            var model = this._model;
            var ctx = this._chart.ctx;
            var pointStyle = vm.pointStyle;
            var radius = vm.radius;
            var x = vm.x;
            var y = vm.y;
            var color = helpers.color;
            var errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)
            var ratio = 0;
    
            if (vm.skip) {
                return;
            }
    
            ctx.strokeStyle = vm.borderColor || defaultColor;
            ctx.lineWidth = helpers.valueOrDefault(vm.borderWidth, defaults.global.elements.point.borderWidth);
            ctx.fillStyle = vm.backgroundColor || defaultColor;
    
            // Cliping for Points.
            // going out from inner charArea?
            if ((chartArea !== undefined) && ((model.x < chartArea.left) || (chartArea.right * errMargin < model.x) || (model.y < chartArea.top) || (chartArea.bottom * errMargin < model.y))) {
                // Point fade out
                if (model.x < chartArea.left) {
                    ratio = (x - model.x) / (chartArea.left - model.x);
                } else if (chartArea.right * errMargin < model.x) {
                    ratio = (model.x - x) / (model.x - chartArea.right);
                } else if (model.y < chartArea.top) {
                    ratio = (y - model.y) / (chartArea.top - model.y);
                } else if (chartArea.bottom * errMargin < model.y) {
                    ratio = (model.y - y) / (model.y - chartArea.bottom);
                }
                ratio = Math.round(ratio * 100) / 100;
                ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
                ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
            }
    
            helpers.canvas.drawPoint(ctx, pointStyle, radius, x, y);
        }
    });
    
    },{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],33:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var Element = require('../core/core.element');
    
    defaults._set('global', {
        elements: {
            rectangle: {
                backgroundColor: defaults.global.defaultColor,
                borderColor: defaults.global.defaultColor,
                borderSkipped: 'bottom',
                borderWidth: 0
            }
        }
    });
    
    function isVertical(bar) {
        return bar._view.width !== undefined;
    }
    
    /**
     * Helper function to get the bounds of the bar regardless of the orientation
     * @param bar {Chart.Element.Rectangle} the bar
     * @return {Bounds} bounds of the bar
     * @private
     */
    function getBarBounds(bar) {
        var vm = bar._view;
        var x1, x2, y1, y2;
    
        if (isVertical(bar)) {
            // vertical
            var halfWidth = vm.width / 2;
            x1 = vm.x - halfWidth;
            x2 = vm.x + halfWidth;
            y1 = Math.min(vm.y, vm.base);
            y2 = Math.max(vm.y, vm.base);
        } else {
            // horizontal bar
            var halfHeight = vm.height / 2;
            x1 = Math.min(vm.x, vm.base);
            x2 = Math.max(vm.x, vm.base);
            y1 = vm.y - halfHeight;
            y2 = vm.y + halfHeight;
        }
    
        return {
            left: x1,
            top: y1,
            right: x2,
            bottom: y2
        };
    }
    
    module.exports = Element.extend({
        draw: function() {
            var ctx = this._chart.ctx;
            var vm = this._view;
            var left, right, top, bottom, signX, signY, borderSkipped;
            var borderWidth = vm.borderWidth;
    
            if (!vm.horizontal) {
                // bar
                left = vm.x - vm.width / 2;
                right = vm.x + vm.width / 2;
                top = vm.y;
                bottom = vm.base;
                signX = 1;
                signY = bottom > top ? 1 : -1;
                borderSkipped = vm.borderSkipped || 'bottom';
            } else {
                // horizontal bar
                left = vm.base;
                right = vm.x;
                top = vm.y - vm.height / 2;
                bottom = vm.y + vm.height / 2;
                signX = right > left ? 1 : -1;
                signY = 1;
                borderSkipped = vm.borderSkipped || 'left';
            }
    
            // Canvas doesn't allow us to stroke inside the width so we can
            // adjust the sizes to fit if we're setting a stroke on the line
            if (borderWidth) {
                // borderWidth shold be less than bar width and bar height.
                var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
                borderWidth = borderWidth > barSize ? barSize : borderWidth;
                var halfStroke = borderWidth / 2;
                // Adjust borderWidth when bar top position is near vm.base(zero).
                var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
                var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
                var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
                var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);
                // not become a vertical line?
                if (borderLeft !== borderRight) {
                    top = borderTop;
                    bottom = borderBottom;
                }
                // not become a horizontal line?
                if (borderTop !== borderBottom) {
                    left = borderLeft;
                    right = borderRight;
                }
            }
    
            ctx.beginPath();
            ctx.fillStyle = vm.backgroundColor;
            ctx.strokeStyle = vm.borderColor;
            ctx.lineWidth = borderWidth;
    
            // Corner points, from bottom-left to bottom-right clockwise
            // | 1 2 |
            // | 0 3 |
            var corners = [
                [left, bottom],
                [left, top],
                [right, top],
                [right, bottom]
            ];
    
            // Find first (starting) corner with fallback to 'bottom'
            var borders = ['bottom', 'left', 'top', 'right'];
            var startCorner = borders.indexOf(borderSkipped, 0);
            if (startCorner === -1) {
                startCorner = 0;
            }
    
            function cornerAt(index) {
                return corners[(startCorner + index) % 4];
            }
    
            // Draw rectangle from 'startCorner'
            var corner = cornerAt(0);
            ctx.moveTo(corner[0], corner[1]);
    
            for (var i = 1; i < 4; i++) {
                corner = cornerAt(i);
                ctx.lineTo(corner[0], corner[1]);
            }
    
            ctx.fill();
            if (borderWidth) {
                ctx.stroke();
            }
        },
    
        height: function() {
            var vm = this._view;
            return vm.base - vm.y;
        },
    
        inRange: function(mouseX, mouseY) {
            var inRange = false;
    
            if (this._view) {
                var bounds = getBarBounds(this);
                inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
            }
    
            return inRange;
        },
    
        inLabelRange: function(mouseX, mouseY) {
            var me = this;
            if (!me._view) {
                return false;
            }
    
            var inRange = false;
            var bounds = getBarBounds(me);
    
            if (isVertical(me)) {
                inRange = mouseX >= bounds.left && mouseX <= bounds.right;
            } else {
                inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
            }
    
            return inRange;
        },
    
        inXRange: function(mouseX) {
            var bounds = getBarBounds(this);
            return mouseX >= bounds.left && mouseX <= bounds.right;
        },
    
        inYRange: function(mouseY) {
            var bounds = getBarBounds(this);
            return mouseY >= bounds.top && mouseY <= bounds.bottom;
        },
    
        getCenterPoint: function() {
            var vm = this._view;
            var x, y;
            if (isVertical(this)) {
                x = vm.x;
                y = (vm.y + vm.base) / 2;
            } else {
                x = (vm.x + vm.base) / 2;
                y = vm.y;
            }
    
            return {x: x, y: y};
        },
    
        getArea: function() {
            var vm = this._view;
            return vm.width * Math.abs(vm.y - vm.base);
        },
    
        tooltipPosition: function() {
            var vm = this._view;
            return {
                x: vm.x,
                y: vm.y
            };
        }
    });
    
    },{"../core/core.defaults":19,"../core/core.element":20}],34:[function(require,module,exports){
    'use strict';
    
    module.exports = {};
    module.exports.Arc = require('./element.arc');
    module.exports.Line = require('./element.line');
    module.exports.Point = require('./element.point');
    module.exports.Rectangle = require('./element.rectangle');
    
    },{"./element.arc":30,"./element.line":31,"./element.point":32,"./element.rectangle":33}],35:[function(require,module,exports){
    'use strict';
    
    var helpers = require('./helpers.core');
    
    /**
     * @namespace Chart.helpers.canvas
     */
    var exports = module.exports = {
        /**
         * Clears the entire canvas associated to the given `chart`.
         * @param {Chart} chart - The chart for which to clear the canvas.
         */
        clear: function(chart) {
            chart.ctx.clearRect(0, 0, chart.width, chart.height);
        },
    
        /**
         * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
         * given size (width, height) and the same `radius` for all corners.
         * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
         * @param {Number} x - The x axis of the coordinate for the rectangle starting point.
         * @param {Number} y - The y axis of the coordinate for the rectangle starting point.
         * @param {Number} width - The rectangle's width.
         * @param {Number} height - The rectangle's height.
         * @param {Number} radius - The rounded amount (in pixels) for the four corners.
         * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
         */
        roundedRect: function(ctx, x, y, width, height, radius) {
            if (radius) {
                var rx = Math.min(radius, width / 2);
                var ry = Math.min(radius, height / 2);
    
                ctx.moveTo(x + rx, y);
                ctx.lineTo(x + width - rx, y);
                ctx.quadraticCurveTo(x + width, y, x + width, y + ry);
                ctx.lineTo(x + width, y + height - ry);
                ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);
                ctx.lineTo(x + rx, y + height);
                ctx.quadraticCurveTo(x, y + height, x, y + height - ry);
                ctx.lineTo(x, y + ry);
                ctx.quadraticCurveTo(x, y, x + rx, y);
            } else {
                ctx.rect(x, y, width, height);
            }
        },
    
        drawPoint: function(ctx, style, radius, x, y) {
            var type, edgeLength, xOffset, yOffset, height, size;
    
            if (style && typeof style === 'object') {
                type = style.toString();
                if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
                    ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);
                    return;
                }
            }
    
            if (isNaN(radius) || radius <= 0) {
                return;
            }
    
            switch (style) {
            // Default includes circle
            default:
                ctx.beginPath();
                ctx.arc(x, y, radius, 0, Math.PI * 2);
                ctx.closePath();
                ctx.fill();
                break;
            case 'triangle':
                ctx.beginPath();
                edgeLength = 3 * radius / Math.sqrt(3);
                height = edgeLength * Math.sqrt(3) / 2;
                ctx.moveTo(x - edgeLength / 2, y + height / 3);
                ctx.lineTo(x + edgeLength / 2, y + height / 3);
                ctx.lineTo(x, y - 2 * height / 3);
                ctx.closePath();
                ctx.fill();
                break;
            case 'rect':
                size = 1 / Math.SQRT2 * radius;
                ctx.beginPath();
                ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
                ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
                break;
            case 'rectRounded':
                var offset = radius / Math.SQRT2;
                var leftX = x - offset;
                var topY = y - offset;
                var sideSize = Math.SQRT2 * radius;
                ctx.beginPath();
                this.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius / 2);
                ctx.closePath();
                ctx.fill();
                break;
            case 'rectRot':
                size = 1 / Math.SQRT2 * radius;
                ctx.beginPath();
                ctx.moveTo(x - size, y);
                ctx.lineTo(x, y + size);
                ctx.lineTo(x + size, y);
                ctx.lineTo(x, y - size);
                ctx.closePath();
                ctx.fill();
                break;
            case 'cross':
                ctx.beginPath();
                ctx.moveTo(x, y + radius);
                ctx.lineTo(x, y - radius);
                ctx.moveTo(x - radius, y);
                ctx.lineTo(x + radius, y);
                ctx.closePath();
                break;
            case 'crossRot':
                ctx.beginPath();
                xOffset = Math.cos(Math.PI / 4) * radius;
                yOffset = Math.sin(Math.PI / 4) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x - xOffset, y + yOffset);
                ctx.lineTo(x + xOffset, y - yOffset);
                ctx.closePath();
                break;
            case 'star':
                ctx.beginPath();
                ctx.moveTo(x, y + radius);
                ctx.lineTo(x, y - radius);
                ctx.moveTo(x - radius, y);
                ctx.lineTo(x + radius, y);
                xOffset = Math.cos(Math.PI / 4) * radius;
                yOffset = Math.sin(Math.PI / 4) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x - xOffset, y + yOffset);
                ctx.lineTo(x + xOffset, y - yOffset);
                ctx.closePath();
                break;
            case 'line':
                ctx.beginPath();
                ctx.moveTo(x - radius, y);
                ctx.lineTo(x + radius, y);
                ctx.closePath();
                break;
            case 'dash':
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + radius, y);
                ctx.closePath();
                break;
            }
    
            ctx.stroke();
        },
    
        clipArea: function(ctx, area) {
            ctx.save();
            ctx.beginPath();
            ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
            ctx.clip();
        },
    
        unclipArea: function(ctx) {
            ctx.restore();
        },
    
        lineTo: function(ctx, previous, target, flip) {
            if (target.steppedLine) {
                if ((target.steppedLine === 'after' && !flip) || (target.steppedLine !== 'after' && flip)) {
                    ctx.lineTo(previous.x, target.y);
                } else {
                    ctx.lineTo(target.x, previous.y);
                }
                ctx.lineTo(target.x, target.y);
                return;
            }
    
            if (!target.tension) {
                ctx.lineTo(target.x, target.y);
                return;
            }
    
            ctx.bezierCurveTo(
                flip ? previous.controlPointPreviousX : previous.controlPointNextX,
                flip ? previous.controlPointPreviousY : previous.controlPointNextY,
                flip ? target.controlPointNextX : target.controlPointPreviousX,
                flip ? target.controlPointNextY : target.controlPointPreviousY,
                target.x,
                target.y);
        }
    };
    
    // DEPRECATIONS
    
    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
     * @namespace Chart.helpers.clear
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.clear = exports.clear;
    
    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
     * @namespace Chart.helpers.drawRoundedRectangle
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.drawRoundedRectangle = function(ctx) {
        ctx.beginPath();
        exports.roundedRect.apply(exports, arguments);
        ctx.closePath();
    };
    
    },{"./helpers.core":36}],36:[function(require,module,exports){
    'use strict';
    
    /**
     * @namespace Chart.helpers
     */
    var helpers = {
        /**
         * An empty function that can be used, for example, for optional callback.
         */
        noop: function() {},
    
        /**
         * Returns a unique id, sequentially generated from a global variable.
         * @returns {Number}
         * @function
         */
        uid: (function() {
            var id = 0;
            return function() {
                return id++;
            };
        }()),
    
        /**
         * Returns true if `value` is neither null nor undefined, else returns false.
         * @param {*} value - The value to test.
         * @returns {Boolean}
         * @since 2.7.0
         */
        isNullOrUndef: function(value) {
            return value === null || typeof value === 'undefined';
        },
    
        /**
         * Returns true if `value` is an array, else returns false.
         * @param {*} value - The value to test.
         * @returns {Boolean}
         * @function
         */
        isArray: Array.isArray ? Array.isArray : function(value) {
            return Object.prototype.toString.call(value) === '[object Array]';
        },
    
        /**
         * Returns true if `value` is an object (excluding null), else returns false.
         * @param {*} value - The value to test.
         * @returns {Boolean}
         * @since 2.7.0
         */
        isObject: function(value) {
            return value !== null && Object.prototype.toString.call(value) === '[object Object]';
        },
    
        /**
         * Returns `value` if defined, else returns `defaultValue`.
         * @param {*} value - The value to return if defined.
         * @param {*} defaultValue - The value to return if `value` is undefined.
         * @returns {*}
         */
        valueOrDefault: function(value, defaultValue) {
            return typeof value === 'undefined' ? defaultValue : value;
        },
    
        /**
         * Returns value at the given `index` in array if defined, else returns `defaultValue`.
         * @param {Array} value - The array to lookup for value at `index`.
         * @param {Number} index - The index in `value` to lookup for value.
         * @param {*} defaultValue - The value to return if `value[index]` is undefined.
         * @returns {*}
         */
        valueAtIndexOrDefault: function(value, index, defaultValue) {
            return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
        },
    
        /**
         * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
         * value returned by `fn`. If `fn` is not a function, this method returns undefined.
         * @param {Function} fn - The function to call.
         * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
         * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
         * @returns {*}
         */
        callback: function(fn, args, thisArg) {
            if (fn && typeof fn.call === 'function') {
                return fn.apply(thisArg, args);
            }
        },
    
        /**
         * Note(SB) for performance sake, this method should only be used when loopable type
         * is unknown or in none intensive code (not called often and small loopable). Else
         * it's preferable to use a regular for() loop and save extra function calls.
         * @param {Object|Array} loopable - The object or array to be iterated.
         * @param {Function} fn - The function to call for each item.
         * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
         * @param {Boolean} [reverse] - If true, iterates backward on the loopable.
         */
        each: function(loopable, fn, thisArg, reverse) {
            var i, len, keys;
            if (helpers.isArray(loopable)) {
                len = loopable.length;
                if (reverse) {
                    for (i = len - 1; i >= 0; i--) {
                        fn.call(thisArg, loopable[i], i);
                    }
                } else {
                    for (i = 0; i < len; i++) {
                        fn.call(thisArg, loopable[i], i);
                    }
                }
            } else if (helpers.isObject(loopable)) {
                keys = Object.keys(loopable);
                len = keys.length;
                for (i = 0; i < len; i++) {
                    fn.call(thisArg, loopable[keys[i]], keys[i]);
                }
            }
        },
    
        /**
         * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
         * @see http://stackoverflow.com/a/14853974
         * @param {Array} a0 - The array to compare
         * @param {Array} a1 - The array to compare
         * @returns {Boolean}
         */
        arrayEquals: function(a0, a1) {
            var i, ilen, v0, v1;
    
            if (!a0 || !a1 || a0.length !== a1.length) {
                return false;
            }
    
            for (i = 0, ilen = a0.length; i < ilen; ++i) {
                v0 = a0[i];
                v1 = a1[i];
    
                if (v0 instanceof Array && v1 instanceof Array) {
                    if (!helpers.arrayEquals(v0, v1)) {
                        return false;
                    }
                } else if (v0 !== v1) {
                    // NOTE: two different object instances will never be equal: {x:20} != {x:20}
                    return false;
                }
            }
    
            return true;
        },
    
        /**
         * Returns a deep copy of `source` without keeping references on objects and arrays.
         * @param {*} source - The value to clone.
         * @returns {*}
         */
        clone: function(source) {
            if (helpers.isArray(source)) {
                return source.map(helpers.clone);
            }
    
            if (helpers.isObject(source)) {
                var target = {};
                var keys = Object.keys(source);
                var klen = keys.length;
                var k = 0;
    
                for (; k < klen; ++k) {
                    target[keys[k]] = helpers.clone(source[keys[k]]);
                }
    
                return target;
            }
    
            return source;
        },
    
        /**
         * The default merger when Chart.helpers.merge is called without merger option.
         * Note(SB): this method is also used by configMerge and scaleMerge as fallback.
         * @private
         */
        _merger: function(key, target, source, options) {
            var tval = target[key];
            var sval = source[key];
    
            if (helpers.isObject(tval) && helpers.isObject(sval)) {
                helpers.merge(tval, sval, options);
            } else {
                target[key] = helpers.clone(sval);
            }
        },
    
        /**
         * Merges source[key] in target[key] only if target[key] is undefined.
         * @private
         */
        _mergerIf: function(key, target, source) {
            var tval = target[key];
            var sval = source[key];
    
            if (helpers.isObject(tval) && helpers.isObject(sval)) {
                helpers.mergeIf(tval, sval);
            } else if (!target.hasOwnProperty(key)) {
                target[key] = helpers.clone(sval);
            }
        },
    
        /**
         * Recursively deep copies `source` properties into `target` with the given `options`.
         * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
         * @param {Object} target - The target object in which all sources are merged into.
         * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
         * @param {Object} [options] - Merging options:
         * @param {Function} [options.merger] - The merge method (key, target, source, options)
         * @returns {Object} The `target` object.
         */
        merge: function(target, source, options) {
            var sources = helpers.isArray(source) ? source : [source];
            var ilen = sources.length;
            var merge, i, keys, klen, k;
    
            if (!helpers.isObject(target)) {
                return target;
            }
    
            options = options || {};
            merge = options.merger || helpers._merger;
    
            for (i = 0; i < ilen; ++i) {
                source = sources[i];
                if (!helpers.isObject(source)) {
                    continue;
                }
    
                keys = Object.keys(source);
                for (k = 0, klen = keys.length; k < klen; ++k) {
                    merge(keys[k], target, source, options);
                }
            }
    
            return target;
        },
    
        /**
         * Recursively deep copies `source` properties into `target` *only* if not defined in target.
         * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
         * @param {Object} target - The target object in which all sources are merged into.
         * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
         * @returns {Object} The `target` object.
         */
        mergeIf: function(target, source) {
            return helpers.merge(target, source, {merger: helpers._mergerIf});
        },
    
        /**
         * Applies the contents of two or more objects together into the first object.
         * @param {Object} target - The target object in which all objects are merged into.
         * @param {Object} arg1 - Object containing additional properties to merge in target.
         * @param {Object} argN - Additional objects containing properties to merge in target.
         * @returns {Object} The `target` object.
         */
        extend: function(target) {
            var setFn = function(value, key) {
                target[key] = value;
            };
            for (var i = 1, ilen = arguments.length; i < ilen; ++i) {
                helpers.each(arguments[i], setFn);
            }
            return target;
        },
    
        /**
         * Basic javascript inheritance based on the model created in Backbone.js
         */
        inherits: function(extensions) {
            var me = this;
            var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
                return me.apply(this, arguments);
            };
    
            var Surrogate = function() {
                this.constructor = ChartElement;
            };
    
            Surrogate.prototype = me.prototype;
            ChartElement.prototype = new Surrogate();
            ChartElement.extend = helpers.inherits;
    
            if (extensions) {
                helpers.extend(ChartElement.prototype, extensions);
            }
    
            ChartElement.__super__ = me.prototype;
            return ChartElement;
        }
    };
    
    module.exports = helpers;
    
    // DEPRECATIONS
    
    /**
     * Provided for backward compatibility, use Chart.helpers.callback instead.
     * @function Chart.helpers.callCallback
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    helpers.callCallback = helpers.callback;
    
    /**
     * Provided for backward compatibility, use Array.prototype.indexOf instead.
     * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
     * @function Chart.helpers.indexOf
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.indexOf = function(array, item, fromIndex) {
        return Array.prototype.indexOf.call(array, item, fromIndex);
    };
    
    /**
     * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
     * @function Chart.helpers.getValueOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueOrDefault = helpers.valueOrDefault;
    
    /**
     * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
     * @function Chart.helpers.getValueAtIndexOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
    
    },{}],37:[function(require,module,exports){
    'use strict';
    
    var helpers = require('./helpers.core');
    
    /**
     * Easing functions adapted from Robert Penner's easing equations.
     * @namespace Chart.helpers.easingEffects
     * @see http://www.robertpenner.com/easing/
     */
    var effects = {
        linear: function(t) {
            return t;
        },
    
        easeInQuad: function(t) {
            return t * t;
        },
    
        easeOutQuad: function(t) {
            return -t * (t - 2);
        },
    
        easeInOutQuad: function(t) {
            if ((t /= 0.5) < 1) {
                return 0.5 * t * t;
            }
            return -0.5 * ((--t) * (t - 2) - 1);
        },
    
        easeInCubic: function(t) {
            return t * t * t;
        },
    
        easeOutCubic: function(t) {
            return (t = t - 1) * t * t + 1;
        },
    
        easeInOutCubic: function(t) {
            if ((t /= 0.5) < 1) {
                return 0.5 * t * t * t;
            }
            return 0.5 * ((t -= 2) * t * t + 2);
        },
    
        easeInQuart: function(t) {
            return t * t * t * t;
        },
    
        easeOutQuart: function(t) {
            return -((t = t - 1) * t * t * t - 1);
        },
    
        easeInOutQuart: function(t) {
            if ((t /= 0.5) < 1) {
                return 0.5 * t * t * t * t;
            }
            return -0.5 * ((t -= 2) * t * t * t - 2);
        },
    
        easeInQuint: function(t) {
            return t * t * t * t * t;
        },
    
        easeOutQuint: function(t) {
            return (t = t - 1) * t * t * t * t + 1;
        },
    
        easeInOutQuint: function(t) {
            if ((t /= 0.5) < 1) {
                return 0.5 * t * t * t * t * t;
            }
            return 0.5 * ((t -= 2) * t * t * t * t + 2);
        },
    
        easeInSine: function(t) {
            return -Math.cos(t * (Math.PI / 2)) + 1;
        },
    
        easeOutSine: function(t) {
            return Math.sin(t * (Math.PI / 2));
        },
    
        easeInOutSine: function(t) {
            return -0.5 * (Math.cos(Math.PI * t) - 1);
        },
    
        easeInExpo: function(t) {
            return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
        },
    
        easeOutExpo: function(t) {
            return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
        },
    
        easeInOutExpo: function(t) {
            if (t === 0) {
                return 0;
            }
            if (t === 1) {
                return 1;
            }
            if ((t /= 0.5) < 1) {
                return 0.5 * Math.pow(2, 10 * (t - 1));
            }
            return 0.5 * (-Math.pow(2, -10 * --t) + 2);
        },
    
        easeInCirc: function(t) {
            if (t >= 1) {
                return t;
            }
            return -(Math.sqrt(1 - t * t) - 1);
        },
    
        easeOutCirc: function(t) {
            return Math.sqrt(1 - (t = t - 1) * t);
        },
    
        easeInOutCirc: function(t) {
            if ((t /= 0.5) < 1) {
                return -0.5 * (Math.sqrt(1 - t * t) - 1);
            }
            return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
    
        easeInElastic: function(t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;
            if (t === 0) {
                return 0;
            }
            if (t === 1) {
                return 1;
            }
            if (!p) {
                p = 0.3;
            }
            if (a < 1) {
                a = 1;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(1 / a);
            }
            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
        },
    
        easeOutElastic: function(t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;
            if (t === 0) {
                return 0;
            }
            if (t === 1) {
                return 1;
            }
            if (!p) {
                p = 0.3;
            }
            if (a < 1) {
                a = 1;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(1 / a);
            }
            return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
        },
    
        easeInOutElastic: function(t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;
            if (t === 0) {
                return 0;
            }
            if ((t /= 0.5) === 2) {
                return 1;
            }
            if (!p) {
                p = 0.45;
            }
            if (a < 1) {
                a = 1;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(1 / a);
            }
            if (t < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
            }
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
        },
        easeInBack: function(t) {
            var s = 1.70158;
            return t * t * ((s + 1) * t - s);
        },
    
        easeOutBack: function(t) {
            var s = 1.70158;
            return (t = t - 1) * t * ((s + 1) * t + s) + 1;
        },
    
        easeInOutBack: function(t) {
            var s = 1.70158;
            if ((t /= 0.5) < 1) {
                return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
            }
            return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
        },
    
        easeInBounce: function(t) {
            return 1 - effects.easeOutBounce(1 - t);
        },
    
        easeOutBounce: function(t) {
            if (t < (1 / 2.75)) {
                return 7.5625 * t * t;
            }
            if (t < (2 / 2.75)) {
                return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
            }
            if (t < (2.5 / 2.75)) {
                return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
            }
            return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
        },
    
        easeInOutBounce: function(t) {
            if (t < 0.5) {
                return effects.easeInBounce(t * 2) * 0.5;
            }
            return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
        }
    };
    
    module.exports = {
        effects: effects
    };
    
    // DEPRECATIONS
    
    /**
     * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
     * @function Chart.helpers.easingEffects
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.easingEffects = effects;
    
    },{"./helpers.core":36}],38:[function(require,module,exports){
    'use strict';
    
    var helpers = require('./helpers.core');
    
    /**
     * @alias Chart.helpers.options
     * @namespace
     */
    module.exports = {
        /**
         * Converts the given line height `value` in pixels for a specific font `size`.
         * @param {Number|String} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
         * @param {Number} size - The font size (in pixels) used to resolve relative `value`.
         * @returns {Number} The effective line height in pixels (size * 1.2 if value is invalid).
         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
         * @since 2.7.0
         */
        toLineHeight: function(value, size) {
            var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
            if (!matches || matches[1] === 'normal') {
                return size * 1.2;
            }
    
            value = +matches[2];
    
            switch (matches[3]) {
            case 'px':
                return value;
            case '%':
                value /= 100;
                break;
            default:
                break;
            }
    
            return size * value;
        },
    
        /**
         * Converts the given value into a padding object with pre-computed width/height.
         * @param {Number|Object} value - If a number, set the value to all TRBL component,
         *  else, if and object, use defined properties and sets undefined ones to 0.
         * @returns {Object} The padding values (top, right, bottom, left, width, height)
         * @since 2.7.0
         */
        toPadding: function(value) {
            var t, r, b, l;
    
            if (helpers.isObject(value)) {
                t = +value.top || 0;
                r = +value.right || 0;
                b = +value.bottom || 0;
                l = +value.left || 0;
            } else {
                t = r = b = l = +value || 0;
            }
    
            return {
                top: t,
                right: r,
                bottom: b,
                left: l,
                height: t + b,
                width: l + r
            };
        },
    
        /**
         * Evaluates the given `inputs` sequentially and returns the first defined value.
         * @param {Array[]} inputs - An array of values, falling back to the last value.
         * @param {Object} [context] - If defined and the current value is a function, the value
         * is called with `context` as first argument and the result becomes the new input.
         * @param {Number} [index] - If defined and the current value is an array, the value
         * at `index` become the new input.
         * @since 2.7.0
         */
        resolve: function(inputs, context, index) {
            var i, ilen, value;
    
            for (i = 0, ilen = inputs.length; i < ilen; ++i) {
                value = inputs[i];
                if (value === undefined) {
                    continue;
                }
                if (context !== undefined && typeof value === 'function') {
                    value = value(context);
                }
                if (index !== undefined && helpers.isArray(value)) {
                    value = value[index];
                }
                if (value !== undefined) {
                    return value;
                }
            }
        }
    };
    
    },{"./helpers.core":36}],39:[function(require,module,exports){
    'use strict';
    
    module.exports = require('./helpers.core');
    module.exports.easing = require('./helpers.easing');
    module.exports.canvas = require('./helpers.canvas');
    module.exports.options = require('./helpers.options');
    
    },{"./helpers.canvas":35,"./helpers.core":36,"./helpers.easing":37,"./helpers.options":38}],40:[function(require,module,exports){
    /**
     * Platform fallback implementation (minimal).
     * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
     */
    
    module.exports = {
        acquireContext: function(item) {
            if (item && item.canvas) {
                // Support for any object associated to a canvas (including a context2d)
                item = item.canvas;
            }
    
            return item && item.getContext('2d') || null;
        }
    };
    
    },{}],41:[function(require,module,exports){
    /**
     * Chart.Platform implementation for targeting a web browser
     */
    
    'use strict';
    
    var helpers = require('../helpers/index');
    
    var EXPANDO_KEY = '$chartjs';
    var CSS_PREFIX = 'chartjs-';
    var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
    var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
    var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];
    
    /**
     * DOM event types -> Chart.js event types.
     * Note: only events with different types are mapped.
     * @see https://developer.mozilla.org/en-US/docs/Web/Events
     */
    var EVENT_TYPES = {
        touchstart: 'mousedown',
        touchmove: 'mousemove',
        touchend: 'mouseup',
        pointerenter: 'mouseenter',
        pointerdown: 'mousedown',
        pointermove: 'mousemove',
        pointerup: 'mouseup',
        pointerleave: 'mouseout',
        pointerout: 'mouseout'
    };
    
    /**
     * The "used" size is the final value of a dimension property after all calculations have
     * been performed. This method uses the computed style of `element` but returns undefined
     * if the computed style is not expressed in pixels. That can happen in some cases where
     * `element` has a size relative to its parent and this last one is not yet displayed,
     * for example because of `display: none` on a parent node.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
     * @returns {Number} Size in pixels or undefined if unknown.
     */
    function readUsedSize(element, property) {
        var value = helpers.getStyle(element, property);
        var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
        return matches ? Number(matches[1]) : undefined;
    }
    
    /**
     * Initializes the canvas style and render size without modifying the canvas display size,
     * since responsiveness is handled by the controller.resize() method. The config is used
     * to determine the aspect ratio to apply in case no explicit height has been specified.
     */
    function initCanvas(canvas, config) {
        var style = canvas.style;
    
        // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
        // returns null or '' if no explicit value has been set to the canvas attribute.
        var renderHeight = canvas.getAttribute('height');
        var renderWidth = canvas.getAttribute('width');
    
        // Chart.js modifies some canvas values that we want to restore on destroy
        canvas[EXPANDO_KEY] = {
            initial: {
                height: renderHeight,
                width: renderWidth,
                style: {
                    display: style.display,
                    height: style.height,
                    width: style.width
                }
            }
        };
    
        // Force canvas to display as block to avoid extra space caused by inline
        // elements, which would interfere with the responsive resize process.
        // https://github.com/chartjs/Chart.js/issues/2538
        style.display = style.display || 'block';
    
        if (renderWidth === null || renderWidth === '') {
            var displayWidth = readUsedSize(canvas, 'width');
            if (displayWidth !== undefined) {
                canvas.width = displayWidth;
            }
        }
    
        if (renderHeight === null || renderHeight === '') {
            if (canvas.style.height === '') {
                // If no explicit render height and style height, let's apply the aspect ratio,
                // which one can be specified by the user but also by charts as default option
                // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
                canvas.height = canvas.width / (config.options.aspectRatio || 2);
            } else {
                var displayHeight = readUsedSize(canvas, 'height');
                if (displayWidth !== undefined) {
                    canvas.height = displayHeight;
                }
            }
        }
    
        return canvas;
    }
    
    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */
    var supportsEventListenerOptions = (function() {
        var supports = false;
        try {
            var options = Object.defineProperty({}, 'passive', {
                get: function() {
                    supports = true;
                }
            });
            window.addEventListener('e', null, options);
        } catch (e) {
            // continue regardless of error
        }
        return supports;
    }());
    
    // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
    // https://github.com/chartjs/Chart.js/issues/4287
    var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;
    
    function addEventListener(node, type, listener) {
        node.addEventListener(type, listener, eventListenerOptions);
    }
    
    function removeEventListener(node, type, listener) {
        node.removeEventListener(type, listener, eventListenerOptions);
    }
    
    function createEvent(type, chart, x, y, nativeEvent) {
        return {
            type: type,
            chart: chart,
            native: nativeEvent || null,
            x: x !== undefined ? x : null,
            y: y !== undefined ? y : null,
        };
    }
    
    function fromNativeEvent(event, chart) {
        var type = EVENT_TYPES[event.type] || event.type;
        var pos = helpers.getRelativePosition(event, chart);
        return createEvent(type, chart, pos.x, pos.y, event);
    }
    
    function throttled(fn, thisArg) {
        var ticking = false;
        var args = [];
    
        return function() {
            args = Array.prototype.slice.call(arguments);
            thisArg = thisArg || this;
    
            if (!ticking) {
                ticking = true;
                helpers.requestAnimFrame.call(window, function() {
                    ticking = false;
                    fn.apply(thisArg, args);
                });
            }
        };
    }
    
    // Implementation based on https://github.com/marcj/css-element-queries
    function createResizer(handler) {
        var resizer = document.createElement('div');
        var cls = CSS_PREFIX + 'size-monitor';
        var maxSize = 1000000;
        var style =
            'position:absolute;' +
            'left:0;' +
            'top:0;' +
            'right:0;' +
            'bottom:0;' +
            'overflow:hidden;' +
            'pointer-events:none;' +
            'visibility:hidden;' +
            'z-index:-1;';
    
        resizer.style.cssText = style;
        resizer.className = cls;
        resizer.innerHTML =
            '<div class="' + cls + '-expand" style="' + style + '">' +
                '<div style="' +
                    'position:absolute;' +
                    'width:' + maxSize + 'px;' +
                    'height:' + maxSize + 'px;' +
                    'left:0;' +
                    'top:0">' +
                '</div>' +
            '</div>' +
            '<div class="' + cls + '-shrink" style="' + style + '">' +
                '<div style="' +
                    'position:absolute;' +
                    'width:200%;' +
                    'height:200%;' +
                    'left:0; ' +
                    'top:0">' +
                '</div>' +
            '</div>';
    
        var expand = resizer.childNodes[0];
        var shrink = resizer.childNodes[1];
    
        resizer._reset = function() {
            expand.scrollLeft = maxSize;
            expand.scrollTop = maxSize;
            shrink.scrollLeft = maxSize;
            shrink.scrollTop = maxSize;
        };
        var onScroll = function() {
            resizer._reset();
            handler();
        };
    
        addEventListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
        addEventListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));
    
        return resizer;
    }
    
    // https://davidwalsh.name/detect-node-insertion
    function watchForRender(node, handler) {
        var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
        var proxy = expando.renderProxy = function(e) {
            if (e.animationName === CSS_RENDER_ANIMATION) {
                handler();
            }
        };
    
        helpers.each(ANIMATION_START_EVENTS, function(type) {
            addEventListener(node, type, proxy);
        });
    
        // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
        // is removed then added back immediately (same animation frame?). Accessing the
        // `offsetParent` property will force a reflow and re-evaluate the CSS animation.
        // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
        // https://github.com/chartjs/Chart.js/issues/4737
        expando.reflow = !!node.offsetParent;
    
        node.classList.add(CSS_RENDER_MONITOR);
    }
    
    function unwatchForRender(node) {
        var expando = node[EXPANDO_KEY] || {};
        var proxy = expando.renderProxy;
    
        if (proxy) {
            helpers.each(ANIMATION_START_EVENTS, function(type) {
                removeEventListener(node, type, proxy);
            });
    
            delete expando.renderProxy;
        }
    
        node.classList.remove(CSS_RENDER_MONITOR);
    }
    
    function addResizeListener(node, listener, chart) {
        var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
    
        // Let's keep track of this added resizer and thus avoid DOM query when removing it.
        var resizer = expando.resizer = createResizer(throttled(function() {
            if (expando.resizer) {
                return listener(createEvent('resize', chart));
            }
        }));
    
        // The resizer needs to be attached to the node parent, so we first need to be
        // sure that `node` is attached to the DOM before injecting the resizer element.
        watchForRender(node, function() {
            if (expando.resizer) {
                var container = node.parentNode;
                if (container && container !== resizer.parentNode) {
                    container.insertBefore(resizer, container.firstChild);
                }
    
                // The container size might have changed, let's reset the resizer state.
                resizer._reset();
            }
        });
    }
    
    function removeResizeListener(node) {
        var expando = node[EXPANDO_KEY] || {};
        var resizer = expando.resizer;
    
        delete expando.resizer;
        unwatchForRender(node);
    
        if (resizer && resizer.parentNode) {
            resizer.parentNode.removeChild(resizer);
        }
    }
    
    function injectCSS(platform, css) {
        // http://stackoverflow.com/q/3922139
        var style = platform._style || document.createElement('style');
        if (!platform._style) {
            platform._style = style;
            css = '/* Chart.js */\n' + css;
            style.setAttribute('type', 'text/css');
            document.getElementsByTagName('head')[0].appendChild(style);
        }
    
        style.appendChild(document.createTextNode(css));
    }
    
    module.exports = {
        /**
         * This property holds whether this platform is enabled for the current environment.
         * Currently used by platform.js to select the proper implementation.
         * @private
         */
        _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',
    
        initialize: function() {
            var keyframes = 'from{opacity:0.99}to{opacity:1}';
    
            injectCSS(this,
                // DOM rendering detection
                // https://davidwalsh.name/detect-node-insertion
                '@-webkit-keyframes ' + CSS_RENDER_ANIMATION + '{' + keyframes + '}' +
                '@keyframes ' + CSS_RENDER_ANIMATION + '{' + keyframes + '}' +
                '.' + CSS_RENDER_MONITOR + '{' +
                    '-webkit-animation:' + CSS_RENDER_ANIMATION + ' 0.001s;' +
                    'animation:' + CSS_RENDER_ANIMATION + ' 0.001s;' +
                '}'
            );
        },
    
        acquireContext: function(item, config) {
            if (typeof item === 'string') {
                item = document.getElementById(item);
            } else if (item.length) {
                // Support for array based queries (such as jQuery)
                item = item[0];
            }
    
            if (item && item.canvas) {
                // Support for any object associated to a canvas (including a context2d)
                item = item.canvas;
            }
    
            // To prevent canvas fingerprinting, some add-ons undefine the getContext
            // method, for example: https://github.com/kkapsner/CanvasBlocker
            // https://github.com/chartjs/Chart.js/issues/2807
            var context = item && item.getContext && item.getContext('2d');
    
            // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
            // inside an iframe or when running in a protected environment. We could guess the
            // types from their toString() value but let's keep things flexible and assume it's
            // a sufficient condition if the item has a context2D which has item as `canvas`.
            // https://github.com/chartjs/Chart.js/issues/3887
            // https://github.com/chartjs/Chart.js/issues/4102
            // https://github.com/chartjs/Chart.js/issues/4152
            if (context && context.canvas === item) {
                initCanvas(item, config);
                return context;
            }
    
            return null;
        },
    
        releaseContext: function(context) {
            var canvas = context.canvas;
            if (!canvas[EXPANDO_KEY]) {
                return;
            }
    
            var initial = canvas[EXPANDO_KEY].initial;
            ['height', 'width'].forEach(function(prop) {
                var value = initial[prop];
                if (helpers.isNullOrUndef(value)) {
                    canvas.removeAttribute(prop);
                } else {
                    canvas.setAttribute(prop, value);
                }
            });
    
            helpers.each(initial.style || {}, function(value, key) {
                canvas.style[key] = value;
            });
    
            // The canvas render size might have been changed (and thus the state stack discarded),
            // we can't use save() and restore() to restore the initial state. So make sure that at
            // least the canvas context is reset to the default state by setting the canvas width.
            // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
            canvas.width = canvas.width;
    
            delete canvas[EXPANDO_KEY];
        },
    
        addEventListener: function(chart, type, listener) {
            var canvas = chart.canvas;
            if (type === 'resize') {
                // Note: the resize event is not supported on all browsers.
                addResizeListener(canvas, listener, chart);
                return;
            }
    
            var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
            var proxies = expando.proxies || (expando.proxies = {});
            var proxy = proxies[chart.id + '_' + type] = function(event) {
                listener(fromNativeEvent(event, chart));
            };
    
            addEventListener(canvas, type, proxy);
        },
    
        removeEventListener: function(chart, type, listener) {
            var canvas = chart.canvas;
            if (type === 'resize') {
                // Note: the resize event is not supported on all browsers.
                removeResizeListener(canvas, listener);
                return;
            }
    
            var expando = listener[EXPANDO_KEY] || {};
            var proxies = expando.proxies || {};
            var proxy = proxies[chart.id + '_' + type];
            if (!proxy) {
                return;
            }
    
            removeEventListener(canvas, type, proxy);
        }
    };
    
    // DEPRECATIONS
    
    /**
     * Provided for backward compatibility, use EventTarget.addEventListener instead.
     * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
     * @function Chart.helpers.addEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.addEvent = addEventListener;
    
    /**
     * Provided for backward compatibility, use EventTarget.removeEventListener instead.
     * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
     * @function Chart.helpers.removeEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.removeEvent = removeEventListener;
    
    },{"../helpers/index":39}],42:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    var basic = require('./platform.basic');
    var dom = require('./platform.dom');
    
    // @TODO Make possible to select another platform at build time.
    var implementation = dom._enabled ? dom : basic;
    
    /**
     * @namespace Chart.platform
     * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
     * @since 2.4.0
     */
    module.exports = helpers.extend({
        /**
         * @since 2.7.0
         */
        initialize: function() {},
    
        /**
         * Called at chart construction time, returns a context2d instance implementing
         * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
         * @param {*} item - The native item from which to acquire context (platform specific)
         * @param {Object} options - The chart options
         * @returns {CanvasRenderingContext2D} context2d instance
         */
        acquireContext: function() {},
    
        /**
         * Called at chart destruction time, releases any resources associated to the context
         * previously returned by the acquireContext() method.
         * @param {CanvasRenderingContext2D} context - The context2d instance
         * @returns {Boolean} true if the method succeeded, else false
         */
        releaseContext: function() {},
    
        /**
         * Registers the specified listener on the given chart.
         * @param {Chart} chart - Chart from which to listen for event
         * @param {String} type - The ({@link IEvent}) type to listen for
         * @param {Function} listener - Receives a notification (an object that implements
         * the {@link IEvent} interface) when an event of the specified type occurs.
         */
        addEventListener: function() {},
    
        /**
         * Removes the specified listener previously registered with addEventListener.
         * @param {Chart} chart -Chart from which to remove the listener
         * @param {String} type - The ({@link IEvent}) type to remove
         * @param {Function} listener - The listener function to remove from the event target.
         */
        removeEventListener: function() {}
    
    }, implementation);
    
    /**
     * @interface IPlatform
     * Allows abstracting platform dependencies away from the chart
     * @borrows Chart.platform.acquireContext as acquireContext
     * @borrows Chart.platform.releaseContext as releaseContext
     * @borrows Chart.platform.addEventListener as addEventListener
     * @borrows Chart.platform.removeEventListener as removeEventListener
     */
    
    /**
     * @interface IEvent
     * @prop {String} type - The event type name, possible values are:
     * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',
     * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'
     * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')
     * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)
     * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)
     */
    
    },{"../helpers/index":39,"./platform.basic":40,"./platform.dom":41}],43:[function(require,module,exports){
    /**
     * Plugin based on discussion from the following Chart.js issues:
     * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569
     * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897
     */
    
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var elements = require('../elements/index');
    var helpers = require('../helpers/index');
    
    defaults._set('global', {
        plugins: {
            filler: {
                propagate: true
            }
        }
    });
    
    module.exports = function() {
    
        var mappers = {
            dataset: function(source) {
                var index = source.fill;
                var chart = source.chart;
                var meta = chart.getDatasetMeta(index);
                var visible = meta && chart.isDatasetVisible(index);
                var points = (visible && meta.dataset._children) || [];
                var length = points.length || 0;
    
                return !length ? null : function(point, i) {
                    return (i < length && points[i]._view) || null;
                };
            },
    
            boundary: function(source) {
                var boundary = source.boundary;
                var x = boundary ? boundary.x : null;
                var y = boundary ? boundary.y : null;
    
                return function(point) {
                    return {
                        x: x === null ? point.x : x,
                        y: y === null ? point.y : y,
                    };
                };
            }
        };
    
        // @todo if (fill[0] === '#')
        function decodeFill(el, index, count) {
            var model = el._model || {};
            var fill = model.fill;
            var target;
    
            if (fill === undefined) {
                fill = !!model.backgroundColor;
            }
    
            if (fill === false || fill === null) {
                return false;
            }
    
            if (fill === true) {
                return 'origin';
            }
    
            target = parseFloat(fill, 10);
            if (isFinite(target) && Math.floor(target) === target) {
                if (fill[0] === '-' || fill[0] === '+') {
                    target = index + target;
                }
    
                if (target === index || target < 0 || target >= count) {
                    return false;
                }
    
                return target;
            }
    
            switch (fill) {
            // compatibility
            case 'bottom':
                return 'start';
            case 'top':
                return 'end';
            case 'zero':
                return 'origin';
            // supported boundaries
            case 'origin':
            case 'start':
            case 'end':
                return fill;
            // invalid fill values
            default:
                return false;
            }
        }
    
        function computeBoundary(source) {
            var model = source.el._model || {};
            var scale = source.el._scale || {};
            var fill = source.fill;
            var target = null;
            var horizontal;
    
            if (isFinite(fill)) {
                return null;
            }
    
            // Backward compatibility: until v3, we still need to support boundary values set on
            // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
            // controllers might still use it (e.g. the Smith chart).
    
            if (fill === 'start') {
                target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
            } else if (fill === 'end') {
                target = model.scaleTop === undefined ? scale.top : model.scaleTop;
            } else if (model.scaleZero !== undefined) {
                target = model.scaleZero;
            } else if (scale.getBasePosition) {
                target = scale.getBasePosition();
            } else if (scale.getBasePixel) {
                target = scale.getBasePixel();
            }
    
            if (target !== undefined && target !== null) {
                if (target.x !== undefined && target.y !== undefined) {
                    return target;
                }
    
                if (typeof target === 'number' && isFinite(target)) {
                    horizontal = scale.isHorizontal();
                    return {
                        x: horizontal ? target : null,
                        y: horizontal ? null : target
                    };
                }
            }
    
            return null;
        }
    
        function resolveTarget(sources, index, propagate) {
            var source = sources[index];
            var fill = source.fill;
            var visited = [index];
            var target;
    
            if (!propagate) {
                return fill;
            }
    
            while (fill !== false && visited.indexOf(fill) === -1) {
                if (!isFinite(fill)) {
                    return fill;
                }
    
                target = sources[fill];
                if (!target) {
                    return false;
                }
    
                if (target.visible) {
                    return fill;
                }
    
                visited.push(fill);
                fill = target.fill;
            }
    
            return false;
        }
    
        function createMapper(source) {
            var fill = source.fill;
            var type = 'dataset';
    
            if (fill === false) {
                return null;
            }
    
            if (!isFinite(fill)) {
                type = 'boundary';
            }
    
            return mappers[type](source);
        }
    
        function isDrawable(point) {
            return point && !point.skip;
        }
    
        function drawArea(ctx, curve0, curve1, len0, len1) {
            var i;
    
            if (!len0 || !len1) {
                return;
            }
    
            // building first area curve (normal)
            ctx.moveTo(curve0[0].x, curve0[0].y);
            for (i = 1; i < len0; ++i) {
                helpers.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
            }
    
            // joining the two area curves
            ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);
    
            // building opposite area curve (reverse)
            for (i = len1 - 1; i > 0; --i) {
                helpers.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
            }
        }
    
        function doFill(ctx, points, mapper, view, color, loop) {
            var count = points.length;
            var span = view.spanGaps;
            var curve0 = [];
            var curve1 = [];
            var len0 = 0;
            var len1 = 0;
            var i, ilen, index, p0, p1, d0, d1;
    
            ctx.beginPath();
    
            for (i = 0, ilen = (count + !!loop); i < ilen; ++i) {
                index = i % count;
                p0 = points[index]._view;
                p1 = mapper(p0, index, view);
                d0 = isDrawable(p0);
                d1 = isDrawable(p1);
    
                if (d0 && d1) {
                    len0 = curve0.push(p0);
                    len1 = curve1.push(p1);
                } else if (len0 && len1) {
                    if (!span) {
                        drawArea(ctx, curve0, curve1, len0, len1);
                        len0 = len1 = 0;
                        curve0 = [];
                        curve1 = [];
                    } else {
                        if (d0) {
                            curve0.push(p0);
                        }
                        if (d1) {
                            curve1.push(p1);
                        }
                    }
                }
            }
    
            drawArea(ctx, curve0, curve1, len0, len1);
    
            ctx.closePath();
            ctx.fillStyle = color;
            ctx.fill();
        }
    
        return {
            id: 'filler',
    
            afterDatasetsUpdate: function(chart, options) {
                var count = (chart.data.datasets || []).length;
                var propagate = options.propagate;
                var sources = [];
                var meta, i, el, source;
    
                for (i = 0; i < count; ++i) {
                    meta = chart.getDatasetMeta(i);
                    el = meta.dataset;
                    source = null;
    
                    if (el && el._model && el instanceof elements.Line) {
                        source = {
                            visible: chart.isDatasetVisible(i),
                            fill: decodeFill(el, i, count),
                            chart: chart,
                            el: el
                        };
                    }
    
                    meta.$filler = source;
                    sources.push(source);
                }
    
                for (i = 0; i < count; ++i) {
                    source = sources[i];
                    if (!source) {
                        continue;
                    }
    
                    source.fill = resolveTarget(sources, i, propagate);
                    source.boundary = computeBoundary(source);
                    source.mapper = createMapper(source);
                }
            },
    
            beforeDatasetDraw: function(chart, args) {
                var meta = args.meta.$filler;
                if (!meta) {
                    return;
                }
    
                var ctx = chart.ctx;
                var el = meta.el;
                var view = el._view;
                var points = el._children || [];
                var mapper = meta.mapper;
                var color = view.backgroundColor || defaults.global.defaultColor;
    
                if (mapper && color && points.length) {
                    helpers.canvas.clipArea(ctx, chart.chartArea);
                    doFill(ctx, points, mapper, view, color, el._loop);
                    helpers.canvas.unclipArea(ctx);
                }
            }
        };
    };
    
    },{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],44:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var Element = require('../core/core.element');
    var helpers = require('../helpers/index');
    
    defaults._set('global', {
        legend: {
            display: true,
            position: 'top',
            fullWidth: true,
            reverse: false,
            weight: 1000,
    
            // a callback that will handle
            onClick: function(e, legendItem) {
                var index = legendItem.datasetIndex;
                var ci = this.chart;
                var meta = ci.getDatasetMeta(index);
    
                // See controller.isDatasetVisible comment
                meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
    
                // We hid a dataset ... rerender the chart
                ci.update();
            },
    
            onHover: null,
    
            labels: {
                boxWidth: 40,
                padding: 10,
                // Generates labels shown in the legend
                // Valid properties to return:
                // text : text to display
                // fillStyle : fill of coloured box
                // strokeStyle: stroke of coloured box
                // hidden : if this legend item refers to a hidden item
                // lineCap : cap style for line
                // lineDash
                // lineDashOffset :
                // lineJoin :
                // lineWidth :
                generateLabels: function(chart) {
                    var data = chart.data;
                    return helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {
                        return {
                            text: dataset.label,
                            fillStyle: (!helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),
                            hidden: !chart.isDatasetVisible(i),
                            lineCap: dataset.borderCapStyle,
                            lineDash: dataset.borderDash,
                            lineDashOffset: dataset.borderDashOffset,
                            lineJoin: dataset.borderJoinStyle,
                            lineWidth: dataset.borderWidth,
                            strokeStyle: dataset.borderColor,
                            pointStyle: dataset.pointStyle,
    
                            // Below is extra data used for toggling the datasets
                            datasetIndex: i
                        };
                    }, this) : [];
                }
            }
        },
    
        legendCallback: function(chart) {
            var text = [];
            text.push('<ul class="' + chart.id + '-legend">');
            for (var i = 0; i < chart.data.datasets.length; i++) {
                text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
                if (chart.data.datasets[i].label) {
                    text.push(chart.data.datasets[i].label);
                }
                text.push('</li>');
            }
            text.push('</ul>');
            return text.join('');
        }
    });
    
    module.exports = function(Chart) {
    
        var layout = Chart.layoutService;
        var noop = helpers.noop;
    
        /**
         * Helper function to get the box width based on the usePointStyle option
         * @param labelopts {Object} the label options on the legend
         * @param fontSize {Number} the label font size
         * @return {Number} width of the color box area
         */
        function getBoxWidth(labelOpts, fontSize) {
            return labelOpts.usePointStyle ?
                fontSize * Math.SQRT2 :
                labelOpts.boxWidth;
        }
    
        Chart.Legend = Element.extend({
    
            initialize: function(config) {
                helpers.extend(this, config);
    
                // Contains hit boxes for each dataset (in dataset order)
                this.legendHitBoxes = [];
    
                // Are we in doughnut mode which has a different data type
                this.doughnutMode = false;
            },
    
            // These methods are ordered by lifecycle. Utilities then follow.
            // Any function defined here is inherited by all legend types.
            // Any function can be extended by the legend type
    
            beforeUpdate: noop,
            update: function(maxWidth, maxHeight, margins) {
                var me = this;
    
                // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                me.beforeUpdate();
    
                // Absorb the master measurements
                me.maxWidth = maxWidth;
                me.maxHeight = maxHeight;
                me.margins = margins;
    
                // Dimensions
                me.beforeSetDimensions();
                me.setDimensions();
                me.afterSetDimensions();
                // Labels
                me.beforeBuildLabels();
                me.buildLabels();
                me.afterBuildLabels();
    
                // Fit
                me.beforeFit();
                me.fit();
                me.afterFit();
                //
                me.afterUpdate();
    
                return me.minSize;
            },
            afterUpdate: noop,
    
            //
    
            beforeSetDimensions: noop,
            setDimensions: function() {
                var me = this;
                // Set the unconstrained dimension before label rotation
                if (me.isHorizontal()) {
                    // Reset position before calculating rotation
                    me.width = me.maxWidth;
                    me.left = 0;
                    me.right = me.width;
                } else {
                    me.height = me.maxHeight;
    
                    // Reset position before calculating rotation
                    me.top = 0;
                    me.bottom = me.height;
                }
    
                // Reset padding
                me.paddingLeft = 0;
                me.paddingTop = 0;
                me.paddingRight = 0;
                me.paddingBottom = 0;
    
                // Reset minSize
                me.minSize = {
                    width: 0,
                    height: 0
                };
            },
            afterSetDimensions: noop,
    
            //
    
            beforeBuildLabels: noop,
            buildLabels: function() {
                var me = this;
                var labelOpts = me.options.labels || {};
                var legendItems = helpers.callback(labelOpts.generateLabels, [me.chart], me) || [];
    
                if (labelOpts.filter) {
                    legendItems = legendItems.filter(function(item) {
                        return labelOpts.filter(item, me.chart.data);
                    });
                }
    
                if (me.options.reverse) {
                    legendItems.reverse();
                }
    
                me.legendItems = legendItems;
            },
            afterBuildLabels: noop,
    
            //
    
            beforeFit: noop,
            fit: function() {
                var me = this;
                var opts = me.options;
                var labelOpts = opts.labels;
                var display = opts.display;
    
                var ctx = me.ctx;
    
                var globalDefault = defaults.global;
                var valueOrDefault = helpers.valueOrDefault;
                var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
                var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
                var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
                var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
    
                // Reset hit boxes
                var hitboxes = me.legendHitBoxes = [];
    
                var minSize = me.minSize;
                var isHorizontal = me.isHorizontal();
    
                if (isHorizontal) {
                    minSize.width = me.maxWidth; // fill all the width
                    minSize.height = display ? 10 : 0;
                } else {
                    minSize.width = display ? 10 : 0;
                    minSize.height = me.maxHeight; // fill all the height
                }
    
                // Increase sizes here
                if (display) {
                    ctx.font = labelFont;
    
                    if (isHorizontal) {
                        // Labels
    
                        // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
                        var lineWidths = me.lineWidths = [0];
                        var totalHeight = me.legendItems.length ? fontSize + (labelOpts.padding) : 0;
    
                        ctx.textAlign = 'left';
                        ctx.textBaseline = 'top';
    
                        helpers.each(me.legendItems, function(legendItem, i) {
                            var boxWidth = getBoxWidth(labelOpts, fontSize);
                            var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
    
                            if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                                totalHeight += fontSize + (labelOpts.padding);
                                lineWidths[lineWidths.length] = me.left;
                            }
    
                            // Store the hitbox width and height here. Final position will be updated in `draw`
                            hitboxes[i] = {
                                left: 0,
                                top: 0,
                                width: width,
                                height: fontSize
                            };
    
                            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
                        });
    
                        minSize.height += totalHeight;
    
                    } else {
                        var vPadding = labelOpts.padding;
                        var columnWidths = me.columnWidths = [];
                        var totalWidth = labelOpts.padding;
                        var currentColWidth = 0;
                        var currentColHeight = 0;
                        var itemHeight = fontSize + vPadding;
    
                        helpers.each(me.legendItems, function(legendItem, i) {
                            var boxWidth = getBoxWidth(labelOpts, fontSize);
                            var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
    
                            // If too tall, go to new column
                            if (currentColHeight + itemHeight > minSize.height) {
                                totalWidth += currentColWidth + labelOpts.padding;
                                columnWidths.push(currentColWidth); // previous column width
    
                                currentColWidth = 0;
                                currentColHeight = 0;
                            }
    
                            // Get max width
                            currentColWidth = Math.max(currentColWidth, itemWidth);
                            currentColHeight += itemHeight;
    
                            // Store the hitbox width and height here. Final position will be updated in `draw`
                            hitboxes[i] = {
                                left: 0,
                                top: 0,
                                width: itemWidth,
                                height: fontSize
                            };
                        });
    
                        totalWidth += currentColWidth;
                        columnWidths.push(currentColWidth);
                        minSize.width += totalWidth;
                    }
                }
    
                me.width = minSize.width;
                me.height = minSize.height;
            },
            afterFit: noop,
    
            // Shared Methods
            isHorizontal: function() {
                return this.options.position === 'top' || this.options.position === 'bottom';
            },
    
            // Actually draw the legend on the canvas
            draw: function() {
                var me = this;
                var opts = me.options;
                var labelOpts = opts.labels;
                var globalDefault = defaults.global;
                var lineDefault = globalDefault.elements.line;
                var legendWidth = me.width;
                var lineWidths = me.lineWidths;
    
                if (opts.display) {
                    var ctx = me.ctx;
                    var valueOrDefault = helpers.valueOrDefault;
                    var fontColor = valueOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor);
                    var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
                    var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
                    var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
                    var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                    var cursor;
    
                    // Canvas setup
                    ctx.textAlign = 'left';
                    ctx.textBaseline = 'middle';
                    ctx.lineWidth = 0.5;
                    ctx.strokeStyle = fontColor; // for strikethrough effect
                    ctx.fillStyle = fontColor; // render in correct colour
                    ctx.font = labelFont;
    
                    var boxWidth = getBoxWidth(labelOpts, fontSize);
                    var hitboxes = me.legendHitBoxes;
    
                    // current position
                    var drawLegendBox = function(x, y, legendItem) {
                        if (isNaN(boxWidth) || boxWidth <= 0) {
                            return;
                        }
    
                        // Set the ctx for the box
                        ctx.save();
    
                        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
                        ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
                        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
                        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
                        ctx.lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
                        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
                        var isLineWidthZero = (valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0);
    
                        if (ctx.setLineDash) {
                            // IE 9 and 10 do not support line dash
                            ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
                        }
    
                        if (opts.labels && opts.labels.usePointStyle) {
                            // Recalculate x and y for drawPoint() because its expecting
                            // x and y to be center of figure (instead of top left)
                            var radius = fontSize * Math.SQRT2 / 2;
                            var offSet = radius / Math.SQRT2;
                            var centerX = x + offSet;
                            var centerY = y + offSet;
    
                            // Draw pointStyle as legend symbol
                            helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
                        } else {
                            // Draw box as legend symbol
                            if (!isLineWidthZero) {
                                ctx.strokeRect(x, y, boxWidth, fontSize);
                            }
                            ctx.fillRect(x, y, boxWidth, fontSize);
                        }
    
                        ctx.restore();
                    };
                    var fillText = function(x, y, legendItem, textWidth) {
                        var halfFontSize = fontSize / 2;
                        var xLeft = boxWidth + halfFontSize + x;
                        var yMiddle = y + halfFontSize;
    
                        ctx.fillText(legendItem.text, xLeft, yMiddle);
    
                        if (legendItem.hidden) {
                            // Strikethrough the text if hidden
                            ctx.beginPath();
                            ctx.lineWidth = 2;
                            ctx.moveTo(xLeft, yMiddle);
                            ctx.lineTo(xLeft + textWidth, yMiddle);
                            ctx.stroke();
                        }
                    };
    
                    // Horizontal
                    var isHorizontal = me.isHorizontal();
                    if (isHorizontal) {
                        cursor = {
                            x: me.left + ((legendWidth - lineWidths[0]) / 2),
                            y: me.top + labelOpts.padding,
                            line: 0
                        };
                    } else {
                        cursor = {
                            x: me.left + labelOpts.padding,
                            y: me.top + labelOpts.padding,
                            line: 0
                        };
                    }
    
                    var itemHeight = fontSize + labelOpts.padding;
                    helpers.each(me.legendItems, function(legendItem, i) {
                        var textWidth = ctx.measureText(legendItem.text).width;
                        var width = boxWidth + (fontSize / 2) + textWidth;
                        var x = cursor.x;
                        var y = cursor.y;
    
                        if (isHorizontal) {
                            if (x + width >= legendWidth) {
                                y = cursor.y += itemHeight;
                                cursor.line++;
                                x = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2);
                            }
                        } else if (y + itemHeight > me.bottom) {
                            x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                            y = cursor.y = me.top + labelOpts.padding;
                            cursor.line++;
                        }
    
                        drawLegendBox(x, y, legendItem);
    
                        hitboxes[i].left = x;
                        hitboxes[i].top = y;
    
                        // Fill the actual label
                        fillText(x, y, legendItem, textWidth);
    
                        if (isHorizontal) {
                            cursor.x += width + (labelOpts.padding);
                        } else {
                            cursor.y += itemHeight;
                        }
    
                    });
                }
            },
    
            /**
             * Handle an event
             * @private
             * @param {IEvent} event - The event to handle
             * @return {Boolean} true if a change occured
             */
            handleEvent: function(e) {
                var me = this;
                var opts = me.options;
                var type = e.type === 'mouseup' ? 'click' : e.type;
                var changed = false;
    
                if (type === 'mousemove') {
                    if (!opts.onHover) {
                        return;
                    }
                } else if (type === 'click') {
                    if (!opts.onClick) {
                        return;
                    }
                } else {
                    return;
                }
    
                // Chart event already has relative position in it
                var x = e.x;
                var y = e.y;
    
                if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
                    // See if we are touching one of the dataset boxes
                    var lh = me.legendHitBoxes;
                    for (var i = 0; i < lh.length; ++i) {
                        var hitBox = lh[i];
    
                        if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                            // Touching an element
                            if (type === 'click') {
                                // use e.native for backwards compatibility
                                opts.onClick.call(me, e.native, me.legendItems[i]);
                                changed = true;
                                break;
                            } else if (type === 'mousemove') {
                                // use e.native for backwards compatibility
                                opts.onHover.call(me, e.native, me.legendItems[i]);
                                changed = true;
                                break;
                            }
                        }
                    }
                }
    
                return changed;
            }
        });
    
        function createNewLegendAndAttach(chart, legendOpts) {
            var legend = new Chart.Legend({
                ctx: chart.ctx,
                options: legendOpts,
                chart: chart
            });
    
            layout.configure(chart, legend, legendOpts);
            layout.addBox(chart, legend);
            chart.legend = legend;
        }
    
        return {
            id: 'legend',
    
            beforeInit: function(chart) {
                var legendOpts = chart.options.legend;
    
                if (legendOpts) {
                    createNewLegendAndAttach(chart, legendOpts);
                }
            },
    
            beforeUpdate: function(chart) {
                var legendOpts = chart.options.legend;
                var legend = chart.legend;
    
                if (legendOpts) {
                    helpers.mergeIf(legendOpts, defaults.global.legend);
    
                    if (legend) {
                        layout.configure(chart, legend, legendOpts);
                        legend.options = legendOpts;
                    } else {
                        createNewLegendAndAttach(chart, legendOpts);
                    }
                } else if (legend) {
                    layout.removeBox(chart, legend);
                    delete chart.legend;
                }
            },
    
            afterEvent: function(chart, e) {
                var legend = chart.legend;
                if (legend) {
                    legend.handleEvent(e);
                }
            }
        };
    };
    
    },{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],45:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var Element = require('../core/core.element');
    var helpers = require('../helpers/index');
    
    defaults._set('global', {
        title: {
            display: false,
            fontStyle: 'bold',
            fullWidth: true,
            lineHeight: 1.2,
            padding: 10,
            position: 'top',
            text: '',
            weight: 2000         // by default greater than legend (1000) to be above
        }
    });
    
    module.exports = function(Chart) {
    
        var layout = Chart.layoutService;
        var noop = helpers.noop;
    
        Chart.Title = Element.extend({
            initialize: function(config) {
                var me = this;
                helpers.extend(me, config);
    
                // Contains hit boxes for each dataset (in dataset order)
                me.legendHitBoxes = [];
            },
    
            // These methods are ordered by lifecycle. Utilities then follow.
    
            beforeUpdate: noop,
            update: function(maxWidth, maxHeight, margins) {
                var me = this;
    
                // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                me.beforeUpdate();
    
                // Absorb the master measurements
                me.maxWidth = maxWidth;
                me.maxHeight = maxHeight;
                me.margins = margins;
    
                // Dimensions
                me.beforeSetDimensions();
                me.setDimensions();
                me.afterSetDimensions();
                // Labels
                me.beforeBuildLabels();
                me.buildLabels();
                me.afterBuildLabels();
    
                // Fit
                me.beforeFit();
                me.fit();
                me.afterFit();
                //
                me.afterUpdate();
    
                return me.minSize;
    
            },
            afterUpdate: noop,
    
            //
    
            beforeSetDimensions: noop,
            setDimensions: function() {
                var me = this;
                // Set the unconstrained dimension before label rotation
                if (me.isHorizontal()) {
                    // Reset position before calculating rotation
                    me.width = me.maxWidth;
                    me.left = 0;
                    me.right = me.width;
                } else {
                    me.height = me.maxHeight;
    
                    // Reset position before calculating rotation
                    me.top = 0;
                    me.bottom = me.height;
                }
    
                // Reset padding
                me.paddingLeft = 0;
                me.paddingTop = 0;
                me.paddingRight = 0;
                me.paddingBottom = 0;
    
                // Reset minSize
                me.minSize = {
                    width: 0,
                    height: 0
                };
            },
            afterSetDimensions: noop,
    
            //
    
            beforeBuildLabels: noop,
            buildLabels: noop,
            afterBuildLabels: noop,
    
            //
    
            beforeFit: noop,
            fit: function() {
                var me = this;
                var valueOrDefault = helpers.valueOrDefault;
                var opts = me.options;
                var display = opts.display;
                var fontSize = valueOrDefault(opts.fontSize, defaults.global.defaultFontSize);
                var minSize = me.minSize;
                var lineCount = helpers.isArray(opts.text) ? opts.text.length : 1;
                var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
                var textSize = display ? (lineCount * lineHeight) + (opts.padding * 2) : 0;
    
                if (me.isHorizontal()) {
                    minSize.width = me.maxWidth; // fill all the width
                    minSize.height = textSize;
                } else {
                    minSize.width = textSize;
                    minSize.height = me.maxHeight; // fill all the height
                }
    
                me.width = minSize.width;
                me.height = minSize.height;
    
            },
            afterFit: noop,
    
            // Shared Methods
            isHorizontal: function() {
                var pos = this.options.position;
                return pos === 'top' || pos === 'bottom';
            },
    
            // Actually draw the title block on the canvas
            draw: function() {
                var me = this;
                var ctx = me.ctx;
                var valueOrDefault = helpers.valueOrDefault;
                var opts = me.options;
                var globalDefaults = defaults.global;
    
                if (opts.display) {
                    var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize);
                    var fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle);
                    var fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily);
                    var titleFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                    var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
                    var offset = lineHeight / 2 + opts.padding;
                    var rotation = 0;
                    var top = me.top;
                    var left = me.left;
                    var bottom = me.bottom;
                    var right = me.right;
                    var maxWidth, titleX, titleY;
    
                    ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour
                    ctx.font = titleFont;
    
                    // Horizontal
                    if (me.isHorizontal()) {
                        titleX = left + ((right - left) / 2); // midpoint of the width
                        titleY = top + offset;
                        maxWidth = right - left;
                    } else {
                        titleX = opts.position === 'left' ? left + offset : right - offset;
                        titleY = top + ((bottom - top) / 2);
                        maxWidth = bottom - top;
                        rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
                    }
    
                    ctx.save();
                    ctx.translate(titleX, titleY);
                    ctx.rotate(rotation);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
    
                    var text = opts.text;
                    if (helpers.isArray(text)) {
                        var y = 0;
                        for (var i = 0; i < text.length; ++i) {
                            ctx.fillText(text[i], 0, y, maxWidth);
                            y += lineHeight;
                        }
                    } else {
                        ctx.fillText(text, 0, 0, maxWidth);
                    }
    
                    ctx.restore();
                }
            }
        });
    
        function createNewTitleBlockAndAttach(chart, titleOpts) {
            var title = new Chart.Title({
                ctx: chart.ctx,
                options: titleOpts,
                chart: chart
            });
    
            layout.configure(chart, title, titleOpts);
            layout.addBox(chart, title);
            chart.titleBlock = title;
        }
    
        return {
            id: 'title',
    
            beforeInit: function(chart) {
                var titleOpts = chart.options.title;
    
                if (titleOpts) {
                    createNewTitleBlockAndAttach(chart, titleOpts);
                }
            },
    
            beforeUpdate: function(chart) {
                var titleOpts = chart.options.title;
                var titleBlock = chart.titleBlock;
    
                if (titleOpts) {
                    helpers.mergeIf(titleOpts, defaults.global.title);
    
                    if (titleBlock) {
                        layout.configure(chart, titleBlock, titleOpts);
                        titleBlock.options = titleOpts;
                    } else {
                        createNewTitleBlockAndAttach(chart, titleOpts);
                    }
                } else if (titleBlock) {
                    Chart.layoutService.removeBox(chart, titleBlock);
                    delete chart.titleBlock;
                }
            }
        };
    };
    
    },{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],46:[function(require,module,exports){
    'use strict';
    
    module.exports = function(Chart) {
    
        // Default config for a category scale
        var defaultConfig = {
            position: 'bottom'
        };
    
        var DatasetScale = Chart.Scale.extend({
            /**
            * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
            * else fall back to data.labels
            * @private
            */
            getLabels: function() {
                var data = this.chart.data;
                return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
            },
    
            determineDataLimits: function() {
                var me = this;
                var labels = me.getLabels();
                me.minIndex = 0;
                me.maxIndex = labels.length - 1;
                var findIndex;
    
                if (me.options.ticks.min !== undefined) {
                    // user specified min value
                    findIndex = labels.indexOf(me.options.ticks.min);
                    me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
                }
    
                if (me.options.ticks.max !== undefined) {
                    // user specified max value
                    findIndex = labels.indexOf(me.options.ticks.max);
                    me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
                }
    
                me.min = labels[me.minIndex];
                me.max = labels[me.maxIndex];
            },
    
            buildTicks: function() {
                var me = this;
                var labels = me.getLabels();
                // If we are viewing some subset of labels, slice the original array
                me.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
            },
    
            getLabelForIndex: function(index, datasetIndex) {
                var me = this;
                var data = me.chart.data;
                var isHorizontal = me.isHorizontal();
    
                if (data.yLabels && !isHorizontal) {
                    return me.getRightValue(data.datasets[datasetIndex].data[index]);
                }
                return me.ticks[index - me.minIndex];
            },
    
            // Used to get data value locations.  Value can either be an index or a numerical value
            getPixelForValue: function(value, index) {
                var me = this;
                var offset = me.options.offset;
                // 1 is added because we need the length but we have the indexes
                var offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1)), 1);
    
                // If value is a data object, then index is the index in the data array,
                // not the index of the scale. We need to change that.
                var valueCategory;
                if (value !== undefined && value !== null) {
                    valueCategory = me.isHorizontal() ? value.x : value.y;
                }
                if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
                    var labels = me.getLabels();
                    value = valueCategory || value;
                    var idx = labels.indexOf(value);
                    index = idx !== -1 ? idx : index;
                }
    
                if (me.isHorizontal()) {
                    var valueWidth = me.width / offsetAmt;
                    var widthOffset = (valueWidth * (index - me.minIndex));
    
                    if (offset) {
                        widthOffset += (valueWidth / 2);
                    }
    
                    return me.left + Math.round(widthOffset);
                }
                var valueHeight = me.height / offsetAmt;
                var heightOffset = (valueHeight * (index - me.minIndex));
    
                if (offset) {
                    heightOffset += (valueHeight / 2);
                }
    
                return me.top + Math.round(heightOffset);
            },
            getPixelForTick: function(index) {
                return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);
            },
            getValueForPixel: function(pixel) {
                var me = this;
                var offset = me.options.offset;
                var value;
                var offsetAmt = Math.max((me._ticks.length - (offset ? 0 : 1)), 1);
                var horz = me.isHorizontal();
                var valueDimension = (horz ? me.width : me.height) / offsetAmt;
    
                pixel -= horz ? me.left : me.top;
    
                if (offset) {
                    pixel -= (valueDimension / 2);
                }
    
                if (pixel <= 0) {
                    value = 0;
                } else {
                    value = Math.round(pixel / valueDimension);
                }
    
                return value + me.minIndex;
            },
            getBasePixel: function() {
                return this.bottom;
            }
        });
    
        Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);
    
    };
    
    },{}],47:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var helpers = require('../helpers/index');
    var Ticks = require('../core/core.ticks');
    
    module.exports = function(Chart) {
    
        var defaultConfig = {
            position: 'left',
            ticks: {
                callback: Ticks.formatters.linear
            }
        };
    
        var LinearScale = Chart.LinearScaleBase.extend({
    
            determineDataLimits: function() {
                var me = this;
                var opts = me.options;
                var chart = me.chart;
                var data = chart.data;
                var datasets = data.datasets;
                var isHorizontal = me.isHorizontal();
                var DEFAULT_MIN = 0;
                var DEFAULT_MAX = 1;
    
                function IDMatches(meta) {
                    return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
                }
    
                // First Calculate the range
                me.min = null;
                me.max = null;
    
                var hasStacks = opts.stacked;
                if (hasStacks === undefined) {
                    helpers.each(datasets, function(dataset, datasetIndex) {
                        if (hasStacks) {
                            return;
                        }
    
                        var meta = chart.getDatasetMeta(datasetIndex);
                        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
                            meta.stack !== undefined) {
                            hasStacks = true;
                        }
                    });
                }
    
                if (opts.stacked || hasStacks) {
                    var valuesPerStack = {};
    
                    helpers.each(datasets, function(dataset, datasetIndex) {
                        var meta = chart.getDatasetMeta(datasetIndex);
                        var key = [
                            meta.type,
                            // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                            ((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
                            meta.stack
                        ].join('.');
    
                        if (valuesPerStack[key] === undefined) {
                            valuesPerStack[key] = {
                                positiveValues: [],
                                negativeValues: []
                            };
                        }
    
                        // Store these per type
                        var positiveValues = valuesPerStack[key].positiveValues;
                        var negativeValues = valuesPerStack[key].negativeValues;
    
                        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                            helpers.each(dataset.data, function(rawValue, index) {
                                var value = +me.getRightValue(rawValue);
                                if (isNaN(value) || meta.data[index].hidden) {
                                    return;
                                }
    
                                positiveValues[index] = positiveValues[index] || 0;
                                negativeValues[index] = negativeValues[index] || 0;
    
                                if (opts.relativePoints) {
                                    positiveValues[index] = 100;
                                } else if (value < 0) {
                                    negativeValues[index] += value;
                                } else {
                                    positiveValues[index] += value;
                                }
                            });
                        }
                    });
    
                    helpers.each(valuesPerStack, function(valuesForType) {
                        var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
                        var minVal = helpers.min(values);
                        var maxVal = helpers.max(values);
                        me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                        me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                    });
    
                } else {
                    helpers.each(datasets, function(dataset, datasetIndex) {
                        var meta = chart.getDatasetMeta(datasetIndex);
                        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                            helpers.each(dataset.data, function(rawValue, index) {
                                var value = +me.getRightValue(rawValue);
                                if (isNaN(value) || meta.data[index].hidden) {
                                    return;
                                }
    
                                if (me.min === null) {
                                    me.min = value;
                                } else if (value < me.min) {
                                    me.min = value;
                                }
    
                                if (me.max === null) {
                                    me.max = value;
                                } else if (value > me.max) {
                                    me.max = value;
                                }
                            });
                        }
                    });
                }
    
                me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
                me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;
    
                // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
                this.handleTickRangeOptions();
            },
            getTickLimit: function() {
                var maxTicks;
                var me = this;
                var tickOpts = me.options.ticks;
    
                if (me.isHorizontal()) {
                    maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
                } else {
                    // The factor of 2 used to scale the font size has been experimentally determined.
                    var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, defaults.global.defaultFontSize);
                    maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
                }
    
                return maxTicks;
            },
            // Called after the ticks are built. We need
            handleDirectionalChanges: function() {
                if (!this.isHorizontal()) {
                    // We are in a vertical orientation. The top value is the highest. So reverse the array
                    this.ticks.reverse();
                }
            },
            getLabelForIndex: function(index, datasetIndex) {
                return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
            },
            // Utils
            getPixelForValue: function(value) {
                // This must be called after fit has been run so that
                // this.left, this.top, this.right, and this.bottom have been defined
                var me = this;
                var start = me.start;
    
                var rightValue = +me.getRightValue(value);
                var pixel;
                var range = me.end - start;
    
                if (me.isHorizontal()) {
                    pixel = me.left + (me.width / range * (rightValue - start));
                    return Math.round(pixel);
                }
    
                pixel = me.bottom - (me.height / range * (rightValue - start));
                return Math.round(pixel);
            },
            getValueForPixel: function(pixel) {
                var me = this;
                var isHorizontal = me.isHorizontal();
                var innerDimension = isHorizontal ? me.width : me.height;
                var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
                return me.start + ((me.end - me.start) * offset);
            },
            getPixelForTick: function(index) {
                return this.getPixelForValue(this.ticksAsNumbers[index]);
            }
        });
        Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);
    
    };
    
    },{"../core/core.defaults":19,"../core/core.ticks":28,"../helpers/index":39}],48:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    var Ticks = require('../core/core.ticks');
    
    module.exports = function(Chart) {
    
        var noop = helpers.noop;
    
        Chart.LinearScaleBase = Chart.Scale.extend({
            getRightValue: function(value) {
                if (typeof value === 'string') {
                    return +value;
                }
                return Chart.Scale.prototype.getRightValue.call(this, value);
            },
    
            handleTickRangeOptions: function() {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
    
                // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
                // do nothing since that would make the chart weird. If the user really wants a weird chart
                // axis, they can manually override it
                if (tickOpts.beginAtZero) {
                    var minSign = helpers.sign(me.min);
                    var maxSign = helpers.sign(me.max);
    
                    if (minSign < 0 && maxSign < 0) {
                        // move the top up to 0
                        me.max = 0;
                    } else if (minSign > 0 && maxSign > 0) {
                        // move the bottom down to 0
                        me.min = 0;
                    }
                }
    
                var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
                var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;
    
                if (tickOpts.min !== undefined) {
                    me.min = tickOpts.min;
                } else if (tickOpts.suggestedMin !== undefined) {
                    if (me.min === null) {
                        me.min = tickOpts.suggestedMin;
                    } else {
                        me.min = Math.min(me.min, tickOpts.suggestedMin);
                    }
                }
    
                if (tickOpts.max !== undefined) {
                    me.max = tickOpts.max;
                } else if (tickOpts.suggestedMax !== undefined) {
                    if (me.max === null) {
                        me.max = tickOpts.suggestedMax;
                    } else {
                        me.max = Math.max(me.max, tickOpts.suggestedMax);
                    }
                }
    
                if (setMin !== setMax) {
                    // We set the min or the max but not both.
                    // So ensure that our range is good
                    // Inverted or 0 length range can happen when
                    // ticks.min is set, and no datasets are visible
                    if (me.min >= me.max) {
                        if (setMin) {
                            me.max = me.min + 1;
                        } else {
                            me.min = me.max - 1;
                        }
                    }
                }
    
                if (me.min === me.max) {
                    me.max++;
    
                    if (!tickOpts.beginAtZero) {
                        me.min--;
                    }
                }
            },
            getTickLimit: noop,
            handleDirectionalChanges: noop,
    
            buildTicks: function() {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
    
                // Figure out what the max number of ticks we can support it is based on the size of
                // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
                // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
                // the graph. Make sure we always have at least 2 ticks
                var maxTicks = me.getTickLimit();
                maxTicks = Math.max(2, maxTicks);
    
                var numericGeneratorOptions = {
                    maxTicks: maxTicks,
                    min: tickOpts.min,
                    max: tickOpts.max,
                    stepSize: helpers.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
                };
                var ticks = me.ticks = Ticks.generators.linear(numericGeneratorOptions, me);
    
                me.handleDirectionalChanges();
    
                // At this point, we need to update our max and min given the tick values since we have expanded the
                // range of the scale
                me.max = helpers.max(ticks);
                me.min = helpers.min(ticks);
    
                if (tickOpts.reverse) {
                    ticks.reverse();
    
                    me.start = me.max;
                    me.end = me.min;
                } else {
                    me.start = me.min;
                    me.end = me.max;
                }
            },
            convertTicksToLabels: function() {
                var me = this;
                me.ticksAsNumbers = me.ticks.slice();
                me.zeroLineIndex = me.ticks.indexOf(0);
    
                Chart.Scale.prototype.convertTicksToLabels.call(me);
            }
        });
    };
    
    },{"../core/core.ticks":28,"../helpers/index":39}],49:[function(require,module,exports){
    'use strict';
    
    var helpers = require('../helpers/index');
    var Ticks = require('../core/core.ticks');
    
    module.exports = function(Chart) {
    
        var defaultConfig = {
            position: 'left',
    
            // label settings
            ticks: {
                callback: Ticks.formatters.logarithmic
            }
        };
    
        var LogarithmicScale = Chart.Scale.extend({
            determineDataLimits: function() {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
                var chart = me.chart;
                var data = chart.data;
                var datasets = data.datasets;
                var valueOrDefault = helpers.valueOrDefault;
                var isHorizontal = me.isHorizontal();
                function IDMatches(meta) {
                    return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
                }
    
                // Calculate Range
                me.min = null;
                me.max = null;
                me.minNotZero = null;
    
                var hasStacks = opts.stacked;
                if (hasStacks === undefined) {
                    helpers.each(datasets, function(dataset, datasetIndex) {
                        if (hasStacks) {
                            return;
                        }
    
                        var meta = chart.getDatasetMeta(datasetIndex);
                        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
                            meta.stack !== undefined) {
                            hasStacks = true;
                        }
                    });
                }
    
                if (opts.stacked || hasStacks) {
                    var valuesPerStack = {};
    
                    helpers.each(datasets, function(dataset, datasetIndex) {
                        var meta = chart.getDatasetMeta(datasetIndex);
                        var key = [
                            meta.type,
                            // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                            ((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
                            meta.stack
                        ].join('.');
    
                        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                            if (valuesPerStack[key] === undefined) {
                                valuesPerStack[key] = [];
                            }
    
                            helpers.each(dataset.data, function(rawValue, index) {
                                var values = valuesPerStack[key];
                                var value = +me.getRightValue(rawValue);
                                if (isNaN(value) || meta.data[index].hidden) {
                                    return;
                                }
    
                                values[index] = values[index] || 0;
    
                                if (opts.relativePoints) {
                                    values[index] = 100;
                                } else {
                                    // Don't need to split positive and negative since the log scale can't handle a 0 crossing
                                    values[index] += value;
                                }
                            });
                        }
                    });
    
                    helpers.each(valuesPerStack, function(valuesForType) {
                        var minVal = helpers.min(valuesForType);
                        var maxVal = helpers.max(valuesForType);
                        me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                        me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                    });
    
                } else {
                    helpers.each(datasets, function(dataset, datasetIndex) {
                        var meta = chart.getDatasetMeta(datasetIndex);
                        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                            helpers.each(dataset.data, function(rawValue, index) {
                                var value = +me.getRightValue(rawValue);
                                if (isNaN(value) || meta.data[index].hidden) {
                                    return;
                                }
    
                                if (me.min === null) {
                                    me.min = value;
                                } else if (value < me.min) {
                                    me.min = value;
                                }
    
                                if (me.max === null) {
                                    me.max = value;
                                } else if (value > me.max) {
                                    me.max = value;
                                }
    
                                if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                                    me.minNotZero = value;
                                }
                            });
                        }
                    });
                }
    
                me.min = valueOrDefault(tickOpts.min, me.min);
                me.max = valueOrDefault(tickOpts.max, me.max);
    
                if (me.min === me.max) {
                    if (me.min !== 0 && me.min !== null) {
                        me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
                        me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
                    } else {
                        me.min = 1;
                        me.max = 10;
                    }
                }
            },
            buildTicks: function() {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
    
                var generationOptions = {
                    min: tickOpts.min,
                    max: tickOpts.max
                };
                var ticks = me.ticks = Ticks.generators.logarithmic(generationOptions, me);
    
                if (!me.isHorizontal()) {
                    // We are in a vertical orientation. The top value is the highest. So reverse the array
                    ticks.reverse();
                }
    
                // At this point, we need to update our max and min given the tick values since we have expanded the
                // range of the scale
                me.max = helpers.max(ticks);
                me.min = helpers.min(ticks);
    
                if (tickOpts.reverse) {
                    ticks.reverse();
    
                    me.start = me.max;
                    me.end = me.min;
                } else {
                    me.start = me.min;
                    me.end = me.max;
                }
            },
            convertTicksToLabels: function() {
                this.tickValues = this.ticks.slice();
    
                Chart.Scale.prototype.convertTicksToLabels.call(this);
            },
            // Get the correct tooltip label
            getLabelForIndex: function(index, datasetIndex) {
                return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
            },
            getPixelForTick: function(index) {
                return this.getPixelForValue(this.tickValues[index]);
            },
            getPixelForValue: function(value) {
                var me = this;
                var start = me.start;
                var newVal = +me.getRightValue(value);
                var opts = me.options;
                var tickOpts = opts.ticks;
                var innerDimension, pixel, range;
    
                if (me.isHorizontal()) {
                    range = helpers.log10(me.end) - helpers.log10(start); // todo: if start === 0
                    if (newVal === 0) {
                        pixel = me.left;
                    } else {
                        innerDimension = me.width;
                        pixel = me.left + (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
                    }
                } else {
                    // Bottom - top since pixels increase downward on a screen
                    innerDimension = me.height;
                    if (start === 0 && !tickOpts.reverse) {
                        range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
                        if (newVal === start) {
                            pixel = me.bottom;
                        } else if (newVal === me.minNotZero) {
                            pixel = me.bottom - innerDimension * 0.02;
                        } else {
                            pixel = me.bottom - innerDimension * 0.02 - (innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero)));
                        }
                    } else if (me.end === 0 && tickOpts.reverse) {
                        range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
                        if (newVal === me.end) {
                            pixel = me.top;
                        } else if (newVal === me.minNotZero) {
                            pixel = me.top + innerDimension * 0.02;
                        } else {
                            pixel = me.top + innerDimension * 0.02 + (innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero)));
                        }
                    } else if (newVal === 0) {
                        pixel = tickOpts.reverse ? me.top : me.bottom;
                    } else {
                        range = helpers.log10(me.end) - helpers.log10(start);
                        innerDimension = me.height;
                        pixel = me.bottom - (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
                    }
                }
                return pixel;
            },
            getValueForPixel: function(pixel) {
                var me = this;
                var range = helpers.log10(me.end) - helpers.log10(me.start);
                var value, innerDimension;
    
                if (me.isHorizontal()) {
                    innerDimension = me.width;
                    value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
                } else { // todo: if start === 0
                    innerDimension = me.height;
                    value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
                }
                return value;
            }
        });
        Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
    
    };
    
    },{"../core/core.ticks":28,"../helpers/index":39}],50:[function(require,module,exports){
    'use strict';
    
    var defaults = require('../core/core.defaults');
    var helpers = require('../helpers/index');
    var Ticks = require('../core/core.ticks');
    
    module.exports = function(Chart) {
    
        var globalDefaults = defaults.global;
    
        var defaultConfig = {
            display: true,
    
            // Boolean - Whether to animate scaling the chart from the centre
            animate: true,
            position: 'chartArea',
    
            angleLines: {
                display: true,
                color: 'rgba(0, 0, 0, 0.1)',
                lineWidth: 1
            },
    
            gridLines: {
                circular: false
            },
    
            // label settings
            ticks: {
                // Boolean - Show a backdrop to the scale label
                showLabelBackdrop: true,
    
                // String - The colour of the label backdrop
                backdropColor: 'rgba(255,255,255,0.75)',
    
                // Number - The backdrop padding above & below the label in pixels
                backdropPaddingY: 2,
    
                // Number - The backdrop padding to the side of the label in pixels
                backdropPaddingX: 2,
    
                callback: Ticks.formatters.linear
            },
    
            pointLabels: {
                // Boolean - if true, show point labels
                display: true,
    
                // Number - Point label font size in pixels
                fontSize: 10,
    
                // Function - Used to convert point labels
                callback: function(label) {
                    return label;
                }
            }
        };
    
        function getValueCount(scale) {
            var opts = scale.options;
            return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;
        }
    
        function getPointLabelFontOptions(scale) {
            var pointLabelOptions = scale.options.pointLabels;
            var fontSize = helpers.valueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
            var fontStyle = helpers.valueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
            var fontFamily = helpers.valueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
            var font = helpers.fontString(fontSize, fontStyle, fontFamily);
    
            return {
                size: fontSize,
                style: fontStyle,
                family: fontFamily,
                font: font
            };
        }
    
        function measureLabelSize(ctx, fontSize, label) {
            if (helpers.isArray(label)) {
                return {
                    w: helpers.longestText(ctx, ctx.font, label),
                    h: (label.length * fontSize) + ((label.length - 1) * 1.5 * fontSize)
                };
            }
    
            return {
                w: ctx.measureText(label).width,
                h: fontSize
            };
        }
    
        function determineLimits(angle, pos, size, min, max) {
            if (angle === min || angle === max) {
                return {
                    start: pos - (size / 2),
                    end: pos + (size / 2)
                };
            } else if (angle < min || angle > max) {
                return {
                    start: pos - size - 5,
                    end: pos
                };
            }
    
            return {
                start: pos,
                end: pos + size + 5
            };
        }
    
        /**
         * Helper function to fit a radial linear scale with point labels
         */
        function fitWithPointLabels(scale) {
            /*
             * Right, this is really confusing and there is a lot of maths going on here
             * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
             *
             * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
             *
             * Solution:
             *
             * We assume the radius of the polygon is half the size of the canvas at first
             * at each index we check if the text overlaps.
             *
             * Where it does, we store that angle and that index.
             *
             * After finding the largest index and angle we calculate how much we need to remove
             * from the shape radius to move the point inwards by that x.
             *
             * We average the left and right distances to get the maximum shape radius that can fit in the box
             * along with labels.
             *
             * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
             * on each side, removing that from the size, halving it and adding the left x protrusion width.
             *
             * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
             * and position it in the most space efficient manner
             *
             * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
             */
    
            var plFont = getPointLabelFontOptions(scale);
    
            // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
            // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
            var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
            var furthestLimits = {
                r: scale.width,
                l: 0,
                t: scale.height,
                b: 0
            };
            var furthestAngles = {};
            var i, textSize, pointPosition;
    
            scale.ctx.font = plFont.font;
            scale._pointLabelSizes = [];
    
            var valueCount = getValueCount(scale);
            for (i = 0; i < valueCount; i++) {
                pointPosition = scale.getPointPosition(i, largestPossibleRadius);
                textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
                scale._pointLabelSizes[i] = textSize;
    
                // Add quarter circle to make degree 0 mean top of circle
                var angleRadians = scale.getIndexAngle(i);
                var angle = helpers.toDegrees(angleRadians) % 360;
                var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
                var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    
                if (hLimits.start < furthestLimits.l) {
                    furthestLimits.l = hLimits.start;
                    furthestAngles.l = angleRadians;
                }
    
                if (hLimits.end > furthestLimits.r) {
                    furthestLimits.r = hLimits.end;
                    furthestAngles.r = angleRadians;
                }
    
                if (vLimits.start < furthestLimits.t) {
                    furthestLimits.t = vLimits.start;
                    furthestAngles.t = angleRadians;
                }
    
                if (vLimits.end > furthestLimits.b) {
                    furthestLimits.b = vLimits.end;
                    furthestAngles.b = angleRadians;
                }
            }
    
            scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
        }
    
        /**
         * Helper function to fit a radial linear scale with no point labels
         */
        function fit(scale) {
            var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
            scale.drawingArea = Math.round(largestPossibleRadius);
            scale.setCenterPoint(0, 0, 0, 0);
        }
    
        function getTextAlignForAngle(angle) {
            if (angle === 0 || angle === 180) {
                return 'center';
            } else if (angle < 180) {
                return 'left';
            }
    
            return 'right';
        }
    
        function fillText(ctx, text, position, fontSize) {
            if (helpers.isArray(text)) {
                var y = position.y;
                var spacing = 1.5 * fontSize;
    
                for (var i = 0; i < text.length; ++i) {
                    ctx.fillText(text[i], position.x, y);
                    y += spacing;
                }
            } else {
                ctx.fillText(text, position.x, position.y);
            }
        }
    
        function adjustPointPositionForLabelHeight(angle, textSize, position) {
            if (angle === 90 || angle === 270) {
                position.y -= (textSize.h / 2);
            } else if (angle > 270 || angle < 90) {
                position.y -= textSize.h;
            }
        }
    
        function drawPointLabels(scale) {
            var ctx = scale.ctx;
            var valueOrDefault = helpers.valueOrDefault;
            var opts = scale.options;
            var angleLineOpts = opts.angleLines;
            var pointLabelOpts = opts.pointLabels;
    
            ctx.lineWidth = angleLineOpts.lineWidth;
            ctx.strokeStyle = angleLineOpts.color;
    
            var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
    
            // Point Label Font
            var plFont = getPointLabelFontOptions(scale);
    
            ctx.textBaseline = 'top';
    
            for (var i = getValueCount(scale) - 1; i >= 0; i--) {
                if (angleLineOpts.display) {
                    var outerPosition = scale.getPointPosition(i, outerDistance);
                    ctx.beginPath();
                    ctx.moveTo(scale.xCenter, scale.yCenter);
                    ctx.lineTo(outerPosition.x, outerPosition.y);
                    ctx.stroke();
                    ctx.closePath();
                }
    
                if (pointLabelOpts.display) {
                    // Extra 3px out for some label spacing
                    var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
    
                    // Keep this in loop since we may support array properties here
                    var pointLabelFontColor = valueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
                    ctx.font = plFont.font;
                    ctx.fillStyle = pointLabelFontColor;
    
                    var angleRadians = scale.getIndexAngle(i);
                    var angle = helpers.toDegrees(angleRadians);
                    ctx.textAlign = getTextAlignForAngle(angle);
                    adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
                    fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
                }
            }
        }
    
        function drawRadiusLine(scale, gridLineOpts, radius, index) {
            var ctx = scale.ctx;
            ctx.strokeStyle = helpers.valueAtIndexOrDefault(gridLineOpts.color, index - 1);
            ctx.lineWidth = helpers.valueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
    
            if (scale.options.gridLines.circular) {
                // Draw circular arcs between the points
                ctx.beginPath();
                ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
                ctx.closePath();
                ctx.stroke();
            } else {
                // Draw straight lines connecting each index
                var valueCount = getValueCount(scale);
    
                if (valueCount === 0) {
                    return;
                }
    
                ctx.beginPath();
                var pointPosition = scale.getPointPosition(0, radius);
                ctx.moveTo(pointPosition.x, pointPosition.y);
    
                for (var i = 1; i < valueCount; i++) {
                    pointPosition = scale.getPointPosition(i, radius);
                    ctx.lineTo(pointPosition.x, pointPosition.y);
                }
    
                ctx.closePath();
                ctx.stroke();
            }
        }
    
        function numberOrZero(param) {
            return helpers.isNumber(param) ? param : 0;
        }
    
        var LinearRadialScale = Chart.LinearScaleBase.extend({
            setDimensions: function() {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
                // Set the unconstrained dimension before label rotation
                me.width = me.maxWidth;
                me.height = me.maxHeight;
                me.xCenter = Math.round(me.width / 2);
                me.yCenter = Math.round(me.height / 2);
    
                var minSize = helpers.min([me.height, me.width]);
                var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                me.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);
            },
            determineDataLimits: function() {
                var me = this;
                var chart = me.chart;
                var min = Number.POSITIVE_INFINITY;
                var max = Number.NEGATIVE_INFINITY;
    
                helpers.each(chart.data.datasets, function(dataset, datasetIndex) {
                    if (chart.isDatasetVisible(datasetIndex)) {
                        var meta = chart.getDatasetMeta(datasetIndex);
    
                        helpers.each(dataset.data, function(rawValue, index) {
                            var value = +me.getRightValue(rawValue);
                            if (isNaN(value) || meta.data[index].hidden) {
                                return;
                            }
    
                            min = Math.min(value, min);
                            max = Math.max(value, max);
                        });
                    }
                });
    
                me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
                me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);
    
                // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
                me.handleTickRangeOptions();
            },
            getTickLimit: function() {
                var tickOpts = this.options.ticks;
                var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
            },
            convertTicksToLabels: function() {
                var me = this;
    
                Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
    
                // Point labels
                me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
            },
            getLabelForIndex: function(index, datasetIndex) {
                return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
            },
            fit: function() {
                if (this.options.pointLabels.display) {
                    fitWithPointLabels(this);
                } else {
                    fit(this);
                }
            },
            /**
             * Set radius reductions and determine new radius and center point
             * @private
             */
            setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
                var me = this;
                var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
                var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
                var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
                var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
    
                radiusReductionLeft = numberOrZero(radiusReductionLeft);
                radiusReductionRight = numberOrZero(radiusReductionRight);
                radiusReductionTop = numberOrZero(radiusReductionTop);
                radiusReductionBottom = numberOrZero(radiusReductionBottom);
    
                me.drawingArea = Math.min(
                    Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
                    Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
                me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
            },
            setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
                var me = this;
                var maxRight = me.width - rightMovement - me.drawingArea;
                var maxLeft = leftMovement + me.drawingArea;
                var maxTop = topMovement + me.drawingArea;
                var maxBottom = me.height - bottomMovement - me.drawingArea;
    
                me.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);
                me.yCenter = Math.round(((maxTop + maxBottom) / 2) + me.top);
            },
    
            getIndexAngle: function(index) {
                var angleMultiplier = (Math.PI * 2) / getValueCount(this);
                var startAngle = this.chart.options && this.chart.options.startAngle ?
                    this.chart.options.startAngle :
                    0;
    
                var startAngleRadians = startAngle * Math.PI * 2 / 360;
    
                // Start from the top instead of right, so remove a quarter of the circle
                return index * angleMultiplier + startAngleRadians;
            },
            getDistanceFromCenterForValue: function(value) {
                var me = this;
    
                if (value === null) {
                    return 0; // null always in center
                }
    
                // Take into account half font size + the yPadding of the top value
                var scalingFactor = me.drawingArea / (me.max - me.min);
                if (me.options.ticks.reverse) {
                    return (me.max - value) * scalingFactor;
                }
                return (value - me.min) * scalingFactor;
            },
            getPointPosition: function(index, distanceFromCenter) {
                var me = this;
                var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
                return {
                    x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
                    y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
                };
            },
            getPointPositionForValue: function(index, value) {
                return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
            },
    
            getBasePosition: function() {
                var me = this;
                var min = me.min;
                var max = me.max;
    
                return me.getPointPositionForValue(0,
                    me.beginAtZero ? 0 :
                    min < 0 && max < 0 ? max :
                    min > 0 && max > 0 ? min :
                    0);
            },
    
            draw: function() {
                var me = this;
                var opts = me.options;
                var gridLineOpts = opts.gridLines;
                var tickOpts = opts.ticks;
                var valueOrDefault = helpers.valueOrDefault;
    
                if (opts.display) {
                    var ctx = me.ctx;
                    var startAngle = this.getIndexAngle(0);
    
                    // Tick Font
                    var tickFontSize = valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                    var tickFontStyle = valueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
                    var tickFontFamily = valueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
                    var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
    
                    helpers.each(me.ticks, function(label, index) {
                        // Don't draw a centre value (if it is minimum)
                        if (index > 0 || tickOpts.reverse) {
                            var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
    
                            // Draw circular lines around the scale
                            if (gridLineOpts.display && index !== 0) {
                                drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                            }
    
                            if (tickOpts.display) {
                                var tickFontColor = valueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                                ctx.font = tickLabelFont;
    
                                ctx.save();
                                ctx.translate(me.xCenter, me.yCenter);
                                ctx.rotate(startAngle);
    
                                if (tickOpts.showLabelBackdrop) {
                                    var labelWidth = ctx.measureText(label).width;
                                    ctx.fillStyle = tickOpts.backdropColor;
                                    ctx.fillRect(
                                        -labelWidth / 2 - tickOpts.backdropPaddingX,
                                        -yCenterOffset - tickFontSize / 2 - tickOpts.backdropPaddingY,
                                        labelWidth + tickOpts.backdropPaddingX * 2,
                                        tickFontSize + tickOpts.backdropPaddingY * 2
                                    );
                                }
    
                                ctx.textAlign = 'center';
                                ctx.textBaseline = 'middle';
                                ctx.fillStyle = tickFontColor;
                                ctx.fillText(label, 0, -yCenterOffset);
                                ctx.restore();
                            }
                        }
                    });
    
                    if (opts.angleLines.display || opts.pointLabels.display) {
                        drawPointLabels(me);
                    }
                }
            }
        });
        Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
    
    };
    
    },{"../core/core.defaults":19,"../core/core.ticks":28,"../helpers/index":39}],51:[function(require,module,exports){
    /* global window: false */
    'use strict';
    
    var moment = require('moment');
    moment = typeof moment === 'function' ? moment : window.moment;
    
    var defaults = require('../core/core.defaults');
    var helpers = require('../helpers/index');
    
    // Integer constants are from the ES6 spec.
    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    
    var INTERVALS = {
        millisecond: {
            common: true,
            size: 1,
            steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
        },
        second: {
            common: true,
            size: 1000,
            steps: [1, 2, 5, 10, 30]
        },
        minute: {
            common: true,
            size: 60000,
            steps: [1, 2, 5, 10, 30]
        },
        hour: {
            common: true,
            size: 3600000,
            steps: [1, 2, 3, 6, 12]
        },
        day: {
            common: true,
            size: 86400000,
            steps: [1, 2, 5]
        },
        week: {
            common: false,
            size: 604800000,
            steps: [1, 2, 3, 4]
        },
        month: {
            common: true,
            size: 2.628e9,
            steps: [1, 2, 3]
        },
        quarter: {
            common: false,
            size: 7.884e9,
            steps: [1, 2, 3, 4]
        },
        year: {
            common: true,
            size: 3.154e10
        }
    };
    
    var UNITS = Object.keys(INTERVALS);
    
    function sorter(a, b) {
        return a - b;
    }
    
    function arrayUnique(items) {
        var hash = {};
        var out = [];
        var i, ilen, item;
    
        for (i = 0, ilen = items.length; i < ilen; ++i) {
            item = items[i];
            if (!hash[item]) {
                hash[item] = true;
                out.push(item);
            }
        }
    
        return out;
    }
    
    /**
     * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
     * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
     * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
     * extremity (left + width or top + height). Note that it would be more optimized to directly
     * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
     * to create the lookup table. The table ALWAYS contains at least two items: min and max.
     *
     * @param {Number[]} timestamps - timestamps sorted from lowest to highest.
     * @param {String} distribution - If 'linear', timestamps will be spread linearly along the min
     * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
     * If 'series', timestamps will be positioned at the same distance from each other. In this
     * case, only timestamps that break the time linearity are registered, meaning that in the
     * best case, all timestamps are linear, the table contains only min and max.
     */
    function buildLookupTable(timestamps, min, max, distribution) {
        if (distribution === 'linear' || !timestamps.length) {
            return [
                {time: min, pos: 0},
                {time: max, pos: 1}
            ];
        }
    
        var table = [];
        var items = [min];
        var i, ilen, prev, curr, next;
    
        for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
            curr = timestamps[i];
            if (curr > min && curr < max) {
                items.push(curr);
            }
        }
    
        items.push(max);
    
        for (i = 0, ilen = items.length; i < ilen; ++i) {
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i];
    
            // only add points that breaks the scale linearity
            if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
                table.push({time: curr, pos: i / (ilen - 1)});
            }
        }
    
        return table;
    }
    
    // @see adapted from http://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
    function lookup(table, key, value) {
        var lo = 0;
        var hi = table.length - 1;
        var mid, i0, i1;
    
        while (lo >= 0 && lo <= hi) {
            mid = (lo + hi) >> 1;
            i0 = table[mid - 1] || null;
            i1 = table[mid];
    
            if (!i0) {
                // given value is outside table (before first item)
                return {lo: null, hi: i1};
            } else if (i1[key] < value) {
                lo = mid + 1;
            } else if (i0[key] > value) {
                hi = mid - 1;
            } else {
                return {lo: i0, hi: i1};
            }
        }
    
        // given value is outside table (after last item)
        return {lo: i1, hi: null};
    }
    
    /**
     * Linearly interpolates the given source `value` using the table items `skey` values and
     * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
     * returns the position for a timestamp equal to 42. If value is out of bounds, values at
     * index [0, 1] or [n - 1, n] are used for the interpolation.
     */
    function interpolate(table, skey, sval, tkey) {
        var range = lookup(table, skey, sval);
    
        // Note: the lookup table ALWAYS contains at least 2 items (min and max)
        var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
        var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
    
        var span = next[skey] - prev[skey];
        var ratio = span ? (sval - prev[skey]) / span : 0;
        var offset = (next[tkey] - prev[tkey]) * ratio;
    
        return prev[tkey] + offset;
    }
    
    /**
     * Convert the given value to a moment object using the given time options.
     * @see http://momentjs.com/docs/#/parsing/
     */
    function momentify(value, options) {
        var parser = options.parser;
        var format = options.parser || options.format;
    
        if (typeof parser === 'function') {
            return parser(value);
        }
    
        if (typeof value === 'string' && typeof format === 'string') {
            return moment(value, format);
        }
    
        if (!(value instanceof moment)) {
            value = moment(value);
        }
    
        if (value.isValid()) {
            return value;
        }
    
        // Labels are in an incompatible moment format and no `parser` has been provided.
        // The user might still use the deprecated `format` option to convert his inputs.
        if (typeof format === 'function') {
            return format(value);
        }
    
        return value;
    }
    
    function parse(input, scale) {
        if (helpers.isNullOrUndef(input)) {
            return null;
        }
    
        var options = scale.options.time;
        var value = momentify(scale.getRightValue(input), options);
        if (!value.isValid()) {
            return null;
        }
    
        if (options.round) {
            value.startOf(options.round);
        }
    
        return value.valueOf();
    }
    
    /**
     * Returns the number of unit to skip to be able to display up to `capacity` number of ticks
     * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.
     */
    function determineStepSize(min, max, unit, capacity) {
        var range = max - min;
        var interval = INTERVALS[unit];
        var milliseconds = interval.size;
        var steps = interval.steps;
        var i, ilen, factor;
    
        if (!steps) {
            return Math.ceil(range / ((capacity || 1) * milliseconds));
        }
    
        for (i = 0, ilen = steps.length; i < ilen; ++i) {
            factor = steps[i];
            if (Math.ceil(range / (milliseconds * factor)) <= capacity) {
                break;
            }
        }
    
        return factor;
    }
    
    /**
     * Figures out what unit results in an appropriate number of auto-generated ticks
     */
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
        var ilen = UNITS.length;
        var i, interval, factor;
    
        for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
            interval = INTERVALS[UNITS[i]];
            factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;
    
            if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
                return UNITS[i];
            }
        }
    
        return UNITS[ilen - 1];
    }
    
    /**
     * Figures out what unit to format a set of ticks with
     */
    function determineUnitForFormatting(ticks, minUnit, min, max) {
        var duration = moment.duration(moment(max).diff(moment(min)));
        var ilen = UNITS.length;
        var i, unit;
    
        for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {
            unit = UNITS[i];
            if (INTERVALS[unit].common && duration.as(unit) >= ticks.length) {
                return unit;
            }
        }
    
        return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }
    
    function determineMajorUnit(unit) {
        for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
            if (INTERVALS[UNITS[i]].common) {
                return UNITS[i];
            }
        }
    }
    
    /**
     * Generates a maximum of `capacity` timestamps between min and max, rounded to the
     * `minor` unit, aligned on the `major` unit and using the given scale time `options`.
     * Important: this method can return ticks outside the min and max range, it's the
     * responsibility of the calling code to clamp values if needed.
     */
    function generate(min, max, capacity, options) {
        var timeOpts = options.time;
        var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
        var major = determineMajorUnit(minor);
        var stepSize = helpers.valueOrDefault(timeOpts.stepSize, timeOpts.unitStepSize);
        var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
        var majorTicksEnabled = options.ticks.major.enabled;
        var interval = INTERVALS[minor];
        var first = moment(min);
        var last = moment(max);
        var ticks = [];
        var time;
    
        if (!stepSize) {
            stepSize = determineStepSize(min, max, minor, capacity);
        }
    
        // For 'week' unit, handle the first day of week option
        if (weekday) {
            first = first.isoWeekday(weekday);
            last = last.isoWeekday(weekday);
        }
    
        // Align first/last ticks on unit
        first = first.startOf(weekday ? 'day' : minor);
        last = last.startOf(weekday ? 'day' : minor);
    
        // Make sure that the last tick include max
        if (last < max) {
            last.add(1, minor);
        }
    
        time = moment(first);
    
        if (majorTicksEnabled && major && !weekday && !timeOpts.round) {
            // Align the first tick on the previous `minor` unit aligned on the `major` unit:
            // we first aligned time on the previous `major` unit then add the number of full
            // stepSize there is between first and the previous major time.
            time.startOf(major);
            time.add(~~((first - time) / (interval.size * stepSize)) * stepSize, minor);
        }
    
        for (; time < last; time.add(stepSize, minor)) {
            ticks.push(+time);
        }
    
        ticks.push(+time);
    
        return ticks;
    }
    
    /**
     * Returns the right and left offsets from edges in the form of {left, right}.
     * Offsets are added when the `offset` option is true.
     */
    function computeOffsets(table, ticks, min, max, options) {
        var left = 0;
        var right = 0;
        var upper, lower;
    
        if (options.offset && ticks.length) {
            if (!options.time.min) {
                upper = ticks.length > 1 ? ticks[1] : max;
                lower = ticks[0];
                left = (
                    interpolate(table, 'time', upper, 'pos') -
                    interpolate(table, 'time', lower, 'pos')
                ) / 2;
            }
            if (!options.time.max) {
                upper = ticks[ticks.length - 1];
                lower = ticks.length > 1 ? ticks[ticks.length - 2] : min;
                right = (
                    interpolate(table, 'time', upper, 'pos') -
                    interpolate(table, 'time', lower, 'pos')
                ) / 2;
            }
        }
    
        return {left: left, right: right};
    }
    
    function ticksFromTimestamps(values, majorUnit) {
        var ticks = [];
        var i, ilen, value, major;
    
        for (i = 0, ilen = values.length; i < ilen; ++i) {
            value = values[i];
            major = majorUnit ? value === +moment(value).startOf(majorUnit) : false;
    
            ticks.push({
                value: value,
                major: major
            });
        }
    
        return ticks;
    }
    
    module.exports = function(Chart) {
    
        var defaultConfig = {
            position: 'bottom',
    
            /**
             * Data distribution along the scale:
             * - 'linear': data are spread according to their time (distances can vary),
             * - 'series': data are spread at the same distance from each other.
             * @see https://github.com/chartjs/Chart.js/pull/4507
             * @since 2.7.0
             */
            distribution: 'linear',
    
            /**
             * Scale boundary strategy (bypassed by min/max time options)
             * - `data`: make sure data are fully visible, ticks outside are removed
             * - `ticks`: make sure ticks are fully visible, data outside are truncated
             * @see https://github.com/chartjs/Chart.js/pull/4556
             * @since 2.7.0
             */
            bounds: 'data',
    
            time: {
                parser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
                format: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
                unit: false, // false == automatic or override with week, month, year, etc.
                round: false, // none, or override with week, month, year, etc.
                displayFormat: false, // DEPRECATED
                isoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/
                minUnit: 'millisecond',
    
                // defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
                displayFormats: {
                    millisecond: 'h:mm:ss.SSS a', // 11:20:01.123 AM,
                    second: 'h:mm:ss a', // 11:20:01 AM
                    minute: 'h:mm a', // 11:20 AM
                    hour: 'hA', // 5PM
                    day: 'MMM D', // Sep 4
                    week: 'll', // Week 46, or maybe "[W]WW - YYYY" ?
                    month: 'MMM YYYY', // Sept 2015
                    quarter: '[Q]Q - YYYY', // Q3
                    year: 'YYYY' // 2015
                },
            },
            ticks: {
                autoSkip: false,
    
                /**
                 * Ticks generation input values:
                 * - 'auto': generates "optimal" ticks based on scale size and time options.
                 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
                 * - 'labels': generates ticks from user given `data.labels` values ONLY.
                 * @see https://github.com/chartjs/Chart.js/pull/4507
                 * @since 2.7.0
                 */
                source: 'auto',
    
                major: {
                    enabled: false
                }
            }
        };
    
        var TimeScale = Chart.Scale.extend({
            initialize: function() {
                if (!moment) {
                    throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
                }
    
                this.mergeTicksOptions();
    
                Chart.Scale.prototype.initialize.call(this);
            },
    
            update: function() {
                var me = this;
                var options = me.options;
    
                // DEPRECATIONS: output a message only one time per update
                if (options.time && options.time.format) {
                    console.warn('options.time.format is deprecated and replaced by options.time.parser.');
                }
    
                return Chart.Scale.prototype.update.apply(me, arguments);
            },
    
            /**
             * Allows data to be referenced via 't' attribute
             */
            getRightValue: function(rawValue) {
                if (rawValue && rawValue.t !== undefined) {
                    rawValue = rawValue.t;
                }
                return Chart.Scale.prototype.getRightValue.call(this, rawValue);
            },
    
            determineDataLimits: function() {
                var me = this;
                var chart = me.chart;
                var timeOpts = me.options.time;
                var min = MAX_INTEGER;
                var max = MIN_INTEGER;
                var timestamps = [];
                var datasets = [];
                var labels = [];
                var i, j, ilen, jlen, data, timestamp;
    
                // Convert labels to timestamps
                for (i = 0, ilen = chart.data.labels.length; i < ilen; ++i) {
                    labels.push(parse(chart.data.labels[i], me));
                }
    
                // Convert data to timestamps
                for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                    if (chart.isDatasetVisible(i)) {
                        data = chart.data.datasets[i].data;
    
                        // Let's consider that all data have the same format.
                        if (helpers.isObject(data[0])) {
                            datasets[i] = [];
    
                            for (j = 0, jlen = data.length; j < jlen; ++j) {
                                timestamp = parse(data[j], me);
                                timestamps.push(timestamp);
                                datasets[i][j] = timestamp;
                            }
                        } else {
                            timestamps.push.apply(timestamps, labels);
                            datasets[i] = labels.slice(0);
                        }
                    } else {
                        datasets[i] = [];
                    }
                }
    
                if (labels.length) {
                    // Sort labels **after** data have been converted
                    labels = arrayUnique(labels).sort(sorter);
                    min = Math.min(min, labels[0]);
                    max = Math.max(max, labels[labels.length - 1]);
                }
    
                if (timestamps.length) {
                    timestamps = arrayUnique(timestamps).sort(sorter);
                    min = Math.min(min, timestamps[0]);
                    max = Math.max(max, timestamps[timestamps.length - 1]);
                }
    
                min = parse(timeOpts.min, me) || min;
                max = parse(timeOpts.max, me) || max;
    
                // In case there is no valid min/max, let's use today limits
                min = min === MAX_INTEGER ? +moment().startOf('day') : min;
                max = max === MIN_INTEGER ? +moment().endOf('day') + 1 : max;
    
                // Make sure that max is strictly higher than min (required by the lookup table)
                me.min = Math.min(min, max);
                me.max = Math.max(min + 1, max);
    
                // PRIVATE
                me._horizontal = me.isHorizontal();
                me._table = [];
                me._timestamps = {
                    data: timestamps,
                    datasets: datasets,
                    labels: labels
                };
            },
    
            buildTicks: function() {
                var me = this;
                var min = me.min;
                var max = me.max;
                var options = me.options;
                var timeOpts = options.time;
                var timestamps = [];
                var ticks = [];
                var i, ilen, timestamp;
    
                switch (options.ticks.source) {
                case 'data':
                    timestamps = me._timestamps.data;
                    break;
                case 'labels':
                    timestamps = me._timestamps.labels;
                    break;
                case 'auto':
                default:
                    timestamps = generate(min, max, me.getLabelCapacity(min), options);
                }
    
                if (options.bounds === 'ticks' && timestamps.length) {
                    min = timestamps[0];
                    max = timestamps[timestamps.length - 1];
                }
    
                // Enforce limits with user min/max options
                min = parse(timeOpts.min, me) || min;
                max = parse(timeOpts.max, me) || max;
    
                // Remove ticks outside the min/max range
                for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
                    timestamp = timestamps[i];
                    if (timestamp >= min && timestamp <= max) {
                        ticks.push(timestamp);
                    }
                }
    
                me.min = min;
                me.max = max;
    
                // PRIVATE
                me._unit = timeOpts.unit || determineUnitForFormatting(ticks, timeOpts.minUnit, me.min, me.max);
                me._majorUnit = determineMajorUnit(me._unit);
                me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);
                me._offsets = computeOffsets(me._table, ticks, min, max, options);
    
                return ticksFromTimestamps(ticks, me._majorUnit);
            },
    
            getLabelForIndex: function(index, datasetIndex) {
                var me = this;
                var data = me.chart.data;
                var timeOpts = me.options.time;
                var label = data.labels && index < data.labels.length ? data.labels[index] : '';
                var value = data.datasets[datasetIndex].data[index];
    
                if (helpers.isObject(value)) {
                    label = me.getRightValue(value);
                }
                if (timeOpts.tooltipFormat) {
                    label = momentify(label, timeOpts).format(timeOpts.tooltipFormat);
                }
    
                return label;
            },
    
            /**
             * Function to format an individual tick mark
             * @private
             */
            tickFormatFunction: function(tick, index, ticks, formatOverride) {
                var me = this;
                var options = me.options;
                var time = tick.valueOf();
                var formats = options.time.displayFormats;
                var minorFormat = formats[me._unit];
                var majorUnit = me._majorUnit;
                var majorFormat = formats[majorUnit];
                var majorTime = tick.clone().startOf(majorUnit).valueOf();
                var majorTickOpts = options.ticks.major;
                var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;
                var label = tick.format(formatOverride ? formatOverride : major ? majorFormat : minorFormat);
                var tickOpts = major ? majorTickOpts : options.ticks.minor;
                var formatter = helpers.valueOrDefault(tickOpts.callback, tickOpts.userCallback);
    
                return formatter ? formatter(label, index, ticks) : label;
            },
    
            convertTicksToLabels: function(ticks) {
                var labels = [];
                var i, ilen;
    
                for (i = 0, ilen = ticks.length; i < ilen; ++i) {
                    labels.push(this.tickFormatFunction(moment(ticks[i].value), i, ticks));
                }
    
                return labels;
            },
    
            /**
             * @private
             */
            getPixelForOffset: function(time) {
                var me = this;
                var size = me._horizontal ? me.width : me.height;
                var start = me._horizontal ? me.left : me.top;
                var pos = interpolate(me._table, 'time', time, 'pos');
    
                return start + size * (me._offsets.left + pos) / (me._offsets.left + 1 + me._offsets.right);
            },
    
            getPixelForValue: function(value, index, datasetIndex) {
                var me = this;
                var time = null;
    
                if (index !== undefined && datasetIndex !== undefined) {
                    time = me._timestamps.datasets[datasetIndex][index];
                }
    
                if (time === null) {
                    time = parse(value, me);
                }
    
                if (time !== null) {
                    return me.getPixelForOffset(time);
                }
            },
    
            getPixelForTick: function(index) {
                var ticks = this.getTicks();
                return index >= 0 && index < ticks.length ?
                    this.getPixelForOffset(ticks[index].value) :
                    null;
            },
    
            getValueForPixel: function(pixel) {
                var me = this;
                var size = me._horizontal ? me.width : me.height;
                var start = me._horizontal ? me.left : me.top;
                var pos = (size ? (pixel - start) / size : 0) * (me._offsets.left + 1 + me._offsets.left) - me._offsets.right;
                var time = interpolate(me._table, 'pos', pos, 'time');
    
                return moment(time);
            },
    
            /**
             * Crude approximation of what the label width might be
             * @private
             */
            getLabelWidth: function(label) {
                var me = this;
                var ticksOpts = me.options.ticks;
                var tickLabelWidth = me.ctx.measureText(label).width;
                var angle = helpers.toRadians(ticksOpts.maxRotation);
                var cosRotation = Math.cos(angle);
                var sinRotation = Math.sin(angle);
                var tickFontSize = helpers.valueOrDefault(ticksOpts.fontSize, defaults.global.defaultFontSize);
    
                return (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);
            },
    
            /**
             * @private
             */
            getLabelCapacity: function(exampleTime) {
                var me = this;
    
                var formatOverride = me.options.time.displayFormats.millisecond;	// Pick the longest format for guestimation
    
                var exampleLabel = me.tickFormatFunction(moment(exampleTime), 0, [], formatOverride);
                var tickLabelWidth = me.getLabelWidth(exampleLabel);
                var innerWidth = me.isHorizontal() ? me.width : me.height;
    
                return Math.floor(innerWidth / tickLabelWidth);
            }
        });
    
        Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);
    };
    
    },{"../core/core.defaults":19,"../helpers/index":39,"moment":60}],52:[function(require,module,exports){
    /* MIT license */
    var colorNames = require('color-name');
    
    module.exports = {
       getRgba: getRgba,
       getHsla: getHsla,
       getRgb: getRgb,
       getHsl: getHsl,
       getHwb: getHwb,
       getAlpha: getAlpha,
    
       hexString: hexString,
       rgbString: rgbString,
       rgbaString: rgbaString,
       percentString: percentString,
       percentaString: percentaString,
       hslString: hslString,
       hslaString: hslaString,
       hwbString: hwbString,
       keyword: keyword
    }
    
    function getRgba(string) {
       if (!string) {
          return;
       }
       var abbr =  /^#([a-fA-F0-9]{3})$/i,
           hex =  /^#([a-fA-F0-9]{6})$/i,
           rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           keyword = /(\w+)/;
    
       var rgb = [0, 0, 0],
           a = 1,
           match = string.match(abbr);
       if (match) {
          match = match[1];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i] + match[i], 16);
          }
       }
       else if (match = string.match(hex)) {
          match = match[1];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
          }
       }
       else if (match = string.match(rgba)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i + 1]);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(per)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(keyword)) {
          if (match[1] == "transparent") {
             return [0, 0, 0, 0];
          }
          rgb = colorNames[match[1]];
          if (!rgb) {
             return;
          }
       }
    
       for (var i = 0; i < rgb.length; i++) {
          rgb[i] = scale(rgb[i], 0, 255);
       }
       if (!a && a != 0) {
          a = 1;
       }
       else {
          a = scale(a, 0, 1);
       }
       rgb[3] = a;
       return rgb;
    }
    
    function getHsla(string) {
       if (!string) {
          return;
       }
       var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hsl);
       if (match) {
          var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              s = scale(parseFloat(match[2]), 0, 100),
              l = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, s, l, a];
       }
    }
    
    function getHwb(string) {
       if (!string) {
          return;
       }
       var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hwb);
       if (match) {
        var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              w = scale(parseFloat(match[2]), 0, 100),
              b = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, w, b, a];
       }
    }
    
    function getRgb(string) {
       var rgba = getRgba(string);
       return rgba && rgba.slice(0, 3);
    }
    
    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }
    
    function getAlpha(string) {
       var vals = getRgba(string);
       if (vals) {
          return vals[3];
       }
       else if (vals = getHsla(string)) {
          return vals[3];
       }
       else if (vals = getHwb(string)) {
          return vals[3];
       }
    }
    
    // generators
    function hexString(rgb) {
       return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
                  + hexDouble(rgb[2]);
    }
    
    function rgbString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return rgbaString(rgba, alpha);
       }
       return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }
    
    function rgbaString(rgba, alpha) {
       if (alpha === undefined) {
          alpha = (rgba[3] !== undefined ? rgba[3] : 1);
       }
       return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
               + ", " + alpha + ")";
    }
    
    function percentString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return percentaString(rgba, alpha);
       }
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);
    
       return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }
    
    function percentaString(rgba, alpha) {
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);
       return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }
    
    function hslString(hsla, alpha) {
       if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
          return hslaString(hsla, alpha);
       }
       return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }
    
    function hslaString(hsla, alpha) {
       if (alpha === undefined) {
          alpha = (hsla[3] !== undefined ? hsla[3] : 1);
       }
       return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
               + alpha + ")";
    }
    
    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    function hwbString(hwb, alpha) {
       if (alpha === undefined) {
          alpha = (hwb[3] !== undefined ? hwb[3] : 1);
       }
       return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
               + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }
    
    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    }
    
    // helpers
    function scale(num, min, max) {
       return Math.min(Math.max(min, num), max);
    }
    
    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return (str.length < 2) ? "0" + str : str;
    }
    
    
    //create a list of reverse color names
    var reverseNames = {};
    for (var name in colorNames) {
       reverseNames[colorNames[name]] = name;
    }
    
    },{"color-name":56}],53:[function(require,module,exports){
    /* MIT license */
    var convert = require('color-convert');
    var string = require('chartjs-color-string');
    
    var Color = function (obj) {
        if (obj instanceof Color) {
            return obj;
        }
        if (!(this instanceof Color)) {
            return new Color(obj);
        }
    
        this.valid = false;
        this.values = {
            rgb: [0, 0, 0],
            hsl: [0, 0, 0],
            hsv: [0, 0, 0],
            hwb: [0, 0, 0],
            cmyk: [0, 0, 0, 0],
            alpha: 1
        };
    
        // parse Color() argument
        var vals;
        if (typeof obj === 'string') {
            vals = string.getRgba(obj);
            if (vals) {
                this.setValues('rgb', vals);
            } else if (vals = string.getHsla(obj)) {
                this.setValues('hsl', vals);
            } else if (vals = string.getHwb(obj)) {
                this.setValues('hwb', vals);
            }
        } else if (typeof obj === 'object') {
            vals = obj;
            if (vals.r !== undefined || vals.red !== undefined) {
                this.setValues('rgb', vals);
            } else if (vals.l !== undefined || vals.lightness !== undefined) {
                this.setValues('hsl', vals);
            } else if (vals.v !== undefined || vals.value !== undefined) {
                this.setValues('hsv', vals);
            } else if (vals.w !== undefined || vals.whiteness !== undefined) {
                this.setValues('hwb', vals);
            } else if (vals.c !== undefined || vals.cyan !== undefined) {
                this.setValues('cmyk', vals);
            }
        }
    };
    
    Color.prototype = {
        isValid: function () {
            return this.valid;
        },
        rgb: function () {
            return this.setSpace('rgb', arguments);
        },
        hsl: function () {
            return this.setSpace('hsl', arguments);
        },
        hsv: function () {
            return this.setSpace('hsv', arguments);
        },
        hwb: function () {
            return this.setSpace('hwb', arguments);
        },
        cmyk: function () {
            return this.setSpace('cmyk', arguments);
        },
    
        rgbArray: function () {
            return this.values.rgb;
        },
        hslArray: function () {
            return this.values.hsl;
        },
        hsvArray: function () {
            return this.values.hsv;
        },
        hwbArray: function () {
            var values = this.values;
            if (values.alpha !== 1) {
                return values.hwb.concat([values.alpha]);
            }
            return values.hwb;
        },
        cmykArray: function () {
            return this.values.cmyk;
        },
        rgbaArray: function () {
            var values = this.values;
            return values.rgb.concat([values.alpha]);
        },
        hslaArray: function () {
            var values = this.values;
            return values.hsl.concat([values.alpha]);
        },
        alpha: function (val) {
            if (val === undefined) {
                return this.values.alpha;
            }
            this.setValues('alpha', val);
            return this;
        },
    
        red: function (val) {
            return this.setChannel('rgb', 0, val);
        },
        green: function (val) {
            return this.setChannel('rgb', 1, val);
        },
        blue: function (val) {
            return this.setChannel('rgb', 2, val);
        },
        hue: function (val) {
            if (val) {
                val %= 360;
                val = val < 0 ? 360 + val : val;
            }
            return this.setChannel('hsl', 0, val);
        },
        saturation: function (val) {
            return this.setChannel('hsl', 1, val);
        },
        lightness: function (val) {
            return this.setChannel('hsl', 2, val);
        },
        saturationv: function (val) {
            return this.setChannel('hsv', 1, val);
        },
        whiteness: function (val) {
            return this.setChannel('hwb', 1, val);
        },
        blackness: function (val) {
            return this.setChannel('hwb', 2, val);
        },
        value: function (val) {
            return this.setChannel('hsv', 2, val);
        },
        cyan: function (val) {
            return this.setChannel('cmyk', 0, val);
        },
        magenta: function (val) {
            return this.setChannel('cmyk', 1, val);
        },
        yellow: function (val) {
            return this.setChannel('cmyk', 2, val);
        },
        black: function (val) {
            return this.setChannel('cmyk', 3, val);
        },
    
        hexString: function () {
            return string.hexString(this.values.rgb);
        },
        rgbString: function () {
            return string.rgbString(this.values.rgb, this.values.alpha);
        },
        rgbaString: function () {
            return string.rgbaString(this.values.rgb, this.values.alpha);
        },
        percentString: function () {
            return string.percentString(this.values.rgb, this.values.alpha);
        },
        hslString: function () {
            return string.hslString(this.values.hsl, this.values.alpha);
        },
        hslaString: function () {
            return string.hslaString(this.values.hsl, this.values.alpha);
        },
        hwbString: function () {
            return string.hwbString(this.values.hwb, this.values.alpha);
        },
        keyword: function () {
            return string.keyword(this.values.rgb, this.values.alpha);
        },
    
        rgbNumber: function () {
            var rgb = this.values.rgb;
            return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
        },
    
        luminosity: function () {
            // http://www.w3.org/TR/WCAG20/#relativeluminancedef
            var rgb = this.values.rgb;
            var lum = [];
            for (var i = 0; i < rgb.length; i++) {
                var chan = rgb[i] / 255;
                lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
            }
            return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
        },
    
        contrast: function (color2) {
            // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
            var lum1 = this.luminosity();
            var lum2 = color2.luminosity();
            if (lum1 > lum2) {
                return (lum1 + 0.05) / (lum2 + 0.05);
            }
            return (lum2 + 0.05) / (lum1 + 0.05);
        },
    
        level: function (color2) {
            var contrastRatio = this.contrast(color2);
            if (contrastRatio >= 7.1) {
                return 'AAA';
            }
    
            return (contrastRatio >= 4.5) ? 'AA' : '';
        },
    
        dark: function () {
            // YIQ equation from http://24ways.org/2010/calculating-color-contrast
            var rgb = this.values.rgb;
            var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
            return yiq < 128;
        },
    
        light: function () {
            return !this.dark();
        },
    
        negate: function () {
            var rgb = [];
            for (var i = 0; i < 3; i++) {
                rgb[i] = 255 - this.values.rgb[i];
            }
            this.setValues('rgb', rgb);
            return this;
        },
    
        lighten: function (ratio) {
            var hsl = this.values.hsl;
            hsl[2] += hsl[2] * ratio;
            this.setValues('hsl', hsl);
            return this;
        },
    
        darken: function (ratio) {
            var hsl = this.values.hsl;
            hsl[2] -= hsl[2] * ratio;
            this.setValues('hsl', hsl);
            return this;
        },
    
        saturate: function (ratio) {
            var hsl = this.values.hsl;
            hsl[1] += hsl[1] * ratio;
            this.setValues('hsl', hsl);
            return this;
        },
    
        desaturate: function (ratio) {
            var hsl = this.values.hsl;
            hsl[1] -= hsl[1] * ratio;
            this.setValues('hsl', hsl);
            return this;
        },
    
        whiten: function (ratio) {
            var hwb = this.values.hwb;
            hwb[1] += hwb[1] * ratio;
            this.setValues('hwb', hwb);
            return this;
        },
    
        blacken: function (ratio) {
            var hwb = this.values.hwb;
            hwb[2] += hwb[2] * ratio;
            this.setValues('hwb', hwb);
            return this;
        },
    
        greyscale: function () {
            var rgb = this.values.rgb;
            // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
            var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
            this.setValues('rgb', [val, val, val]);
            return this;
        },
    
        clearer: function (ratio) {
            var alpha = this.values.alpha;
            this.setValues('alpha', alpha - (alpha * ratio));
            return this;
        },
    
        opaquer: function (ratio) {
            var alpha = this.values.alpha;
            this.setValues('alpha', alpha + (alpha * ratio));
            return this;
        },
    
        rotate: function (degrees) {
            var hsl = this.values.hsl;
            var hue = (hsl[0] + degrees) % 360;
            hsl[0] = hue < 0 ? 360 + hue : hue;
            this.setValues('hsl', hsl);
            return this;
        },
    
        /**
         * Ported from sass implementation in C
         * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
         */
        mix: function (mixinColor, weight) {
            var color1 = this;
            var color2 = mixinColor;
            var p = weight === undefined ? 0.5 : weight;
    
            var w = 2 * p - 1;
            var a = color1.alpha() - color2.alpha();
    
            var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
            var w2 = 1 - w1;
    
            return this
                .rgb(
                    w1 * color1.red() + w2 * color2.red(),
                    w1 * color1.green() + w2 * color2.green(),
                    w1 * color1.blue() + w2 * color2.blue()
                )
                .alpha(color1.alpha() * p + color2.alpha() * (1 - p));
        },
    
        toJSON: function () {
            return this.rgb();
        },
    
        clone: function () {
            // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
            // making the final build way to big to embed in Chart.js. So let's do it manually,
            // assuming that values to clone are 1 dimension arrays containing only numbers,
            // except 'alpha' which is a number.
            var result = new Color();
            var source = this.values;
            var target = result.values;
            var value, type;
    
            for (var prop in source) {
                if (source.hasOwnProperty(prop)) {
                    value = source[prop];
                    type = ({}).toString.call(value);
                    if (type === '[object Array]') {
                        target[prop] = value.slice(0);
                    } else if (type === '[object Number]') {
                        target[prop] = value;
                    } else {
                        console.error('unexpected color value:', value);
                    }
                }
            }
    
            return result;
        }
    };
    
    Color.prototype.spaces = {
        rgb: ['red', 'green', 'blue'],
        hsl: ['hue', 'saturation', 'lightness'],
        hsv: ['hue', 'saturation', 'value'],
        hwb: ['hue', 'whiteness', 'blackness'],
        cmyk: ['cyan', 'magenta', 'yellow', 'black']
    };
    
    Color.prototype.maxes = {
        rgb: [255, 255, 255],
        hsl: [360, 100, 100],
        hsv: [360, 100, 100],
        hwb: [360, 100, 100],
        cmyk: [100, 100, 100, 100]
    };
    
    Color.prototype.getValues = function (space) {
        var values = this.values;
        var vals = {};
    
        for (var i = 0; i < space.length; i++) {
            vals[space.charAt(i)] = values[space][i];
        }
    
        if (values.alpha !== 1) {
            vals.a = values.alpha;
        }
    
        // {r: 255, g: 255, b: 255, a: 0.4}
        return vals;
    };
    
    Color.prototype.setValues = function (space, vals) {
        var values = this.values;
        var spaces = this.spaces;
        var maxes = this.maxes;
        var alpha = 1;
        var i;
    
        this.valid = true;
    
        if (space === 'alpha') {
            alpha = vals;
        } else if (vals.length) {
            // [10, 10, 10]
            values[space] = vals.slice(0, space.length);
            alpha = vals[space.length];
        } else if (vals[space.charAt(0)] !== undefined) {
            // {r: 10, g: 10, b: 10}
            for (i = 0; i < space.length; i++) {
                values[space][i] = vals[space.charAt(i)];
            }
    
            alpha = vals.a;
        } else if (vals[spaces[space][0]] !== undefined) {
            // {red: 10, green: 10, blue: 10}
            var chans = spaces[space];
    
            for (i = 0; i < space.length; i++) {
                values[space][i] = vals[chans[i]];
            }
    
            alpha = vals.alpha;
        }
    
        values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));
    
        if (space === 'alpha') {
            return false;
        }
    
        var capped;
    
        // cap values of the space prior converting all values
        for (i = 0; i < space.length; i++) {
            capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
            values[space][i] = Math.round(capped);
        }
    
        // convert to all the other color spaces
        for (var sname in spaces) {
            if (sname !== space) {
                values[sname] = convert[space][sname](values[space]);
            }
        }
    
        return true;
    };
    
    Color.prototype.setSpace = function (space, args) {
        var vals = args[0];
    
        if (vals === undefined) {
            // color.rgb()
            return this.getValues(space);
        }
    
        // color.rgb(10, 10, 10)
        if (typeof vals === 'number') {
            vals = Array.prototype.slice.call(args);
        }
    
        this.setValues(space, vals);
        return this;
    };
    
    Color.prototype.setChannel = function (space, index, val) {
        var svalues = this.values[space];
        if (val === undefined) {
            // color.red()
            return svalues[index];
        } else if (val === svalues[index]) {
            // color.red(color.red())
            return this;
        }
    
        // color.red(100)
        svalues[index] = val;
        this.setValues(space, svalues);
    
        return this;
    };
    
    if (typeof window !== 'undefined') {
        window.Color = Color;
    }
    
    module.exports = Color;
    
    },{"chartjs-color-string":52,"color-convert":55}],54:[function(require,module,exports){
    /* MIT license */
    
    module.exports = {
      rgb2hsl: rgb2hsl,
      rgb2hsv: rgb2hsv,
      rgb2hwb: rgb2hwb,
      rgb2cmyk: rgb2cmyk,
      rgb2keyword: rgb2keyword,
      rgb2xyz: rgb2xyz,
      rgb2lab: rgb2lab,
      rgb2lch: rgb2lch,
    
      hsl2rgb: hsl2rgb,
      hsl2hsv: hsl2hsv,
      hsl2hwb: hsl2hwb,
      hsl2cmyk: hsl2cmyk,
      hsl2keyword: hsl2keyword,
    
      hsv2rgb: hsv2rgb,
      hsv2hsl: hsv2hsl,
      hsv2hwb: hsv2hwb,
      hsv2cmyk: hsv2cmyk,
      hsv2keyword: hsv2keyword,
    
      hwb2rgb: hwb2rgb,
      hwb2hsl: hwb2hsl,
      hwb2hsv: hwb2hsv,
      hwb2cmyk: hwb2cmyk,
      hwb2keyword: hwb2keyword,
    
      cmyk2rgb: cmyk2rgb,
      cmyk2hsl: cmyk2hsl,
      cmyk2hsv: cmyk2hsv,
      cmyk2hwb: cmyk2hwb,
      cmyk2keyword: cmyk2keyword,
    
      keyword2rgb: keyword2rgb,
      keyword2hsl: keyword2hsl,
      keyword2hsv: keyword2hsv,
      keyword2hwb: keyword2hwb,
      keyword2cmyk: keyword2cmyk,
      keyword2lab: keyword2lab,
      keyword2xyz: keyword2xyz,
    
      xyz2rgb: xyz2rgb,
      xyz2lab: xyz2lab,
      xyz2lch: xyz2lch,
    
      lab2xyz: lab2xyz,
      lab2rgb: lab2rgb,
      lab2lch: lab2lch,
    
      lch2lab: lch2lab,
      lch2xyz: lch2xyz,
      lch2rgb: lch2rgb
    }
    
    
    function rgb2hsl(rgb) {
      var r = rgb[0]/255,
          g = rgb[1]/255,
          b = rgb[2]/255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          delta = max - min,
          h, s, l;
    
      if (max == min)
        h = 0;
      else if (r == max)
        h = (g - b) / delta;
      else if (g == max)
        h = 2 + (b - r) / delta;
      else if (b == max)
        h = 4 + (r - g)/ delta;
    
      h = Math.min(h * 60, 360);
    
      if (h < 0)
        h += 360;
    
      l = (min + max) / 2;
    
      if (max == min)
        s = 0;
      else if (l <= 0.5)
        s = delta / (max + min);
      else
        s = delta / (2 - max - min);
    
      return [h, s * 100, l * 100];
    }
    
    function rgb2hsv(rgb) {
      var r = rgb[0],
          g = rgb[1],
          b = rgb[2],
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          delta = max - min,
          h, s, v;
    
      if (max == 0)
        s = 0;
      else
        s = (delta/max * 1000)/10;
    
      if (max == min)
        h = 0;
      else if (r == max)
        h = (g - b) / delta;
      else if (g == max)
        h = 2 + (b - r) / delta;
      else if (b == max)
        h = 4 + (r - g) / delta;
    
      h = Math.min(h * 60, 360);
    
      if (h < 0)
        h += 360;
    
      v = ((max / 255) * 1000) / 10;
    
      return [h, s, v];
    }
    
    function rgb2hwb(rgb) {
      var r = rgb[0],
          g = rgb[1],
          b = rgb[2],
          h = rgb2hsl(rgb)[0],
          w = 1/255 * Math.min(r, Math.min(g, b)),
          b = 1 - 1/255 * Math.max(r, Math.max(g, b));
    
      return [h, w * 100, b * 100];
    }
    
    function rgb2cmyk(rgb) {
      var r = rgb[0] / 255,
          g = rgb[1] / 255,
          b = rgb[2] / 255,
          c, m, y, k;
    
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    }
    
    function rgb2keyword(rgb) {
      return reverseKeywords[JSON.stringify(rgb)];
    }
    
    function rgb2xyz(rgb) {
      var r = rgb[0] / 255,
          g = rgb[1] / 255,
          b = rgb[2] / 255;
    
      // assume sRGB
      r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
      g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
      b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);
    
      var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
      var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
      var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);
    
      return [x * 100, y *100, z * 100];
    }
    
    function rgb2lab(rgb) {
      var xyz = rgb2xyz(rgb),
            x = xyz[0],
            y = xyz[1],
            z = xyz[2],
            l, a, b;
    
      x /= 95.047;
      y /= 100;
      z /= 108.883;
    
      x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
      y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
      z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
    
      l = (116 * y) - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
    
      return [l, a, b];
    }
    
    function rgb2lch(args) {
      return lab2lch(rgb2lab(args));
    }
    
    function hsl2rgb(hsl) {
      var h = hsl[0] / 360,
          s = hsl[1] / 100,
          l = hsl[2] / 100,
          t1, t2, t3, rgb, val;
    
      if (s == 0) {
        val = l * 255;
        return [val, val, val];
      }
    
      if (l < 0.5)
        t2 = l * (1 + s);
      else
        t2 = l + s - l * s;
      t1 = 2 * l - t2;
    
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * - (i - 1);
        t3 < 0 && t3++;
        t3 > 1 && t3--;
    
        if (6 * t3 < 1)
          val = t1 + (t2 - t1) * 6 * t3;
        else if (2 * t3 < 1)
          val = t2;
        else if (3 * t3 < 2)
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        else
          val = t1;
    
        rgb[i] = val * 255;
      }
    
      return rgb;
    }
    
    function hsl2hsv(hsl) {
      var h = hsl[0],
          s = hsl[1] / 100,
          l = hsl[2] / 100,
          sv, v;
    
      if(l === 0) {
          // no need to do calc on black
          // also avoids divide by 0 error
          return [0, 0, 0];
      }
    
      l *= 2;
      s *= (l <= 1) ? l : 2 - l;
      v = (l + s) / 2;
      sv = (2 * s) / (l + s);
      return [h, sv * 100, v * 100];
    }
    
    function hsl2hwb(args) {
      return rgb2hwb(hsl2rgb(args));
    }
    
    function hsl2cmyk(args) {
      return rgb2cmyk(hsl2rgb(args));
    }
    
    function hsl2keyword(args) {
      return rgb2keyword(hsl2rgb(args));
    }
    
    
    function hsv2rgb(hsv) {
      var h = hsv[0] / 60,
          s = hsv[1] / 100,
          v = hsv[2] / 100,
          hi = Math.floor(h) % 6;
    
      var f = h - Math.floor(h),
          p = 255 * v * (1 - s),
          q = 255 * v * (1 - (s * f)),
          t = 255 * v * (1 - (s * (1 - f))),
          v = 255 * v;
    
      switch(hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    }
    
    function hsv2hsl(hsv) {
      var h = hsv[0],
          s = hsv[1] / 100,
          v = hsv[2] / 100,
          sl, l;
    
      l = (2 - s) * v;
      sl = s * v;
      sl /= (l <= 1) ? l : 2 - l;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    }
    
    function hsv2hwb(args) {
      return rgb2hwb(hsv2rgb(args))
    }
    
    function hsv2cmyk(args) {
      return rgb2cmyk(hsv2rgb(args));
    }
    
    function hsv2keyword(args) {
      return rgb2keyword(hsv2rgb(args));
    }
    
    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    function hwb2rgb(hwb) {
      var h = hwb[0] / 360,
          wh = hwb[1] / 100,
          bl = hwb[2] / 100,
          ratio = wh + bl,
          i, v, f, n;
    
      // wh + bl cant be > 1
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
    
      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 0x01) != 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);  // linear interpolation
    
      switch (i) {
        default:
        case 6:
        case 0: r = v; g = n; b = wh; break;
        case 1: r = n; g = v; b = wh; break;
        case 2: r = wh; g = v; b = n; break;
        case 3: r = wh; g = n; b = v; break;
        case 4: r = n; g = wh; b = v; break;
        case 5: r = v; g = wh; b = n; break;
      }
    
      return [r * 255, g * 255, b * 255];
    }
    
    function hwb2hsl(args) {
      return rgb2hsl(hwb2rgb(args));
    }
    
    function hwb2hsv(args) {
      return rgb2hsv(hwb2rgb(args));
    }
    
    function hwb2cmyk(args) {
      return rgb2cmyk(hwb2rgb(args));
    }
    
    function hwb2keyword(args) {
      return rgb2keyword(hwb2rgb(args));
    }
    
    function cmyk2rgb(cmyk) {
      var c = cmyk[0] / 100,
          m = cmyk[1] / 100,
          y = cmyk[2] / 100,
          k = cmyk[3] / 100,
          r, g, b;
    
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    }
    
    function cmyk2hsl(args) {
      return rgb2hsl(cmyk2rgb(args));
    }
    
    function cmyk2hsv(args) {
      return rgb2hsv(cmyk2rgb(args));
    }
    
    function cmyk2hwb(args) {
      return rgb2hwb(cmyk2rgb(args));
    }
    
    function cmyk2keyword(args) {
      return rgb2keyword(cmyk2rgb(args));
    }
    
    
    function xyz2rgb(xyz) {
      var x = xyz[0] / 100,
          y = xyz[1] / 100,
          z = xyz[2] / 100,
          r, g, b;
    
      r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
      g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
      b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);
    
      // assume sRGB
      r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
        : r = (r * 12.92);
    
      g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
        : g = (g * 12.92);
    
      b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
        : b = (b * 12.92);
    
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
    
      return [r * 255, g * 255, b * 255];
    }
    
    function xyz2lab(xyz) {
      var x = xyz[0],
          y = xyz[1],
          z = xyz[2],
          l, a, b;
    
      x /= 95.047;
      y /= 100;
      z /= 108.883;
    
      x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
      y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
      z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
    
      l = (116 * y) - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
    
      return [l, a, b];
    }
    
    function xyz2lch(args) {
      return lab2lch(xyz2lab(args));
    }
    
    function lab2xyz(lab) {
      var l = lab[0],
          a = lab[1],
          b = lab[2],
          x, y, z, y2;
    
      if (l <= 8) {
        y = (l * 100) / 903.3;
        y2 = (7.787 * (y / 100)) + (16 / 116);
      } else {
        y = 100 * Math.pow((l + 16) / 116, 3);
        y2 = Math.pow(y / 100, 1/3);
      }
    
      x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);
    
      z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);
    
      return [x, y, z];
    }
    
    function lab2lch(lab) {
      var l = lab[0],
          a = lab[1],
          b = lab[2],
          hr, h, c;
    
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    }
    
    function lab2rgb(args) {
      return xyz2rgb(lab2xyz(args));
    }
    
    function lch2lab(lch) {
      var l = lch[0],
          c = lch[1],
          h = lch[2],
          a, b, hr;
    
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    }
    
    function lch2xyz(args) {
      return lab2xyz(lch2lab(args));
    }
    
    function lch2rgb(args) {
      return lab2rgb(lch2lab(args));
    }
    
    function keyword2rgb(keyword) {
      return cssKeywords[keyword];
    }
    
    function keyword2hsl(args) {
      return rgb2hsl(keyword2rgb(args));
    }
    
    function keyword2hsv(args) {
      return rgb2hsv(keyword2rgb(args));
    }
    
    function keyword2hwb(args) {
      return rgb2hwb(keyword2rgb(args));
    }
    
    function keyword2cmyk(args) {
      return rgb2cmyk(keyword2rgb(args));
    }
    
    function keyword2lab(args) {
      return rgb2lab(keyword2rgb(args));
    }
    
    function keyword2xyz(args) {
      return rgb2xyz(keyword2rgb(args));
    }
    
    var cssKeywords = {
      aliceblue:  [240,248,255],
      antiquewhite: [250,235,215],
      aqua: [0,255,255],
      aquamarine: [127,255,212],
      azure:  [240,255,255],
      beige:  [245,245,220],
      bisque: [255,228,196],
      black:  [0,0,0],
      blanchedalmond: [255,235,205],
      blue: [0,0,255],
      blueviolet: [138,43,226],
      brown:  [165,42,42],
      burlywood:  [222,184,135],
      cadetblue:  [95,158,160],
      chartreuse: [127,255,0],
      chocolate:  [210,105,30],
      coral:  [255,127,80],
      cornflowerblue: [100,149,237],
      cornsilk: [255,248,220],
      crimson:  [220,20,60],
      cyan: [0,255,255],
      darkblue: [0,0,139],
      darkcyan: [0,139,139],
      darkgoldenrod:  [184,134,11],
      darkgray: [169,169,169],
      darkgreen:  [0,100,0],
      darkgrey: [169,169,169],
      darkkhaki:  [189,183,107],
      darkmagenta:  [139,0,139],
      darkolivegreen: [85,107,47],
      darkorange: [255,140,0],
      darkorchid: [153,50,204],
      darkred:  [139,0,0],
      darksalmon: [233,150,122],
      darkseagreen: [143,188,143],
      darkslateblue:  [72,61,139],
      darkslategray:  [47,79,79],
      darkslategrey:  [47,79,79],
      darkturquoise:  [0,206,209],
      darkviolet: [148,0,211],
      deeppink: [255,20,147],
      deepskyblue:  [0,191,255],
      dimgray:  [105,105,105],
      dimgrey:  [105,105,105],
      dodgerblue: [30,144,255],
      firebrick:  [178,34,34],
      floralwhite:  [255,250,240],
      forestgreen:  [34,139,34],
      fuchsia:  [255,0,255],
      gainsboro:  [220,220,220],
      ghostwhite: [248,248,255],
      gold: [255,215,0],
      goldenrod:  [218,165,32],
      gray: [128,128,128],
      green:  [0,128,0],
      greenyellow:  [173,255,47],
      grey: [128,128,128],
      honeydew: [240,255,240],
      hotpink:  [255,105,180],
      indianred:  [205,92,92],
      indigo: [75,0,130],
      ivory:  [255,255,240],
      khaki:  [240,230,140],
      lavender: [230,230,250],
      lavenderblush:  [255,240,245],
      lawngreen:  [124,252,0],
      lemonchiffon: [255,250,205],
      lightblue:  [173,216,230],
      lightcoral: [240,128,128],
      lightcyan:  [224,255,255],
      lightgoldenrodyellow: [250,250,210],
      lightgray:  [211,211,211],
      lightgreen: [144,238,144],
      lightgrey:  [211,211,211],
      lightpink:  [255,182,193],
      lightsalmon:  [255,160,122],
      lightseagreen:  [32,178,170],
      lightskyblue: [135,206,250],
      lightslategray: [119,136,153],
      lightslategrey: [119,136,153],
      lightsteelblue: [176,196,222],
      lightyellow:  [255,255,224],
      lime: [0,255,0],
      limegreen:  [50,205,50],
      linen:  [250,240,230],
      magenta:  [255,0,255],
      maroon: [128,0,0],
      mediumaquamarine: [102,205,170],
      mediumblue: [0,0,205],
      mediumorchid: [186,85,211],
      mediumpurple: [147,112,219],
      mediumseagreen: [60,179,113],
      mediumslateblue:  [123,104,238],
      mediumspringgreen:  [0,250,154],
      mediumturquoise:  [72,209,204],
      mediumvioletred:  [199,21,133],
      midnightblue: [25,25,112],
      mintcream:  [245,255,250],
      mistyrose:  [255,228,225],
      moccasin: [255,228,181],
      navajowhite:  [255,222,173],
      navy: [0,0,128],
      oldlace:  [253,245,230],
      olive:  [128,128,0],
      olivedrab:  [107,142,35],
      orange: [255,165,0],
      orangered:  [255,69,0],
      orchid: [218,112,214],
      palegoldenrod:  [238,232,170],
      palegreen:  [152,251,152],
      paleturquoise:  [175,238,238],
      palevioletred:  [219,112,147],
      papayawhip: [255,239,213],
      peachpuff:  [255,218,185],
      peru: [205,133,63],
      pink: [255,192,203],
      plum: [221,160,221],
      powderblue: [176,224,230],
      purple: [128,0,128],
      rebeccapurple: [102, 51, 153],
      red:  [255,0,0],
      rosybrown:  [188,143,143],
      royalblue:  [65,105,225],
      saddlebrown:  [139,69,19],
      salmon: [250,128,114],
      sandybrown: [244,164,96],
      seagreen: [46,139,87],
      seashell: [255,245,238],
      sienna: [160,82,45],
      silver: [192,192,192],
      skyblue:  [135,206,235],
      slateblue:  [106,90,205],
      slategray:  [112,128,144],
      slategrey:  [112,128,144],
      snow: [255,250,250],
      springgreen:  [0,255,127],
      steelblue:  [70,130,180],
      tan:  [210,180,140],
      teal: [0,128,128],
      thistle:  [216,191,216],
      tomato: [255,99,71],
      turquoise:  [64,224,208],
      violet: [238,130,238],
      wheat:  [245,222,179],
      white:  [255,255,255],
      whitesmoke: [245,245,245],
      yellow: [255,255,0],
      yellowgreen:  [154,205,50]
    };
    
    var reverseKeywords = {};
    for (var key in cssKeywords) {
      reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
    }
    
    },{}],55:[function(require,module,exports){
    var conversions = require("./conversions");
    
    var convert = function() {
       return new Converter();
    }
    
    for (var func in conversions) {
      // export Raw versions
      convert[func + "Raw"] =  (function(func) {
        // accept array or plain args
        return function(arg) {
          if (typeof arg == "number")
            arg = Array.prototype.slice.call(arguments);
          return conversions[func](arg);
        }
      })(func);
    
      var pair = /(\w+)2(\w+)/.exec(func),
          from = pair[1],
          to = pair[2];
    
      // export rgb2hsl and ["rgb"]["hsl"]
      convert[from] = convert[from] || {};
    
      convert[from][to] = convert[func] = (function(func) { 
        return function(arg) {
          if (typeof arg == "number")
            arg = Array.prototype.slice.call(arguments);
          
          var val = conversions[func](arg);
          if (typeof val == "string" || val === undefined)
            return val; // keyword
    
          for (var i = 0; i < val.length; i++)
            val[i] = Math.round(val[i]);
          return val;
        }
      })(func);
    }
    
    
    /* Converter does lazy conversion and caching */
    var Converter = function() {
       this.convs = {};
    };
    
    /* Either get the values for a space or
      set the values for a space, depending on args */
    Converter.prototype.routeSpace = function(space, args) {
       var values = args[0];
       if (values === undefined) {
          // color.rgb()
          return this.getValues(space);
       }
       // color.rgb(10, 10, 10)
       if (typeof values == "number") {
          values = Array.prototype.slice.call(args);        
       }
    
       return this.setValues(space, values);
    };
      
    /* Set the values for a space, invalidating cache */
    Converter.prototype.setValues = function(space, values) {
       this.space = space;
       this.convs = {};
       this.convs[space] = values;
       return this;
    };
    
    /* Get the values for a space. If there's already
      a conversion for the space, fetch it, otherwise
      compute it */
    Converter.prototype.getValues = function(space) {
       var vals = this.convs[space];
       if (!vals) {
          var fspace = this.space,
              from = this.convs[fspace];
          vals = convert[fspace][space](from);
    
          this.convs[space] = vals;
       }
      return vals;
    };
    
    ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
       Converter.prototype[space] = function(vals) {
          return this.routeSpace(space, arguments);
       }
    });
    
    module.exports = convert;
    },{"./conversions":54}],56:[function(require,module,exports){
    'use strict'
    
    module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
    };
    
    },{}],57:[function(require,module,exports){
    /* FileSaver.js
     * A saveAs() FileSaver implementation.
     * 1.3.2
     * 2016-06-16 18:25:19
     *
     * By Eli Grey, http://eligrey.com
     * License: MIT
     *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
     */
    
    /*global self */
    /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */
    
    /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
    
    var saveAs = saveAs || (function(view) {
        "use strict";
        // IE <10 is explicitly unsupported
        if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
            return;
        }
        var
              doc = view.document
              // only get URL when necessary in case Blob.js hasn't overridden it yet
            , get_URL = function() {
                return view.URL || view.webkitURL || view;
            }
            , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
            , can_use_save_link = "download" in save_link
            , click = function(node) {
                var event = new MouseEvent("click");
                node.dispatchEvent(event);
            }
            , is_safari = /constructor/i.test(view.HTMLElement) || view.safari
            , is_chrome_ios =/CriOS\/[\d]+/.test(navigator.userAgent)
            , throw_outside = function(ex) {
                (view.setImmediate || view.setTimeout)(function() {
                    throw ex;
                }, 0);
            }
            , force_saveable_type = "application/octet-stream"
            // the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
            , arbitrary_revoke_timeout = 1000 * 40 // in ms
            , revoke = function(file) {
                var revoker = function() {
                    if (typeof file === "string") { // file is an object URL
                        get_URL().revokeObjectURL(file);
                    } else { // file is a File
                        file.remove();
                    }
                };
                setTimeout(revoker, arbitrary_revoke_timeout);
            }
            , dispatch = function(filesaver, event_types, event) {
                event_types = [].concat(event_types);
                var i = event_types.length;
                while (i--) {
                    var listener = filesaver["on" + event_types[i]];
                    if (typeof listener === "function") {
                        try {
                            listener.call(filesaver, event || filesaver);
                        } catch (ex) {
                            throw_outside(ex);
                        }
                    }
                }
            }
            , auto_bom = function(blob) {
                // prepend BOM for UTF-8 XML and text/* types (including HTML)
                // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
                if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                    return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});
                }
                return blob;
            }
            , FileSaver = function(blob, name, no_auto_bom) {
                if (!no_auto_bom) {
                    blob = auto_bom(blob);
                }
                // First try a.download, then web filesystem, then object URLs
                var
                      filesaver = this
                    , type = blob.type
                    , force = type === force_saveable_type
                    , object_url
                    , dispatch_all = function() {
                        dispatch(filesaver, "writestart progress write writeend".split(" "));
                    }
                    // on any filesys errors revert to saving with object URLs
                    , fs_error = function() {
                        if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
                            // Safari doesn't allow downloading of blob urls
                            var reader = new FileReader();
                            reader.onloadend = function() {
                                var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
                                var popup = view.open(url, '_blank');
                                if(!popup) view.location.href = url;
                                url=undefined; // release reference before dispatching
                                filesaver.readyState = filesaver.DONE;
                                dispatch_all();
                            };
                            reader.readAsDataURL(blob);
                            filesaver.readyState = filesaver.INIT;
                            return;
                        }
                        // don't create more object URLs than needed
                        if (!object_url) {
                            object_url = get_URL().createObjectURL(blob);
                        }
                        if (force) {
                            view.location.href = object_url;
                        } else {
                            var opened = view.open(object_url, "_blank");
                            if (!opened) {
                                // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
                                view.location.href = object_url;
                            }
                        }
                        filesaver.readyState = filesaver.DONE;
                        dispatch_all();
                        revoke(object_url);
                    }
                ;
                filesaver.readyState = filesaver.INIT;
    
                if (can_use_save_link) {
                    object_url = get_URL().createObjectURL(blob);
                    setTimeout(function() {
                        save_link.href = object_url;
                        save_link.download = name;
                        click(save_link);
                        dispatch_all();
                        revoke(object_url);
                        filesaver.readyState = filesaver.DONE;
                    });
                    return;
                }
    
                fs_error();
            }
            , FS_proto = FileSaver.prototype
            , saveAs = function(blob, name, no_auto_bom) {
                return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
            }
        ;
        // IE 10+ (native saveAs)
        if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
            return function(blob, name, no_auto_bom) {
                name = name || blob.name || "download";
    
                if (!no_auto_bom) {
                    blob = auto_bom(blob);
                }
                return navigator.msSaveOrOpenBlob(blob, name);
            };
        }
    
        FS_proto.abort = function(){};
        FS_proto.readyState = FS_proto.INIT = 0;
        FS_proto.WRITING = 1;
        FS_proto.DONE = 2;
    
        FS_proto.error =
        FS_proto.onwritestart =
        FS_proto.onprogress =
        FS_proto.onwrite =
        FS_proto.onabort =
        FS_proto.onerror =
        FS_proto.onwriteend =
            null;
    
        return saveAs;
    }(
           typeof self !== "undefined" && self
        || typeof window !== "undefined" && window
        || this.content
    ));
    // `self` is undefined in Firefox for Android content script context
    // while `this` is nsIContentFrameMessageManager
    // with an attribute `content` that corresponds to the window
    
    if (typeof module !== "undefined" && module.exports) {
      module.exports.saveAs = saveAs;
    } else if ((typeof define !== "undefined" && define !== null) && (define.amd !== null)) {
      define("FileSaver.js", function() {
        return saveAs;
      });
    }
    
    },{}],58:[function(require,module,exports){
    // Uses Node, AMD or browser globals to create a module.
    
    // If you want something that will work in other stricter CommonJS environments,
    // or if you need to create a circular dependency, see commonJsStrict.js
    
    // Defines a module "returnExports" that depends another module called "b".
    // Note that the name of the module is implied by the file name. It is best
    // if the file name and the exported global have matching names.
    
    // If the 'b' module also uses this type of boilerplate, then
    // in the browser, it will create a global .b that is used below.
    
    // If you do not want to support the browser global path, then you
    // can remove the `root` use and the passing `this` as the first arg to
    // the top function.
    
    (function (root, factory) {
        if (typeof exports === 'object') {
            // Node. Does not work with strict CommonJS, but
            // only CommonJS-like enviroments that support module.exports,
            // like Node.
            module.exports = factory();
        } else if (typeof define === 'function' && define.amd) {
            // AMD. Register as an anonymous module.
            define([], factory);
        } else {
            // Browser globals
            root.returnExports = factory();
        }
    }(this, function () {/*!
     * jQuery JavaScript Library v1.8.1
     * http://jquery.com/
     *
     * Includes Sizzle.js
     * http://sizzlejs.com/
     *
     * Copyright 2012 jQuery Foundation and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: Thu Aug 30 2012 17:17:22 GMT-0400 (Eastern Daylight Time)
     */
    return (function( window, undefined ) {
    var
        // A central reference to the root jQuery(document)
        rootjQuery,
    
        // The deferred used on DOM ready
        readyList,
    
        // Use the correct document accordingly with window argument (sandbox)
        document = window.document,
        location = window.location,
        navigator = window.navigator,
    
        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,
    
        // Map over the $ in case of overwrite
        _$ = window.$,
    
        // Save a reference to some core methods
        core_push = Array.prototype.push,
        core_slice = Array.prototype.slice,
        core_indexOf = Array.prototype.indexOf,
        core_toString = Object.prototype.toString,
        core_hasOwn = Object.prototype.hasOwnProperty,
        core_trim = String.prototype.trim,
    
        // Define a local copy of jQuery
        jQuery = function( selector, context ) {
            // The jQuery object is actually just the init constructor 'enhanced'
            return new jQuery.fn.init( selector, context, rootjQuery );
        },
    
        // Used for matching numbers
        core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,
    
        // Used for detecting and trimming whitespace
        core_rnotwhite = /\S/,
        core_rspace = /\s+/,
    
        // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    
        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
    
        // Match a standalone tag
        rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    
        // JSON RegExp
        rvalidchars = /^[\],:{}\s]*$/,
        rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
        rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
        rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,
    
        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,
    
        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function( all, letter ) {
            return ( letter + "" ).toUpperCase();
        },
    
        // The ready event handler and self cleanup method
        DOMContentLoaded = function() {
            if ( document.addEventListener ) {
                document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
                jQuery.ready();
            } else if ( document.readyState === "complete" ) {
                // we're here because readyState === "complete" in oldIE
                // which is good enough for us to call the dom ready!
                document.detachEvent( "onreadystatechange", DOMContentLoaded );
                jQuery.ready();
            }
        },
    
        // [[Class]] -> type pairs
        class2type = {};
    
    jQuery.fn = jQuery.prototype = {
        constructor: jQuery,
        init: function( selector, context, rootjQuery ) {
            var match, elem, ret, doc;
    
            // Handle $(""), $(null), $(undefined), $(false)
            if ( !selector ) {
                return this;
            }
    
            // Handle $(DOMElement)
            if ( selector.nodeType ) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
            }
    
            // Handle HTML strings
            if ( typeof selector === "string" ) {
                if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [ null, selector, null ];
    
                } else {
                    match = rquickExpr.exec( selector );
                }
    
                // Match html or make sure no context is specified for #id
                if ( match && (match[1] || !context) ) {
    
                    // HANDLE: $(html) -> $(array)
                    if ( match[1] ) {
                        context = context instanceof jQuery ? context[0] : context;
                        doc = ( context && context.nodeType ? context.ownerDocument || context : document );
    
                        // scripts is true for back-compat
                        selector = jQuery.parseHTML( match[1], doc, true );
                        if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                            this.attr.call( selector, context, true );
                        }
    
                        return jQuery.merge( this, selector );
    
                    // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById( match[2] );
    
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if ( elem && elem.parentNode ) {
                            // Handle the case where IE and Opera return items
                            // by name instead of ID
                            if ( elem.id !== match[2] ) {
                                return rootjQuery.find( selector );
                            }
    
                            // Otherwise, we inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }
    
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
    
                // HANDLE: $(expr, $(...))
                } else if ( !context || context.jquery ) {
                    return ( context || rootjQuery ).find( selector );
    
                // HANDLE: $(expr, context)
                // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor( context ).find( selector );
                }
    
            // HANDLE: $(function)
            // Shortcut for document ready
            } else if ( jQuery.isFunction( selector ) ) {
                return rootjQuery.ready( selector );
            }
    
            if ( selector.selector !== undefined ) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
    
            return jQuery.makeArray( selector, this );
        },
    
        // Start with an empty selector
        selector: "",
    
        // The current version of jQuery being used
        jquery: "1.8.1",
    
        // The default length of a jQuery object is 0
        length: 0,
    
        // The number of elements contained in the matched element set
        size: function() {
            return this.length;
        },
    
        toArray: function() {
            return core_slice.call( this );
        },
    
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function( num ) {
            return num == null ?
    
                // Return a 'clean' array
                this.toArray() :
    
                // Return just the object
                ( num < 0 ? this[ this.length + num ] : this[ num ] );
        },
    
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function( elems, name, selector ) {
    
            // Build a new jQuery matched element set
            var ret = jQuery.merge( this.constructor(), elems );
    
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
    
            ret.context = this.context;
    
            if ( name === "find" ) {
                ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
            } else if ( name ) {
                ret.selector = this.selector + "." + name + "(" + selector + ")";
            }
    
            // Return the newly-formed element set
            return ret;
        },
    
        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function( callback, args ) {
            return jQuery.each( this, callback, args );
        },
    
        ready: function( fn ) {
            // Add the callback
            jQuery.ready.promise().done( fn );
    
            return this;
        },
    
        eq: function( i ) {
            i = +i;
            return i === -1 ?
                this.slice( i ) :
                this.slice( i, i + 1 );
        },
    
        first: function() {
            return this.eq( 0 );
        },
    
        last: function() {
            return this.eq( -1 );
        },
    
        slice: function() {
            return this.pushStack( core_slice.apply( this, arguments ),
                "slice", core_slice.call(arguments).join(",") );
        },
    
        map: function( callback ) {
            return this.pushStack( jQuery.map(this, function( elem, i ) {
                return callback.call( elem, i, elem );
            }));
        },
    
        end: function() {
            return this.prevObject || this.constructor(null);
        },
    
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    
    // Give the init function the jQuery prototype for later instantiation
    jQuery.fn.init.prototype = jQuery.fn;
    
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;
    
        // Handle a deep copy situation
        if ( typeof target === "boolean" ) {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }
    
        // Handle case when target is a string or something (possible in deep copy)
        if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
            target = {};
        }
    
        // extend jQuery itself if only one argument is passed
        if ( length === i ) {
            target = this;
            --i;
        }
    
        for ( ; i < length; i++ ) {
            // Only deal with non-null/undefined values
            if ( (options = arguments[ i ]) != null ) {
                // Extend the base object
                for ( name in options ) {
                    src = target[ name ];
                    copy = options[ name ];
    
                    // Prevent never-ending loop
                    if ( target === copy ) {
                        continue;
                    }
    
                    // Recurse if we're merging plain objects or arrays
                    if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                        if ( copyIsArray ) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
    
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
    
                        // Never move original objects, clone them
                        target[ name ] = jQuery.extend( deep, clone, copy );
    
                    // Don't bring in undefined values
                    } else if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }
    
        // Return the modified object
        return target;
    };
    
    jQuery.extend({
        noConflict: function( deep ) {
            if ( window.$ === jQuery ) {
                window.$ = _$;
            }
    
            if ( deep && window.jQuery === jQuery ) {
                window.jQuery = _jQuery;
            }
    
            return jQuery;
        },
    
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
    
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
    
        // Hold (or release) the ready event
        holdReady: function( hold ) {
            if ( hold ) {
                jQuery.readyWait++;
            } else {
                jQuery.ready( true );
            }
        },
    
        // Handle when the DOM is ready
        ready: function( wait ) {
    
            // Abort if there are pending holds or we're already ready
            if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                return;
            }
    
            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if ( !document.body ) {
                return setTimeout( jQuery.ready, 1 );
            }
    
            // Remember that the DOM is ready
            jQuery.isReady = true;
    
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if ( wait !== true && --jQuery.readyWait > 0 ) {
                return;
            }
    
            // If there are functions bound, to execute
            readyList.resolveWith( document, [ jQuery ] );
    
            // Trigger any bound ready events
            if ( jQuery.fn.trigger ) {
                jQuery( document ).trigger("ready").off("ready");
            }
        },
    
        // See test/unit/core.js for details concerning isFunction.
        // Since version 1.3, DOM methods and functions like alert
        // aren't supported. They return false on IE (#2968).
        isFunction: function( obj ) {
            return jQuery.type(obj) === "function";
        },
    
        isArray: Array.isArray || function( obj ) {
            return jQuery.type(obj) === "array";
        },
    
        isWindow: function( obj ) {
            return obj != null && obj == obj.window;
        },
    
        isNumeric: function( obj ) {
            return !isNaN( parseFloat(obj) ) && isFinite( obj );
        },
    
        type: function( obj ) {
            return obj == null ?
                String( obj ) :
                class2type[ core_toString.call(obj) ] || "object";
        },
    
        isPlainObject: function( obj ) {
            // Must be an Object.
            // Because of IE, we also have to check the presence of the constructor property.
            // Make sure that DOM nodes and window objects don't pass through, as well
            if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
                return false;
            }
    
            try {
                // Not own constructor property must be Object
                if ( obj.constructor &&
                    !core_hasOwn.call(obj, "constructor") &&
                    !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
                    return false;
                }
            } catch ( e ) {
                // IE8,9 Will throw exceptions on certain host objects #9897
                return false;
            }
    
            // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.
    
            var key;
            for ( key in obj ) {}
    
            return key === undefined || core_hasOwn.call( obj, key );
        },
    
        isEmptyObject: function( obj ) {
            var name;
            for ( name in obj ) {
                return false;
            }
            return true;
        },
    
        error: function( msg ) {
            throw new Error( msg );
        },
    
        // data: string of html
        // context (optional): If specified, the fragment will be created in this context, defaults to document
        // scripts (optional): If true, will include scripts passed in the html string
        parseHTML: function( data, context, scripts ) {
            var parsed;
            if ( !data || typeof data !== "string" ) {
                return null;
            }
            if ( typeof context === "boolean" ) {
                scripts = context;
                context = 0;
            }
            context = context || document;
    
            // Single tag
            if ( (parsed = rsingleTag.exec( data )) ) {
                return [ context.createElement( parsed[1] ) ];
            }
    
            parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
            return jQuery.merge( [],
                (parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
        },
    
        parseJSON: function( data ) {
            if ( !data || typeof data !== "string") {
                return null;
            }
    
            // Make sure leading/trailing whitespace is removed (IE can't handle it)
            data = jQuery.trim( data );
    
            // Attempt to parse using the native JSON parser first
            if ( window.JSON && window.JSON.parse ) {
                return window.JSON.parse( data );
            }
    
            // Make sure the incoming data is actual JSON
            // Logic borrowed from http://json.org/json2.js
            if ( rvalidchars.test( data.replace( rvalidescape, "@" )
                .replace( rvalidtokens, "]" )
                .replace( rvalidbraces, "")) ) {
    
                return ( new Function( "return " + data ) )();
    
            }
            jQuery.error( "Invalid JSON: " + data );
        },
    
        // Cross-browser xml parsing
        parseXML: function( data ) {
            var xml, tmp;
            if ( !data || typeof data !== "string" ) {
                return null;
            }
            try {
                if ( window.DOMParser ) { // Standard
                    tmp = new DOMParser();
                    xml = tmp.parseFromString( data , "text/xml" );
                } else { // IE
                    xml = new ActiveXObject( "Microsoft.XMLDOM" );
                    xml.async = "false";
                    xml.loadXML( data );
                }
            } catch( e ) {
                xml = undefined;
            }
            if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
                jQuery.error( "Invalid XML: " + data );
            }
            return xml;
        },
    
        noop: function() {},
    
        // Evaluates a script in a global context
        // Workarounds based on findings by Jim Driscoll
        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
        globalEval: function( data ) {
            if ( data && core_rnotwhite.test( data ) ) {
                // We use execScript on Internet Explorer
                // We use an anonymous function so that context is window
                // rather than jQuery in Firefox
                ( window.execScript || function( data ) {
                    window[ "eval" ].call( window, data );
                } )( data );
            }
        },
    
        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function( string ) {
            return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
        },
    
        nodeName: function( elem, name ) {
            return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
        },
    
        // args is for internal usage only
        each: function( obj, callback, args ) {
            var name,
                i = 0,
                length = obj.length,
                isObj = length === undefined || jQuery.isFunction( obj );
    
            if ( args ) {
                if ( isObj ) {
                    for ( name in obj ) {
                        if ( callback.apply( obj[ name ], args ) === false ) {
                            break;
                        }
                    }
                } else {
                    for ( ; i < length; ) {
                        if ( callback.apply( obj[ i++ ], args ) === false ) {
                            break;
                        }
                    }
                }
    
            // A special, fast, case for the most common use of each
            } else {
                if ( isObj ) {
                    for ( name in obj ) {
                        if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
                            break;
                        }
                    }
                } else {
                    for ( ; i < length; ) {
                        if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
                            break;
                        }
                    }
                }
            }
    
            return obj;
        },
    
        // Use native String.trim function wherever possible
        trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
            function( text ) {
                return text == null ?
                    "" :
                    core_trim.call( text );
            } :
    
            // Otherwise use our own trimming functionality
            function( text ) {
                return text == null ?
                    "" :
                    text.toString().replace( rtrim, "" );
            },
    
        // results is for internal usage only
        makeArray: function( arr, results ) {
            var type,
                ret = results || [];
    
            if ( arr != null ) {
                // The window, strings (and functions) also have 'length'
                // Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
                type = jQuery.type( arr );
    
                if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
                    core_push.call( ret, arr );
                } else {
                    jQuery.merge( ret, arr );
                }
            }
    
            return ret;
        },
    
        inArray: function( elem, arr, i ) {
            var len;
    
            if ( arr ) {
                if ( core_indexOf ) {
                    return core_indexOf.call( arr, elem, i );
                }
    
                len = arr.length;
                i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
    
                for ( ; i < len; i++ ) {
                    // Skip accessing in sparse arrays
                    if ( i in arr && arr[ i ] === elem ) {
                        return i;
                    }
                }
            }
    
            return -1;
        },
    
        merge: function( first, second ) {
            var l = second.length,
                i = first.length,
                j = 0;
    
            if ( typeof l === "number" ) {
                for ( ; j < l; j++ ) {
                    first[ i++ ] = second[ j ];
                }
    
            } else {
                while ( second[j] !== undefined ) {
                    first[ i++ ] = second[ j++ ];
                }
            }
    
            first.length = i;
    
            return first;
        },
    
        grep: function( elems, callback, inv ) {
            var retVal,
                ret = [],
                i = 0,
                length = elems.length;
            inv = !!inv;
    
            // Go through the array, only saving the items
            // that pass the validator function
            for ( ; i < length; i++ ) {
                retVal = !!callback( elems[ i ], i );
                if ( inv !== retVal ) {
                    ret.push( elems[ i ] );
                }
            }
    
            return ret;
        },
    
        // arg is for internal usage only
        map: function( elems, callback, arg ) {
            var value, key,
                ret = [],
                i = 0,
                length = elems.length,
                // jquery objects are treated as arrays
                isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;
    
            // Go through the array, translating each of the items to their
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback( elems[ i ], i, arg );
    
                    if ( value != null ) {
                        ret[ ret.length ] = value;
                    }
                }
    
            // Go through every key on the object,
            } else {
                for ( key in elems ) {
                    value = callback( elems[ key ], key, arg );
    
                    if ( value != null ) {
                        ret[ ret.length ] = value;
                    }
                }
            }
    
            // Flatten any nested arrays
            return ret.concat.apply( [], ret );
        },
    
        // A global GUID counter for objects
        guid: 1,
    
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function( fn, context ) {
            var tmp, args, proxy;
    
            if ( typeof context === "string" ) {
                tmp = fn[ context ];
                context = fn;
                fn = tmp;
            }
    
            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if ( !jQuery.isFunction( fn ) ) {
                return undefined;
            }
    
            // Simulated bind
            args = core_slice.call( arguments, 2 );
            proxy = function() {
                return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
            };
    
            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
    
            return proxy;
        },
    
        // Multifunctional method to get and set values of a collection
        // The value/s can optionally be executed if it's a function
        access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
            var exec,
                bulk = key == null,
                i = 0,
                length = elems.length;
    
            // Sets many values
            if ( key && typeof key === "object" ) {
                for ( i in key ) {
                    jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
                }
                chainable = 1;
    
            // Sets one value
            } else if ( value !== undefined ) {
                // Optionally, function values get executed if exec is true
                exec = pass === undefined && jQuery.isFunction( value );
    
                if ( bulk ) {
                    // Bulk operations only iterate when executing function values
                    if ( exec ) {
                        exec = fn;
                        fn = function( elem, key, value ) {
                            return exec.call( jQuery( elem ), value );
                        };
    
                    // Otherwise they run against the entire set
                    } else {
                        fn.call( elems, value );
                        fn = null;
                    }
                }
    
                if ( fn ) {
                    for (; i < length; i++ ) {
                        fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
                    }
                }
    
                chainable = 1;
            }
    
            return chainable ?
                elems :
    
                // Gets
                bulk ?
                    fn.call( elems ) :
                    length ? fn( elems[0], key ) : emptyGet;
        },
    
        now: function() {
            return ( new Date() ).getTime();
        }
    });
    
    jQuery.ready.promise = function( obj ) {
        if ( !readyList ) {
    
            readyList = jQuery.Deferred();
    
            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // we once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if ( document.readyState === "complete" ) {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout( jQuery.ready, 1 );
    
            // Standards-based browsers support DOMContentLoaded
            } else if ( document.addEventListener ) {
                // Use the handy event callback
                document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
    
                // A fallback to window.onload, that will always work
                window.addEventListener( "load", jQuery.ready, false );
    
            // If IE event model is used
            } else {
                // Ensure firing before onload, maybe late but safe also for iframes
                document.attachEvent( "onreadystatechange", DOMContentLoaded );
    
                // A fallback to window.onload, that will always work
                window.attachEvent( "onload", jQuery.ready );
    
                // If IE and not a frame
                // continually check to see if the document is ready
                var top = false;
    
                try {
                    top = window.frameElement == null && document.documentElement;
                } catch(e) {}
    
                if ( top && top.doScroll ) {
                    (function doScrollCheck() {
                        if ( !jQuery.isReady ) {
    
                            try {
                                // Use the trick by Diego Perini
                                // http://javascript.nwbox.com/IEContentLoaded/
                                top.doScroll("left");
                            } catch(e) {
                                return setTimeout( doScrollCheck, 50 );
                            }
    
                            // and execute any waiting functions
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise( obj );
    };
    
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
        class2type[ "[object " + name + "]" ] = name.toLowerCase();
    });
    
    // All jQuery objects should point back to these
    rootjQuery = jQuery(document);
    // String to Object options format cache
    var optionsCache = {};
    
    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions( options ) {
        var object = optionsCache[ options ] = {};
        jQuery.each( options.split( core_rspace ), function( _, flag ) {
            object[ flag ] = true;
        });
        return object;
    }
    
    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function( options ) {
    
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            ( optionsCache[ options ] || createOptions( options ) ) :
            jQuery.extend( {}, options );
    
        var // Last fire value (for non-forgettable lists)
            memory,
            // Flag to know if list was already fired
            fired,
            // Flag to know if list is currently firing
            firing,
            // First callback to fire (used internally by add and fireWith)
            firingStart,
            // End of the loop when firing
            firingLength,
            // Index of currently firing callback (modified by remove if needed)
            firingIndex,
            // Actual callback list
            list = [],
            // Stack of fire calls for repeatable lists
            stack = !options.once && [],
            // Fire callbacks
            fire = function( data ) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                    if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                        memory = false; // To prevent further calls using add
                        break;
                    }
                }
                firing = false;
                if ( list ) {
                    if ( stack ) {
                        if ( stack.length ) {
                            fire( stack.shift() );
                        }
                    } else if ( memory ) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            },
            // Actual Callbacks object
            self = {
                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if ( list ) {
                        // First, we save the current length
                        var start = list.length;
                        (function add( args ) {
                            jQuery.each( args, function( _, arg ) {
                                var type = jQuery.type( arg );
                                if ( type === "function" && ( !options.unique || !self.has( arg ) ) ) {
                                    list.push( arg );
                                } else if ( arg && arg.length && type !== "string" ) {
                                    // Inspect recursively
                                    add( arg );
                                }
                            });
                        })( arguments );
                        // Do we need to add the callbacks to the
                        // current firing batch?
                        if ( firing ) {
                            firingLength = list.length;
                        // With memory, if we're not firing then
                        // we should call right away
                        } else if ( memory ) {
                            firingStart = start;
                            fire( memory );
                        }
                    }
                    return this;
                },
                // Remove a callback from the list
                remove: function() {
                    if ( list ) {
                        jQuery.each( arguments, function( _, arg ) {
                            var index;
                            while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                                list.splice( index, 1 );
                                // Handle firing indexes
                                if ( firing ) {
                                    if ( index <= firingLength ) {
                                        firingLength--;
                                    }
                                    if ( index <= firingIndex ) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                // Control if a given callback is in the list
                has: function( fn ) {
                    return jQuery.inArray( fn, list ) > -1;
                },
                // Remove all callbacks from the list
                empty: function() {
                    list = [];
                    return this;
                },
                // Have the list do nothing anymore
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                // Is it disabled?
                disabled: function() {
                    return !list;
                },
                // Lock the list in its current state
                lock: function() {
                    stack = undefined;
                    if ( !memory ) {
                        self.disable();
                    }
                    return this;
                },
                // Is it locked?
                locked: function() {
                    return !stack;
                },
                // Call all callbacks with the given context and arguments
                fireWith: function( context, args ) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if ( list && ( !fired || stack ) ) {
                        if ( firing ) {
                            stack.push( args );
                        } else {
                            fire( args );
                        }
                    }
                    return this;
                },
                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith( this, arguments );
                    return this;
                },
                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };
    
        return self;
    };
    jQuery.extend({
    
        Deferred: function( func ) {
            var tuples = [
                    // action, add listener, listener list, final state
                    [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                    [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                    [ "notify", "progress", jQuery.Callbacks("memory") ]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done( arguments ).fail( arguments );
                        return this;
                    },
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        return jQuery.Deferred(function( newDefer ) {
                            jQuery.each( tuples, function( i, tuple ) {
                                var action = tuple[ 0 ],
                                    fn = fns[ i ];
                                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
                                    function() {
                                        var returned = fn.apply( this, arguments );
                                        if ( returned && jQuery.isFunction( returned.promise ) ) {
                                            returned.promise()
                                                .done( newDefer.resolve )
                                                .fail( newDefer.reject )
                                                .progress( newDefer.notify );
                                        } else {
                                            newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
                                        }
                                    } :
                                    newDefer[ action ]
                                );
                            });
                            fns = null;
                        }).promise();
                    },
                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function( obj ) {
                        return typeof obj === "object" ? jQuery.extend( obj, promise ) : promise;
                    }
                },
                deferred = {};
    
            // Keep pipe for back-compat
            promise.pipe = promise.then;
    
            // Add list-specific methods
            jQuery.each( tuples, function( i, tuple ) {
                var list = tuple[ 2 ],
                    stateString = tuple[ 3 ];
    
                // promise[ done | fail | progress ] = list.add
                promise[ tuple[1] ] = list.add;
    
                // Handle state
                if ( stateString ) {
                    list.add(function() {
                        // state = [ resolved | rejected ]
                        state = stateString;
    
                    // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
                }
    
                // deferred[ resolve | reject | notify ] = list.fire
                deferred[ tuple[0] ] = list.fire;
                deferred[ tuple[0] + "With" ] = list.fireWith;
            });
    
            // Make the deferred a promise
            promise.promise( deferred );
    
            // Call given func if any
            if ( func ) {
                func.call( deferred, deferred );
            }
    
            // All done!
            return deferred;
        },
    
        // Deferred helper
        when: function( subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                resolveValues = core_slice.call( arguments ),
                length = resolveValues.length,
    
                // the count of uncompleted subordinates
                remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
    
                // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
    
                // Update function for both resolve and progress values
                updateFunc = function( i, contexts, values ) {
                    return function( value ) {
                        contexts[ i ] = this;
                        values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
                        if( values === progressValues ) {
                            deferred.notifyWith( contexts, values );
                        } else if ( !( --remaining ) ) {
                            deferred.resolveWith( contexts, values );
                        }
                    };
                },
    
                progressValues, progressContexts, resolveContexts;
    
            // add listeners to Deferred subordinates; treat others as resolved
            if ( length > 1 ) {
                progressValues = new Array( length );
                progressContexts = new Array( length );
                resolveContexts = new Array( length );
                for ( ; i < length; i++ ) {
                    if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                        resolveValues[ i ].promise()
                            .done( updateFunc( i, resolveContexts, resolveValues ) )
                            .fail( deferred.reject )
                            .progress( updateFunc( i, progressContexts, progressValues ) );
                    } else {
                        --remaining;
                    }
                }
            }
    
            // if we're not waiting on anything, resolve the master
            if ( !remaining ) {
                deferred.resolveWith( resolveContexts, resolveValues );
            }
    
            return deferred.promise();
        }
    });
    jQuery.support = (function() {
    
        var support,
            all,
            a,
            select,
            opt,
            input,
            fragment,
            eventName,
            i,
            isSupported,
            clickFn,
            div = document.createElement("div");
    
        // Preliminary tests
        div.setAttribute( "className", "t" );
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    
        all = div.getElementsByTagName("*");
        a = div.getElementsByTagName("a")[ 0 ];
        a.style.cssText = "top:1px;float:left;opacity:.5";
    
        // Can't get basic test support
        if ( !all || !all.length || !a ) {
            return {};
        }
    
        // First batch of supports tests
        select = document.createElement("select");
        opt = select.appendChild( document.createElement("option") );
        input = div.getElementsByTagName("input")[ 0 ];
    
        support = {
            // IE strips leading whitespace when .innerHTML is used
            leadingWhitespace: ( div.firstChild.nodeType === 3 ),
    
            // Make sure that tbody elements aren't automatically inserted
            // IE will insert them into empty tables
            tbody: !div.getElementsByTagName("tbody").length,
    
            // Make sure that link elements get serialized correctly by innerHTML
            // This requires a wrapper element in IE
            htmlSerialize: !!div.getElementsByTagName("link").length,
    
            // Get the style information from getAttribute
            // (IE uses .cssText instead)
            style: /top/.test( a.getAttribute("style") ),
    
            // Make sure that URLs aren't manipulated
            // (IE normalizes it by default)
            hrefNormalized: ( a.getAttribute("href") === "/a" ),
    
            // Make sure that element opacity exists
            // (IE uses filter instead)
            // Use a regex to work around a WebKit issue. See #5145
            opacity: /^0.5/.test( a.style.opacity ),
    
            // Verify style float existence
            // (IE uses styleFloat instead of cssFloat)
            cssFloat: !!a.style.cssFloat,
    
            // Make sure that if no value is specified for a checkbox
            // that it defaults to "on".
            // (WebKit defaults to "" instead)
            checkOn: ( input.value === "on" ),
    
            // Make sure that a selected-by-default option has a working selected property.
            // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
            optSelected: opt.selected,
    
            // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
            getSetAttribute: div.className !== "t",
    
            // Tests for enctype support on a form(#6743)
            enctype: !!document.createElement("form").enctype,
    
            // Makes sure cloning an html5 element does not cause problems
            // Where outerHTML is undefined, this still works
            html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",
    
            // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
            boxModel: ( document.compatMode === "CSS1Compat" ),
    
            // Will be defined later
            submitBubbles: true,
            changeBubbles: true,
            focusinBubbles: false,
            deleteExpando: true,
            noCloneEvent: true,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableMarginRight: true,
            boxSizingReliable: true,
            pixelPosition: false
        };
    
        // Make sure checked status is properly cloned
        input.checked = true;
        support.noCloneChecked = input.cloneNode( true ).checked;
    
        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;
    
        // Test to see if it's possible to delete an expando from an element
        // Fails in Internet Explorer
        try {
            delete div.test;
        } catch( e ) {
            support.deleteExpando = false;
        }
    
        if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
            div.attachEvent( "onclick", clickFn = function() {
                // Cloning a node shouldn't copy over any
                // bound event handlers (IE does this)
                support.noCloneEvent = false;
            });
            div.cloneNode( true ).fireEvent("onclick");
            div.detachEvent( "onclick", clickFn );
        }
    
        // Check if a radio maintains its value
        // after being appended to the DOM
        input = document.createElement("input");
        input.value = "t";
        input.setAttribute( "type", "radio" );
        support.radioValue = input.value === "t";
    
        input.setAttribute( "checked", "checked" );
    
        // #11217 - WebKit loses check when the name is after the checked attribute
        input.setAttribute( "name", "t" );
    
        div.appendChild( input );
        fragment = document.createDocumentFragment();
        fragment.appendChild( div.lastChild );
    
        // WebKit doesn't clone checked state correctly in fragments
        support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;
    
        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        support.appendChecked = input.checked;
    
        fragment.removeChild( input );
        fragment.appendChild( div );
    
        // Technique from Juriy Zaytsev
        // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
        // We only care about the case where non-standard event systems
        // are used, namely in IE. Short-circuiting here helps us to
        // avoid an eval call (in setAttribute) which can cause CSP
        // to go haywire. See: https://developer.mozilla.org/en/Security/CSP
        if ( div.attachEvent ) {
            for ( i in {
                submit: true,
                change: true,
                focusin: true
            }) {
                eventName = "on" + i;
                isSupported = ( eventName in div );
                if ( !isSupported ) {
                    div.setAttribute( eventName, "return;" );
                    isSupported = ( typeof div[ eventName ] === "function" );
                }
                support[ i + "Bubbles" ] = isSupported;
            }
        }
    
        // Run tests that need a body at doc ready
        jQuery(function() {
            var container, div, tds, marginDiv,
                divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
                body = document.getElementsByTagName("body")[0];
    
            if ( !body ) {
                // Return for frameset docs that don't have a body
                return;
            }
    
            container = document.createElement("div");
            container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
            body.insertBefore( container, body.firstChild );
    
            // Construct the test element
            div = document.createElement("div");
            container.appendChild( div );
    
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            // (only IE 8 fails this test)
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = ( tds[ 0 ].offsetHeight === 0 );
    
            tds[ 0 ].style.display = "";
            tds[ 1 ].style.display = "none";
    
            // Check if empty table cells still have offsetWidth/Height
            // (IE <= 8 fail this test)
            support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );
    
            // Check box-sizing and margin behavior
            div.innerHTML = "";
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
            support.boxSizing = ( div.offsetWidth === 4 );
            support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );
    
            // NOTE: To any future maintainer, we've window.getComputedStyle
            // because jsdom on node.js will break without it.
            if ( window.getComputedStyle ) {
                support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
                support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";
    
                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. For more
                // info see bug #3333
                // Fails in WebKit before Feb 2011 nightlies
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                marginDiv = document.createElement("div");
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                div.appendChild( marginDiv );
                support.reliableMarginRight =
                    !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
            }
    
            if ( typeof div.style.zoom !== "undefined" ) {
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                // (IE < 8 does this)
                div.innerHTML = "";
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );
    
                // Check if elements with layout shrink-wrap their children
                // (IE 6 does this)
                div.style.display = "block";
                div.style.overflow = "visible";
                div.innerHTML = "<div></div>";
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
    
                container.style.zoom = 1;
            }
    
            // Null elements to avoid leaks in IE
            body.removeChild( container );
            container = div = tds = marginDiv = null;
        });
    
        // Null elements to avoid leaks in IE
        fragment.removeChild( div );
        all = a = select = opt = input = fragment = div = null;
    
        return support;
    })();
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        rmultiDash = /([A-Z])/g;
    
    jQuery.extend({
        cache: {},
    
        deletedIds: [],
    
        // Please use with caution
        uuid: 0,
    
        // Unique for each copy of jQuery on the page
        // Non-digits removed to match rinlinejQuery
        expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),
    
        // The following elements throw uncatchable exceptions if you
        // attempt to add expando properties to them.
        noData: {
            "embed": true,
            // Ban all objects except for Flash (which handle expandos)
            "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            "applet": true
        },
    
        hasData: function( elem ) {
            elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
            return !!elem && !isEmptyDataObject( elem );
        },
    
        data: function( elem, name, data, pvt /* Internal Use Only */ ) {
            if ( !jQuery.acceptData( elem ) ) {
                return;
            }
    
            var thisCache, ret,
                internalKey = jQuery.expando,
                getByName = typeof name === "string",
    
                // We have to handle DOM nodes and JS objects differently because IE6-7
                // can't GC object references properly across the DOM-JS boundary
                isNode = elem.nodeType,
    
                // Only DOM nodes need the global jQuery cache; JS object data is
                // attached directly to the object so GC can occur automatically
                cache = isNode ? jQuery.cache : elem,
    
                // Only defining an ID for JS objects if its cache already exists allows
                // the code to shortcut on the same path as a DOM node with no cache
                id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;
    
            // Avoid doing any more work than we need to when trying to get data on an
            // object that has no data at all
            if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
                return;
            }
    
            if ( !id ) {
                // Only DOM nodes need a new unique ID for each element since their data
                // ends up in the global cache
                if ( isNode ) {
                    elem[ internalKey ] = id = jQuery.deletedIds.pop() || ++jQuery.uuid;
                } else {
                    id = internalKey;
                }
            }
    
            if ( !cache[ id ] ) {
                cache[ id ] = {};
    
                // Avoids exposing jQuery metadata on plain JS objects when the object
                // is serialized using JSON.stringify
                if ( !isNode ) {
                    cache[ id ].toJSON = jQuery.noop;
                }
            }
    
            // An object can be passed to jQuery.data instead of a key/value pair; this gets
            // shallow copied over onto the existing cache
            if ( typeof name === "object" || typeof name === "function" ) {
                if ( pvt ) {
                    cache[ id ] = jQuery.extend( cache[ id ], name );
                } else {
                    cache[ id ].data = jQuery.extend( cache[ id ].data, name );
                }
            }
    
            thisCache = cache[ id ];
    
            // jQuery data() is stored in a separate object inside the object's internal data
            // cache in order to avoid key collisions between internal data and user-defined
            // data.
            if ( !pvt ) {
                if ( !thisCache.data ) {
                    thisCache.data = {};
                }
    
                thisCache = thisCache.data;
            }
    
            if ( data !== undefined ) {
                thisCache[ jQuery.camelCase( name ) ] = data;
            }
    
            // Check for both converted-to-camel and non-converted data property names
            // If a data property was specified
            if ( getByName ) {
    
                // First Try to find as-is property data
                ret = thisCache[ name ];
    
                // Test for null|undefined property data
                if ( ret == null ) {
    
                    // Try to find the camelCased property
                    ret = thisCache[ jQuery.camelCase( name ) ];
                }
            } else {
                ret = thisCache;
            }
    
            return ret;
        },
    
        removeData: function( elem, name, pvt /* Internal Use Only */ ) {
            if ( !jQuery.acceptData( elem ) ) {
                return;
            }
    
            var thisCache, i, l,
    
                isNode = elem.nodeType,
    
                // See jQuery.data for more information
                cache = isNode ? jQuery.cache : elem,
                id = isNode ? elem[ jQuery.expando ] : jQuery.expando;
    
            // If there is already no cache entry for this object, there is no
            // purpose in continuing
            if ( !cache[ id ] ) {
                return;
            }
    
            if ( name ) {
    
                thisCache = pvt ? cache[ id ] : cache[ id ].data;
    
                if ( thisCache ) {
    
                    // Support array or space separated string names for data keys
                    if ( !jQuery.isArray( name ) ) {
    
                        // try the string as a key before any manipulation
                        if ( name in thisCache ) {
                            name = [ name ];
                        } else {
    
                            // split the camel cased version by spaces unless a key with the spaces exists
                            name = jQuery.camelCase( name );
                            if ( name in thisCache ) {
                                name = [ name ];
                            } else {
                                name = name.split(" ");
                            }
                        }
                    }
    
                    for ( i = 0, l = name.length; i < l; i++ ) {
                        delete thisCache[ name[i] ];
                    }
    
                    // If there is no data left in the cache, we want to continue
                    // and let the cache object itself get destroyed
                    if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
                        return;
                    }
                }
            }
    
            // See jQuery.data for more information
            if ( !pvt ) {
                delete cache[ id ].data;
    
                // Don't destroy the parent cache unless the internal data object
                // had been the only thing left in it
                if ( !isEmptyDataObject( cache[ id ] ) ) {
                    return;
                }
            }
    
            // Destroy the cache
            if ( isNode ) {
                jQuery.cleanData( [ elem ], true );
    
            // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
            } else if ( jQuery.support.deleteExpando || cache != cache.window ) {
                delete cache[ id ];
    
            // When all else fails, null
            } else {
                cache[ id ] = null;
            }
        },
    
        // For internal use only.
        _data: function( elem, name, data ) {
            return jQuery.data( elem, name, data, true );
        },
    
        // A method for determining if a DOM node can handle the data expando
        acceptData: function( elem ) {
            var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];
    
            // nodes accept data unless otherwise specified; rejection can be conditional
            return !noData || noData !== true && elem.getAttribute("classid") === noData;
        }
    });
    
    jQuery.fn.extend({
        data: function( key, value ) {
            var parts, part, attr, name, l,
                elem = this[0],
                i = 0,
                data = null;
    
            // Gets all values
            if ( key === undefined ) {
                if ( this.length ) {
                    data = jQuery.data( elem );
    
                    if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
                        attr = elem.attributes;
                        for ( l = attr.length; i < l; i++ ) {
                            name = attr[i].name;
    
                            if ( name.indexOf( "data-" ) === 0 ) {
                                name = jQuery.camelCase( name.substring(5) );
    
                                dataAttr( elem, name, data[ name ] );
                            }
                        }
                        jQuery._data( elem, "parsedAttrs", true );
                    }
                }
    
                return data;
            }
    
            // Sets multiple values
            if ( typeof key === "object" ) {
                return this.each(function() {
                    jQuery.data( this, key );
                });
            }
    
            parts = key.split( ".", 2 );
            parts[1] = parts[1] ? "." + parts[1] : "";
            part = parts[1] + "!";
    
            return jQuery.access( this, function( value ) {
    
                if ( value === undefined ) {
                    data = this.triggerHandler( "getData" + part, [ parts[0] ] );
    
                    // Try to fetch any internally stored data first
                    if ( data === undefined && elem ) {
                        data = jQuery.data( elem, key );
                        data = dataAttr( elem, key, data );
                    }
    
                    return data === undefined && parts[1] ?
                        this.data( parts[0] ) :
                        data;
                }
    
                parts[1] = value;
                this.each(function() {
                    var self = jQuery( this );
    
                    self.triggerHandler( "setData" + part, parts );
                    jQuery.data( this, key, value );
                    self.triggerHandler( "changeData" + part, parts );
                });
            }, null, value, arguments.length > 1, null, false );
        },
    
        removeData: function( key ) {
            return this.each(function() {
                jQuery.removeData( this, key );
            });
        }
    });
    
    function dataAttr( elem, key, data ) {
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if ( data === undefined && elem.nodeType === 1 ) {
    
            var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
    
            data = elem.getAttribute( name );
    
            if ( typeof data === "string" ) {
                try {
                    data = data === "true" ? true :
                    data === "false" ? false :
                    data === "null" ? null :
                    // Only convert to a number if it doesn't change the string
                    +data + "" === data ? +data :
                    rbrace.test( data ) ? jQuery.parseJSON( data ) :
                        data;
                } catch( e ) {}
    
                // Make sure we set the data so it isn't changed later
                jQuery.data( elem, key, data );
    
            } else {
                data = undefined;
            }
        }
    
        return data;
    }
    
    // checks a cache object for emptiness
    function isEmptyDataObject( obj ) {
        var name;
        for ( name in obj ) {
    
            // if the public data object is empty, the private is still empty
            if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
                continue;
            }
            if ( name !== "toJSON" ) {
                return false;
            }
        }
    
        return true;
    }
    jQuery.extend({
        queue: function( elem, type, data ) {
            var queue;
    
            if ( elem ) {
                type = ( type || "fx" ) + "queue";
                queue = jQuery._data( elem, type );
    
                // Speed up dequeue by getting out quickly if this is just a lookup
                if ( data ) {
                    if ( !queue || jQuery.isArray(data) ) {
                        queue = jQuery._data( elem, type, jQuery.makeArray(data) );
                    } else {
                        queue.push( data );
                    }
                }
                return queue || [];
            }
        },
    
        dequeue: function( elem, type ) {
            type = type || "fx";
    
            var queue = jQuery.queue( elem, type ),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks( elem, type ),
                next = function() {
                    jQuery.dequeue( elem, type );
                };
    
            // If the fx queue is dequeued, always remove the progress sentinel
            if ( fn === "inprogress" ) {
                fn = queue.shift();
                startLength--;
            }
    
            if ( fn ) {
    
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if ( type === "fx" ) {
                    queue.unshift( "inprogress" );
                }
    
                // clear up the last queue stop function
                delete hooks.stop;
                fn.call( elem, next, hooks );
            }
    
            if ( !startLength && hooks ) {
                hooks.empty.fire();
            }
        },
    
        // not intended for public consumption - generates a queueHooks object, or returns the current one
        _queueHooks: function( elem, type ) {
            var key = type + "queueHooks";
            return jQuery._data( elem, key ) || jQuery._data( elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery.removeData( elem, type + "queue", true );
                    jQuery.removeData( elem, key, true );
                })
            });
        }
    });
    
    jQuery.fn.extend({
        queue: function( type, data ) {
            var setter = 2;
    
            if ( typeof type !== "string" ) {
                data = type;
                type = "fx";
                setter--;
            }
    
            if ( arguments.length < setter ) {
                return jQuery.queue( this[0], type );
            }
    
            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue( this, type, data );
    
                    // ensure a hooks for this queue
                    jQuery._queueHooks( this, type );
    
                    if ( type === "fx" && queue[0] !== "inprogress" ) {
                        jQuery.dequeue( this, type );
                    }
                });
        },
        dequeue: function( type ) {
            return this.each(function() {
                jQuery.dequeue( this, type );
            });
        },
        // Based off of the plugin by Clint Helfers, with permission.
        // http://blindsignals.com/index.php/2009/07/jquery-delay/
        delay: function( time, type ) {
            time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
            type = type || "fx";
    
            return this.queue( type, function( next, hooks ) {
                var timeout = setTimeout( next, time );
                hooks.stop = function() {
                    clearTimeout( timeout );
                };
            });
        },
        clearQueue: function( type ) {
            return this.queue( type || "fx", [] );
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function( type, obj ) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if ( !( --count ) ) {
                        defer.resolveWith( elements, [ elements ] );
                    }
                };
    
            if ( typeof type !== "string" ) {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
    
            while( i-- ) {
                tmp = jQuery._data( elements[ i ], type + "queueHooks" );
                if ( tmp && tmp.empty ) {
                    count++;
                    tmp.empty.add( resolve );
                }
            }
            resolve();
            return defer.promise( obj );
        }
    });
    var nodeHook, boolHook, fixSpecified,
        rclass = /[\t\r\n]/g,
        rreturn = /\r/g,
        rtype = /^(?:button|input)$/i,
        rfocusable = /^(?:button|input|object|select|textarea)$/i,
        rclickable = /^a(?:rea|)$/i,
        rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
        getSetAttribute = jQuery.support.getSetAttribute;
    
    jQuery.fn.extend({
        attr: function( name, value ) {
            return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
        },
    
        removeAttr: function( name ) {
            return this.each(function() {
                jQuery.removeAttr( this, name );
            });
        },
    
        prop: function( name, value ) {
            return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
        },
    
        removeProp: function( name ) {
            name = jQuery.propFix[ name ] || name;
            return this.each(function() {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[ name ] = undefined;
                    delete this[ name ];
                } catch( e ) {}
            });
        },
    
        addClass: function( value ) {
            var classNames, i, l, elem,
                setClass, c, cl;
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).addClass( value.call(this, j, this.className) );
                });
            }
    
            if ( value && typeof value === "string" ) {
                classNames = value.split( core_rspace );
    
                for ( i = 0, l = this.length; i < l; i++ ) {
                    elem = this[ i ];
    
                    if ( elem.nodeType === 1 ) {
                        if ( !elem.className && classNames.length === 1 ) {
                            elem.className = value;
    
                        } else {
                            setClass = " " + elem.className + " ";
    
                            for ( c = 0, cl = classNames.length; c < cl; c++ ) {
                                if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
                                    setClass += classNames[ c ] + " ";
                                }
                            }
                            elem.className = jQuery.trim( setClass );
                        }
                    }
                }
            }
    
            return this;
        },
    
        removeClass: function( value ) {
            var removes, className, elem, c, cl, i, l;
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).removeClass( value.call(this, j, this.className) );
                });
            }
            if ( (value && typeof value === "string") || value === undefined ) {
                removes = ( value || "" ).split( core_rspace );
    
                for ( i = 0, l = this.length; i < l; i++ ) {
                    elem = this[ i ];
                    if ( elem.nodeType === 1 && elem.className ) {
    
                        className = (" " + elem.className + " ").replace( rclass, " " );
    
                        // loop over each item in the removal list
                        for ( c = 0, cl = removes.length; c < cl; c++ ) {
                            // Remove until there is nothing to remove,
                            while ( className.indexOf(" " + removes[ c ] + " ") > -1 ) {
                                className = className.replace( " " + removes[ c ] + " " , " " );
                            }
                        }
                        elem.className = value ? jQuery.trim( className ) : "";
                    }
                }
            }
    
            return this;
        },
    
        toggleClass: function( value, stateVal ) {
            var type = typeof value,
                isBool = typeof stateVal === "boolean";
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( i ) {
                    jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
                });
            }
    
            return this.each(function() {
                if ( type === "string" ) {
                    // toggle individual class names
                    var className,
                        i = 0,
                        self = jQuery( this ),
                        state = stateVal,
                        classNames = value.split( core_rspace );
    
                    while ( (className = classNames[ i++ ]) ) {
                        // check each className given, space separated list
                        state = isBool ? state : !self.hasClass( className );
                        self[ state ? "addClass" : "removeClass" ]( className );
                    }
    
                } else if ( type === "undefined" || type === "boolean" ) {
                    if ( this.className ) {
                        // store className if set
                        jQuery._data( this, "__className__", this.className );
                    }
    
                    // toggle whole className
                    this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
                }
            });
        },
    
        hasClass: function( selector ) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for ( ; i < l; i++ ) {
                if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
                    return true;
                }
            }
    
            return false;
        },
    
        val: function( value ) {
            var hooks, ret, isFunction,
                elem = this[0];
    
            if ( !arguments.length ) {
                if ( elem ) {
                    hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];
    
                    if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                        return ret;
                    }
    
                    ret = elem.value;
    
                    return typeof ret === "string" ?
                        // handle most common string cases
                        ret.replace(rreturn, "") :
                        // handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }
    
                return;
            }
    
            isFunction = jQuery.isFunction( value );
    
            return this.each(function( i ) {
                var val,
                    self = jQuery(this);
    
                if ( this.nodeType !== 1 ) {
                    return;
                }
    
                if ( isFunction ) {
                    val = value.call( this, i, self.val() );
                } else {
                    val = value;
                }
    
                // Treat null/undefined as ""; convert numbers to string
                if ( val == null ) {
                    val = "";
                } else if ( typeof val === "number" ) {
                    val += "";
                } else if ( jQuery.isArray( val ) ) {
                    val = jQuery.map(val, function ( value ) {
                        return value == null ? "" : value + "";
                    });
                }
    
                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
    
                // If set returns undefined, fall back to normal setting
                if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                    this.value = val;
                }
            });
        }
    });
    
    jQuery.extend({
        valHooks: {
            option: {
                get: function( elem ) {
                    // attributes.value is undefined in Blackberry 4.7 but
                    // uses .value. See #6932
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }
            },
            select: {
                get: function( elem ) {
                    var value, i, max, option,
                        index = elem.selectedIndex,
                        values = [],
                        options = elem.options,
                        one = elem.type === "select-one";
    
                    // Nothing was selected
                    if ( index < 0 ) {
                        return null;
                    }
    
                    // Loop through all the selected options
                    i = one ? index : 0;
                    max = one ? index + 1 : options.length;
                    for ( ; i < max; i++ ) {
                        option = options[ i ];
    
                        // Don't return options that are disabled or in a disabled optgroup
                        if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
                                (!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {
    
                            // Get the specific value for the option
                            value = jQuery( option ).val();
    
                            // We don't need an array for one selects
                            if ( one ) {
                                return value;
                            }
    
                            // Multi-Selects return an array
                            values.push( value );
                        }
                    }
    
                    // Fixes Bug #2551 -- select.val() broken in IE after form.reset()
                    if ( one && !values.length && options.length ) {
                        return jQuery( options[ index ] ).val();
                    }
    
                    return values;
                },
    
                set: function( elem, value ) {
                    var values = jQuery.makeArray( value );
    
                    jQuery(elem).find("option").each(function() {
                        this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
                    });
    
                    if ( !values.length ) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },
    
        // Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
        attrFn: {},
    
        attr: function( elem, name, value, pass ) {
            var ret, hooks, notxml,
                nType = elem.nodeType;
    
            // don't get/set attributes on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            if ( pass && jQuery.isFunction( jQuery.fn[ name ] ) ) {
                return jQuery( elem )[ name ]( value );
            }
    
            // Fallback to prop when attributes are not supported
            if ( typeof elem.getAttribute === "undefined" ) {
                return jQuery.prop( elem, name, value );
            }
    
            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
    
            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if ( notxml ) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
            }
    
            if ( value !== undefined ) {
    
                if ( value === null ) {
                    jQuery.removeAttr( elem, name );
                    return;
    
                } else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
                    return ret;
    
                } else {
                    elem.setAttribute( name, "" + value );
                    return value;
                }
    
            } else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
                return ret;
    
            } else {
    
                ret = elem.getAttribute( name );
    
                // Non-existent attributes return null, we normalize to undefined
                return ret === null ?
                    undefined :
                    ret;
            }
        },
    
        removeAttr: function( elem, value ) {
            var propName, attrNames, name, isBool,
                i = 0;
    
            if ( value && elem.nodeType === 1 ) {
    
                attrNames = value.split( core_rspace );
    
                for ( ; i < attrNames.length; i++ ) {
                    name = attrNames[ i ];
    
                    if ( name ) {
                        propName = jQuery.propFix[ name ] || name;
                        isBool = rboolean.test( name );
    
                        // See #9699 for explanation of this approach (setting first, then removal)
                        // Do not do this for boolean attributes (see #10870)
                        if ( !isBool ) {
                            jQuery.attr( elem, name, "" );
                        }
                        elem.removeAttribute( getSetAttribute ? name : propName );
    
                        // Set corresponding property to false for boolean attributes
                        if ( isBool && propName in elem ) {
                            elem[ propName ] = false;
                        }
                    }
                }
            }
        },
    
        attrHooks: {
            type: {
                set: function( elem, value ) {
                    // We can't allow the type property to be changed (since it causes problems in IE)
                    if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
                        jQuery.error( "type property can't be changed" );
                    } else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to it's default in case type is set after value
                        // This is for element creation
                        var val = elem.value;
                        elem.setAttribute( "type", value );
                        if ( val ) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            },
            // Use the value property for back compat
            // Use the nodeHook for button elements in IE6/7 (#1954)
            value: {
                get: function( elem, name ) {
                    if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
                        return nodeHook.get( elem, name );
                    }
                    return name in elem ?
                        elem.value :
                        null;
                },
                set: function( elem, value, name ) {
                    if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
                        return nodeHook.set( elem, value, name );
                    }
                    // Does not return so that setAttribute is also used
                    elem.value = value;
                }
            }
        },
    
        propFix: {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },
    
        prop: function( elem, name, value ) {
            var ret, hooks, notxml,
                nType = elem.nodeType;
    
            // don't get/set properties on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
    
            if ( notxml ) {
                // Fix name and attach hooks
                name = jQuery.propFix[ name ] || name;
                hooks = jQuery.propHooks[ name ];
            }
    
            if ( value !== undefined ) {
                if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                    return ret;
    
                } else {
                    return ( elem[ name ] = value );
                }
    
            } else {
                if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
                    return ret;
    
                } else {
                    return elem[ name ];
                }
            }
        },
    
        propHooks: {
            tabIndex: {
                get: function( elem ) {
                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    var attributeNode = elem.getAttributeNode("tabindex");
    
                    return attributeNode && attributeNode.specified ?
                        parseInt( attributeNode.value, 10 ) :
                        rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
                            0 :
                            undefined;
                }
            }
        }
    });
    
    // Hook for boolean attributes
    boolHook = {
        get: function( elem, name ) {
            // Align boolean attributes with corresponding properties
            // Fall back to attribute presence where some booleans are not supported
            var attrNode,
                property = jQuery.prop( elem, name );
            return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
                name.toLowerCase() :
                undefined;
        },
        set: function( elem, value, name ) {
            var propName;
            if ( value === false ) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr( elem, name );
            } else {
                // value is true since we know at this point it's type boolean and not false
                // Set boolean attributes to the same name and set the DOM property
                propName = jQuery.propFix[ name ] || name;
                if ( propName in elem ) {
                    // Only set the IDL specifically if it already exists on the element
                    elem[ propName ] = true;
                }
    
                elem.setAttribute( name, name.toLowerCase() );
            }
            return name;
        }
    };
    
    // IE6/7 do not support getting/setting some attributes with get/setAttribute
    if ( !getSetAttribute ) {
    
        fixSpecified = {
            name: true,
            id: true,
            coords: true
        };
    
        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = jQuery.valHooks.button = {
            get: function( elem, name ) {
                var ret;
                ret = elem.getAttributeNode( name );
                return ret && ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
                    ret.value :
                    undefined;
            },
            set: function( elem, value, name ) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode( name );
                if ( !ret ) {
                    ret = document.createAttribute( name );
                    elem.setAttributeNode( ret );
                }
                return ( ret.value = value + "" );
            }
        };
    
        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each([ "width", "height" ], function( i, name ) {
            jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
                set: function( elem, value ) {
                    if ( value === "" ) {
                        elem.setAttribute( name, "auto" );
                        return value;
                    }
                }
            });
        });
    
        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            get: nodeHook.get,
            set: function( elem, value, name ) {
                if ( value === "" ) {
                    value = "false";
                }
                nodeHook.set( elem, value, name );
            }
        };
    }
    
    
    // Some attributes require a special call on IE
    if ( !jQuery.support.hrefNormalized ) {
        jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
            jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
                get: function( elem ) {
                    var ret = elem.getAttribute( name, 2 );
                    return ret === null ? undefined : ret;
                }
            });
        });
    }
    
    if ( !jQuery.support.style ) {
        jQuery.attrHooks.style = {
            get: function( elem ) {
                // Return undefined in the case of empty string
                // Normalize to lowercase since IE uppercases css property names
                return elem.style.cssText.toLowerCase() || undefined;
            },
            set: function( elem, value ) {
                return ( elem.style.cssText = "" + value );
            }
        };
    }
    
    // Safari mis-reports the default selected property of an option
    // Accessing the parent's selectedIndex property fixes it
    if ( !jQuery.support.optSelected ) {
        jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
            get: function( elem ) {
                var parent = elem.parentNode;
    
                if ( parent ) {
                    parent.selectedIndex;
    
                    // Make sure that it also works with optgroups, see #5701
                    if ( parent.parentNode ) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        });
    }
    
    // IE6/7 call enctype encoding
    if ( !jQuery.support.enctype ) {
        jQuery.propFix.enctype = "encoding";
    }
    
    // Radios and checkboxes getter/setter
    if ( !jQuery.support.checkOn ) {
        jQuery.each([ "radio", "checkbox" ], function() {
            jQuery.valHooks[ this ] = {
                get: function( elem ) {
                    // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
                    return elem.getAttribute("value") === null ? "on" : elem.value;
                }
            };
        });
    }
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
            set: function( elem, value ) {
                if ( jQuery.isArray( value ) ) {
                    return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
                }
            }
        });
    });
    var rformElems = /^(?:textarea|input|select)$/i,
        rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
        rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        hoverHack = function( events ) {
            return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
        };
    
    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {
    
        add: function( elem, types, handler, data, selector ) {
    
            var elemData, eventHandle, events,
                t, tns, type, namespaces, handleObj,
                handleObjIn, handlers, special;
    
            // Don't attach events to noData or text/comment nodes (allow plain objects tho)
            if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
                return;
            }
    
            // Caller can pass in an object of custom data in lieu of the handler
            if ( handler.handler ) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
    
            // Make sure that the handler has a unique ID, used to find/remove it later
            if ( !handler.guid ) {
                handler.guid = jQuery.guid++;
            }
    
            // Init the element's event structure and main handler, if this is the first
            events = elemData.events;
            if ( !events ) {
                elemData.events = events = {};
            }
            eventHandle = elemData.handle;
            if ( !eventHandle ) {
                elemData.handle = eventHandle = function( e ) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
                        undefined;
                };
                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                eventHandle.elem = elem;
            }
    
            // Handle multiple events separated by a space
            // jQuery(...).bind("mouseover mouseout", fn);
            types = jQuery.trim( hoverHack(types) ).split( " " );
            for ( t = 0; t < types.length; t++ ) {
    
                tns = rtypenamespace.exec( types[t] ) || [];
                type = tns[1];
                namespaces = ( tns[2] || "" ).split( "." ).sort();
    
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[ type ] || {};
    
                // If selector defined, determine special event api type, otherwise given type
                type = ( selector ? special.delegateType : special.bindType ) || type;
    
                // Update special based on newly reset type
                special = jQuery.event.special[ type ] || {};
    
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: tns[1],
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    namespace: namespaces.join(".")
                }, handleObjIn );
    
                // Init the event handler queue if we're the first
                handlers = events[ type ];
                if ( !handlers ) {
                    handlers = events[ type ] = [];
                    handlers.delegateCount = 0;
    
                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                        // Bind the global event handler to the element
                        if ( elem.addEventListener ) {
                            elem.addEventListener( type, eventHandle, false );
    
                        } else if ( elem.attachEvent ) {
                            elem.attachEvent( "on" + type, eventHandle );
                        }
                    }
                }
    
                if ( special.add ) {
                    special.add.call( elem, handleObj );
    
                    if ( !handleObj.handler.guid ) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
    
                // Add to the element's handler list, delegates in front
                if ( selector ) {
                    handlers.splice( handlers.delegateCount++, 0, handleObj );
                } else {
                    handlers.push( handleObj );
                }
    
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[ type ] = true;
            }
    
            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },
    
        global: {},
    
        // Detach an event or set of events from an element
        remove: function( elem, types, handler, selector, mappedTypes ) {
    
            var t, tns, type, origType, namespaces, origCount,
                j, events, special, eventType, handleObj,
                elemData = jQuery.hasData( elem ) && jQuery._data( elem );
    
            if ( !elemData || !(events = elemData.events) ) {
                return;
            }
    
            // Once for each type.namespace in types; type may be omitted
            types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
            for ( t = 0; t < types.length; t++ ) {
                tns = rtypenamespace.exec( types[t] ) || [];
                type = origType = tns[1];
                namespaces = tns[2];
    
                // Unbind all events (on this namespace, if provided) for the element
                if ( !type ) {
                    for ( type in events ) {
                        jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                    }
                    continue;
                }
    
                special = jQuery.event.special[ type ] || {};
                type = ( selector? special.delegateType : special.bindType ) || type;
                eventType = events[ type ] || [];
                origCount = eventType.length;
                namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
    
                // Remove matching events
                for ( j = 0; j < eventType.length; j++ ) {
                    handleObj = eventType[ j ];
    
                    if ( ( mappedTypes || origType === handleObj.origType ) &&
                         ( !handler || handler.guid === handleObj.guid ) &&
                         ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
                         ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                        eventType.splice( j--, 1 );
    
                        if ( handleObj.selector ) {
                            eventType.delegateCount--;
                        }
                        if ( special.remove ) {
                            special.remove.call( elem, handleObj );
                        }
                    }
                }
    
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if ( eventType.length === 0 && origCount !== eventType.length ) {
                    if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                        jQuery.removeEvent( elem, type, elemData.handle );
                    }
    
                    delete events[ type ];
                }
            }
    
            // Remove the expando if it's no longer used
            if ( jQuery.isEmptyObject( events ) ) {
                delete elemData.handle;
    
                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery.removeData( elem, "events", true );
            }
        },
    
        // Events that are safe to short-circuit if no handlers are attached.
        // Native DOM events should not be added, they may have inline handlers.
        customEvent: {
            "getData": true,
            "setData": true,
            "changeData": true
        },
    
        trigger: function( event, data, elem, onlyHandlers ) {
            // Don't do events on text and comment nodes
            if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
                return;
            }
    
            // Event object or event type
            var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
                type = event.type || event,
                namespaces = [];
    
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                return;
            }
    
            if ( type.indexOf( "!" ) >= 0 ) {
                // Exclusive events trigger only for the exact event (no namespaces)
                type = type.slice(0, -1);
                exclusive = true;
            }
    
            if ( type.indexOf( "." ) >= 0 ) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
    
            if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
                // No jQuery handlers for this event type, and it can't have inline handlers
                return;
            }
    
            // Caller can pass in an Event, Object, or just an event type string
            event = typeof event === "object" ?
                // jQuery.Event object
                event[ jQuery.expando ] ? event :
                // Object literal
                new jQuery.Event( type, event ) :
                // Just the event type (string)
                new jQuery.Event( type );
    
            event.type = type;
            event.isTrigger = true;
            event.exclusive = exclusive;
            event.namespace = namespaces.join( "." );
            event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";
    
            // Handle a global trigger
            if ( !elem ) {
    
                // TODO: Stop taunting the data cache; remove global events and always attach to document
                cache = jQuery.cache;
                for ( i in cache ) {
                    if ( cache[ i ].events && cache[ i ].events[ type ] ) {
                        jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
                    }
                }
                return;
            }
    
            // Clean up the event in case it is being reused
            event.result = undefined;
            if ( !event.target ) {
                event.target = elem;
            }
    
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data != null ? jQuery.makeArray( data ) : [];
            data.unshift( event );
    
            // Allow special events to draw outside the lines
            special = jQuery.event.special[ type ] || {};
            if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
                return;
            }
    
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            eventPath = [[ elem, special.bindType || type ]];
            if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
    
                bubbleType = special.delegateType || type;
                cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
                for ( old = elem; cur; cur = cur.parentNode ) {
                    eventPath.push([ cur, bubbleType ]);
                    old = cur;
                }
    
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if ( old === (elem.ownerDocument || document) ) {
                    eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
                }
            }
    
            // Fire handlers on the event path
            for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {
    
                cur = eventPath[i][0];
                event.type = eventPath[i][1];
    
                handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
                if ( handle ) {
                    handle.apply( cur, data );
                }
                // Note that this is a bare JS function and not a jQuery handler
                handle = ontype && cur[ ontype ];
                if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
                    event.preventDefault();
                }
            }
            event.type = type;
    
            // If nobody prevented the default action, do it now
            if ( !onlyHandlers && !event.isDefaultPrevented() ) {
    
                if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
                    !(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {
    
                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    // IE<9 dies on focus/blur to hidden element (#1486)
                    if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {
    
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        old = elem[ ontype ];
    
                        if ( old ) {
                            elem[ ontype ] = null;
                        }
    
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        elem[ type ]();
                        jQuery.event.triggered = undefined;
    
                        if ( old ) {
                            elem[ ontype ] = old;
                        }
                    }
                }
            }
    
            return event.result;
        },
    
        dispatch: function( event ) {
    
            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix( event || window.event );
    
            var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
                handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
                delegateCount = handlers.delegateCount,
                args = [].slice.call( arguments ),
                run_all = !event.exclusive && !event.namespace,
                special = jQuery.event.special[ event.type ] || {},
                handlerQueue = [];
    
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;
    
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                return;
            }
    
            // Determine handlers that should run if there are delegated events
            // Avoid non-left-click bubbling in Firefox (#3861)
            if ( delegateCount && !(event.button && event.type === "click") ) {
    
                for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {
    
                    // Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
                    if ( cur.disabled !== true || event.type !== "click" ) {
                        selMatch = {};
                        matches = [];
                        for ( i = 0; i < delegateCount; i++ ) {
                            handleObj = handlers[ i ];
                            sel = handleObj.selector;
    
                            if ( selMatch[ sel ] === undefined ) {
                                selMatch[ sel ] = jQuery( sel, this ).index( cur ) >= 0;
                            }
                            if ( selMatch[ sel ] ) {
                                matches.push( handleObj );
                            }
                        }
                        if ( matches.length ) {
                            handlerQueue.push({ elem: cur, matches: matches });
                        }
                    }
                }
            }
    
            // Add the remaining (directly-bound) handlers
            if ( handlers.length > delegateCount ) {
                handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
            }
    
            // Run delegates first; they may want to stop propagation beneath us
            for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
                matched = handlerQueue[ i ];
                event.currentTarget = matched.elem;
    
                for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
                    handleObj = matched.matches[ j ];
    
                    // Triggered event must either 1) be non-exclusive and have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {
    
                        event.data = handleObj.data;
                        event.handleObj = handleObj;
    
                        ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                                .apply( matched.elem, args );
    
                        if ( ret !== undefined ) {
                            event.result = ret;
                            if ( ret === false ) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
    
            // Call the postDispatch hook for the mapped type
            if ( special.postDispatch ) {
                special.postDispatch.call( this, event );
            }
    
            return event.result;
        },
    
        // Includes some event props shared by KeyEvent and MouseEvent
        // *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
        props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    
        fixHooks: {},
    
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function( event, original ) {
    
                // Add which for key events
                if ( event.which == null ) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
    
                return event;
            }
        },
    
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function( event, original ) {
                var eventDoc, doc, body,
                    button = original.button,
                    fromElement = original.fromElement;
    
                // Calculate pageX/Y if missing and clientX/Y available
                if ( event.pageX == null && original.clientX != null ) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
    
                    event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                    event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
                }
    
                // Add relatedTarget, if necessary
                if ( !event.relatedTarget && fromElement ) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
    
                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if ( !event.which && button !== undefined ) {
                    event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
                }
    
                return event;
            }
        },
    
        fix: function( event ) {
            if ( event[ jQuery.expando ] ) {
                return event;
            }
    
            // Create a writable copy of the event object and normalize some properties
            var i, prop,
                originalEvent = event,
                fixHook = jQuery.event.fixHooks[ event.type ] || {},
                copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
    
            event = jQuery.Event( originalEvent );
    
            for ( i = copy.length; i; ) {
                prop = copy[ --i ];
                event[ prop ] = originalEvent[ prop ];
            }
    
            // Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
            if ( !event.target ) {
                event.target = originalEvent.srcElement || document;
            }
    
            // Target should not be a text node (#504, Safari)
            if ( event.target.nodeType === 3 ) {
                event.target = event.target.parentNode;
            }
    
            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
            event.metaKey = !!event.metaKey;
    
            return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
        },
    
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
    
            focus: {
                delegateType: "focusin"
            },
            blur: {
                delegateType: "focusout"
            },
    
            beforeunload: {
                setup: function( data, namespaces, eventHandle ) {
                    // We only want to do this special case on windows
                    if ( jQuery.isWindow( this ) ) {
                        this.onbeforeunload = eventHandle;
                    }
                },
    
                teardown: function( namespaces, eventHandle ) {
                    if ( this.onbeforeunload === eventHandle ) {
                        this.onbeforeunload = null;
                    }
                }
            }
        },
    
        simulate: function( type, elem, event, bubble ) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                { type: type,
                    isSimulated: true,
                    originalEvent: {}
                }
            );
            if ( bubble ) {
                jQuery.event.trigger( e, null, elem );
            } else {
                jQuery.event.dispatch.call( elem, e );
            }
            if ( e.isDefaultPrevented() ) {
                event.preventDefault();
            }
        }
    };
    
    // Some plugins are using, but it's undocumented/deprecated and will be removed.
    // The 1.7 special event interface should provide all the hooks needed now.
    jQuery.event.handle = jQuery.event.dispatch;
    
    jQuery.removeEvent = document.removeEventListener ?
        function( elem, type, handle ) {
            if ( elem.removeEventListener ) {
                elem.removeEventListener( type, handle, false );
            }
        } :
        function( elem, type, handle ) {
            var name = "on" + type;
    
            if ( elem.detachEvent ) {
    
                // #8545, #7054, preventing memory leaks for custom events in IE6-8 â€“
                // detachEvent needed property on element, by name of that event, to properly expose it to GC
                if ( typeof elem[ name ] === "undefined" ) {
                    elem[ name ] = null;
                }
    
                elem.detachEvent( name, handle );
            }
        };
    
    jQuery.Event = function( src, props ) {
        // Allow instantiation without the 'new' keyword
        if ( !(this instanceof jQuery.Event) ) {
            return new jQuery.Event( src, props );
        }
    
        // Event object
        if ( src && src.type ) {
            this.originalEvent = src;
            this.type = src.type;
    
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
                src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;
    
        // Event type
        } else {
            this.type = src;
        }
    
        // Put explicitly provided properties onto the event object
        if ( props ) {
            jQuery.extend( this, props );
        }
    
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
    
        // Mark it as fixed
        this[ jQuery.expando ] = true;
    };
    
    function returnFalse() {
        return false;
    }
    function returnTrue() {
        return true;
    }
    
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        preventDefault: function() {
            this.isDefaultPrevented = returnTrue;
    
            var e = this.originalEvent;
            if ( !e ) {
                return;
            }
    
            // if preventDefault exists run it on the original event
            if ( e.preventDefault ) {
                e.preventDefault();
    
            // otherwise set the returnValue property of the original event to false (IE)
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            this.isPropagationStopped = returnTrue;
    
            var e = this.originalEvent;
            if ( !e ) {
                return;
            }
            // if stopPropagation exists run it on the original event
            if ( e.stopPropagation ) {
                e.stopPropagation();
            }
            // otherwise set the cancelBubble property of the original event to true (IE)
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        },
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse
    };
    
    // Create mouseenter/leave events using mouseover/out and event-time checks
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function( orig, fix ) {
        jQuery.event.special[ orig ] = {
            delegateType: fix,
            bindType: fix,
    
            handle: function( event ) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj,
                    selector = handleObj.selector;
    
                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply( this, arguments );
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    
    // IE submit delegation
    if ( !jQuery.support.submitBubbles ) {
    
        jQuery.event.special.submit = {
            setup: function() {
                // Only need this for delegated form submit events
                if ( jQuery.nodeName( this, "form" ) ) {
                    return false;
                }
    
                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target,
                        form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
                    if ( form && !jQuery._data( form, "_submit_attached" ) ) {
                        jQuery.event.add( form, "submit._submit", function( event ) {
                            event._submit_bubble = true;
                        });
                        jQuery._data( form, "_submit_attached", true );
                    }
                });
                // return undefined since we don't need an event listener
            },
    
            postDispatch: function( event ) {
                // If form was submitted by the user, bubble the event up the tree
                if ( event._submit_bubble ) {
                    delete event._submit_bubble;
                    if ( this.parentNode && !event.isTrigger ) {
                        jQuery.event.simulate( "submit", this.parentNode, event, true );
                    }
                }
            },
    
            teardown: function() {
                // Only need this for delegated form submit events
                if ( jQuery.nodeName( this, "form" ) ) {
                    return false;
                }
    
                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove( this, "._submit" );
            }
        };
    }
    
    // IE change delegation and checkbox/radio fix
    if ( !jQuery.support.changeBubbles ) {
    
        jQuery.event.special.change = {
    
            setup: function() {
    
                if ( rformElems.test( this.nodeName ) ) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if ( this.type === "checkbox" || this.type === "radio" ) {
                        jQuery.event.add( this, "propertychange._change", function( event ) {
                            if ( event.originalEvent.propertyName === "checked" ) {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add( this, "click._change", function( event ) {
                            if ( this._just_changed && !event.isTrigger ) {
                                this._just_changed = false;
                            }
                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate( "change", this, event, true );
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add( this, "beforeactivate._change", function( e ) {
                    var elem = e.target;
    
                    if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "_change_attached" ) ) {
                        jQuery.event.add( elem, "change._change", function( event ) {
                            if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
                                jQuery.event.simulate( "change", this.parentNode, event, true );
                            }
                        });
                        jQuery._data( elem, "_change_attached", true );
                    }
                });
            },
    
            handle: function( event ) {
                var elem = event.target;
    
                // Swallow native change events from checkbox/radio, we already triggered them above
                if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
                    return event.handleObj.handler.apply( this, arguments );
                }
            },
    
            teardown: function() {
                jQuery.event.remove( this, "._change" );
    
                return !rformElems.test( this.nodeName );
            }
        };
    }
    
    // Create "bubbling" focus and blur events
    if ( !jQuery.support.focusinBubbles ) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
    
            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0,
                handler = function( event ) {
                    jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
                };
    
            jQuery.event.special[ fix ] = {
                setup: function() {
                    if ( attaches++ === 0 ) {
                        document.addEventListener( orig, handler, true );
                    }
                },
                teardown: function() {
                    if ( --attaches === 0 ) {
                        document.removeEventListener( orig, handler, true );
                    }
                }
            };
        });
    }
    
    jQuery.fn.extend({
    
        on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
            var origFn, type;
    
            // Types can be a map of types/handlers
            if ( typeof types === "object" ) {
                // ( types-Object, selector, data )
                if ( typeof selector !== "string" ) { // && selector != null
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for ( type in types ) {
                    this.on( type, selector, data, types[ type ], one );
                }
                return this;
            }
    
            if ( data == null && fn == null ) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if ( fn == null ) {
                if ( typeof selector === "string" ) {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if ( fn === false ) {
                fn = returnFalse;
            } else if ( !fn ) {
                return this;
            }
    
            if ( one === 1 ) {
                origFn = fn;
                fn = function( event ) {
                    // Can use an empty set, since event contains the info
                    jQuery().off( event );
                    return origFn.apply( this, arguments );
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
            }
            return this.each( function() {
                jQuery.event.add( this, types, fn, data, selector );
            });
        },
        one: function( types, selector, data, fn ) {
            return this.on( types, selector, data, fn, 1 );
        },
        off: function( types, selector, fn ) {
            var handleObj, type;
            if ( types && types.preventDefault && types.handleObj ) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery( types.delegateTarget ).off(
                    handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if ( typeof types === "object" ) {
                // ( types-object [, selector] )
                for ( type in types ) {
                    this.off( type, selector, types[ type ] );
                }
                return this;
            }
            if ( selector === false || typeof selector === "function" ) {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if ( fn === false ) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove( this, types, fn, selector );
            });
        },
    
        bind: function( types, data, fn ) {
            return this.on( types, null, data, fn );
        },
        unbind: function( types, fn ) {
            return this.off( types, null, fn );
        },
    
        live: function( types, data, fn ) {
            jQuery( this.context ).on( types, this.selector, data, fn );
            return this;
        },
        die: function( types, fn ) {
            jQuery( this.context ).off( types, this.selector || "**", fn );
            return this;
        },
    
        delegate: function( selector, types, data, fn ) {
            return this.on( types, selector, data, fn );
        },
        undelegate: function( selector, types, fn ) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
        },
    
        trigger: function( type, data ) {
            return this.each(function() {
                jQuery.event.trigger( type, data, this );
            });
        },
        triggerHandler: function( type, data ) {
            if ( this[0] ) {
                return jQuery.event.trigger( type, data, this[0], true );
            }
        },
    
        toggle: function( fn ) {
            // Save reference to arguments for access in closure
            var args = arguments,
                guid = fn.guid || jQuery.guid++,
                i = 0,
                toggler = function( event ) {
                    // Figure out which function to execute
                    var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
                    jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );
    
                    // Make sure that clicks stop
                    event.preventDefault();
    
                    // and execute the function
                    return args[ lastToggle ].apply( this, arguments ) || false;
                };
    
            // link all the functions, so any of them can unbind this click handler
            toggler.guid = guid;
            while ( i < args.length ) {
                args[ i++ ].guid = guid;
            }
    
            return this.click( toggler );
        },
    
        hover: function( fnOver, fnOut ) {
            return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
        }
    });
    
    jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {
    
        // Handle event binding
        jQuery.fn[ name ] = function( data, fn ) {
            if ( fn == null ) {
                fn = data;
                data = null;
            }
    
            return arguments.length > 0 ?
                this.on( name, null, data, fn ) :
                this.trigger( name );
        };
    
        if ( rkeyEvent.test( name ) ) {
            jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
        }
    
        if ( rmouseEvent.test( name ) ) {
            jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
        }
    });
    /*!
     * Sizzle CSS Selector Engine
     *  Copyright 2012 jQuery Foundation and other contributors
     *  Released under the MIT license
     *  http://sizzlejs.com/
     */
    (function( window, undefined ) {
    
    var dirruns,
        cachedruns,
        assertGetIdNotName,
        Expr,
        getText,
        isXML,
        contains,
        compile,
        sortOrder,
        hasDuplicate,
    
        baseHasDuplicate = true,
        strundefined = "undefined",
    
        expando = ( "sizcache" + Math.random() ).replace( ".", "" ),
    
        document = window.document,
        docElem = document.documentElement,
        done = 0,
        slice = [].slice,
        push = [].push,
    
        // Augment a function for special use by Sizzle
        markFunction = function( fn, value ) {
            fn[ expando ] = value || true;
            return fn;
        },
    
        createCache = function() {
            var cache = {},
                keys = [];
    
            return markFunction(function( key, value ) {
                // Only keep the most recent entries
                if ( keys.push( key ) > Expr.cacheLength ) {
                    delete cache[ keys.shift() ];
                }
    
                return (cache[ key ] = value);
            }, cache );
        },
    
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
    
        // Regex
    
        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",
    
        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace( "w", "w#" ),
    
        // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
        operators = "([*^$|!~]?=)",
        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
            "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
    
        // Prefer arguments not in parens/brackets,
        //   then attribute selectors and non-pseudos (denoted by :),
        //   then anything else
        // These preferences are here to reduce the number of selectors
        //   needing tokenize in the PSEUDO preFilter
        pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",
    
        // For matchExpr.POS and matchExpr.needsContext
        pos = ":(nth|eq|gt|lt|first|last|even|odd)(?:\\(((?:-\\d)?\\d*)\\)|)(?=[^-]|$)",
    
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
    
        rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
        rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
        rpseudo = new RegExp( pseudos ),
    
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
    
        rnot = /^:not/,
        rsibling = /[\x20\t\r\n\f]*[+~]/,
        rendsWithNot = /:not\($/,
    
        rheader = /h\d/i,
        rinputs = /input|select|textarea|button/i,
    
        rbackslash = /\\(?!\\)/g,
    
        matchExpr = {
            "ID": new RegExp( "^#(" + characterEncoding + ")" ),
            "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
            "NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
            "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
            "ATTR": new RegExp( "^" + attributes ),
            "PSEUDO": new RegExp( "^" + pseudos ),
            "CHILD": new RegExp( "^:(only|nth|last|first)-child(?:\\(" + whitespace +
                "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
            "POS": new RegExp( pos, "ig" ),
            // For use in libraries implementing .is()
            "needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
        },
    
        // Support
    
        // Used for testing something on an element
        assert = function( fn ) {
            var div = document.createElement("div");
    
            try {
                return fn( div );
            } catch (e) {
                return false;
            } finally {
                // release memory in IE
                div = null;
            }
        },
    
        // Check if getElementsByTagName("*") returns only elements
        assertTagNameNoComments = assert(function( div ) {
            div.appendChild( document.createComment("") );
            return !div.getElementsByTagName("*").length;
        }),
    
        // Check if getAttribute returns normalized href attributes
        assertHrefNotNormalized = assert(function( div ) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
                div.firstChild.getAttribute("href") === "#";
        }),
    
        // Check if attributes should be retrieved by attribute nodes
        assertAttributes = assert(function( div ) {
            div.innerHTML = "<select></select>";
            var type = typeof div.lastChild.getAttribute("multiple");
            // IE8 returns a string for some attributes even when not present
            return type !== "boolean" && type !== "string";
        }),
    
        // Check if getElementsByClassName can be trusted
        assertUsableClassName = assert(function( div ) {
            // Opera can't find a second classname (in 9.6)
            div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
            if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
                return false;
            }
    
            // Safari 3.2 caches class attributes and doesn't catch changes
            div.lastChild.className = "e";
            return div.getElementsByClassName("e").length === 2;
        }),
    
        // Check if getElementById returns elements by name
        // Check if getElementsByName privileges form controls or returns elements by ID
        assertUsableName = assert(function( div ) {
            // Inject content
            div.id = expando + 0;
            div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
            docElem.insertBefore( div, docElem.firstChild );
    
            // Test
            var pass = document.getElementsByName &&
                // buggy browsers will return fewer than the correct 2
                document.getElementsByName( expando ).length === 2 +
                // buggy browsers will return more than the correct 0
                document.getElementsByName( expando + 0 ).length;
            assertGetIdNotName = !document.getElementById( expando );
    
            // Cleanup
            docElem.removeChild( div );
    
            return pass;
        });
    
    // If slice is not available, provide a backup
    try {
        slice.call( docElem.childNodes, 0 )[0].nodeType;
    } catch ( e ) {
        slice = function( i ) {
            var elem, results = [];
            for ( ; (elem = this[i]); i++ ) {
                results.push( elem );
            }
            return results;
        };
    }
    
    function Sizzle( selector, context, results, seed ) {
        results = results || [];
        context = context || document;
        var match, elem, xml, m,
            nodeType = context.nodeType;
    
        if ( nodeType !== 1 && nodeType !== 9 ) {
            return [];
        }
    
        if ( !selector || typeof selector !== "string" ) {
            return results;
        }
    
        xml = isXML( context );
    
        if ( !xml && !seed ) {
            if ( (match = rquickExpr.exec( selector )) ) {
                // Speed-up: Sizzle("#ID")
                if ( (m = match[1]) ) {
                    if ( nodeType === 9 ) {
                        elem = context.getElementById( m );
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if ( elem && elem.parentNode ) {
                            // Handle the case where IE, Opera, and Webkit return items
                            // by name instead of ID
                            if ( elem.id === m ) {
                                results.push( elem );
                                return results;
                            }
                        } else {
                            return results;
                        }
                    } else {
                        // Context is not a document
                        if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                            contains( context, elem ) && elem.id === m ) {
                            results.push( elem );
                            return results;
                        }
                    }
    
                // Speed-up: Sizzle("TAG")
                } else if ( match[2] ) {
                    push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
                    return results;
    
                // Speed-up: Sizzle(".CLASS")
                } else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
                    push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
                    return results;
                }
            }
        }
    
        // All others
        return select( selector, context, results, seed, xml );
    }
    
    Sizzle.matches = function( expr, elements ) {
        return Sizzle( expr, null, null, elements );
    };
    
    Sizzle.matchesSelector = function( elem, expr ) {
        return Sizzle( expr, null, null, [ elem ] ).length > 0;
    };
    
    // Returns a function to use in pseudos for input types
    function createInputPseudo( type ) {
        return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
        };
    }
    
    // Returns a function to use in pseudos for buttons
    function createButtonPseudo( type ) {
        return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
        };
    }
    
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */
    getText = Sizzle.getText = function( elem ) {
        var node,
            ret = "",
            i = 0,
            nodeType = elem.nodeType;
    
        if ( nodeType ) {
            if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (see #11153)
                if ( typeof elem.textContent === "string" ) {
                    return elem.textContent;
                } else {
                    // Traverse its children
                    for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                        ret += getText( elem );
                    }
                }
            } else if ( nodeType === 3 || nodeType === 4 ) {
                return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes
        } else {
    
            // If no nodeType, this is expected to be an array
            for ( ; (node = elem[i]); i++ ) {
                // Do not traverse comment nodes
                ret += getText( node );
            }
        }
        return ret;
    };
    
    isXML = Sizzle.isXML = function isXML( elem ) {
        // documentElement is verified for cases where it doesn't yet exist
        // (such as loading iframes in IE - #4833)
        var documentElement = elem && (elem.ownerDocument || elem).documentElement;
        return documentElement ? documentElement.nodeName !== "HTML" : false;
    };
    
    // Element contains another
    contains = Sizzle.contains = docElem.contains ?
        function( a, b ) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
            return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
        } :
        docElem.compareDocumentPosition ?
        function( a, b ) {
            return b && !!( a.compareDocumentPosition( b ) & 16 );
        } :
        function( a, b ) {
            while ( (b = b.parentNode) ) {
                if ( b === a ) {
                    return true;
                }
            }
            return false;
        };
    
    Sizzle.attr = function( elem, name ) {
        var attr,
            xml = isXML( elem );
    
        if ( !xml ) {
            name = name.toLowerCase();
        }
        if ( Expr.attrHandle[ name ] ) {
            return Expr.attrHandle[ name ]( elem );
        }
        if ( assertAttributes || xml ) {
            return elem.getAttribute( name );
        }
        attr = elem.getAttributeNode( name );
        return attr ?
            typeof elem[ name ] === "boolean" ?
                elem[ name ] ? name : null :
                attr.specified ? attr.value : null :
            null;
    };
    
    Expr = Sizzle.selectors = {
    
        // Can be adjusted by the user
        cacheLength: 50,
    
        createPseudo: markFunction,
    
        match: matchExpr,
    
        order: new RegExp( "ID|TAG" +
            (assertUsableName ? "|NAME" : "") +
            (assertUsableClassName ? "|CLASS" : "")
        ),
    
        // IE6/7 return a modified href
        attrHandle: assertHrefNotNormalized ?
            {} :
            {
                "href": function( elem ) {
                    return elem.getAttribute( "href", 2 );
                },
                "type": function( elem ) {
                    return elem.getAttribute("type");
                }
            },
    
        find: {
            "ID": assertGetIdNotName ?
                function( id, context, xml ) {
                    if ( typeof context.getElementById !== strundefined && !xml ) {
                        var m = context.getElementById( id );
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [m] : [];
                    }
                } :
                function( id, context, xml ) {
                    if ( typeof context.getElementById !== strundefined && !xml ) {
                        var m = context.getElementById( id );
    
                        return m ?
                            m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
                                [m] :
                                undefined :
                            [];
                    }
                },
    
            "TAG": assertTagNameNoComments ?
                function( tag, context ) {
                    if ( typeof context.getElementsByTagName !== strundefined ) {
                        return context.getElementsByTagName( tag );
                    }
                } :
                function( tag, context ) {
                    var results = context.getElementsByTagName( tag );
    
                    // Filter out possible comments
                    if ( tag === "*" ) {
                        var elem,
                            tmp = [],
                            i = 0;
    
                        for ( ; (elem = results[i]); i++ ) {
                            if ( elem.nodeType === 1 ) {
                                tmp.push( elem );
                            }
                        }
    
                        return tmp;
                    }
                    return results;
                },
    
            "NAME": function( tag, context ) {
                if ( typeof context.getElementsByName !== strundefined ) {
                    return context.getElementsByName( name );
                }
            },
    
            "CLASS": function( className, context, xml ) {
                if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
                    return context.getElementsByClassName( className );
                }
            }
        },
    
        relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
        },
    
        preFilter: {
            "ATTR": function( match ) {
                match[1] = match[1].replace( rbackslash, "" );
    
                // Move the given value to match[3] whether quoted or unquoted
                match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );
    
                if ( match[2] === "~=" ) {
                    match[3] = " " + match[3] + " ";
                }
    
                return match.slice( 0, 4 );
            },
    
            "CHILD": function( match ) {
                /* matches from matchExpr.CHILD
                    1 type (only|nth|...)
                    2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                    3 xn-component of xn+y argument ([+-]?\d*n|)
                    4 sign of xn-component
                    5 x of xn-component
                    6 sign of y-component
                    7 y of y-component
                */
                match[1] = match[1].toLowerCase();
    
                if ( match[1] === "nth" ) {
                    // nth-child requires argument
                    if ( !match[2] ) {
                        Sizzle.error( match[0] );
                    }
    
                    // numeric x and y parameters for Expr.filter.CHILD
                    // remember that false/true cast respectively to 0/1
                    match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
                    match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );
    
                // other types prohibit arguments
                } else if ( match[2] ) {
                    Sizzle.error( match[0] );
                }
    
                return match;
            },
    
            "PSEUDO": function( match, context, xml ) {
                var unquoted, excess;
                if ( matchExpr["CHILD"].test( match[0] ) ) {
                    return null;
                }
    
                if ( match[3] ) {
                    match[2] = match[3];
                } else if ( (unquoted = match[4]) ) {
                    // Only check arguments that contain a pseudo
                    if ( rpseudo.test(unquoted) &&
                        // Get excess from tokenize (recursively)
                        (excess = tokenize( unquoted, context, xml, true )) &&
                        // advance to the next closing parenthesis
                        (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
    
                        // excess is a negative index
                        unquoted = unquoted.slice( 0, excess );
                        match[0] = match[0].slice( 0, excess );
                    }
                    match[2] = unquoted;
                }
    
                // Return only captures needed by the pseudo filter method (type and argument)
                return match.slice( 0, 3 );
            }
        },
    
        filter: {
            "ID": assertGetIdNotName ?
                function( id ) {
                    id = id.replace( rbackslash, "" );
                    return function( elem ) {
                        return elem.getAttribute("id") === id;
                    };
                } :
                function( id ) {
                    id = id.replace( rbackslash, "" );
                    return function( elem ) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === id;
                    };
                },
    
            "TAG": function( nodeName ) {
                if ( nodeName === "*" ) {
                    return function() { return true; };
                }
                nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();
    
                return function( elem ) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
            },
    
            "CLASS": function( className ) {
                var pattern = classCache[ expando ][ className ];
                if ( !pattern ) {
                    pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)") );
                }
                return function( elem ) {
                    return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
                };
            },
    
            "ATTR": function( name, operator, check ) {
                if ( !operator ) {
                    return function( elem ) {
                        return Sizzle.attr( elem, name ) != null;
                    };
                }
    
                return function( elem ) {
                    var result = Sizzle.attr( elem, name ),
                        value = result + "";
    
                    if ( result == null ) {
                        return operator === "!=";
                    }
    
                    switch ( operator ) {
                        case "=":
                            return value === check;
                        case "!=":
                            return value !== check;
                        case "^=":
                            return check && value.indexOf( check ) === 0;
                        case "*=":
                            return check && value.indexOf( check ) > -1;
                        case "$=":
                            return check && value.substr( value.length - check.length ) === check;
                        case "~=":
                            return ( " " + value + " " ).indexOf( check ) > -1;
                        case "|=":
                            return value === check || value.substr( 0, check.length + 1 ) === check + "-";
                    }
                };
            },
    
            "CHILD": function( type, argument, first, last ) {
    
                if ( type === "nth" ) {
                    var doneName = done++;
    
                    return function( elem ) {
                        var parent, diff,
                            count = 0,
                            node = elem;
    
                        if ( first === 1 && last === 0 ) {
                            return true;
                        }
    
                        parent = elem.parentNode;
    
                        if ( parent && (parent[ expando ] !== doneName || !elem.sizset) ) {
                            for ( node = parent.firstChild; node; node = node.nextSibling ) {
                                if ( node.nodeType === 1 ) {
                                    node.sizset = ++count;
                                    if ( node === elem ) {
                                        break;
                                    }
                                }
                            }
    
                            parent[ expando ] = doneName;
                        }
    
                        diff = elem.sizset - last;
    
                        if ( first === 0 ) {
                            return diff === 0;
    
                        } else {
                            return ( diff % first === 0 && diff / first >= 0 );
                        }
                    };
                }
    
                return function( elem ) {
                    var node = elem;
    
                    switch ( type ) {
                        case "only":
                        case "first":
                            while ( (node = node.previousSibling) ) {
                                if ( node.nodeType === 1 ) {
                                    return false;
                                }
                            }
    
                            if ( type === "first" ) {
                                return true;
                            }
    
                            node = elem;
    
                            /* falls through */
                        case "last":
                            while ( (node = node.nextSibling) ) {
                                if ( node.nodeType === 1 ) {
                                    return false;
                                }
                            }
    
                            return true;
                    }
                };
            },
    
            "PSEUDO": function( pseudo, argument, context, xml ) {
                // pseudo-class names are case-insensitive
                // http://www.w3.org/TR/selectors/#pseudo-classes
                // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                var args,
                    fn = Expr.pseudos[ pseudo ] || Expr.pseudos[ pseudo.toLowerCase() ];
    
                if ( !fn ) {
                    Sizzle.error( "unsupported pseudo: " + pseudo );
                }
    
                // The user may use createPseudo to indicate that
                // arguments are needed to create the filter function
                // just as Sizzle does
                if ( !fn[ expando ] ) {
                    if ( fn.length > 1 ) {
                        args = [ pseudo, pseudo, "", argument ];
                        return function( elem ) {
                            return fn( elem, 0, args );
                        };
                    }
                    return fn;
                }
    
                return fn( argument, context, xml );
            }
        },
    
        pseudos: {
            "not": markFunction(function( selector, context, xml ) {
                // Trim the selector passed to compile
                // to avoid treating leading and trailing
                // spaces as combinators
                var matcher = compile( selector.replace( rtrim, "$1" ), context, xml );
                return function( elem ) {
                    return !matcher( elem );
                };
            }),
    
            "enabled": function( elem ) {
                return elem.disabled === false;
            },
    
            "disabled": function( elem ) {
                return elem.disabled === true;
            },
    
            "checked": function( elem ) {
                // In CSS3, :checked should return both checked and selected elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                var nodeName = elem.nodeName.toLowerCase();
                return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
            },
    
            "selected": function( elem ) {
                // Accessing this property makes selected-by-default
                // options in Safari work properly
                if ( elem.parentNode ) {
                    elem.parentNode.selectedIndex;
                }
    
                return elem.selected === true;
            },
    
            "parent": function( elem ) {
                return !Expr.pseudos["empty"]( elem );
            },
    
            "empty": function( elem ) {
                // http://www.w3.org/TR/selectors/#empty-pseudo
                // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                //   not comment, processing instructions, or others
                // Thanks to Diego Perini for the nodeName shortcut
                //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                var nodeType;
                elem = elem.firstChild;
                while ( elem ) {
                    if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
                        return false;
                    }
                    elem = elem.nextSibling;
                }
                return true;
            },
    
            "contains": markFunction(function( text ) {
                return function( elem ) {
                    return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
                };
            }),
    
            "has": markFunction(function( selector ) {
                return function( elem ) {
                    return Sizzle( selector, elem ).length > 0;
                };
            }),
    
            "header": function( elem ) {
                return rheader.test( elem.nodeName );
            },
    
            "text": function( elem ) {
                var type, attr;
                // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                // use getAttribute instead to test this case
                return elem.nodeName.toLowerCase() === "input" &&
                    (type = elem.type) === "text" &&
                    ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
            },
    
            // Input types
            "radio": createInputPseudo("radio"),
            "checkbox": createInputPseudo("checkbox"),
            "file": createInputPseudo("file"),
            "password": createInputPseudo("password"),
            "image": createInputPseudo("image"),
    
            "submit": createButtonPseudo("submit"),
            "reset": createButtonPseudo("reset"),
    
            "button": function( elem ) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === "button" || name === "button";
            },
    
            "input": function( elem ) {
                return rinputs.test( elem.nodeName );
            },
    
            "focus": function( elem ) {
                var doc = elem.ownerDocument;
                return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href);
            },
    
            "active": function( elem ) {
                return elem === elem.ownerDocument.activeElement;
            }
        },
    
        setFilters: {
            "first": function( elements, argument, not ) {
                return not ? elements.slice( 1 ) : [ elements[0] ];
            },
    
            "last": function( elements, argument, not ) {
                var elem = elements.pop();
                return not ? elements : [ elem ];
            },
    
            "even": function( elements, argument, not ) {
                var results = [],
                    i = not ? 1 : 0,
                    len = elements.length;
                for ( ; i < len; i = i + 2 ) {
                    results.push( elements[i] );
                }
                return results;
            },
    
            "odd": function( elements, argument, not ) {
                var results = [],
                    i = not ? 0 : 1,
                    len = elements.length;
                for ( ; i < len; i = i + 2 ) {
                    results.push( elements[i] );
                }
                return results;
            },
    
            "lt": function( elements, argument, not ) {
                return not ? elements.slice( +argument ) : elements.slice( 0, +argument );
            },
    
            "gt": function( elements, argument, not ) {
                return not ? elements.slice( 0, +argument + 1 ) : elements.slice( +argument + 1 );
            },
    
            "eq": function( elements, argument, not ) {
                var elem = elements.splice( +argument, 1 );
                return not ? elements : elem;
            }
        }
    };
    
    function siblingCheck( a, b, ret ) {
        if ( a === b ) {
            return ret;
        }
    
        var cur = a.nextSibling;
    
        while ( cur ) {
            if ( cur === b ) {
                return -1;
            }
    
            cur = cur.nextSibling;
        }
    
        return 1;
    }
    
    sortOrder = docElem.compareDocumentPosition ?
        function( a, b ) {
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
            }
    
            return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
                a.compareDocumentPosition :
                a.compareDocumentPosition(b) & 4
            ) ? -1 : 1;
        } :
        function( a, b ) {
            // The nodes are identical, we can exit early
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
    
            // Fallback to using sourceIndex (in IE) if it's available on both nodes
            } else if ( a.sourceIndex && b.sourceIndex ) {
                return a.sourceIndex - b.sourceIndex;
            }
    
            var al, bl,
                ap = [],
                bp = [],
                aup = a.parentNode,
                bup = b.parentNode,
                cur = aup;
    
            // If the nodes are siblings (or identical) we can do a quick check
            if ( aup === bup ) {
                return siblingCheck( a, b );
    
            // If no parents were found then the nodes are disconnected
            } else if ( !aup ) {
                return -1;
    
            } else if ( !bup ) {
                return 1;
            }
    
            // Otherwise they're somewhere else in the tree so we need
            // to build up a full list of the parentNodes for comparison
            while ( cur ) {
                ap.unshift( cur );
                cur = cur.parentNode;
            }
    
            cur = bup;
    
            while ( cur ) {
                bp.unshift( cur );
                cur = cur.parentNode;
            }
    
            al = ap.length;
            bl = bp.length;
    
            // Start walking down the tree looking for a discrepancy
            for ( var i = 0; i < al && i < bl; i++ ) {
                if ( ap[i] !== bp[i] ) {
                    return siblingCheck( ap[i], bp[i] );
                }
            }
    
            // We ended someplace up the tree so do a sibling check
            return i === al ?
                siblingCheck( a, bp[i], -1 ) :
                siblingCheck( ap[i], b, 1 );
        };
    
    // Always assume the presence of duplicates if sort doesn't
    // pass them to our comparison function (as in Google Chrome).
    [0, 0].sort( sortOrder );
    baseHasDuplicate = !hasDuplicate;
    
    // Document sorting and removing duplicates
    Sizzle.uniqueSort = function( results ) {
        var elem,
            i = 1;
    
        hasDuplicate = baseHasDuplicate;
        results.sort( sortOrder );
    
        if ( hasDuplicate ) {
            for ( ; (elem = results[i]); i++ ) {
                if ( elem === results[ i - 1 ] ) {
                    results.splice( i--, 1 );
                }
            }
        }
    
        return results;
    };
    
    Sizzle.error = function( msg ) {
        throw new Error( "Syntax error, unrecognized expression: " + msg );
    };
    
    function tokenize( selector, context, xml, parseOnly ) {
        var matched, match, tokens, type,
            soFar, groups, group, i,
            preFilters, filters,
            checkContext = !xml && context !== document,
            // Token cache should maintain spaces
            key = ( checkContext ? "<s>" : "" ) + selector.replace( rtrim, "$1<s>" ),
            cached = tokenCache[ expando ][ key ];
    
        if ( cached ) {
            return parseOnly ? 0 : slice.call( cached, 0 );
        }
    
        soFar = selector;
        groups = [];
        i = 0;
        preFilters = Expr.preFilter;
        filters = Expr.filter;
    
        while ( soFar ) {
    
            // Comma and first run
            if ( !matched || (match = rcomma.exec( soFar )) ) {
                if ( match ) {
                    soFar = soFar.slice( match[0].length );
                    tokens.selector = group;
                }
                groups.push( tokens = [] );
                group = "";
    
                // Need to make sure we're within a narrower context if necessary
                // Adding a descendant combinator will generate what is needed
                if ( checkContext ) {
                    soFar = " " + soFar;
                }
            }
    
            matched = false;
    
            // Combinators
            if ( (match = rcombinators.exec( soFar )) ) {
                group += match[0];
                soFar = soFar.slice( match[0].length );
    
                // Cast descendant combinators to space
                matched = tokens.push({
                    part: match.pop().replace( rtrim, " " ),
                    string: match[0],
                    captures: match
                });
            }
    
            // Filters
            for ( type in filters ) {
                if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                    ( match = preFilters[ type ](match, context, xml) )) ) {
    
                    group += match[0];
                    soFar = soFar.slice( match[0].length );
                    matched = tokens.push({
                        part: type,
                        string: match.shift(),
                        captures: match
                    });
                }
            }
    
            if ( !matched ) {
                break;
            }
        }
    
        // Attach the full group as a selector
        if ( group ) {
            tokens.selector = group;
        }
    
        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly ?
            soFar.length :
            soFar ?
                Sizzle.error( selector ) :
                // Cache the tokens
                slice.call( tokenCache(key, groups), 0 );
    }
    
    function addCombinator( matcher, combinator, context, xml ) {
        var dir = combinator.dir,
            doneName = done++;
    
        if ( !matcher ) {
            // If there is no matcher to check, check against the context
            matcher = function( elem ) {
                return elem === context;
            };
        }
        return combinator.first ?
            function( elem ) {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 ) {
                        return matcher( elem ) && elem;
                    }
                }
            } :
            xml ?
                function( elem ) {
                    while ( (elem = elem[ dir ]) ) {
                        if ( elem.nodeType === 1 ) {
                            if ( matcher( elem ) ) {
                                return elem;
                            }
                        }
                    }
                } :
                function( elem ) {
                    var cache,
                        dirkey = doneName + "." + dirruns,
                        cachedkey = dirkey + "." + cachedruns;
                    while ( (elem = elem[ dir ]) ) {
                        if ( elem.nodeType === 1 ) {
                            if ( (cache = elem[ expando ]) === cachedkey ) {
                                return elem.sizset;
                            } else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
                                if ( elem.sizset ) {
                                    return elem;
                                }
                            } else {
                                elem[ expando ] = cachedkey;
                                if ( matcher( elem ) ) {
                                    elem.sizset = true;
                                    return elem;
                                }
                                elem.sizset = false;
                            }
                        }
                    }
                };
    }
    
    function addMatcher( higher, deeper ) {
        return higher ?
            function( elem ) {
                var result = deeper( elem );
                return result && higher( result === true ? elem : result );
            } :
            deeper;
    }
    
    // ["TAG", ">", "ID", " ", "CLASS"]
    function matcherFromTokens( tokens, context, xml ) {
        var token, matcher,
            i = 0;
    
        for ( ; (token = tokens[i]); i++ ) {
            if ( Expr.relative[ token.part ] ) {
                matcher = addCombinator( matcher, Expr.relative[ token.part ], context, xml );
            } else {
                matcher = addMatcher( matcher, Expr.filter[ token.part ].apply(null, token.captures.concat( context, xml )) );
            }
        }
    
        return matcher;
    }
    
    function matcherFromGroupMatchers( matchers ) {
        return function( elem ) {
            var matcher,
                j = 0;
            for ( ; (matcher = matchers[j]); j++ ) {
                if ( matcher(elem) ) {
                    return true;
                }
            }
            return false;
        };
    }
    
    compile = Sizzle.compile = function( selector, context, xml ) {
        var group, i, len,
            cached = compilerCache[ expando ][ selector ];
    
        // Return a cached group function if already generated (context dependent)
        if ( cached && cached.context === context ) {
            return cached;
        }
    
        // Generate a function of recursive functions that can be used to check each element
        group = tokenize( selector, context, xml );
        for ( i = 0, len = group.length; i < len; i++ ) {
            group[i] = matcherFromTokens(group[i], context, xml);
        }
    
        // Cache the compiled function
        cached = compilerCache( selector, matcherFromGroupMatchers(group) );
        cached.context = context;
        cached.runs = cached.dirruns = 0;
        return cached;
    };
    
    function multipleContexts( selector, contexts, results, seed ) {
        var i = 0,
            len = contexts.length;
        for ( ; i < len; i++ ) {
            Sizzle( selector, contexts[i], results, seed );
        }
    }
    
    function handlePOSGroup( selector, posfilter, argument, contexts, seed, not ) {
        var results,
            fn = Expr.setFilters[ posfilter.toLowerCase() ];
    
        if ( !fn ) {
            Sizzle.error( posfilter );
        }
    
        if ( selector || !(results = seed) ) {
            multipleContexts( selector || "*", contexts, (results = []), seed );
        }
    
        return results.length > 0 ? fn( results, argument, not ) : [];
    }
    
    function handlePOS( groups, context, results, seed ) {
        var group, part, j, groupLen, token, selector,
            anchor, elements, match, matched,
            lastIndex, currentContexts, not,
            i = 0,
            len = groups.length,
            rpos = matchExpr["POS"],
            // This is generated here in case matchExpr["POS"] is extended
            rposgroups = new RegExp( "^" + rpos.source + "(?!" + whitespace + ")", "i" ),
            // This is for making sure non-participating
            // matching groups are represented cross-browser (IE6-8)
            setUndefined = function() {
                var i = 1,
                    len = arguments.length - 2;
                for ( ; i < len; i++ ) {
                    if ( arguments[i] === undefined ) {
                        match[i] = undefined;
                    }
                }
            };
    
        for ( ; i < len; i++ ) {
            group = groups[i];
            part = "";
            elements = seed;
            for ( j = 0, groupLen = group.length; j < groupLen; j++ ) {
                token = group[j];
                selector = token.string;
                if ( token.part === "PSEUDO" ) {
                    // Reset regex index to 0
                    rpos.exec("");
                    anchor = 0;
                    while ( (match = rpos.exec( selector )) ) {
                        matched = true;
                        lastIndex = rpos.lastIndex = match.index + match[0].length;
                        if ( lastIndex > anchor ) {
                            part += selector.slice( anchor, match.index );
                            anchor = lastIndex;
                            currentContexts = [ context ];
    
                            if ( rcombinators.test(part) ) {
                                if ( elements ) {
                                    currentContexts = elements;
                                }
                                elements = seed;
                            }
    
                            if ( (not = rendsWithNot.test( part )) ) {
                                part = part.slice( 0, -5 ).replace( rcombinators, "$&*" );
                                anchor++;
                            }
    
                            if ( match.length > 1 ) {
                                match[0].replace( rposgroups, setUndefined );
                            }
                            elements = handlePOSGroup( part, match[1], match[2], currentContexts, elements, not );
                        }
                        part = "";
                    }
    
                }
    
                if ( !matched ) {
                    part += selector;
                }
                matched = false;
            }
    
            if ( part ) {
                if ( rcombinators.test(part) ) {
                    multipleContexts( part, elements || [ context ], results, seed );
                } else {
                    Sizzle( part, context, results, seed ? seed.concat(elements) : elements );
                }
            } else {
                push.apply( results, elements );
            }
        }
    
        // Do not sort if this is a single filter
        return len === 1 ? results : Sizzle.uniqueSort( results );
    }
    
    function select( selector, context, results, seed, xml ) {
        // Remove excessive whitespace
        selector = selector.replace( rtrim, "$1" );
        var elements, matcher, cached, elem,
            i, tokens, token, lastToken, findContext, type,
            match = tokenize( selector, context, xml ),
            contextNodeType = context.nodeType;
    
        // POS handling
        if ( matchExpr["POS"].test(selector) ) {
            return handlePOS( match, context, results, seed );
        }
    
        if ( seed ) {
            elements = slice.call( seed, 0 );
    
        // To maintain document order, only narrow the
        // set if there is one group
        } else if ( match.length === 1 ) {
    
            // Take a shortcut and set the context if the root selector is an ID
            if ( (tokens = slice.call( match[0], 0 )).length > 2 &&
                    (token = tokens[0]).part === "ID" &&
                    contextNodeType === 9 && !xml &&
                    Expr.relative[ tokens[1].part ] ) {
    
                context = Expr.find["ID"]( token.captures[0].replace( rbackslash, "" ), context, xml )[0];
                if ( !context ) {
                    return results;
                }
    
                selector = selector.slice( tokens.shift().string.length );
            }
    
            findContext = ( (match = rsibling.exec( tokens[0].string )) && !match.index && context.parentNode ) || context;
    
            // Reduce the set if possible
            lastToken = "";
            for ( i = tokens.length - 1; i >= 0; i-- ) {
                token = tokens[i];
                type = token.part;
                lastToken = token.string + lastToken;
                if ( Expr.relative[ type ] ) {
                    break;
                }
                if ( Expr.order.test(type) ) {
                    elements = Expr.find[ type ]( token.captures[0].replace( rbackslash, "" ), findContext, xml );
                    if ( elements == null ) {
                        continue;
                    } else {
                        selector = selector.slice( 0, selector.length - lastToken.length ) +
                            lastToken.replace( matchExpr[ type ], "" );
    
                        if ( !selector ) {
                            push.apply( results, slice.call(elements, 0) );
                        }
    
                        break;
                    }
                }
            }
        }
    
        // Only loop over the given elements once
        if ( selector ) {
            matcher = compile( selector, context, xml );
            dirruns = matcher.dirruns++;
            if ( elements == null ) {
                elements = Expr.find["TAG"]( "*", (rsibling.test( selector ) && context.parentNode) || context );
            }
    
            for ( i = 0; (elem = elements[i]); i++ ) {
                cachedruns = matcher.runs++;
                if ( matcher(elem) ) {
                    results.push( elem );
                }
            }
        }
    
        return results;
    }
    
    if ( document.querySelectorAll ) {
        (function() {
            var disconnectedMatch,
                oldSelect = select,
                rescape = /'|\\/g,
                rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
                rbuggyQSA = [],
                // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                // A support test would require too much code (would include document ready)
                // just skip matchesSelector for :active
                rbuggyMatches = [":active"],
                matches = docElem.matchesSelector ||
                    docElem.mozMatchesSelector ||
                    docElem.webkitMatchesSelector ||
                    docElem.oMatchesSelector ||
                    docElem.msMatchesSelector;
    
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function( div ) {
                // Select is set to empty string on purpose
                // This is to test IE's treatment of not explictly
                // setting a boolean content attribute,
                // since its presence should be enough
                // http://bugs.jquery.com/ticket/12359
                div.innerHTML = "<select><option selected=''></option></select>";
    
                // IE8 - Some boolean attributes are not treated correctly
                if ( !div.querySelectorAll("[selected]").length ) {
                    rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
                }
    
                // Webkit/Opera - :checked should return selected option elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                // IE8 throws error here (do not put tests after this one)
                if ( !div.querySelectorAll(":checked").length ) {
                    rbuggyQSA.push(":checked");
                }
            });
    
            assert(function( div ) {
    
                // Opera 10-12/IE9 - ^= $= *= and empty values
                // Should not select anything
                div.innerHTML = "<p test=''></p>";
                if ( div.querySelectorAll("[test^='']").length ) {
                    rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
                }
    
                // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                // IE8 throws error here (do not put tests after this one)
                div.innerHTML = "<input type='hidden'/>";
                if ( !div.querySelectorAll(":enabled").length ) {
                    rbuggyQSA.push(":enabled", ":disabled");
                }
            });
    
            rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
    
            select = function( selector, context, results, seed, xml ) {
                // Only use querySelectorAll when not filtering,
                // when this is not xml,
                // and when no QSA bugs apply
                if ( !seed && !xml && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
                    if ( context.nodeType === 9 ) {
                        try {
                            push.apply( results, slice.call(context.querySelectorAll( selector ), 0) );
                            return results;
                        } catch(qsaError) {}
                    // qSA works strangely on Element-rooted queries
                    // We can work around this by specifying an extra ID on the root
                    // and working up from there (Thanks to Andrew Dupont for the technique)
                    // IE 8 doesn't work on object elements
                    } else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                        var groups, i, len,
                            old = context.getAttribute("id"),
                            nid = old || expando,
                            newContext = rsibling.test( selector ) && context.parentNode || context;
    
                        if ( old ) {
                            nid = nid.replace( rescape, "\\$&" );
                        } else {
                            context.setAttribute( "id", nid );
                        }
    
                        groups = tokenize(selector, context, xml);
                        // Trailing space is unnecessary
                        // There is always a context check
                        nid = "[id='" + nid + "']";
                        for ( i = 0, len = groups.length; i < len; i++ ) {
                            groups[i] = nid + groups[i].selector;
                        }
                        try {
                            push.apply( results, slice.call( newContext.querySelectorAll(
                                groups.join(",")
                            ), 0 ) );
                            return results;
                        } catch(qsaError) {
                        } finally {
                            if ( !old ) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
    
                return oldSelect( selector, context, results, seed, xml );
            };
    
            if ( matches ) {
                assert(function( div ) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    disconnectedMatch = matches.call( div, "div" );
    
                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    try {
                        matches.call( div, "[test!='']:sizzle" );
                        rbuggyMatches.push( matchExpr["PSEUDO"].source, matchExpr["POS"].source, "!=" );
                    } catch ( e ) {}
                });
    
                // rbuggyMatches always contains :active, so no need for a length check
                rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );
    
                Sizzle.matchesSelector = function( elem, expr ) {
                    // Make sure that attribute selectors are quoted
                    expr = expr.replace( rattributeQuotes, "='$1']" );
    
                    // rbuggyMatches always contains :active, so no need for an existence check
                    if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && (!rbuggyQSA || !rbuggyQSA.test( expr )) ) {
                        try {
                            var ret = matches.call( elem, expr );
    
                            // IE 9's matchesSelector returns false on disconnected nodes
                            if ( ret || disconnectedMatch ||
                                    // As well, disconnected nodes are said to be in a document
                                    // fragment in IE 9
                                    elem.document && elem.document.nodeType !== 11 ) {
                                return ret;
                            }
                        } catch(e) {}
                    }
    
                    return Sizzle( expr, null, null, [ elem ] ).length > 0;
                };
            }
        })();
    }
    
    // Deprecated
    Expr.setFilters["nth"] = Expr.setFilters["eq"];
    
    // Back-compat
    Expr.filters = Expr.pseudos;
    
    // Override sizzle attribute retrieval
    Sizzle.attr = jQuery.attr;
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    
    
    })( window );
    var runtil = /Until$/,
        rparentsprev = /^(?:parents|prev(?:Until|All))/,
        isSimple = /^.[^:#\[\.,]*$/,
        rneedsContext = jQuery.expr.match.needsContext,
        // methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    
    jQuery.fn.extend({
        find: function( selector ) {
            var i, l, length, n, r, ret,
                self = this;
    
            if ( typeof selector !== "string" ) {
                return jQuery( selector ).filter(function() {
                    for ( i = 0, l = self.length; i < l; i++ ) {
                        if ( jQuery.contains( self[ i ], this ) ) {
                            return true;
                        }
                    }
                });
            }
    
            ret = this.pushStack( "", "find", selector );
    
            for ( i = 0, l = this.length; i < l; i++ ) {
                length = ret.length;
                jQuery.find( selector, this[i], ret );
    
                if ( i > 0 ) {
                    // Make sure that the results are unique
                    for ( n = length; n < ret.length; n++ ) {
                        for ( r = 0; r < length; r++ ) {
                            if ( ret[r] === ret[n] ) {
                                ret.splice(n--, 1);
                                break;
                            }
                        }
                    }
                }
            }
    
            return ret;
        },
    
        has: function( target ) {
            var i,
                targets = jQuery( target, this ),
                len = targets.length;
    
            return this.filter(function() {
                for ( i = 0; i < len; i++ ) {
                    if ( jQuery.contains( this, targets[i] ) ) {
                        return true;
                    }
                }
            });
        },
    
        not: function( selector ) {
            return this.pushStack( winnow(this, selector, false), "not", selector);
        },
    
        filter: function( selector ) {
            return this.pushStack( winnow(this, selector, true), "filter", selector );
        },
    
        is: function( selector ) {
            return !!selector && (
                typeof selector === "string" ?
                    // If this is a positional/relative selector, check membership in the returned set
                    // so $("p:first").is("p:last") won't return true for a doc with two "p".
                    rneedsContext.test( selector ) ?
                        jQuery( selector, this.context ).index( this[0] ) >= 0 :
                        jQuery.filter( selector, this ).length > 0 :
                    this.filter( selector ).length > 0 );
        },
    
        closest: function( selectors, context ) {
            var cur,
                i = 0,
                l = this.length,
                ret = [],
                pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                    jQuery( selectors, context || this.context ) :
                    0;
    
            for ( ; i < l; i++ ) {
                cur = this[i];
    
                while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
                    if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
                        ret.push( cur );
                        break;
                    }
                    cur = cur.parentNode;
                }
            }
    
            ret = ret.length > 1 ? jQuery.unique( ret ) : ret;
    
            return this.pushStack( ret, "closest", selectors );
        },
    
        // Determine the position of an element within
        // the matched set of elements
        index: function( elem ) {
    
            // No argument, return index in parent
            if ( !elem ) {
                return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
            }
    
            // index in selector
            if ( typeof elem === "string" ) {
                return jQuery.inArray( this[0], jQuery( elem ) );
            }
    
            // Locate the position of the desired element
            return jQuery.inArray(
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem, this );
        },
    
        add: function( selector, context ) {
            var set = typeof selector === "string" ?
                    jQuery( selector, context ) :
                    jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
                all = jQuery.merge( this.get(), set );
    
            return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
                all :
                jQuery.unique( all ) );
        },
    
        addBack: function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });
    
    jQuery.fn.andSelf = jQuery.fn.addBack;
    
    // A painfully simple check to see if an element is disconnected
    // from a document (should be improved, where feasible).
    function isDisconnected( node ) {
        return !node || !node.parentNode || node.parentNode.nodeType === 11;
    }
    
    function sibling( cur, dir ) {
        do {
            cur = cur[ dir ];
        } while ( cur && cur.nodeType !== 1 );
    
        return cur;
    }
    
    jQuery.each({
        parent: function( elem ) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function( elem ) {
            return jQuery.dir( elem, "parentNode" );
        },
        parentsUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "parentNode", until );
        },
        next: function( elem ) {
            return sibling( elem, "nextSibling" );
        },
        prev: function( elem ) {
            return sibling( elem, "previousSibling" );
        },
        nextAll: function( elem ) {
            return jQuery.dir( elem, "nextSibling" );
        },
        prevAll: function( elem ) {
            return jQuery.dir( elem, "previousSibling" );
        },
        nextUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "nextSibling", until );
        },
        prevUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "previousSibling", until );
        },
        siblings: function( elem ) {
            return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
        },
        children: function( elem ) {
            return jQuery.sibling( elem.firstChild );
        },
        contents: function( elem ) {
            return jQuery.nodeName( elem, "iframe" ) ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.merge( [], elem.childNodes );
        }
    }, function( name, fn ) {
        jQuery.fn[ name ] = function( until, selector ) {
            var ret = jQuery.map( this, fn, until );
    
            if ( !runtil.test( name ) ) {
                selector = until;
            }
    
            if ( selector && typeof selector === "string" ) {
                ret = jQuery.filter( selector, ret );
            }
    
            ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;
    
            if ( this.length > 1 && rparentsprev.test( name ) ) {
                ret = ret.reverse();
            }
    
            return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
        };
    });
    
    jQuery.extend({
        filter: function( expr, elems, not ) {
            if ( not ) {
                expr = ":not(" + expr + ")";
            }
    
            return elems.length === 1 ?
                jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
                jQuery.find.matches(expr, elems);
        },
    
        dir: function( elem, dir, until ) {
            var matched = [],
                cur = elem[ dir ];
    
            while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
                if ( cur.nodeType === 1 ) {
                    matched.push( cur );
                }
                cur = cur[dir];
            }
            return matched;
        },
    
        sibling: function( n, elem ) {
            var r = [];
    
            for ( ; n; n = n.nextSibling ) {
                if ( n.nodeType === 1 && n !== elem ) {
                    r.push( n );
                }
            }
    
            return r;
        }
    });
    
    // Implement the identical functionality for filter and not
    function winnow( elements, qualifier, keep ) {
    
        // Can't pass null or undefined to indexOf in Firefox 4
        // Set to 0 to skip string check
        qualifier = qualifier || 0;
    
        if ( jQuery.isFunction( qualifier ) ) {
            return jQuery.grep(elements, function( elem, i ) {
                var retVal = !!qualifier.call( elem, i, elem );
                return retVal === keep;
            });
    
        } else if ( qualifier.nodeType ) {
            return jQuery.grep(elements, function( elem, i ) {
                return ( elem === qualifier ) === keep;
            });
    
        } else if ( typeof qualifier === "string" ) {
            var filtered = jQuery.grep(elements, function( elem ) {
                return elem.nodeType === 1;
            });
    
            if ( isSimple.test( qualifier ) ) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter( qualifier, filtered );
            }
        }
    
        return jQuery.grep(elements, function( elem, i ) {
            return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
        });
    }
    function createSafeFragment( document ) {
        var list = nodeNames.split( "|" ),
        safeFrag = document.createDocumentFragment();
    
        if ( safeFrag.createElement ) {
            while ( list.length ) {
                safeFrag.createElement(
                    list.pop()
                );
            }
        }
        return safeFrag;
    }
    
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
            "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
        rleadingWhitespace = /^\s+/,
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rtbody = /<tbody/i,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        rnocache = /<(?:script|object|embed|option|style)/i,
        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
        rcheckableType = /^(?:checkbox|radio)$/,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /\/(java|ecma)script/i,
        rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
        wrapMap = {
            option: [ 1, "<select multiple='multiple'>", "</select>" ],
            legend: [ 1, "<fieldset>", "</fieldset>" ],
            thead: [ 1, "<table>", "</table>" ],
            tr: [ 2, "<table><tbody>", "</tbody></table>" ],
            td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
            col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
            area: [ 1, "<map>", "</map>" ],
            _default: [ 0, "", "" ]
        },
        safeFragment = createSafeFragment( document ),
        fragmentDiv = safeFragment.appendChild( document.createElement("div") );
    
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    
    // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
    // unless wrapped in a div with non-breaking characters in front of it.
    if ( !jQuery.support.htmlSerialize ) {
        wrapMap._default = [ 1, "X<div>", "</div>" ];
    }
    
    jQuery.fn.extend({
        text: function( value ) {
            return jQuery.access( this, function( value ) {
                return value === undefined ?
                    jQuery.text( this ) :
                    this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
            }, null, value, arguments.length );
        },
    
        wrapAll: function( html ) {
            if ( jQuery.isFunction( html ) ) {
                return this.each(function(i) {
                    jQuery(this).wrapAll( html.call(this, i) );
                });
            }
    
            if ( this[0] ) {
                // The elements to wrap the target around
                var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);
    
                if ( this[0].parentNode ) {
                    wrap.insertBefore( this[0] );
                }
    
                wrap.map(function() {
                    var elem = this;
    
                    while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
                        elem = elem.firstChild;
                    }
    
                    return elem;
                }).append( this );
            }
    
            return this;
        },
    
        wrapInner: function( html ) {
            if ( jQuery.isFunction( html ) ) {
                return this.each(function(i) {
                    jQuery(this).wrapInner( html.call(this, i) );
                });
            }
    
            return this.each(function() {
                var self = jQuery( this ),
                    contents = self.contents();
    
                if ( contents.length ) {
                    contents.wrapAll( html );
    
                } else {
                    self.append( html );
                }
            });
        },
    
        wrap: function( html ) {
            var isFunction = jQuery.isFunction( html );
    
            return this.each(function(i) {
                jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
            });
        },
    
        unwrap: function() {
            return this.parent().each(function() {
                if ( !jQuery.nodeName( this, "body" ) ) {
                    jQuery( this ).replaceWith( this.childNodes );
                }
            }).end();
        },
    
        append: function() {
            return this.domManip(arguments, true, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 ) {
                    this.appendChild( elem );
                }
            });
        },
    
        prepend: function() {
            return this.domManip(arguments, true, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 ) {
                    this.insertBefore( elem, this.firstChild );
                }
            });
        },
    
        before: function() {
            if ( !isDisconnected( this[0] ) ) {
                return this.domManip(arguments, false, function( elem ) {
                    this.parentNode.insertBefore( elem, this );
                });
            }
    
            if ( arguments.length ) {
                var set = jQuery.clean( arguments );
                return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
            }
        },
    
        after: function() {
            if ( !isDisconnected( this[0] ) ) {
                return this.domManip(arguments, false, function( elem ) {
                    this.parentNode.insertBefore( elem, this.nextSibling );
                });
            }
    
            if ( arguments.length ) {
                var set = jQuery.clean( arguments );
                return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
            }
        },
    
        // keepData is for internal use only--do not document
        remove: function( selector, keepData ) {
            var elem,
                i = 0;
    
            for ( ; (elem = this[i]) != null; i++ ) {
                if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
                    if ( !keepData && elem.nodeType === 1 ) {
                        jQuery.cleanData( elem.getElementsByTagName("*") );
                        jQuery.cleanData( [ elem ] );
                    }
    
                    if ( elem.parentNode ) {
                        elem.parentNode.removeChild( elem );
                    }
                }
            }
    
            return this;
        },
    
        empty: function() {
            var elem,
                i = 0;
    
            for ( ; (elem = this[i]) != null; i++ ) {
                // Remove element nodes and prevent memory leaks
                if ( elem.nodeType === 1 ) {
                    jQuery.cleanData( elem.getElementsByTagName("*") );
                }
    
                // Remove any remaining nodes
                while ( elem.firstChild ) {
                    elem.removeChild( elem.firstChild );
                }
            }
    
            return this;
        },
    
        clone: function( dataAndEvents, deepDataAndEvents ) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
    
            return this.map( function () {
                return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
            });
        },
    
        html: function( value ) {
            return jQuery.access( this, function( value ) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;
    
                if ( value === undefined ) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace( rinlinejQuery, "" ) :
                        undefined;
                }
    
                // See if we can take a shortcut and just use innerHTML
                if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                    ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
                    ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
                    !wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {
    
                    value = value.replace( rxhtmlTag, "<$1></$2>" );
    
                    try {
                        for (; i < l; i++ ) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if ( elem.nodeType === 1 ) {
                                jQuery.cleanData( elem.getElementsByTagName( "*" ) );
                                elem.innerHTML = value;
                            }
                        }
    
                        elem = 0;
    
                    // If using innerHTML throws an exception, use the fallback method
                    } catch(e) {}
                }
    
                if ( elem ) {
                    this.empty().append( value );
                }
            }, null, value, arguments.length );
        },
    
        replaceWith: function( value ) {
            if ( !isDisconnected( this[0] ) ) {
                // Make sure that the elements are removed from the DOM before they are inserted
                // this can help fix replacing a parent with child elements
                if ( jQuery.isFunction( value ) ) {
                    return this.each(function(i) {
                        var self = jQuery(this), old = self.html();
                        self.replaceWith( value.call( this, i, old ) );
                    });
                }
    
                if ( typeof value !== "string" ) {
                    value = jQuery( value ).detach();
                }
    
                return this.each(function() {
                    var next = this.nextSibling,
                        parent = this.parentNode;
    
                    jQuery( this ).remove();
    
                    if ( next ) {
                        jQuery(next).before( value );
                    } else {
                        jQuery(parent).append( value );
                    }
                });
            }
    
            return this.length ?
                this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
                this;
        },
    
        detach: function( selector ) {
            return this.remove( selector, true );
        },
    
        domManip: function( args, table, callback ) {
    
            // Flatten any nested arrays
            args = [].concat.apply( [], args );
    
            var results, first, fragment, iNoClone,
                i = 0,
                value = args[0],
                scripts = [],
                l = this.length;
    
            // We can't cloneNode fragments that contain checked, in WebKit
            if ( !jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test( value ) ) {
                return this.each(function() {
                    jQuery(this).domManip( args, table, callback );
                });
            }
    
            if ( jQuery.isFunction(value) ) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    args[0] = value.call( this, i, table ? self.html() : undefined );
                    self.domManip( args, table, callback );
                });
            }
    
            if ( this[0] ) {
                results = jQuery.buildFragment( args, this, scripts );
                fragment = results.fragment;
                first = fragment.firstChild;
    
                if ( fragment.childNodes.length === 1 ) {
                    fragment = first;
                }
    
                if ( first ) {
                    table = table && jQuery.nodeName( first, "tr" );
    
                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    // Fragments from the fragment cache must always be cloned and never used in place.
                    for ( iNoClone = results.cacheable || l - 1; i < l; i++ ) {
                        callback.call(
                            table && jQuery.nodeName( this[i], "table" ) ?
                                findOrAppend( this[i], "tbody" ) :
                                this[i],
                            i === iNoClone ?
                                fragment :
                                jQuery.clone( fragment, true, true )
                        );
                    }
                }
    
                // Fix #11809: Avoid leaking memory
                fragment = first = null;
    
                if ( scripts.length ) {
                    jQuery.each( scripts, function( i, elem ) {
                        if ( elem.src ) {
                            if ( jQuery.ajax ) {
                                jQuery.ajax({
                                    url: elem.src,
                                    type: "GET",
                                    dataType: "script",
                                    async: false,
                                    global: false,
                                    "throws": true
                                });
                            } else {
                                jQuery.error("no ajax");
                            }
                        } else {
                            jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
                        }
    
                        if ( elem.parentNode ) {
                            elem.parentNode.removeChild( elem );
                        }
                    });
                }
            }
    
            return this;
        }
    });
    
    function findOrAppend( elem, tag ) {
        return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
    }
    
    function cloneCopyEvent( src, dest ) {
    
        if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
            return;
        }
    
        var type, i, l,
            oldData = jQuery._data( src ),
            curData = jQuery._data( dest, oldData ),
            events = oldData.events;
    
        if ( events ) {
            delete curData.handle;
            curData.events = {};
    
            for ( type in events ) {
                for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                    jQuery.event.add( dest, type, events[ type ][ i ] );
                }
            }
        }
    
        // make the cloned public data object a copy from the original
        if ( curData.data ) {
            curData.data = jQuery.extend( {}, curData.data );
        }
    }
    
    function cloneFixAttributes( src, dest ) {
        var nodeName;
    
        // We do not need to do anything for non-Elements
        if ( dest.nodeType !== 1 ) {
            return;
        }
    
        // clearAttributes removes the attributes, which we don't want,
        // but also removes the attachEvent events, which we *do* want
        if ( dest.clearAttributes ) {
            dest.clearAttributes();
        }
    
        // mergeAttributes, in contrast, only merges back on the
        // original attributes, not the events
        if ( dest.mergeAttributes ) {
            dest.mergeAttributes( src );
        }
    
        nodeName = dest.nodeName.toLowerCase();
    
        if ( nodeName === "object" ) {
            // IE6-10 improperly clones children of object elements using classid.
            // IE10 throws NoModificationAllowedError if parent is null, #12132.
            if ( dest.parentNode ) {
                dest.outerHTML = src.outerHTML;
            }
    
            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if ( jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML)) ) {
                dest.innerHTML = src.innerHTML;
            }
    
        } else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set
    
            dest.defaultChecked = dest.checked = src.checked;
    
            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if ( dest.value !== src.value ) {
                dest.value = src.value;
            }
    
        // IE6-8 fails to return the selected option to the default selected
        // state when cloning options
        } else if ( nodeName === "option" ) {
            dest.selected = src.defaultSelected;
    
        // IE6-8 fails to set the defaultValue to the correct value when
        // cloning other types of input fields
        } else if ( nodeName === "input" || nodeName === "textarea" ) {
            dest.defaultValue = src.defaultValue;
    
        // IE blanks contents when cloning scripts
        } else if ( nodeName === "script" && dest.text !== src.text ) {
            dest.text = src.text;
        }
    
        // Event data gets referenced instead of copied if the expando
        // gets copied too
        dest.removeAttribute( jQuery.expando );
    }
    
    jQuery.buildFragment = function( args, context, scripts ) {
        var fragment, cacheable, cachehit,
            first = args[ 0 ];
    
        // Set context from what may come in as undefined or a jQuery collection or a node
        // Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
        // also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
        context = context || document;
        context = !context.nodeType && context[0] || context;
        context = context.ownerDocument || context;
    
        // Only cache "small" (1/2 KB) HTML strings that are associated with the main document
        // Cloning options loses the selected state, so don't cache them
        // IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
        // Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
        // Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
        if ( args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
            first.charAt(0) === "<" && !rnocache.test( first ) &&
            (jQuery.support.checkClone || !rchecked.test( first )) &&
            (jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {
    
            // Mark cacheable and look for a hit
            cacheable = true;
            fragment = jQuery.fragments[ first ];
            cachehit = fragment !== undefined;
        }
    
        if ( !fragment ) {
            fragment = context.createDocumentFragment();
            jQuery.clean( args, context, fragment, scripts );
    
            // Update the cache, but only store false
            // unless this is a second parsing of the same content
            if ( cacheable ) {
                jQuery.fragments[ first ] = cachehit && fragment;
            }
        }
    
        return { fragment: fragment, cacheable: cacheable };
    };
    
    jQuery.fragments = {};
    
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function( name, original ) {
        jQuery.fn[ name ] = function( selector ) {
            var elems,
                i = 0,
                ret = [],
                insert = jQuery( selector ),
                l = insert.length,
                parent = this.length === 1 && this[0].parentNode;
    
            if ( (parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1 ) {
                insert[ original ]( this[0] );
                return this;
            } else {
                for ( ; i < l; i++ ) {
                    elems = ( i > 0 ? this.clone(true) : this ).get();
                    jQuery( insert[i] )[ original ]( elems );
                    ret = ret.concat( elems );
                }
    
                return this.pushStack( ret, name, insert.selector );
            }
        };
    });
    
    function getAll( elem ) {
        if ( typeof elem.getElementsByTagName !== "undefined" ) {
            return elem.getElementsByTagName( "*" );
    
        } else if ( typeof elem.querySelectorAll !== "undefined" ) {
            return elem.querySelectorAll( "*" );
    
        } else {
            return [];
        }
    }
    
    // Used in clean, fixes the defaultChecked property
    function fixDefaultChecked( elem ) {
        if ( rcheckableType.test( elem.type ) ) {
            elem.defaultChecked = elem.checked;
        }
    }
    
    jQuery.extend({
        clone: function( elem, dataAndEvents, deepDataAndEvents ) {
            var srcElements,
                destElements,
                i,
                clone;
    
            if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
                clone = elem.cloneNode( true );
    
            // IE<=8 does not properly clone detached, unknown element nodes
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
            }
    
            if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                    (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
                // IE copies events bound via attachEvent when using cloneNode.
                // Calling detachEvent on the clone will also remove the events
                // from the original. In order to get around this, we use some
                // proprietary methods to clear the events. Thanks to MooTools
                // guys for this hotness.
    
                cloneFixAttributes( elem, clone );
    
                // Using Sizzle here is crazy slow, so we use getElementsByTagName instead
                srcElements = getAll( elem );
                destElements = getAll( clone );
    
                // Weird iteration because IE will replace the length property
                // with an element if you are cloning the body and one of the
                // elements on the page has a name or id of "length"
                for ( i = 0; srcElements[i]; ++i ) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if ( destElements[i] ) {
                        cloneFixAttributes( srcElements[i], destElements[i] );
                    }
                }
            }
    
            // Copy the events from the original to the clone
            if ( dataAndEvents ) {
                cloneCopyEvent( elem, clone );
    
                if ( deepDataAndEvents ) {
                    srcElements = getAll( elem );
                    destElements = getAll( clone );
    
                    for ( i = 0; srcElements[i]; ++i ) {
                        cloneCopyEvent( srcElements[i], destElements[i] );
                    }
                }
            }
    
            srcElements = destElements = null;
    
            // Return the cloned set
            return clone;
        },
    
        clean: function( elems, context, fragment, scripts ) {
            var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
                safe = context === document && safeFragment,
                ret = [];
    
            // Ensure that context is a document
            if ( !context || typeof context.createDocumentFragment === "undefined" ) {
                context = document;
            }
    
            // Use the already-created safe fragment if context permits
            for ( i = 0; (elem = elems[i]) != null; i++ ) {
                if ( typeof elem === "number" ) {
                    elem += "";
                }
    
                if ( !elem ) {
                    continue;
                }
    
                // Convert html string into DOM nodes
                if ( typeof elem === "string" ) {
                    if ( !rhtml.test( elem ) ) {
                        elem = context.createTextNode( elem );
                    } else {
                        // Ensure a safe container in which to render the html
                        safe = safe || createSafeFragment( context );
                        div = context.createElement("div");
                        safe.appendChild( div );
    
                        // Fix "XHTML"-style tags in all browsers
                        elem = elem.replace(rxhtmlTag, "<$1></$2>");
    
                        // Go to html and back, then peel off extra wrappers
                        tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
                        wrap = wrapMap[ tag ] || wrapMap._default;
                        depth = wrap[0];
                        div.innerHTML = wrap[1] + elem + wrap[2];
    
                        // Move to the right depth
                        while ( depth-- ) {
                            div = div.lastChild;
                        }
    
                        // Remove IE's autoinserted <tbody> from table fragments
                        if ( !jQuery.support.tbody ) {
    
                            // String was a <table>, *may* have spurious <tbody>
                            hasBody = rtbody.test(elem);
                                tbody = tag === "table" && !hasBody ?
                                    div.firstChild && div.firstChild.childNodes :
    
                                    // String was a bare <thead> or <tfoot>
                                    wrap[1] === "<table>" && !hasBody ?
                                        div.childNodes :
                                        [];
    
                            for ( j = tbody.length - 1; j >= 0 ; --j ) {
                                if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
                                    tbody[ j ].parentNode.removeChild( tbody[ j ] );
                                }
                            }
                        }
    
                        // IE completely kills leading whitespace when innerHTML is used
                        if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
                            div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
                        }
    
                        elem = div.childNodes;
    
                        // Take out of fragment container (we need a fresh div each time)
                        div.parentNode.removeChild( div );
                    }
                }
    
                if ( elem.nodeType ) {
                    ret.push( elem );
                } else {
                    jQuery.merge( ret, elem );
                }
            }
    
            // Fix #11356: Clear elements from safeFragment
            if ( div ) {
                elem = div = safe = null;
            }
    
            // Reset defaultChecked for any radios and checkboxes
            // about to be appended to the DOM in IE 6/7 (#8060)
            if ( !jQuery.support.appendChecked ) {
                for ( i = 0; (elem = ret[i]) != null; i++ ) {
                    if ( jQuery.nodeName( elem, "input" ) ) {
                        fixDefaultChecked( elem );
                    } else if ( typeof elem.getElementsByTagName !== "undefined" ) {
                        jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
                    }
                }
            }
    
            // Append elements to a provided document fragment
            if ( fragment ) {
                // Special handling of each script element
                handleScript = function( elem ) {
                    // Check if we consider it executable
                    if ( !elem.type || rscriptType.test( elem.type ) ) {
                        // Detach the script and store it in the scripts array (if provided) or the fragment
                        // Return truthy to indicate that it has been handled
                        return scripts ?
                            scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
                            fragment.appendChild( elem );
                    }
                };
    
                for ( i = 0; (elem = ret[i]) != null; i++ ) {
                    // Check if we're done after handling an executable script
                    if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
                        // Append to fragment and handle embedded scripts
                        fragment.appendChild( elem );
                        if ( typeof elem.getElementsByTagName !== "undefined" ) {
                            // handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
                            jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );
    
                            // Splice the scripts into ret after their former ancestor and advance our index beyond them
                            ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
                            i += jsTags.length;
                        }
                    }
                }
            }
    
            return ret;
        },
    
        cleanData: function( elems, /* internal */ acceptData ) {
            var data, id, elem, type,
                i = 0,
                internalKey = jQuery.expando,
                cache = jQuery.cache,
                deleteExpando = jQuery.support.deleteExpando,
                special = jQuery.event.special;
    
            for ( ; (elem = elems[i]) != null; i++ ) {
    
                if ( acceptData || jQuery.acceptData( elem ) ) {
    
                    id = elem[ internalKey ];
                    data = id && cache[ id ];
    
                    if ( data ) {
                        if ( data.events ) {
                            for ( type in data.events ) {
                                if ( special[ type ] ) {
                                    jQuery.event.remove( elem, type );
    
                                // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent( elem, type, data.handle );
                                }
                            }
                        }
    
                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if ( cache[ id ] ) {
    
                            delete cache[ id ];
    
                            // IE does not allow us to delete expando properties from nodes,
                            // nor does it have a removeAttribute function on Document nodes;
                            // we must handle all of these cases
                            if ( deleteExpando ) {
                                delete elem[ internalKey ];
    
                            } else if ( elem.removeAttribute ) {
                                elem.removeAttribute( internalKey );
    
                            } else {
                                elem[ internalKey ] = null;
                            }
    
                            jQuery.deletedIds.push( id );
                        }
                    }
                }
            }
        }
    });
    // Limit scope pollution from any deprecated API
    (function() {
    
    var matched, browser;
    
    // Use of jQuery.browser is frowned upon.
    // More details: http://api.jquery.com/jQuery.browser
    // jQuery.uaMatch maintained for back-compat
    jQuery.uaMatch = function( ua ) {
        ua = ua.toLowerCase();
    
        var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
            /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
            /(msie) ([\w.]+)/.exec( ua ) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
            [];
    
        return {
            browser: match[ 1 ] || "",
            version: match[ 2 ] || "0"
        };
    };
    
    matched = jQuery.uaMatch( navigator.userAgent );
    browser = {};
    
    if ( matched.browser ) {
        browser[ matched.browser ] = true;
        browser.version = matched.version;
    }
    
    // Chrome is Webkit, but Webkit is also Safari.
    if ( browser.chrome ) {
        browser.webkit = true;
    } else if ( browser.webkit ) {
        browser.safari = true;
    }
    
    jQuery.browser = browser;
    
    jQuery.sub = function() {
        function jQuerySub( selector, context ) {
            return new jQuerySub.fn.init( selector, context );
        }
        jQuery.extend( true, jQuerySub, this );
        jQuerySub.superclass = this;
        jQuerySub.fn = jQuerySub.prototype = this();
        jQuerySub.fn.constructor = jQuerySub;
        jQuerySub.sub = this.sub;
        jQuerySub.fn.init = function init( selector, context ) {
            if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
                context = jQuerySub( context );
            }
    
            return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
        };
        jQuerySub.fn.init.prototype = jQuerySub.fn;
        var rootjQuerySub = jQuerySub(document);
        return jQuerySub;
    };
    
    })();
    var curCSS, iframe, iframeDoc,
        ralpha = /alpha\([^)]*\)/i,
        ropacity = /opacity=([^)]*)/,
        rposition = /^(top|right|bottom|left)$/,
        // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
        // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rmargin = /^margin/,
        rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
        rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
        rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
        elemdisplay = {},
    
        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        },
    
        cssExpand = [ "Top", "Right", "Bottom", "Left" ],
        cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
    
        eventsToggle = jQuery.fn.toggle;
    
    // return a css property mapped to a potentially vendor prefixed property
    function vendorPropName( style, name ) {
    
        // shortcut for names that are not vendor prefixed
        if ( name in style ) {
            return name;
        }
    
        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;
    
        while ( i-- ) {
            name = cssPrefixes[ i ] + capName;
            if ( name in style ) {
                return name;
            }
        }
    
        return origName;
    }
    
    function isHidden( elem, el ) {
        elem = el || elem;
        return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
    }
    
    function showHide( elements, show ) {
        var elem, display,
            values = [],
            index = 0,
            length = elements.length;
    
        for ( ; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
            values[ index ] = jQuery._data( elem, "olddisplay" );
            if ( show ) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if ( !values[ index ] && elem.style.display === "none" ) {
                    elem.style.display = "";
                }
    
                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if ( elem.style.display === "" && isHidden( elem ) ) {
                    values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
                }
            } else {
                display = curCSS( elem, "display" );
    
                if ( !values[ index ] && display !== "none" ) {
                    jQuery._data( elem, "olddisplay", display );
                }
            }
        }
    
        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for ( index = 0; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
            if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
                elem.style.display = show ? values[ index ] || "" : "none";
            }
        }
    
        return elements;
    }
    
    jQuery.fn.extend({
        css: function( name, value ) {
            return jQuery.access( this, function( elem, name, value ) {
                return value !== undefined ?
                    jQuery.style( elem, name, value ) :
                    jQuery.css( elem, name );
            }, name, value, arguments.length > 1 );
        },
        show: function() {
            return showHide( this, true );
        },
        hide: function() {
            return showHide( this );
        },
        toggle: function( state, fn2 ) {
            var bool = typeof state === "boolean";
    
            if ( jQuery.isFunction( state ) && jQuery.isFunction( fn2 ) ) {
                return eventsToggle.apply( this, arguments );
            }
    
            return this.each(function() {
                if ( bool ? state : isHidden( this ) ) {
                    jQuery( this ).show();
                } else {
                    jQuery( this ).hide();
                }
            });
        }
    });
    
    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function( elem, computed ) {
                    if ( computed ) {
                        // We should always get a number back from opacity
                        var ret = curCSS( elem, "opacity" );
                        return ret === "" ? "1" : ret;
    
                    }
                }
            }
        },
    
        // Exclude the following css properties to add px
        cssNumber: {
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
    
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            // normalize float css property
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },
    
        // Get and set the style property on a DOM Node
        style: function( elem, name, value, extra ) {
            // Don't set styles on text and comment nodes
            if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                return;
            }
    
            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = jQuery.camelCase( name ),
                style = elem.style;
    
            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );
    
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // Check if we're setting a value
            if ( value !== undefined ) {
                type = typeof value;
    
                // convert relative number strings (+= or -=) to relative numbers. #7345
                if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                    value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                    // Fixes bug #9237
                    type = "number";
                }
    
                // Make sure that NaN and null values aren't set. See: #7116
                if ( value == null || type === "number" && isNaN( value ) ) {
                    return;
                }
    
                // If a number was passed in, add 'px' to the (except for certain CSS properties)
                if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                    value += "px";
                }
    
                // If a hook was provided, use that value, otherwise just set the specified value
                if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                    // Fixes bug #5509
                    try {
                        style[ name ] = value;
                    } catch(e) {}
                }
    
            } else {
                // If a hook was provided get the non-computed value from there
                if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                    return ret;
                }
    
                // Otherwise just get the value from the style object
                return style[ name ];
            }
        },
    
        css: function( elem, name, numeric, extra ) {
            var val, num, hooks,
                origName = jQuery.camelCase( name );
    
            // Make sure that we're working with the right name
            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );
    
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // If a hook was provided get the computed value from there
            if ( hooks && "get" in hooks ) {
                val = hooks.get( elem, true, extra );
            }
    
            // Otherwise, if a way to get the computed value exists, use that
            if ( val === undefined ) {
                val = curCSS( elem, name );
            }
    
            //convert "normal" to computed value
            if ( val === "normal" && name in cssNormalTransform ) {
                val = cssNormalTransform[ name ];
            }
    
            // Return, converting to number if forced or a qualifier was provided and val looks numeric
            if ( numeric || extra !== undefined ) {
                num = parseFloat( val );
                return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
            }
            return val;
        },
    
        // A method for quickly swapping in/out CSS properties to get correct calculations
        swap: function( elem, options, callback ) {
            var ret, name,
                old = {};
    
            // Remember the old values, and insert the new ones
            for ( name in options ) {
                old[ name ] = elem.style[ name ];
                elem.style[ name ] = options[ name ];
            }
    
            ret = callback.call( elem );
    
            // Revert the old values
            for ( name in options ) {
                elem.style[ name ] = old[ name ];
            }
    
            return ret;
        }
    });
    
    // NOTE: To any future maintainer, we've window.getComputedStyle
    // because jsdom on node.js will break without it.
    if ( window.getComputedStyle ) {
        curCSS = function( elem, name ) {
            var ret, width, minWidth, maxWidth,
                computed = window.getComputedStyle( elem, null ),
                style = elem.style;
    
            if ( computed ) {
    
                ret = computed[ name ];
                if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
                    ret = jQuery.style( elem, name );
                }
    
                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
    
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
    
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
    
            return ret;
        };
    } else if ( document.documentElement.currentStyle ) {
        curCSS = function( elem, name ) {
            var left, rsLeft,
                ret = elem.currentStyle && elem.currentStyle[ name ],
                style = elem.style;
    
            // Avoid setting ret to empty string here
            // so we don't default to auto
            if ( ret == null && style && style[ name ] ) {
                ret = style[ name ];
            }
    
            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
    
            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are proportional to the parent element instead
            // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
            if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {
    
                // Remember the original values
                left = style.left;
                rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
    
                // Put in the new values to get a computed value out
                if ( rsLeft ) {
                    elem.runtimeStyle.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";
    
                // Revert the changed values
                style.left = left;
                if ( rsLeft ) {
                    elem.runtimeStyle.left = rsLeft;
                }
            }
    
            return ret === "" ? "auto" : ret;
        };
    }
    
    function setPositiveNumber( elem, value, subtract ) {
        var matches = rnumsplit.exec( value );
        return matches ?
                Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
                value;
    }
    
    function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
        var i = extra === ( isBorderBox ? "border" : "content" ) ?
            // If we already have the right measurement, avoid augmentation
            4 :
            // Otherwise initialize for horizontal or vertical properties
            name === "width" ? 1 : 0,
    
            val = 0;
    
        for ( ; i < 4; i += 2 ) {
            // both box models exclude margin, so add it if we want it
            if ( extra === "margin" ) {
                // we use jQuery.css instead of curCSS here
                // because of the reliableMarginRight CSS hook!
                val += jQuery.css( elem, extra + cssExpand[ i ], true );
            }
    
            // From this point on we use curCSS for maximum performance (relevant in animations)
            if ( isBorderBox ) {
                // border-box includes padding, so remove it if we want content
                if ( extra === "content" ) {
                    val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
                }
    
                // at this point, extra isn't border nor margin, so remove border
                if ( extra !== "margin" ) {
                    val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
                }
            } else {
                // at this point, extra isn't content, so add padding
                val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
    
                // at this point, extra isn't content nor padding, so add border
                if ( extra !== "padding" ) {
                    val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
                }
            }
        }
    
        return val;
    }
    
    function getWidthOrHeight( elem, name, extra ) {
    
        // Start with offset property, which is equivalent to the border-box value
        var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            valueIsBorderBox = true,
            isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box";
    
        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if ( val <= 0 || val == null ) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS( elem, name );
            if ( val < 0 || val == null ) {
                val = elem.style[ name ];
            }
    
            // Computed unit is not pixels. Stop here and return.
            if ( rnumnonpx.test(val) ) {
                return val;
            }
    
            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );
    
            // Normalize "", auto, and prepare for extra
            val = parseFloat( val ) || 0;
        }
    
        // use the active box-sizing model to add/subtract irrelevant styles
        return ( val +
            augmentWidthOrHeight(
                elem,
                name,
                extra || ( isBorderBox ? "border" : "content" ),
                valueIsBorderBox
            )
        ) + "px";
    }
    
    
    // Try to determine the default display value of an element
    function css_defaultDisplay( nodeName ) {
        if ( elemdisplay[ nodeName ] ) {
            return elemdisplay[ nodeName ];
        }
    
        var elem = jQuery( "<" + nodeName + ">" ).appendTo( document.body ),
            display = elem.css("display");
        elem.remove();
    
        // If the simple way fails,
        // get element's real default display by attaching it to a temp iframe
        if ( display === "none" || display === "" ) {
            // Use the already-created iframe if possible
            iframe = document.body.appendChild(
                iframe || jQuery.extend( document.createElement("iframe"), {
                    frameBorder: 0,
                    width: 0,
                    height: 0
                })
            );
    
            // Create a cacheable copy of the iframe document on first call.
            // IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
            // document to it; WebKit & Firefox won't allow reusing the iframe document.
            if ( !iframeDoc || !iframe.createElement ) {
                iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
                iframeDoc.write("<!doctype html><html><body>");
                iframeDoc.close();
            }
    
            elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );
    
            display = curCSS( elem, "display" );
            document.body.removeChild( iframe );
        }
    
        // Store the correct default display
        elemdisplay[ nodeName ] = display;
    
        return display;
    }
    
    jQuery.each([ "height", "width" ], function( i, name ) {
        jQuery.cssHooks[ name ] = {
            get: function( elem, computed, extra ) {
                if ( computed ) {
                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    if ( elem.offsetWidth === 0 && rdisplayswap.test( curCSS( elem, "display" ) ) ) {
                        return jQuery.swap( elem, cssShow, function() {
                            return getWidthOrHeight( elem, name, extra );
                        });
                    } else {
                        return getWidthOrHeight( elem, name, extra );
                    }
                }
            },
    
            set: function( elem, value, extra ) {
                return setPositiveNumber( elem, value, extra ?
                    augmentWidthOrHeight(
                        elem,
                        name,
                        extra,
                        jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box"
                    ) : 0
                );
            }
        };
    });
    
    if ( !jQuery.support.opacity ) {
        jQuery.cssHooks.opacity = {
            get: function( elem, computed ) {
                // IE uses filters for opacity
                return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
                    ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
                    computed ? "1" : "";
            },
    
            set: function( elem, value ) {
                var style = elem.style,
                    currentStyle = elem.currentStyle,
                    opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
                    filter = currentStyle && currentStyle.filter || style.filter || "";
    
                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;
    
                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
                    style.removeAttribute ) {
    
                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute( "filter" );
    
                    // if there there is no filter style applied in a css rule, we are done
                    if ( currentStyle && !currentStyle.filter ) {
                        return;
                    }
                }
    
                // otherwise, set new filter values
                style.filter = ralpha.test( filter ) ?
                    filter.replace( ralpha, opacity ) :
                    filter + " " + opacity;
            }
        };
    }
    
    // These hooks cannot be added until DOM ready because the support test
    // for it is not run until after DOM ready
    jQuery(function() {
        if ( !jQuery.support.reliableMarginRight ) {
            jQuery.cssHooks.marginRight = {
                get: function( elem, computed ) {
                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                    // Work around by temporarily setting element display to inline-block
                    return jQuery.swap( elem, { "display": "inline-block" }, function() {
                        if ( computed ) {
                            return curCSS( elem, "marginRight" );
                        }
                    });
                }
            };
        }
    
        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // getComputedStyle returns percent when specified for top/left/bottom/right
        // rather than make the css module depend on the offset module, we just check for it here
        if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
            jQuery.each( [ "top", "left" ], function( i, prop ) {
                jQuery.cssHooks[ prop ] = {
                    get: function( elem, computed ) {
                        if ( computed ) {
                            var ret = curCSS( elem, prop );
                            // if curCSS returns percentage, fallback to offset
                            return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
                        }
                    }
                };
            });
        }
    
    });
    
    if ( jQuery.expr && jQuery.expr.filters ) {
        jQuery.expr.filters.hidden = function( elem ) {
            return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS( elem, "display" )) === "none");
        };
    
        jQuery.expr.filters.visible = function( elem ) {
            return !jQuery.expr.filters.hidden( elem );
        };
    }
    
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function( prefix, suffix ) {
        jQuery.cssHooks[ prefix + suffix ] = {
            expand: function( value ) {
                var i,
    
                    // assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [ value ],
                    expanded = {};
    
                for ( i = 0; i < 4; i++ ) {
                    expanded[ prefix + cssExpand[ i ] + suffix ] =
                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                }
    
                return expanded;
            }
        };
    
        if ( !rmargin.test( prefix ) ) {
            jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
        }
    });
    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
        rselectTextarea = /^(?:select|textarea)/i;
    
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param( this.serializeArray() );
        },
        serializeArray: function() {
            return this.map(function(){
                return this.elements ? jQuery.makeArray( this.elements ) : this;
            })
            .filter(function(){
                return this.name && !this.disabled &&
                    ( this.checked || rselectTextarea.test( this.nodeName ) ||
                        rinput.test( this.type ) );
            })
            .map(function( i, elem ){
                var val = jQuery( this ).val();
    
                return val == null ?
                    null :
                    jQuery.isArray( val ) ?
                        jQuery.map( val, function( val, i ){
                            return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                        }) :
                        { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
            }).get();
        }
    });
    
    //Serialize an array of form elements or a set of
    //key/values into a query string
    jQuery.param = function( a, traditional ) {
        var prefix,
            s = [],
            add = function( key, value ) {
                // If value is a function, invoke it and return its value
                value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
                s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
            };
    
        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if ( traditional === undefined ) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
    
        // If an array was passed in, assume that it is an array of form elements.
        if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
            // Serialize the form elements
            jQuery.each( a, function() {
                add( this.name, this.value );
            });
    
        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for ( prefix in a ) {
                buildParams( prefix, a[ prefix ], traditional, add );
            }
        }
    
        // Return the resulting serialization
        return s.join( "&" ).replace( r20, "+" );
    };
    
    function buildParams( prefix, obj, traditional, add ) {
        var name;
    
        if ( jQuery.isArray( obj ) ) {
            // Serialize array item.
            jQuery.each( obj, function( i, v ) {
                if ( traditional || rbracket.test( prefix ) ) {
                    // Treat each array item as a scalar.
                    add( prefix, v );
    
                } else {
                    // If array item is non-scalar (array or object), encode its
                    // numeric index to resolve deserialization ambiguity issues.
                    // Note that rack (as of 1.0.0) can't currently deserialize
                    // nested arrays properly, and attempting to do so may cause
                    // a server error. Possible fixes are to modify rack's
                    // deserialization algorithm or to provide an option or flag
                    // to force array serialization to be shallow.
                    buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
                }
            });
    
        } else if ( !traditional && jQuery.type( obj ) === "object" ) {
            // Serialize object item.
            for ( name in obj ) {
                buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
            }
    
        } else {
            // Serialize scalar item.
            add( prefix, obj );
        }
    }
    var // Document location
        ajaxLocation,
        // Document location segments
        ajaxLocParts,
    
        rhash = /#.*$/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rquery = /\?/,
        rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        rts = /([?&])_=[^&]*/,
        rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
    
        // Keep a copy of the old load method
        _load = jQuery.fn.load,
    
        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},
    
        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},
    
        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = ["*/"] + ["*"];
    
    // #8138, IE may throw an exception when accessing
    // a field from window.location if document.domain has been set
    try {
        ajaxLocation = location.href;
    } catch( e ) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        ajaxLocation = document.createElement( "a" );
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    
    // Segment location into parts
    ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
    
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports( structure ) {
    
        // dataTypeExpression is optional and defaults to "*"
        return function( dataTypeExpression, func ) {
    
            if ( typeof dataTypeExpression !== "string" ) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
    
            var dataType, list, placeBefore,
                dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
                i = 0,
                length = dataTypes.length;
    
            if ( jQuery.isFunction( func ) ) {
                // For each dataType in the dataTypeExpression
                for ( ; i < length; i++ ) {
                    dataType = dataTypes[ i ];
                    // We control if we're asked to add before
                    // any existing element
                    placeBefore = /^\+/.test( dataType );
                    if ( placeBefore ) {
                        dataType = dataType.substr( 1 ) || "*";
                    }
                    list = structure[ dataType ] = structure[ dataType ] || [];
                    // then we add to the structure accordingly
                    list[ placeBefore ? "unshift" : "push" ]( func );
                }
            }
        };
    }
    
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
            dataType /* internal */, inspected /* internal */ ) {
    
        dataType = dataType || options.dataTypes[ 0 ];
        inspected = inspected || {};
    
        inspected[ dataType ] = true;
    
        var selection,
            list = structure[ dataType ],
            i = 0,
            length = list ? list.length : 0,
            executeOnly = ( structure === prefilters );
    
        for ( ; i < length && ( executeOnly || !selection ); i++ ) {
            selection = list[ i ]( options, originalOptions, jqXHR );
            // If we got redirected to another dataType
            // we try there if executing only and not done already
            if ( typeof selection === "string" ) {
                if ( !executeOnly || inspected[ selection ] ) {
                    selection = undefined;
                } else {
                    options.dataTypes.unshift( selection );
                    selection = inspectPrefiltersOrTransports(
                            structure, options, originalOptions, jqXHR, selection, inspected );
                }
            }
        }
        // If we're only executing or nothing was selected
        // we try the catchall dataType if not done already
        if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
            selection = inspectPrefiltersOrTransports(
                    structure, options, originalOptions, jqXHR, "*", inspected );
        }
        // unnecessary when only executing (prefilters)
        // but it'll be ignored by the caller in that case
        return selection;
    }
    
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend( target, src ) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for ( key in src ) {
            if ( src[ key ] !== undefined ) {
                ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
            }
        }
        if ( deep ) {
            jQuery.extend( true, target, deep );
        }
    }
    
    jQuery.fn.load = function( url, params, callback ) {
        if ( typeof url !== "string" && _load ) {
            return _load.apply( this, arguments );
        }
    
        // Don't do a request if no elements are being requested
        if ( !this.length ) {
            return this;
        }
    
        var selector, type, response,
            self = this,
            off = url.indexOf(" ");
    
        if ( off >= 0 ) {
            selector = url.slice( off, url.length );
            url = url.slice( 0, off );
        }
    
        // If it's a function
        if ( jQuery.isFunction( params ) ) {
    
            // We assume that it's the callback
            callback = params;
            params = undefined;
    
        // Otherwise, build a param string
        } else if ( params && typeof params === "object" ) {
            type = "POST";
        }
    
        // Request the remote document
        jQuery.ajax({
            url: url,
    
            // if "type" variable is undefined, then "GET" method will be used
            type: type,
            dataType: "html",
            data: params,
            complete: function( jqXHR, status ) {
                if ( callback ) {
                    self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
                }
            }
        }).done(function( responseText ) {
    
            // Save response for use in complete callback
            response = arguments;
    
            // See if a selector was specified
            self.html( selector ?
    
                // Create a dummy div to hold the results
                jQuery("<div>")
    
                    // inject the contents of the document in, removing the scripts
                    // to avoid any 'Permission Denied' errors in IE
                    .append( responseText.replace( rscript, "" ) )
    
                    // Locate the specified elements
                    .find( selector ) :
    
                // If not, just inject the full result
                responseText );
    
        });
    
        return this;
    };
    
    // Attach a bunch of functions for handling common AJAX events
    jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
        jQuery.fn[ o ] = function( f ){
            return this.on( o, f );
        };
    });
    
    jQuery.each( [ "get", "post" ], function( i, method ) {
        jQuery[ method ] = function( url, data, callback, type ) {
            // shift arguments if data argument was omitted
            if ( jQuery.isFunction( data ) ) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
    
            return jQuery.ajax({
                type: method,
                url: url,
                data: data,
                success: callback,
                dataType: type
            });
        };
    });
    
    jQuery.extend({
    
        getScript: function( url, callback ) {
            return jQuery.get( url, undefined, callback, "script" );
        },
    
        getJSON: function( url, data, callback ) {
            return jQuery.get( url, data, callback, "json" );
        },
    
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function( target, settings ) {
            if ( settings ) {
                // Building a settings object
                ajaxExtend( target, jQuery.ajaxSettings );
            } else {
                // Extending ajaxSettings
                settings = target;
                target = jQuery.ajaxSettings;
            }
            ajaxExtend( target, settings );
            return target;
        },
    
        ajaxSettings: {
            url: ajaxLocation,
            isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            processData: true,
            async: true,
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
    
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                text: "text/plain",
                json: "application/json, text/javascript",
                "*": allTypes
            },
    
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
    
            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },
    
            // List of data converters
            // 1) key format is "source_type destination_type" (a single space in-between)
            // 2) the catchall symbol "*" can be used for source_type
            converters: {
    
                // Convert anything to text
                "* text": window.String,
    
                // Text to html (true = no transformation)
                "text html": true,
    
                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,
    
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
    
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                context: true,
                url: true
            }
        },
    
        ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
        ajaxTransport: addToPrefiltersOrTransports( transports ),
    
        // Main method
        ajax: function( url, options ) {
    
            // If url is an object, simulate pre-1.5 signature
            if ( typeof url === "object" ) {
                options = url;
                url = undefined;
            }
    
            // Force options to be an object
            options = options || {};
    
            var // ifModified key
                ifModifiedKey,
                // Response headers
                responseHeadersString,
                responseHeaders,
                // transport
                transport,
                // timeout handle
                timeoutTimer,
                // Cross-domain detection vars
                parts,
                // To know if global events are to be dispatched
                fireGlobals,
                // Loop variable
                i,
                // Create the final options object
                s = jQuery.ajaxSetup( {}, options ),
                // Callbacks context
                callbackContext = s.context || s,
                // Context for global events
                // It's the callbackContext if one was provided in the options
                // and if it's a DOM node or a jQuery collection
                globalEventContext = callbackContext !== s &&
                    ( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
                            jQuery( callbackContext ) : jQuery.event,
                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks( "once memory" ),
                // Status-dependent callbacks
                statusCode = s.statusCode || {},
                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
                // The jqXHR state
                state = 0,
                // Default abort message
                strAbort = "canceled",
                // Fake xhr
                jqXHR = {
    
                    readyState: 0,
    
                    // Caches the header
                    setRequestHeader: function( name, value ) {
                        if ( !state ) {
                            var lname = name.toLowerCase();
                            name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                            requestHeaders[ name ] = value;
                        }
                        return this;
                    },
    
                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },
    
                    // Builds headers hashtable if needed
                    getResponseHeader: function( key ) {
                        var match;
                        if ( state === 2 ) {
                            if ( !responseHeaders ) {
                                responseHeaders = {};
                                while( ( match = rheaders.exec( responseHeadersString ) ) ) {
                                    responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                                }
                            }
                            match = responseHeaders[ key.toLowerCase() ];
                        }
                        return match === undefined ? null : match;
                    },
    
                    // Overrides response content-type header
                    overrideMimeType: function( type ) {
                        if ( !state ) {
                            s.mimeType = type;
                        }
                        return this;
                    },
    
                    // Cancel the request
                    abort: function( statusText ) {
                        statusText = statusText || strAbort;
                        if ( transport ) {
                            transport.abort( statusText );
                        }
                        done( 0, statusText );
                        return this;
                    }
                };
    
            // Callback for when everything is done
            // It is defined here because jslint complains if it is declared
            // at the end of the function (which would be more logical and readable)
            function done( status, nativeStatusText, responses, headers ) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;
    
                // Called once
                if ( state === 2 ) {
                    return;
                }
    
                // State is "done" now
                state = 2;
    
                // Clear timeout if it exists
                if ( timeoutTimer ) {
                    clearTimeout( timeoutTimer );
                }
    
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
    
                // Cache response headers
                responseHeadersString = headers || "";
    
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
    
                // Get response data
                if ( responses ) {
                    response = ajaxHandleResponses( s, jqXHR, responses );
                }
    
                // If successful, handle type chaining
                if ( status >= 200 && status < 300 || status === 304 ) {
    
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if ( s.ifModified ) {
    
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if ( modified ) {
                            jQuery.lastModified[ ifModifiedKey ] = modified;
                        }
                        modified = jqXHR.getResponseHeader("Etag");
                        if ( modified ) {
                            jQuery.etag[ ifModifiedKey ] = modified;
                        }
                    }
    
                    // If not modified
                    if ( status === 304 ) {
    
                        statusText = "notmodified";
                        isSuccess = true;
    
                    // If we have data
                    } else {
    
                        isSuccess = ajaxConvert( s, response );
                        statusText = isSuccess.state;
                        success = isSuccess.data;
                        error = isSuccess.error;
                        isSuccess = !error;
                    }
                } else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if ( !statusText || status ) {
                        statusText = "error";
                        if ( status < 0 ) {
                            status = 0;
                        }
                    }
                }
    
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = "" + ( nativeStatusText || statusText );
    
                // Success/Error
                if ( isSuccess ) {
                    deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                } else {
                    deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                }
    
                // Status-dependent callbacks
                jqXHR.statusCode( statusCode );
                statusCode = undefined;
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
                            [ jqXHR, s, isSuccess ? success : error ] );
                }
    
                // Complete
                completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                    // Handle the global AJAX counter
                    if ( !( --jQuery.active ) ) {
                        jQuery.event.trigger( "ajaxStop" );
                    }
                }
            }
    
            // Attach deferreds
            deferred.promise( jqXHR );
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            jqXHR.complete = completeDeferred.add;
    
            // Status-dependent callbacks
            jqXHR.statusCode = function( map ) {
                if ( map ) {
                    var tmp;
                    if ( state < 2 ) {
                        for ( tmp in map ) {
                            statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
                        }
                    } else {
                        tmp = map[ jqXHR.status ];
                        jqXHR.always( tmp );
                    }
                }
                return this;
            };
    
            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // We also use the url parameter if available
            s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
    
            // Extract dataTypes list
            s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );
    
            // Determine if a cross-domain request is in order
            if ( s.crossDomain == null ) {
                parts = rurl.exec( s.url.toLowerCase() );
                s.crossDomain = !!( parts &&
                    ( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
                        ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
                            ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
                );
            }
    
            // Convert data if not already a string
            if ( s.data && s.processData && typeof s.data !== "string" ) {
                s.data = jQuery.param( s.data, s.traditional );
            }
    
            // Apply prefilters
            inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
    
            // If request was aborted inside a prefilter, stop there
            if ( state === 2 ) {
                return jqXHR;
            }
    
            // We can fire global events as of now if asked to
            fireGlobals = s.global;
    
            // Uppercase the type
            s.type = s.type.toUpperCase();
    
            // Determine if request has content
            s.hasContent = !rnoContent.test( s.type );
    
            // Watch for a new set of requests
            if ( fireGlobals && jQuery.active++ === 0 ) {
                jQuery.event.trigger( "ajaxStart" );
            }
    
            // More options handling for requests with no content
            if ( !s.hasContent ) {
    
                // If data is available, append data to url
                if ( s.data ) {
                    s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
    
                // Get ifModifiedKey before adding the anti-cache parameter
                ifModifiedKey = s.url;
    
                // Add anti-cache in url if needed
                if ( s.cache === false ) {
    
                    var ts = jQuery.now(),
                        // try replacing _= if it is there
                        ret = s.url.replace( rts, "$1_=" + ts );
    
                    // if nothing was replaced, add timestamp to the end
                    s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
                }
            }
    
            // Set the correct header, if data is being sent
            if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                jqXHR.setRequestHeader( "Content-Type", s.contentType );
            }
    
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if ( s.ifModified ) {
                ifModifiedKey = ifModifiedKey || s.url;
                if ( jQuery.lastModified[ ifModifiedKey ] ) {
                    jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
                }
                if ( jQuery.etag[ ifModifiedKey ] ) {
                    jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
                }
            }
    
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                    s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                    s.accepts[ "*" ]
            );
    
            // Check for headers option
            for ( i in s.headers ) {
                jqXHR.setRequestHeader( i, s.headers[ i ] );
            }
    
            // Allow custom headers/mimetypes and early abort
            if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
                    // Abort if not done already and return
                    return jqXHR.abort();
    
            }
    
            // aborting is no longer a cancellation
            strAbort = "abort";
    
            // Install callbacks on deferreds
            for ( i in { success: 1, error: 1, complete: 1 } ) {
                jqXHR[ i ]( s[ i ] );
            }
    
            // Get transport
            transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
    
            // If no transport, we auto-abort
            if ( !transport ) {
                done( -1, "No Transport" );
            } else {
                jqXHR.readyState = 1;
                // Send global event
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                }
                // Timeout
                if ( s.async && s.timeout > 0 ) {
                    timeoutTimer = setTimeout( function(){
                        jqXHR.abort( "timeout" );
                    }, s.timeout );
                }
    
                try {
                    state = 1;
                    transport.send( requestHeaders, done );
                } catch (e) {
                    // Propagate exception as error if not done
                    if ( state < 2 ) {
                        done( -1, e );
                    // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }
    
            return jqXHR;
        },
    
        // Counter for holding the number of active queries
        active: 0,
    
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {}
    
    });
    
    /* Handles responses to an ajax request:
     * - sets all responseXXX fields accordingly
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses( s, jqXHR, responses ) {
    
        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes,
            responseFields = s.responseFields;
    
        // Fill responseXXX fields
        for ( type in responseFields ) {
            if ( type in responses ) {
                jqXHR[ responseFields[type] ] = responses[ type ];
            }
        }
    
        // Remove auto dataType and get content-type in the process
        while( dataTypes[ 0 ] === "*" ) {
            dataTypes.shift();
            if ( ct === undefined ) {
                ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
            }
        }
    
        // Check if we're dealing with a known content-type
        if ( ct ) {
            for ( type in contents ) {
                if ( contents[ type ] && contents[ type ].test( ct ) ) {
                    dataTypes.unshift( type );
                    break;
                }
            }
        }
    
        // Check to see if we have a response for the expected dataType
        if ( dataTypes[ 0 ] in responses ) {
            finalDataType = dataTypes[ 0 ];
        } else {
            // Try convertible dataTypes
            for ( type in responses ) {
                if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                    finalDataType = type;
                    break;
                }
                if ( !firstDataType ) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
    
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if ( finalDataType ) {
            if ( finalDataType !== dataTypes[ 0 ] ) {
                dataTypes.unshift( finalDataType );
            }
            return responses[ finalDataType ];
        }
    }
    
    // Chain conversions given the request and the original response
    function ajaxConvert( s, response ) {
    
        var conv, conv2, current, tmp,
            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice(),
            prev = dataTypes[ 0 ],
            converters = {},
            i = 0;
    
        // Apply the dataFilter if provided
        if ( s.dataFilter ) {
            response = s.dataFilter( response, s.dataType );
        }
    
        // Create converters map with lowercased keys
        if ( dataTypes[ 1 ] ) {
            for ( conv in s.converters ) {
                converters[ conv.toLowerCase() ] = s.converters[ conv ];
            }
        }
    
        // Convert to each sequential dataType, tolerating list modification
        for ( ; (current = dataTypes[++i]); ) {
    
            // There's only work to do if current dataType is non-auto
            if ( current !== "*" ) {
    
                // Convert response if prev dataType is non-auto and differs from current
                if ( prev !== "*" && prev !== current ) {
    
                    // Seek a direct converter
                    conv = converters[ prev + " " + current ] || converters[ "* " + current ];
    
                    // If none found, seek a pair
                    if ( !conv ) {
                        for ( conv2 in converters ) {
    
                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if ( tmp[ 1 ] === current ) {
    
                                // If prev can be converted to accepted input
                                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                    converters[ "* " + tmp[ 0 ] ];
                                if ( conv ) {
                                    // Condense equivalence converters
                                    if ( conv === true ) {
                                        conv = converters[ conv2 ];
    
                                    // Otherwise, insert the intermediate dataType
                                    } else if ( converters[ conv2 ] !== true ) {
                                        current = tmp[ 0 ];
                                        dataTypes.splice( i--, 0, current );
                                    }
    
                                    break;
                                }
                            }
                        }
                    }
    
                    // Apply converter (if not an equivalence)
                    if ( conv !== true ) {
    
                        // Unless errors are allowed to bubble, catch and return them
                        if ( conv && s["throws"] ) {
                            response = conv( response );
                        } else {
                            try {
                                response = conv( response );
                            } catch ( e ) {
                                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                            }
                        }
                    }
                }
    
                // Update prev for next iteration
                prev = current;
            }
        }
    
        return { state: "success", data: response };
    }
    var oldCallbacks = [],
        rquestion = /\?/,
        rjsonp = /(=)\?(?=&|$)|\?\?/,
        nonce = jQuery.now();
    
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
            this[ callback ] = true;
            return callback;
        }
    });
    
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
    
        var callbackName, overwritten, responseContainer,
            data = s.data,
            url = s.url,
            hasCallback = s.jsonp !== false,
            replaceInUrl = hasCallback && rjsonp.test( url ),
            replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
                !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &&
                rjsonp.test( data );
    
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {
    
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
                s.jsonpCallback() :
                s.jsonpCallback;
            overwritten = window[ callbackName ];
    
            // Insert callback into url or form data
            if ( replaceInUrl ) {
                s.url = url.replace( rjsonp, "$1" + callbackName );
            } else if ( replaceInData ) {
                s.data = data.replace( rjsonp, "$1" + callbackName );
            } else if ( hasCallback ) {
                s.url += ( rquestion.test( url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
            }
    
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if ( !responseContainer ) {
                    jQuery.error( callbackName + " was not called" );
                }
                return responseContainer[ 0 ];
            };
    
            // force json dataType
            s.dataTypes[ 0 ] = "json";
    
            // Install callback
            window[ callbackName ] = function() {
                responseContainer = arguments;
            };
    
            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[ callbackName ] = overwritten;
    
                // Save back as free
                if ( s[ callbackName ] ) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
    
                    // save the callback name for future use
                    oldCallbacks.push( callbackName );
                }
    
                // Call if it was a function and we have a response
                if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                    overwritten( responseContainer[ 0 ] );
                }
    
                responseContainer = overwritten = undefined;
            });
    
            // Delegate to script
            return "script";
        }
    });
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /javascript|ecmascript/
        },
        converters: {
            "text script": function( text ) {
                jQuery.globalEval( text );
                return text;
            }
        }
    });
    
    // Handle cache's special case and global
    jQuery.ajaxPrefilter( "script", function( s ) {
        if ( s.cache === undefined ) {
            s.cache = false;
        }
        if ( s.crossDomain ) {
            s.type = "GET";
            s.global = false;
        }
    });
    
    // Bind script tag hack transport
    jQuery.ajaxTransport( "script", function(s) {
    
        // This transport only deals with cross domain requests
        if ( s.crossDomain ) {
    
            var script,
                head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;
    
            return {
    
                send: function( _, callback ) {
    
                    script = document.createElement( "script" );
    
                    script.async = "async";
    
                    if ( s.scriptCharset ) {
                        script.charset = s.scriptCharset;
                    }
    
                    script.src = s.url;
    
                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function( _, isAbort ) {
    
                        if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
    
                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;
    
                            // Remove the script
                            if ( head && script.parentNode ) {
                                head.removeChild( script );
                            }
    
                            // Dereference the script
                            script = undefined;
    
                            // Callback if not abort
                            if ( !isAbort ) {
                                callback( 200, "success" );
                            }
                        }
                    };
                    // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
                    // This arises when a base node is used (#2709 and #4378).
                    head.insertBefore( script, head.firstChild );
                },
    
                abort: function() {
                    if ( script ) {
                        script.onload( 0, 1 );
                    }
                }
            };
        }
    });
    var xhrCallbacks,
        // #5280: Internet Explorer will keep connections alive if we don't abort on unload
        xhrOnUnloadAbort = window.ActiveXObject ? function() {
            // Abort all pending requests
            for ( var key in xhrCallbacks ) {
                xhrCallbacks[ key ]( 0, 1 );
            }
        } : false,
        xhrId = 0;
    
    // Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch( e ) {}
    }
    
    function createActiveXHR() {
        try {
            return new window.ActiveXObject( "Microsoft.XMLHTTP" );
        } catch( e ) {}
    }
    
    // Create the request object
    // (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
        /* Microsoft failed to properly
         * implement the XMLHttpRequest in IE7 (can't request local files),
         * so we use the ActiveXObject when it is available
         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
         * we need a fallback.
         */
        function() {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } :
        // For all other browsers, use the standard XMLHttpRequest object
        createStandardXHR;
    
    // Determine support properties
    (function( xhr ) {
        jQuery.extend( jQuery.support, {
            ajax: !!xhr,
            cors: !!xhr && ( "withCredentials" in xhr )
        });
    })( jQuery.ajaxSettings.xhr() );
    
    // Create transport if the browser can provide an xhr
    if ( jQuery.support.ajax ) {
    
        jQuery.ajaxTransport(function( s ) {
            // Cross domain only allowed if supported through XMLHttpRequest
            if ( !s.crossDomain || jQuery.support.cors ) {
    
                var callback;
    
                return {
                    send: function( headers, complete ) {
    
                        // Get a new xhr
                        var handle, i,
                            xhr = s.xhr();
    
                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        if ( s.username ) {
                            xhr.open( s.type, s.url, s.async, s.username, s.password );
                        } else {
                            xhr.open( s.type, s.url, s.async );
                        }
    
                        // Apply custom fields if provided
                        if ( s.xhrFields ) {
                            for ( i in s.xhrFields ) {
                                xhr[ i ] = s.xhrFields[ i ];
                            }
                        }
    
                        // Override mime type if needed
                        if ( s.mimeType && xhr.overrideMimeType ) {
                            xhr.overrideMimeType( s.mimeType );
                        }
    
                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if ( !s.crossDomain && !headers["X-Requested-With"] ) {
                            headers[ "X-Requested-With" ] = "XMLHttpRequest";
                        }
    
                        // Need an extra try/catch for cross domain requests in Firefox 3
                        try {
                            for ( i in headers ) {
                                xhr.setRequestHeader( i, headers[ i ] );
                            }
                        } catch( _ ) {}
    
                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send( ( s.hasContent && s.data ) || null );
    
                        // Listener
                        callback = function( _, isAbort ) {
    
                            var status,
                                statusText,
                                responseHeaders,
                                responses,
                                xml;
    
                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occurred
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            try {
    
                                // Was never called and is aborted or complete
                                if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
    
                                    // Only called once
                                    callback = undefined;
    
                                    // Do not keep as active anymore
                                    if ( handle ) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if ( xhrOnUnloadAbort ) {
                                            delete xhrCallbacks[ handle ];
                                        }
                                    }
    
                                    // If it's an abort
                                    if ( isAbort ) {
                                        // Abort it manually if needed
                                        if ( xhr.readyState !== 4 ) {
                                            xhr.abort();
                                        }
                                    } else {
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        responses = {};
                                        xml = xhr.responseXML;
    
                                        // Construct response list
                                        if ( xml && xml.documentElement /* #4958 */ ) {
                                            responses.xml = xml;
                                        }
    
                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        try {
                                            responses.text = xhr.responseText;
                                        } catch( _ ) {
                                        }
    
                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        } catch( e ) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }
    
                                        // Filter status for non standard behaviors
    
                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if ( !status && s.isLocal && !s.crossDomain ) {
                                            status = responses.text ? 200 : 404;
                                        // IE - #1450: sometimes returns 1223 when it should be 204
                                        } else if ( status === 1223 ) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch( firefoxAccessException ) {
                                if ( !isAbort ) {
                                    complete( -1, firefoxAccessException );
                                }
                            }
    
                            // Call complete if needed
                            if ( responses ) {
                                complete( status, statusText, responses, responseHeaders );
                            }
                        };
    
                        if ( !s.async ) {
                            // if we're in sync mode we fire the callback
                            callback();
                        } else if ( xhr.readyState === 4 ) {
                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            setTimeout( callback, 0 );
                        } else {
                            handle = ++xhrId;
                            if ( xhrOnUnloadAbort ) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if ( !xhrCallbacks ) {
                                    xhrCallbacks = {};
                                    jQuery( window ).unload( xhrOnUnloadAbort );
                                }
                                // Add to list of active xhrs callbacks
                                xhrCallbacks[ handle ] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },
    
                    abort: function() {
                        if ( callback ) {
                            callback(0,1);
                        }
                    }
                };
            }
        });
    }
    var fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
        rrun = /queueHooks$/,
        animationPrefilters = [ defaultPrefilter ],
        tweeners = {
            "*": [function( prop, value ) {
                var end, unit, prevScale,
                    tween = this.createTween( prop, value ),
                    parts = rfxnum.exec( value ),
                    target = tween.cur(),
                    start = +target || 0,
                    scale = 1;
    
                if ( parts ) {
                    end = +parts[2];
                    unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    
                    // We need to compute starting value
                    if ( unit !== "px" && start ) {
                        // Iteratively approximate from a nonzero starting point
                        // Prefer the current property, because this process will be trivial if it uses the same units
                        // Fallback to end or a simple constant
                        start = jQuery.css( tween.elem, prop, true ) || end || 1;
    
                        do {
                            // If previous iteration zeroed out, double until we get *something*
                            // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                            prevScale = scale = scale || ".5";
    
                            // Adjust and apply
                            start = start / scale;
                            jQuery.style( tween.elem, prop, start + unit );
    
                            // Update scale, tolerating zeroes from tween.cur()
                            scale = tween.cur() / target;
    
                        // Stop looping if we've hit the mark or scale is unchanged
                        } while ( scale !== 1 && scale !== prevScale );
                    }
    
                    tween.unit = unit;
                    tween.start = start;
                    // If a +=/-= token was provided, we're doing a relative animation
                    tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
                }
                return tween;
            }]
        };
    
    // Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        }, 0 );
        return ( fxNow = jQuery.now() );
    }
    
    function createTweens( animation, props ) {
        jQuery.each( props, function( prop, value ) {
            var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
                index = 0,
                length = collection.length;
            for ( ; index < length; index++ ) {
                if ( collection[ index ].call( animation, prop, value ) ) {
    
                    // we're done with this property
                    return;
                }
            }
        });
    }
    
    function Animation( elem, properties, options ) {
        var result,
            index = 0,
            tweenerIndex = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always( function() {
                // don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function() {
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                    percent = 1 - ( remaining / animation.duration || 0 ),
                    index = 0,
                    length = animation.tweens.length;
    
                for ( ; index < length ; index++ ) {
                    animation.tweens[ index ].run( percent );
                }
    
                deferred.notifyWith( elem, [ animation, percent, remaining ]);
    
                if ( percent < 1 && length ) {
                    return remaining;
                } else {
                    deferred.resolveWith( elem, [ animation ] );
                    return false;
                }
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend( {}, properties ),
                opts: jQuery.extend( true, { specialEasing: {} }, options ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function( prop, end, easing ) {
                    var tween = jQuery.Tween( elem, animation.opts, prop, end,
                            animation.opts.specialEasing[ prop ] || animation.opts.easing );
                    animation.tweens.push( tween );
                    return tween;
                },
                stop: function( gotoEnd ) {
                    var index = 0,
                        // if we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
    
                    for ( ; index < length ; index++ ) {
                        animation.tweens[ index ].run( 1 );
                    }
    
                    // resolve when we played the last frame
                    // otherwise, reject
                    if ( gotoEnd ) {
                        deferred.resolveWith( elem, [ animation, gotoEnd ] );
                    } else {
                        deferred.rejectWith( elem, [ animation, gotoEnd ] );
                    }
                    return this;
                }
            }),
            props = animation.props;
    
        propFilter( props, animation.opts.specialEasing );
    
        for ( ; index < length ; index++ ) {
            result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
            if ( result ) {
                return result;
            }
        }
    
        createTweens( animation, props );
    
        if ( jQuery.isFunction( animation.opts.start ) ) {
            animation.opts.start.call( elem, animation );
        }
    
        jQuery.fx.timer(
            jQuery.extend( tick, {
                anim: animation,
                queue: animation.opts.queue,
                elem: elem
            })
        );
    
        // attach callbacks from options
        return animation.progress( animation.opts.progress )
            .done( animation.opts.done, animation.opts.complete )
            .fail( animation.opts.fail )
            .always( animation.opts.always );
    }
    
    function propFilter( props, specialEasing ) {
        var index, name, easing, value, hooks;
    
        // camelCase, specialEasing and expand cssHook pass
        for ( index in props ) {
            name = jQuery.camelCase( index );
            easing = specialEasing[ name ];
            value = props[ index ];
            if ( jQuery.isArray( value ) ) {
                easing = value[ 1 ];
                value = props[ index ] = value[ 0 ];
            }
    
            if ( index !== name ) {
                props[ name ] = value;
                delete props[ index ];
            }
    
            hooks = jQuery.cssHooks[ name ];
            if ( hooks && "expand" in hooks ) {
                value = hooks.expand( value );
                delete props[ name ];
    
                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for ( index in value ) {
                    if ( !( index in props ) ) {
                        props[ index ] = value[ index ];
                        specialEasing[ index ] = easing;
                    }
                }
            } else {
                specialEasing[ name ] = easing;
            }
        }
    }
    
    jQuery.Animation = jQuery.extend( Animation, {
    
        tweener: function( props, callback ) {
            if ( jQuery.isFunction( props ) ) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }
    
            var prop,
                index = 0,
                length = props.length;
    
            for ( ; index < length ; index++ ) {
                prop = props[ index ];
                tweeners[ prop ] = tweeners[ prop ] || [];
                tweeners[ prop ].unshift( callback );
            }
        },
    
        prefilter: function( callback, prepend ) {
            if ( prepend ) {
                animationPrefilters.unshift( callback );
            } else {
                animationPrefilters.push( callback );
            }
        }
    });
    
    function defaultPrefilter( elem, props, opts ) {
        var index, prop, value, length, dataShow, tween, hooks, oldfire,
            anim = this,
            style = elem.style,
            orig = {},
            handled = [],
            hidden = elem.nodeType && isHidden( elem );
    
        // handle queue: false promises
        if ( !opts.queue ) {
            hooks = jQuery._queueHooks( elem, "fx" );
            if ( hooks.unqueued == null ) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if ( !hooks.unqueued ) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
    
            anim.always(function() {
                // doing this makes sure that the complete handler will be called
                // before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if ( !jQuery.queue( elem, "fx" ).length ) {
                        hooks.empty.fire();
                    }
                });
            });
        }
    
        // height/width overflow pass
        if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
    
            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            if ( jQuery.css( elem, "display" ) === "inline" &&
                    jQuery.css( elem, "float" ) === "none" ) {
    
                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
                    style.display = "inline-block";
    
                } else {
                    style.zoom = 1;
                }
            }
        }
    
        if ( opts.overflow ) {
            style.overflow = "hidden";
            if ( !jQuery.support.shrinkWrapBlocks ) {
                anim.done(function() {
                    style.overflow = opts.overflow[ 0 ];
                    style.overflowX = opts.overflow[ 1 ];
                    style.overflowY = opts.overflow[ 2 ];
                });
            }
        }
    
    
        // show/hide pass
        for ( index in props ) {
            value = props[ index ];
            if ( rfxtypes.exec( value ) ) {
                delete props[ index ];
                if ( value === ( hidden ? "hide" : "show" ) ) {
                    continue;
                }
                handled.push( index );
            }
        }
    
        length = handled.length;
        if ( length ) {
            dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
            if ( hidden ) {
                jQuery( elem ).show();
            } else {
                anim.done(function() {
                    jQuery( elem ).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery.removeData( elem, "fxshow", true );
                for ( prop in orig ) {
                    jQuery.style( elem, prop, orig[ prop ] );
                }
            });
            for ( index = 0 ; index < length ; index++ ) {
                prop = handled[ index ];
                tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
                orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );
    
                if ( !( prop in dataShow ) ) {
                    dataShow[ prop ] = tween.start;
                    if ( hidden ) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }
    
    function Tween( elem, options, prop, end, easing ) {
        return new Tween.prototype.init( elem, options, prop, end, easing );
    }
    jQuery.Tween = Tween;
    
    Tween.prototype = {
        constructor: Tween,
        init: function( elem, options, prop, end, easing, unit ) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
        },
        cur: function() {
            var hooks = Tween.propHooks[ this.prop ];
    
            return hooks && hooks.get ?
                hooks.get( this ) :
                Tween.propHooks._default.get( this );
        },
        run: function( percent ) {
            var eased,
                hooks = Tween.propHooks[ this.prop ];
    
            if ( this.options.duration ) {
                this.pos = eased = jQuery.easing[ this.easing ](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = ( this.end - this.start ) * eased + this.start;
    
            if ( this.options.step ) {
                this.options.step.call( this.elem, this.now, this );
            }
    
            if ( hooks && hooks.set ) {
                hooks.set( this );
            } else {
                Tween.propHooks._default.set( this );
            }
            return this;
        }
    };
    
    Tween.prototype.init.prototype = Tween.prototype;
    
    Tween.propHooks = {
        _default: {
            get: function( tween ) {
                var result;
    
                if ( tween.elem[ tween.prop ] != null &&
                    (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                    return tween.elem[ tween.prop ];
                }
    
                // passing any value as a 4th parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css( tween.elem, tween.prop, false, "" );
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function( tween ) {
                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if ( jQuery.fx.step[ tween.prop ] ) {
                    jQuery.fx.step[ tween.prop ]( tween );
                } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                    jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                } else {
                    tween.elem[ tween.prop ] = tween.now;
                }
            }
        }
    };
    
    // Remove in 2.0 - this supports IE8's panic based approach
    // to setting things on disconnected nodes
    
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function( tween ) {
            if ( tween.elem.nodeType && tween.elem.parentNode ) {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    };
    
    jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
        var cssFn = jQuery.fn[ name ];
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return speed == null || typeof speed === "boolean" ||
                // special check for .toggle( handler, handler, ... )
                ( !i && jQuery.isFunction( speed ) && jQuery.isFunction( easing ) ) ?
                cssFn.apply( this, arguments ) :
                this.animate( genFx( name, true ), speed, easing, callback );
        };
    });
    
    jQuery.fn.extend({
        fadeTo: function( speed, to, easing, callback ) {
    
            // show any hidden elements after setting opacity to 0
            return this.filter( isHidden ).css( "opacity", 0 ).show()
    
                // animate to the value specified
                .end().animate({ opacity: to }, speed, easing, callback );
        },
        animate: function( prop, speed, easing, callback ) {
            var empty = jQuery.isEmptyObject( prop ),
                optall = jQuery.speed( speed, easing, callback ),
                doAnimation = function() {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation( this, jQuery.extend( {}, prop ), optall );
    
                    // Empty animations resolve immediately
                    if ( empty ) {
                        anim.stop( true );
                    }
                };
    
            return empty || optall.queue === false ?
                this.each( doAnimation ) :
                this.queue( optall.queue, doAnimation );
        },
        stop: function( type, clearQueue, gotoEnd ) {
            var stopQueue = function( hooks ) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop( gotoEnd );
            };
    
            if ( typeof type !== "string" ) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if ( clearQueue && type !== false ) {
                this.queue( type || "fx", [] );
            }
    
            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = jQuery._data( this );
    
                if ( index ) {
                    if ( data[ index ] && data[ index ].stop ) {
                        stopQueue( data[ index ] );
                    }
                } else {
                    for ( index in data ) {
                        if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                            stopQueue( data[ index ] );
                        }
                    }
                }
    
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                        timers[ index ].anim.stop( gotoEnd );
                        dequeue = false;
                        timers.splice( index, 1 );
                    }
                }
    
                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if ( dequeue || !gotoEnd ) {
                    jQuery.dequeue( this, type );
                }
            });
        }
    });
    
    // Generate parameters to create a standard animation
    function genFx( type, includeWidth ) {
        var which,
            attrs = { height: type },
            i = 0;
    
        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth? 1 : 0;
        for( ; i < 4 ; i += 2 - includeWidth ) {
            which = cssExpand[ i ];
            attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
        }
    
        if ( includeWidth ) {
            attrs.opacity = attrs.width = type;
        }
    
        return attrs;
    }
    
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function( name, props ) {
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return this.animate( props, speed, easing, callback );
        };
    });
    
    jQuery.speed = function( speed, easing, fn ) {
        var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction( speed ) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
        };
    
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
            opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
    
        // normalize opt.queue - true/undefined/null -> "fx"
        if ( opt.queue == null || opt.queue === true ) {
            opt.queue = "fx";
        }
    
        // Queueing
        opt.old = opt.complete;
    
        opt.complete = function() {
            if ( jQuery.isFunction( opt.old ) ) {
                opt.old.call( this );
            }
    
            if ( opt.queue ) {
                jQuery.dequeue( this, opt.queue );
            }
        };
    
        return opt;
    };
    
    jQuery.easing = {
        linear: function( p ) {
            return p;
        },
        swing: function( p ) {
            return 0.5 - Math.cos( p*Math.PI ) / 2;
        }
    };
    
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function() {
        var timer,
            timers = jQuery.timers,
            i = 0;
    
        for ( ; i < timers.length; i++ ) {
            timer = timers[ i ];
            // Checks the timer has not already been removed
            if ( !timer() && timers[ i ] === timer ) {
                timers.splice( i--, 1 );
            }
        }
    
        if ( !timers.length ) {
            jQuery.fx.stop();
        }
    };
    
    jQuery.fx.timer = function( timer ) {
        if ( timer() && jQuery.timers.push( timer ) && !timerId ) {
            timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
        }
    };
    
    jQuery.fx.interval = 13;
    
    jQuery.fx.stop = function() {
        clearInterval( timerId );
        timerId = null;
    };
    
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    
    // Back Compat <1.8 extension point
    jQuery.fx.step = {};
    
    if ( jQuery.expr && jQuery.expr.filters ) {
        jQuery.expr.filters.animated = function( elem ) {
            return jQuery.grep(jQuery.timers, function( fn ) {
                return elem === fn.elem;
            }).length;
        };
    }
    var rroot = /^(?:body|html)$/i;
    
    jQuery.fn.offset = function( options ) {
        if ( arguments.length ) {
            return options === undefined ?
                this :
                this.each(function( i ) {
                    jQuery.offset.setOffset( this, options, i );
                });
        }
    
        var box, docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft, top, left,
            elem = this[ 0 ],
            doc = elem && elem.ownerDocument;
    
        if ( !doc ) {
            return;
        }
    
        if ( (body = doc.body) === elem ) {
            return jQuery.offset.bodyOffset( elem );
        }
    
        docElem = doc.documentElement;
    
        // Make sure we're not dealing with a disconnected DOM node
        if ( !jQuery.contains( docElem, elem ) ) {
            return { top: 0, left: 0 };
        }
    
        box = elem.getBoundingClientRect();
        win = getWindow( doc );
        clientTop  = docElem.clientTop  || body.clientTop  || 0;
        clientLeft = docElem.clientLeft || body.clientLeft || 0;
        scrollTop  = win.pageYOffset || docElem.scrollTop;
        scrollLeft = win.pageXOffset || docElem.scrollLeft;
        top  = box.top  + scrollTop  - clientTop;
        left = box.left + scrollLeft - clientLeft;
    
        return { top: top, left: left };
    };
    
    jQuery.offset = {
    
        bodyOffset: function( body ) {
            var top = body.offsetTop,
                left = body.offsetLeft;
    
            if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
                top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
                left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
            }
    
            return { top: top, left: left };
        },
    
        setOffset: function( elem, options, i ) {
            var position = jQuery.css( elem, "position" );
    
            // set position first, in-case top/left are set even on static elem
            if ( position === "static" ) {
                elem.style.position = "relative";
            }
    
            var curElem = jQuery( elem ),
                curOffset = curElem.offset(),
                curCSSTop = jQuery.css( elem, "top" ),
                curCSSLeft = jQuery.css( elem, "left" ),
                calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
                props = {}, curPosition = {}, curTop, curLeft;
    
            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if ( calculatePosition ) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat( curCSSTop ) || 0;
                curLeft = parseFloat( curCSSLeft ) || 0;
            }
    
            if ( jQuery.isFunction( options ) ) {
                options = options.call( elem, i, curOffset );
            }
    
            if ( options.top != null ) {
                props.top = ( options.top - curOffset.top ) + curTop;
            }
            if ( options.left != null ) {
                props.left = ( options.left - curOffset.left ) + curLeft;
            }
    
            if ( "using" in options ) {
                options.using.call( elem, props );
            } else {
                curElem.css( props );
            }
        }
    };
    
    
    jQuery.fn.extend({
    
        position: function() {
            if ( !this[0] ) {
                return;
            }
    
            var elem = this[0],
    
            // Get *real* offsetParent
            offsetParent = this.offsetParent(),
    
            // Get correct offsets
            offset       = this.offset(),
            parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();
    
            // Subtract element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
            offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;
    
            // Add offsetParent borders
            parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
            parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;
    
            // Subtract the two offsets
            return {
                top:  offset.top  - parentOffset.top,
                left: offset.left - parentOffset.left
            };
        },
    
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || document.body;
                while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || document.body;
            });
        }
    });
    
    
    // Create scrollLeft and scrollTop methods
    jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
        var top = /Y/.test( prop );
    
        jQuery.fn[ method ] = function( val ) {
            return jQuery.access( this, function( elem, method, val ) {
                var win = getWindow( elem );
    
                if ( val === undefined ) {
                    return win ? (prop in win) ? win[ prop ] :
                        win.document.documentElement[ method ] :
                        elem[ method ];
                }
    
                if ( win ) {
                    win.scrollTo(
                        !top ? val : jQuery( win ).scrollLeft(),
                         top ? val : jQuery( win ).scrollTop()
                    );
    
                } else {
                    elem[ method ] = val;
                }
            }, method, val, arguments.length, null );
        };
    });
    
    function getWindow( elem ) {
        return jQuery.isWindow( elem ) ?
            elem :
            elem.nodeType === 9 ?
                elem.defaultView || elem.parentWindow :
                false;
    }
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
        jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
            // margin is only for outerHeight, outerWidth
            jQuery.fn[ funcName ] = function( margin, value ) {
                var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                    extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
    
                return jQuery.access( this, function( elem, type, value ) {
                    var doc;
    
                    if ( jQuery.isWindow( elem ) ) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement[ "client" + name ];
                    }
    
                    // Get document width or height
                    if ( elem.nodeType === 9 ) {
                        doc = elem.documentElement;
    
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                        return Math.max(
                            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                            elem.body[ "offset" + name ], doc[ "offset" + name ],
                            doc[ "client" + name ]
                        );
                    }
    
                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css( elem, type, value, extra ) :
    
                        // Set width or height on the element
                        jQuery.style( elem, type, value, extra );
                }, type, chainable ? margin : undefined, chainable, null );
            };
        });
    });
    // Expose jQuery to the global object
    window.jQuery = window.$ = jQuery;
    
    // Expose jQuery as an AMD module, but only for AMD loaders that
    // understand the issues with loading multiple versions of jQuery
    // in a page that all might call define(). The loader will indicate
    // they have special allowances for multiple jQuery versions by
    // specifying define.amd.jQuery = true. Register as a named module,
    // since jQuery can be concatenated with other files that may use define,
    // but not use a proper concatenation script that understands anonymous
    // AMD modules. A named AMD is safest and most robust way to register.
    // Lowercase jquery is used because AMD module names are derived from
    // file names, and jQuery is normally delivered in a lowercase file name.
    // Do this after creating the global so that if an AMD module wants to call
    // noConflict to hide this version of jQuery, it will work.
    if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
        define( "jquery", [], function () { return jQuery; } );
    }
    
    return jQuery;
    
    })( window ); }));
    
    },{}],59:[function(require,module,exports){
    /*!
     * jQuery Mousewheel 3.1.13
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     */
    
    (function (factory) {
        if ( typeof define === 'function' && define.amd ) {
            // AMD. Register as an anonymous module.
            define(['jquery'], factory);
        } else if (typeof exports === 'object') {
            // Node/CommonJS style for Browserify
            module.exports = factory;
        } else {
            // Browser globals
            factory(jQuery);
        }
    }(function ($) {
    
        var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
            toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                        ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
            slice  = Array.prototype.slice,
            nullLowestDeltaTimeout, lowestDelta;
    
        if ( $.event.fixHooks ) {
            for ( var i = toFix.length; i; ) {
                $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
            }
        }
    
        var special = $.event.special.mousewheel = {
            version: '3.1.12',
    
            setup: function() {
                if ( this.addEventListener ) {
                    for ( var i = toBind.length; i; ) {
                        this.addEventListener( toBind[--i], handler, false );
                    }
                } else {
                    this.onmousewheel = handler;
                }
                // Store the line height and page height for this particular element
                $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
                $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
            },
    
            teardown: function() {
                if ( this.removeEventListener ) {
                    for ( var i = toBind.length; i; ) {
                        this.removeEventListener( toBind[--i], handler, false );
                    }
                } else {
                    this.onmousewheel = null;
                }
                // Clean up the data we added to the element
                $.removeData(this, 'mousewheel-line-height');
                $.removeData(this, 'mousewheel-page-height');
            },
    
            getLineHeight: function(elem) {
                var $elem = $(elem),
                    $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
                if (!$parent.length) {
                    $parent = $('body');
                }
                return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
            },
    
            getPageHeight: function(elem) {
                return $(elem).height();
            },
    
            settings: {
                adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
                normalizeOffset: true  // calls getBoundingClientRect for each event
            }
        };
    
        $.fn.extend({
            mousewheel: function(fn) {
                return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
            },
    
            unmousewheel: function(fn) {
                return this.unbind('mousewheel', fn);
            }
        });
    
    
        function handler(event) {
            var orgEvent   = event || window.event,
                args       = slice.call(arguments, 1),
                delta      = 0,
                deltaX     = 0,
                deltaY     = 0,
                absDelta   = 0,
                offsetX    = 0,
                offsetY    = 0;
            event = $.event.fix(orgEvent);
            event.type = 'mousewheel';
    
            // Old school scrollwheel delta
            if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
            if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
            if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
            if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }
    
            // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
            if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
                deltaX = deltaY * -1;
                deltaY = 0;
            }
    
            // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
            delta = deltaY === 0 ? deltaX : deltaY;
    
            // New school wheel delta (wheel event)
            if ( 'deltaY' in orgEvent ) {
                deltaY = orgEvent.deltaY * -1;
                delta  = deltaY;
            }
            if ( 'deltaX' in orgEvent ) {
                deltaX = orgEvent.deltaX;
                if ( deltaY === 0 ) { delta  = deltaX * -1; }
            }
    
            // No change actually happened, no reason to go any further
            if ( deltaY === 0 && deltaX === 0 ) { return; }
    
            // Need to convert lines and pages to pixels if we aren't already in pixels
            // There are three delta modes:
            //   * deltaMode 0 is by pixels, nothing to do
            //   * deltaMode 1 is by lines
            //   * deltaMode 2 is by pages
            if ( orgEvent.deltaMode === 1 ) {
                var lineHeight = $.data(this, 'mousewheel-line-height');
                delta  *= lineHeight;
                deltaY *= lineHeight;
                deltaX *= lineHeight;
            } else if ( orgEvent.deltaMode === 2 ) {
                var pageHeight = $.data(this, 'mousewheel-page-height');
                delta  *= pageHeight;
                deltaY *= pageHeight;
                deltaX *= pageHeight;
            }
    
            // Store lowest absolute delta to normalize the delta values
            absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );
    
            if ( !lowestDelta || absDelta < lowestDelta ) {
                lowestDelta = absDelta;
    
                // Adjust older deltas if necessary
                if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                    lowestDelta /= 40;
                }
            }
    
            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                // Divide all the things by 40!
                delta  /= 40;
                deltaX /= 40;
                deltaY /= 40;
            }
    
            // Get a whole, normalized value for the deltas
            delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
            deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
            deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);
    
            // Normalise offsetX and offsetY properties
            if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
                var boundingRect = this.getBoundingClientRect();
                offsetX = event.clientX - boundingRect.left;
                offsetY = event.clientY - boundingRect.top;
            }
    
            // Add information to the event object
            event.deltaX = deltaX;
            event.deltaY = deltaY;
            event.deltaFactor = lowestDelta;
            event.offsetX = offsetX;
            event.offsetY = offsetY;
            // Go ahead and set deltaMode to 0 since we converted to pixels
            // Although this is a little odd since we overwrite the deltaX/Y
            // properties with normalized deltas.
            event.deltaMode = 0;
    
            // Add event and delta to the front of the arguments
            args.unshift(event, delta, deltaX, deltaY);
    
            // Clearout lowestDelta after sometime to better
            // handle multiple device types that give different
            // a different lowestDelta
            // Ex: trackpad = 3 and mouse wheel = 120
            if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
            nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);
    
            return ($.event.dispatch || $.event.handle).apply(this, args);
        }
    
        function nullLowestDelta() {
            lowestDelta = null;
        }
    
        function shouldAdjustOldDeltas(orgEvent, absDelta) {
            // If this is an older event and the delta is divisable by 120,
            // then we are assuming that the browser is treating this as an
            // older mouse wheel event and that we should divide the deltas
            // by 40 to try and get a more usable deltaFactor.
            // Side note, this actually impacts the reported scroll distance
            // in older browsers and can cause scrolling to be slower than native.
            // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
            return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
        }
    
    }));
    
    },{}],60:[function(require,module,exports){
    //! moment.js
    //! version : 2.18.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    
    ;(function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        global.moment = factory()
    }(this, (function () { 'use strict';
    
    var hookCallback;
    
    function hooks () {
        return hookCallback.apply(null, arguments);
    }
    
    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }
    
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    
    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    
    function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
            // even if its not own property I'd still call it non-empty
            return false;
        }
        return true;
    }
    
    function isUndefined(input) {
        return input === void 0;
    }
    
    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    
    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }
    
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    
    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }
    
        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }
    
        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }
    
        return a;
    }
    
    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    
    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }
    
    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }
    
    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;
    
            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }
    
            return false;
        };
    }
    
    var some$1 = some;
    
    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));
    
            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
    
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }
    
    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }
    
        return m;
    }
    
    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];
    
    function copyConfig(to, from) {
        var i, prop, val;
    
        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }
    
        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }
    
        return to;
    }
    
    var updateInProgress = false;
    
    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    
    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }
    
    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }
    
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;
    
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }
    
        return value;
    }
    
    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }
    
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }
    
    function deprecate(msg, fn) {
        var firstTime = true;
    
        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    
    var deprecations = {};
    
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    
    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    
    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }
    
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }
    
    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }
    
    var keys;
    
    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }
    
    var keys$1 = keys;
    
    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };
    
    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    
    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };
    
    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];
    
        if (format || !formatUpper) {
            return format;
        }
    
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });
    
        return this._longDateFormat[key];
    }
    
    var defaultInvalidDate = 'Invalid date';
    
    function invalidDate () {
        return this._invalidDate;
    }
    
    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    
    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }
    
    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };
    
    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }
    
    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    
    var aliases = {};
    
    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;
    
        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }
    
        return normalizedInput;
    }
    
    var priorities = {};
    
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    
    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    
    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }
    
    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }
    
    function set$1 (mom, unit, value) {
        if (mom.isValid()) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }
    
    // MOMENTS
    
    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }
    
    
    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }
    
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    
    var formatFunctions = {};
    
    var formatTokenFunctions = {};
    
    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }
    
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }
    
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
    
        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }
    
        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }
    
    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }
    
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
    
        return formatFunctions[format](m);
    }
    
    function expandFormat(format, locale) {
        var i = 5;
    
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
    
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
    
        return format;
    }
    
    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
    
    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf
    
    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
    
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
    
    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    
    
    var regexes = {};
    
    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }
    
    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }
    
        return regexes[token](config._strict, config._locale);
    }
    
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    
    var tokens = {};
    
    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }
    
    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }
    
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;
    
    var indexOf;
    
    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }
    
    var indexOf$1 = indexOf;
    
    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }
    
    // FORMATTING
    
    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });
    
    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });
    
    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });
    
    // ALIASES
    
    addUnitAlias('month', 'M');
    
    // PRIORITY
    
    addUnitPriority('month', 8);
    
    // PARSING
    
    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    
    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    
    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });
    
    // LOCALES
    
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }
    
        if (strict) {
            if (format === 'MMM') {
                ii = indexOf$1.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf$1.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    
    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;
    
        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }
    
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
    
        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }
    
    // MOMENTS
    
    function setMonth (mom, value) {
        var dayOfMonth;
    
        if (!mom.isValid()) {
            // No op
            return mom;
        }
    
        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }
    
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }
    
    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }
    
    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }
    
    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    
    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }
    
    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
    
        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
    
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    
    // FORMATTING
    
    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });
    
    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });
    
    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
    
    // ALIASES
    
    addUnitAlias('year', 'y');
    
    // PRIORITIES
    
    addUnitPriority('year', 1);
    
    // PARSING
    
    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    
    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    
    // HELPERS
    
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    
    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }
    
    // HOOKS
    
    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    
    // MOMENTS
    
    var getSetYear = makeGetSet('FullYear', true);
    
    function getIsLeapYear () {
        return isLeapYear(this.year());
    }
    
    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date = new Date(y, m, d, h, M, s, ms);
    
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }
    
    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
    
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }
    
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
    
        return -fwdlw + fwd - 1;
    }
    
    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;
    
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
    
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;
    
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
    
        return {
            week: resWeek,
            year: resYear
        };
    }
    
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    
    // FORMATTING
    
    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
    
    // ALIASES
    
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    
    // PRIORITIES
    
    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);
    
    // PARSING
    
    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);
    
    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    
    // HELPERS
    
    // LOCALES
    
    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    
    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };
    
    function localeFirstDayOfWeek () {
        return this._week.dow;
    }
    
    function localeFirstDayOfYear () {
        return this._week.doy;
    }
    
    // MOMENTS
    
    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    
    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    
    // FORMATTING
    
    addFormatToken('d', 0, 'do', 'day');
    
    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });
    
    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });
    
    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });
    
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    
    // ALIASES
    
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    
    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);
    
    // PARSING
    
    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    
    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });
    
    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });
    
    // HELPERS
    
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }
    
        if (!isNaN(input)) {
            return parseInt(input, 10);
        }
    
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }
    
        return null;
    }
    
    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }
    
    // LOCALES
    
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        if (!m) {
            return isArray(this._weekdays) ? this._weekdays :
                this._weekdays['standalone'];
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] :
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }
    
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
    
            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }
    
        if (strict) {
            if (format === 'dddd') {
                ii = indexOf$1.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf$1.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    
    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;
    
        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }
    
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
    
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
    
            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }
    
    // MOMENTS
    
    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }
    
    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    
    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
    
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
    
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }
    
    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    
    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    
    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    
    
    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
    
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
    
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
    
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }
    
    // FORMATTING
    
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    
    function kFormat() {
        return this.hours() || 24;
    }
    
    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);
    
    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    
    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });
    
    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    
    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });
    
    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    
    meridiem('a', true);
    meridiem('A', false);
    
    // ALIASES
    
    addUnitAlias('hour', 'h');
    
    // PRIORITY
    addUnitPriority('hour', 13);
    
    // PARSING
    
    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }
    
    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    
    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    
    // LOCALES
    
    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }
    
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }
    
    
    // MOMENTS
    
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);
    
    // months
    // week
    // weekdays
    // meridiem
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
    
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
    
        week: defaultLocaleWeek,
    
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
    
        meridiemParse: defaultLocaleMeridiemParse
    };
    
    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;
    
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    
    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
    
        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }
    
    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }
    
    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }
    
            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }
    
        return globalLocale._abbr;
    }
    
    function defineLocale (name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    if (!localeFamilies[config.parentLocale]) {
                        localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                        name: name,
                        config: config
                    });
                    return null;
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
    
            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }
    
            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);
    
    
            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }
    
    function updateLocale(name, config) {
        if (config != null) {
            var locale, parentConfig = baseConfig;
            // MERGE
            if (locales[name] != null) {
                parentConfig = locales[name]._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;
    
            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }
    
    // returns locale data
    function getLocale (key) {
        var locale;
    
        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }
    
        if (!key) {
            return globalLocale;
        }
    
        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }
    
        return chooseLocale(key);
    }
    
    function listLocales() {
        return keys$1(locales);
    }
    
    function checkOverflow (m) {
        var overflow;
        var a = m._a;
    
        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;
    
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }
    
            getParsingFlags(m).overflow = overflow;
        }
    
        return m;
    }
    
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    
    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];
    
    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];
    
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    
    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;
    
        if (match) {
            getParsingFlags(config).iso = true;
    
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }
    
    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;
    
    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var string, match, dayFormat,
            dateFormat, timeFormat, tzFormat;
        var timezones = {
            ' GMT': ' +0000',
            ' EDT': ' -0400',
            ' EST': ' -0500',
            ' CDT': ' -0500',
            ' CST': ' -0600',
            ' MDT': ' -0600',
            ' MST': ' -0700',
            ' PDT': ' -0700',
            ' PST': ' -0800'
        };
        var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
        var timezone, timezoneIndex;
    
        string = config._i
            .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
            .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
            .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
        match = basicRfcRegex.exec(string);
    
        if (match) {
            dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
            dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
            timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');
    
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            if (match[1]) { // day of week given
                var momentDate = new Date(match[2]);
                var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];
    
                if (match[1].substr(0,3) !== momentDay) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return;
                }
            }
    
            switch (match[5].length) {
                case 2: // military
                    if (timezoneIndex === 0) {
                        timezone = ' +0000';
                    } else {
                        timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                        timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                            (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                    }
                    break;
                case 4: // Zone
                    timezone = timezones[match[5]];
                    break;
                default: // UT or +/-9999
                    timezone = timezones[' GMT'];
            }
            match[5] = timezone;
            config._i = match.splice(1).join('');
            tzFormat = ' ZZ';
            config._f = dayFormat + dateFormat + timeFormat + tzFormat;
            configFromStringAndFormat(config);
            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }
    
    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
    
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
    
        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
    
        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
    
        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }
    
    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );
    
    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }
    
    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    
    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;
    
        if (config._d) {
            return;
        }
    
        currentDate = currentDateArray(config);
    
        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }
    
        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }
    
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
    
        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }
    
        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }
    
        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
    
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
    
        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }
    
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
    
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
    
            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
    
            var curWeek = weekOfYear(createLocal(), dow, doy);
    
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    
            // Default to current week.
            week = defaults(w.w, curWeek.week);
    
            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    
    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};
    
    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};
    
    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
    
        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;
    
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
    
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }
    
        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }
    
        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
    
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
    
        configFromArray(config);
        checkOverflow(config);
    }
    
    
    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;
    
        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }
    
    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
    
            scoreToBeat,
            i,
            currentScore;
    
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
    
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
    
            if (!isValid(tempConfig)) {
                continue;
            }
    
            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
    
            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    
            getParsingFlags(tempConfig).score = currentScore;
    
            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
    
        extend(config, bestMoment || tempConfig);
    }
    
    function configFromObject(config) {
        if (config._d) {
            return;
        }
    
        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });
    
        configFromArray(config);
    }
    
    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }
    
        return res;
    }
    
    function prepareConfig (config) {
        var input = config._i,
            format = config._f;
    
        config._locale = config._locale || getLocale(config._l);
    
        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }
    
        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }
    
        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }
    
        if (!isValid(config)) {
            config._d = null;
        }
    
        return config;
    }
    
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }
    
    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};
    
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
    
        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
    
        return createFromConfig(c);
    }
    
    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    
    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );
    
    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );
    
    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }
    
    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);
    
        return pickBy('isBefore', args);
    }
    
    function max () {
        var args = [].slice.call(arguments, 0);
    
        return pickBy('isAfter', args);
    }
    
    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };
    
    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
    
    function isDurationValid(m) {
        for (var key in m) {
            if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }
    
        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }
    
        return true;
    }
    
    function isValid$1() {
        return this._isValid;
    }
    
    function createInvalid$1() {
        return createDuration(NaN);
    }
    
    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;
    
        this._isValid = isDurationValid(normalizedInput);
    
        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;
    
        this._data = {};
    
        this._locale = getLocale();
    
        this._bubble();
    }
    
    function isDuration (obj) {
        return obj instanceof Duration;
    }
    
    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }
    
    // FORMATTING
    
    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }
    
    offset('Z', ':');
    offset('ZZ', '');
    
    // PARSING
    
    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    
    // HELPERS
    
    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    
    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);
    
        if (matches === null) {
            return null;
        }
    
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
    
        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }
    
    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }
    
    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    
    // HOOKS
    
    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};
    
    // MOMENTS
    
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }
    
    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }
    
            this.utcOffset(input, keepLocalTime);
    
            return this;
        } else {
            return -this.utcOffset();
        }
    }
    
    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    
    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
    
            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }
    
    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }
    
    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
    
        return (this.utcOffset() - input) % 60 === 0;
    }
    
    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }
    
    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }
    
        var c = {};
    
        copyConfig(c, this);
        c = prepareConfig(c);
    
        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }
    
        return this._isDSTShifted;
    }
    
    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }
    
    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }
    
    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    
    // ASP.NET json date format regex
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
    
    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
    
    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;
    
        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
    
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
    
        ret = new Duration(duration);
    
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }
    
        return ret;
    }
    
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    
    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }
    
    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};
    
        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }
    
        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
    
        return res;
    }
    
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }
    
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
    
        return res;
    }
    
    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }
    
            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    
    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);
    
        if (!mom.isValid()) {
            // No op
            return;
        }
    
        updateOffset = updateOffset == null ? true : updateOffset;
    
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }
    
    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');
    
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }
    
    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';
    
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
    
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    
    function clone () {
        return new Moment(this);
    }
    
    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }
    
    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }
    
    function isBetween (from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }
    
    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    
    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input,units);
    }
    
    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input,units);
    }
    
    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            delta, output;
    
        if (!this.isValid()) {
            return NaN;
        }
    
        that = cloneWithOffset(input, this);
    
        if (!that.isValid()) {
            return NaN;
        }
    
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
    
        units = normalizeUnits(units);
    
        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }
    
    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;
    
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }
    
        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }
    
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    
    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    
    function toISOString() {
        if (!this.isValid()) {
            return null;
        }
        var m = this.clone().utc();
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        }
        return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
    
    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
    
        return this.format(prefix + year + datetime + suffix);
    }
    
    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    
    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    
    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    
    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    
    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;
    
        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }
    
    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );
    
    function localeData () {
        return this._locale;
    }
    
    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
        }
    
        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }
    
        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }
    
        return this;
    }
    
    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
    
        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }
    
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }
    
    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }
    
    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }
    
    function toDate () {
        return new Date(this.valueOf());
    }
    
    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }
    
    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    
    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }
    
    function isValid$2 () {
        return isValid(this);
    }
    
    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }
    
    function invalidAt () {
        return getParsingFlags(this).overflow;
    }
    
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    
    // FORMATTING
    
    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });
    
    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });
    
    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }
    
    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    
    // ALIASES
    
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    
    // PRIORITY
    
    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);
    
    
    // PARSING
    
    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);
    
    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    
    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    
    // MOMENTS
    
    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }
    
    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    
    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }
    
    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    
    // FORMATTING
    
    addFormatToken('Q', 0, 'Qo', 'quarter');
    
    // ALIASES
    
    addUnitAlias('quarter', 'Q');
    
    // PRIORITY
    
    addUnitPriority('quarter', 7);
    
    // PARSING
    
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    
    // MOMENTS
    
    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    
    // FORMATTING
    
    addFormatToken('D', ['DD', 2], 'Do', 'date');
    
    // ALIASES
    
    addUnitAlias('date', 'D');
    
    // PRIOROITY
    addUnitPriority('date', 9);
    
    // PARSING
    
    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });
    
    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });
    
    // MOMENTS
    
    var getSetDayOfMonth = makeGetSet('Date', true);
    
    // FORMATTING
    
    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
    
    // ALIASES
    
    addUnitAlias('dayOfYear', 'DDD');
    
    // PRIORITY
    addUnitPriority('dayOfYear', 4);
    
    // PARSING
    
    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });
    
    // HELPERS
    
    // MOMENTS
    
    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }
    
    // FORMATTING
    
    addFormatToken('m', ['mm', 2], 0, 'minute');
    
    // ALIASES
    
    addUnitAlias('minute', 'm');
    
    // PRIORITY
    
    addUnitPriority('minute', 14);
    
    // PARSING
    
    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);
    
    // MOMENTS
    
    var getSetMinute = makeGetSet('Minutes', false);
    
    // FORMATTING
    
    addFormatToken('s', ['ss', 2], 0, 'second');
    
    // ALIASES
    
    addUnitAlias('second', 's');
    
    // PRIORITY
    
    addUnitPriority('second', 15);
    
    // PARSING
    
    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);
    
    // MOMENTS
    
    var getSetSecond = makeGetSet('Seconds', false);
    
    // FORMATTING
    
    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });
    
    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });
    
    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });
    
    
    // ALIASES
    
    addUnitAlias('millisecond', 'ms');
    
    // PRIORITY
    
    addUnitPriority('millisecond', 16);
    
    // PARSING
    
    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);
    
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }
    
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    
    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS
    
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    
    // FORMATTING
    
    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    
    // MOMENTS
    
    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }
    
    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    
    var proto = Moment.prototype;
    
    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    
    // Year
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    
    // Week Year
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    
    // Quarter
    proto.quarter = proto.quarters = getSetQuarter;
    
    // Month
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    
    // Week
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    
    // Day
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    
    // Hour
    proto.hour = proto.hours = getSetHour;
    
    // Minute
    proto.minute = proto.minutes = getSetMinute;
    
    // Second
    proto.second = proto.seconds = getSetSecond;
    
    // Millisecond
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    
    // Offset
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    
    // Timezone
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    
    // Deprecations
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    
    function createUnix (input) {
        return createLocal(input * 1000);
    }
    
    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }
    
    function preParsePostFormat (string) {
        return string;
    }
    
    var proto$1 = Locale.prototype;
    
    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;
    
    // Month
    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    
    // Week
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    
    // Day of Week
    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;
    
    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;
    
    // Hours
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    
    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    
    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
    
        format = format || '';
    
        if (index != null) {
            return get$1(format, index, field, 'month');
        }
    
        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }
    
    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
    
            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
    
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
    
            format = format || '';
        }
    
        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;
    
        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }
    
        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }
    
    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }
    
    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }
    
    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    
    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    
    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    
    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });
    
    // Side effect imports
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    
    var mathAbs = Math.abs;
    
    function abs () {
        var data           = this._data;
    
        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);
    
        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);
    
        return this;
    }
    
    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);
    
        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;
    
        return duration._bubble();
    }
    
    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    
    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    
    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }
    
    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
    
        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }
    
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
    
        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;
    
        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;
    
        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;
    
        days += absFloor(hours / 24);
    
        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
    
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
    
        data.days   = days;
        data.months = months;
        data.years  = years;
    
        return this;
    }
    
    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }
    
    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }
    
    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;
    
        units = normalizeUnits(units);
    
        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }
    
    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }
    
    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }
    
    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');
    
    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }
    
    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    
    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');
    
    function weeks () {
        return absFloor(this.days() / 7);
    }
    
    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };
    
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    
    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));
    
        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];
    
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    
    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    
    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }
    
    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
    
        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);
    
        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }
    
        return locale.postformat(output);
    }
    
    var abs$1 = Math.abs;
    
    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
    
        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;
    
        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
    
        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;
    
    
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();
    
        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }
    
        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }
    
    var proto$2 = Duration.prototype;
    
    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;
    
    // Deprecations
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;
    
    // Side effect imports
    
    // FORMATTING
    
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    
    // PARSING
    
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });
    
    // Side effect imports
    
    
    hooks.version = '2.18.1';
    
    setHookCallback(createLocal);
    
    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;
    
    return hooks;
    
    })));
    
    },{}],61:[function(require,module,exports){
    (function (Buffer){
    /* cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /*jshint -W100 */
    var cptable = {version:"1.11.0"};
    cptable[437] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã‡Ã¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬Ã„Ã…Ã‰Ã¦Ã†Ã´Ã¶Ã²Ã»Ã¹Ã¿Ã–ÃœÂ¢Â£Â¥â‚§Æ’Ã¡Ã­Ã³ÃºÃ±Ã‘ÂªÂºÂ¿âŒÂ¬Â½Â¼Â¡Â«Â»â–‘â–’â–“â”‚â”¤â•¡â•¢â•–â••â•£â•‘â•—â•â•œâ•›â”â””â”´â”¬â”œâ”€â”¼â•žâ•Ÿâ•šâ•”â•©â•¦â• â•â•¬â•§â•¨â•¤â•¥â•™â•˜â•’â•“â•«â•ªâ”˜â”Œâ–ˆâ–„â–Œâ–â–€Î±ÃŸÎ“Ï€Î£ÏƒÂµÏ„Î¦Î˜Î©Î´âˆžÏ†Îµâˆ©â‰¡Â±â‰¥â‰¤âŒ âŒ¡Ã·â‰ˆÂ°âˆ™Â·âˆšâ¿Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[620] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã‡Ã¼Ã©Ã¢Ã¤Ã Ä…Ã§ÃªÃ«Ã¨Ã¯Ã®Ä‡Ã„Ä„Ä˜Ä™Å‚Ã´Ã¶Ä†Ã»Ã¹ÅšÃ–ÃœÂ¢ÅÂ¥Å›Æ’Å¹Å»Ã³Ã“Å„ÅƒÅºÅ¼Â¿âŒÂ¬Â½Â¼Â¡Â«Â»â–‘â–’â–“â”‚â”¤â•¡â•¢â•–â••â•£â•‘â•—â•â•œâ•›â”â””â”´â”¬â”œâ”€â”¼â•žâ•Ÿâ•šâ•”â•©â•¦â• â•â•¬â•§â•¨â•¤â•¥â•™â•˜â•’â•“â•«â•ªâ”˜â”Œâ–ˆâ–„â–Œâ–â–€Î±ÃŸÎ“Ï€Î£ÏƒÂµÏ„Î¦Î˜Î©Î´âˆžÏ†Îµâˆ©â‰¡Â±â‰¥â‰¤âŒ âŒ¡Ã·â‰ˆÂ°âˆ™Â·âˆšâ¿Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[737] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Î‘Î’Î“Î”Î•Î–Î—Î˜Î™ÎšÎ›ÎœÎÎžÎŸÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿Ï€ÏÏƒÏ‚Ï„Ï…Ï†Ï‡Ïˆâ–‘â–’â–“â”‚â”¤â•¡â•¢â•–â••â•£â•‘â•—â•â•œâ•›â”â””â”´â”¬â”œâ”€â”¼â•žâ•Ÿâ•šâ•”â•©â•¦â• â•â•¬â•§â•¨â•¤â•¥â•™â•˜â•’â•“â•«â•ªâ”˜â”Œâ–ˆâ–„â–Œâ–â–€Ï‰Î¬Î­Î®ÏŠÎ¯ÏŒÏÏ‹ÏŽÎ†ÎˆÎ‰ÎŠÎŒÎŽÎÂ±â‰¥â‰¤ÎªÎ«Ã·â‰ˆÂ°âˆ™Â·âˆšâ¿Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[850] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã‡Ã¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬Ã„Ã…Ã‰Ã¦Ã†Ã´Ã¶Ã²Ã»Ã¹Ã¿Ã–ÃœÃ¸Â£Ã˜Ã—Æ’Ã¡Ã­Ã³ÃºÃ±Ã‘ÂªÂºÂ¿Â®Â¬Â½Â¼Â¡Â«Â»â–‘â–’â–“â”‚â”¤ÃÃ‚Ã€Â©â•£â•‘â•—â•Â¢Â¥â”â””â”´â”¬â”œâ”€â”¼Ã£Ãƒâ•šâ•”â•©â•¦â• â•â•¬Â¤Ã°ÃÃŠÃ‹ÃˆÄ±ÃÃŽÃâ”˜â”Œâ–ˆâ–„Â¦ÃŒâ–€Ã“ÃŸÃ”Ã’ÃµÃ•ÂµÃ¾ÃžÃšÃ›Ã™Ã½ÃÂ¯Â´Â­Â±â€—Â¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[852] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã‡Ã¼Ã©Ã¢Ã¤Å¯Ä‡Ã§Å‚Ã«ÅÅ‘Ã®Å¹Ã„Ä†Ã‰Ä¹ÄºÃ´Ã¶Ä½Ä¾ÅšÅ›Ã–ÃœÅ¤Å¥ÅÃ—ÄÃ¡Ã­Ã³ÃºÄ„Ä…Å½Å¾Ä˜Ä™Â¬ÅºÄŒÅŸÂ«Â»â–‘â–’â–“â”‚â”¤ÃÃ‚ÄšÅžâ•£â•‘â•—â•Å»Å¼â”â””â”´â”¬â”œâ”€â”¼Ä‚Äƒâ•šâ•”â•©â•¦â• â•â•¬Â¤Ä‘ÄÄŽÃ‹ÄÅ‡ÃÃŽÄ›â”˜â”Œâ–ˆâ–„Å¢Å®â–€Ã“ÃŸÃ”ÅƒÅ„ÅˆÅ Å¡Å”ÃšÅ•Å°Ã½ÃÅ£Â´Â­ËË›Ë‡Ë˜Â§Ã·Â¸Â°Â¨Ë™Å±Å˜Å™â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[857] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã‡Ã¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ä±Ã„Ã…Ã‰Ã¦Ã†Ã´Ã¶Ã²Ã»Ã¹Ä°Ã–ÃœÃ¸Â£Ã˜ÅžÅŸÃ¡Ã­Ã³ÃºÃ±Ã‘ÄžÄŸÂ¿Â®Â¬Â½Â¼Â¡Â«Â»â–‘â–’â–“â”‚â”¤ÃÃ‚Ã€Â©â•£â•‘â•—â•Â¢Â¥â”â””â”´â”¬â”œâ”€â”¼Ã£Ãƒâ•šâ•”â•©â•¦â• â•â•¬Â¤ÂºÂªÃŠÃ‹Ãˆï¿½ÃÃŽÃâ”˜â”Œâ–ˆâ–„Â¦ÃŒâ–€Ã“ÃŸÃ”Ã’ÃµÃ•Âµï¿½Ã—ÃšÃ›Ã™Ã¬Ã¿Â¯Â´Â­Â±ï¿½Â¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[861] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã‡Ã¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨ÃÃ°ÃžÃ„Ã…Ã‰Ã¦Ã†Ã´Ã¶Ã¾Ã»ÃÃ½Ã–ÃœÃ¸Â£Ã˜â‚§Æ’Ã¡Ã­Ã³ÃºÃÃÃ“ÃšÂ¿âŒÂ¬Â½Â¼Â¡Â«Â»â–‘â–’â–“â”‚â”¤â•¡â•¢â•–â••â•£â•‘â•—â•â•œâ•›â”â””â”´â”¬â”œâ”€â”¼â•žâ•Ÿâ•šâ•”â•©â•¦â• â•â•¬â•§â•¨â•¤â•¥â•™â•˜â•’â•“â•«â•ªâ”˜â”Œâ–ˆâ–„â–Œâ–â–€Î±ÃŸÎ“Ï€Î£ÏƒÂµÏ„Î¦Î˜Î©Î´âˆžÏ†Îµâˆ©â‰¡Â±â‰¥â‰¤âŒ âŒ¡Ã·â‰ˆÂ°âˆ™Â·âˆšâ¿Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[865] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã‡Ã¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬Ã„Ã…Ã‰Ã¦Ã†Ã´Ã¶Ã²Ã»Ã¹Ã¿Ã–ÃœÃ¸Â£Ã˜â‚§Æ’Ã¡Ã­Ã³ÃºÃ±Ã‘ÂªÂºÂ¿âŒÂ¬Â½Â¼Â¡Â«Â¤â–‘â–’â–“â”‚â”¤â•¡â•¢â•–â••â•£â•‘â•—â•â•œâ•›â”â””â”´â”¬â”œâ”€â”¼â•žâ•Ÿâ•šâ•”â•©â•¦â• â•â•¬â•§â•¨â•¤â•¥â•™â•˜â•’â•“â•«â•ªâ”˜â”Œâ–ˆâ–„â–Œâ–â–€Î±ÃŸÎ“Ï€Î£ÏƒÂµÏ„Î¦Î˜Î©Î´âˆžÏ†Îµâˆ©â‰¡Â±â‰¥â‰¤âŒ âŒ¡Ã·â‰ˆÂ°âˆ™Â·âˆšâ¿Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[866] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐ‘Ð’Ð“Ð”Ð•Ð–Ð—Ð˜Ð™ÐšÐ›ÐœÐÐžÐŸÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿â–‘â–’â–“â”‚â”¤â•¡â•¢â•–â••â•£â•‘â•—â•â•œâ•›â”â””â”´â”¬â”œâ”€â”¼â•žâ•Ÿâ•šâ•”â•©â•¦â• â•â•¬â•§â•¨â•¤â•¥â•™â•˜â•’â•“â•«â•ªâ”˜â”Œâ–ˆâ–„â–Œâ–â–€Ñ€ÑÑ‚ÑƒÑ„Ñ…Ñ†Ñ‡ÑˆÑ‰ÑŠÑ‹ÑŒÑÑŽÑÐÑ‘Ð„Ñ”Ð‡Ñ—ÐŽÑžÂ°âˆ™Â·âˆšâ„–Â¤â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[874] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½ï¿½ï¿½ï¿½â€¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â€˜â€™â€œâ€â€¢â€“â€”ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â à¸à¸‚à¸ƒà¸„à¸…à¸†à¸‡à¸ˆà¸‰à¸Šà¸‹à¸Œà¸à¸Žà¸à¸à¸‘à¸’à¸“à¸”à¸•à¸–à¸—à¸˜à¸™à¸šà¸›à¸œà¸à¸žà¸Ÿà¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿½ï¿½ï¿½ï¿½à¸¿à¹€à¹à¹‚à¹ƒà¹„à¹…à¹†à¹‡à¹ˆà¹‰à¹Šà¹‹à¹Œà¹à¹Žà¹à¹à¹‘à¹’à¹“à¹”à¹•à¹–à¹—à¹˜à¹™à¹šà¹›ï¿½ï¿½ï¿½ï¿½", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[895] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄŒÃ¼Ã©ÄÃ¤ÄŽÅ¤ÄÄ›ÄšÄ¹ÃÄ¾ÇªÃ„ÃÃ‰Å¾Å½Ã´Ã¶Ã“Å¯ÃšÃ½Ã–ÃœÅ Ä½ÃÅ˜Å¥Ã¡Ã­Ã³ÃºÅˆÅ‡Å®Ã”Å¡Å™Å•Å”Â¼Â§Â«Â»â–‘â–’â–“â”‚â”¤â•¡â•¢â•–â••â•£â•‘â•—â•â•œâ•›â”â””â”´â”¬â”œâ”€â”¼â•žâ•Ÿâ•šâ•”â•©â•¦â• â•â•¬â•§â•¨â•¤â•¥â•™â•˜â•’â•“â•«â•ªâ”˜â”Œâ–ˆâ–„â–Œâ–â–€Î±ÃŸÎ“Ï€Î£ÏƒÂµÏ„Î¦Î˜Î©Î´âˆžÏ†Îµâˆ©â‰¡Â±â‰¥â‰¤âŒ âŒ¡Ã·â‰ˆÂ°âˆ™Â·âˆšâ¿Â²â– Â ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[932] = (function(){ var d = [], e = {}, D = [], j;
    D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï½¡ï½¢ï½£ï½¤ï½¥ï½¦ï½§ï½¨ï½©ï½ªï½«ï½¬ï½­ï½®ï½¯ï½°ï½±ï½²ï½³ï½´ï½µï½¶ï½·ï½¸ï½¹ï½ºï½»ï½¼ï½½ï½¾ï½¿ï¾€ï¾ï¾‚ï¾ƒï¾„ï¾…ï¾†ï¾‡ï¾ˆï¾‰ï¾Šï¾‹ï¾Œï¾ï¾Žï¾ï¾ï¾‘ï¾’ï¾“ï¾”ï¾•ï¾–ï¾—ï¾˜ï¾™ï¾šï¾›ï¾œï¾ï¾žï¾Ÿï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
    D[129] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã€€ã€ã€‚ï¼Œï¼Žãƒ»ï¼šï¼›ï¼Ÿï¼ã‚›ã‚œÂ´ï½€Â¨ï¼¾ï¿£ï¼¿ãƒ½ãƒ¾ã‚ã‚žã€ƒä»ã€…ã€†ã€‡ãƒ¼â€•â€ï¼ï¼¼ï½žâˆ¥ï½œâ€¦â€¥â€˜â€™â€œâ€ï¼ˆï¼‰ã€”ã€•ï¼»ï¼½ï½›ï½ã€ˆã€‰ã€Šã€‹ã€Œã€ã€Žã€ã€ã€‘ï¼‹ï¼Â±Ã—ï¿½Ã·ï¼â‰ ï¼œï¼žâ‰¦â‰§âˆžâˆ´â™‚â™€Â°â€²â€³â„ƒï¿¥ï¼„ï¿ ï¿¡ï¼…ï¼ƒï¼†ï¼Šï¼ Â§â˜†â˜…â—‹â—â—Žâ—‡â—†â–¡â– â–³â–²â–½â–¼â€»ã€’â†’â†â†‘â†“ã€“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âˆˆâˆ‹âŠ†âŠ‡âŠ‚âŠƒâˆªâˆ©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âˆ§âˆ¨ï¿¢â‡’â‡”âˆ€âˆƒï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âˆ âŠ¥âŒ’âˆ‚âˆ‡â‰¡â‰’â‰ªâ‰«âˆšâˆ½âˆâˆµâˆ«âˆ¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â„«â€°â™¯â™­â™ªâ€ â€¡Â¶ï¿½ï¿½ï¿½ï¿½â—¯ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
    D[130] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼ï¼‘ï¼’ï¼“ï¼”ï¼•ï¼–ï¼—ï¼˜ï¼™ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï½ï½‚ï½ƒï½„ï½…ï½†ï½‡ï½ˆï½‰ï½Šï½‹ï½Œï½ï½Žï½ï½ï½‘ï½’ï½“ï½”ï½•ï½–ï½—ï½˜ï½™ï½šï¿½ï¿½ï¿½ï¿½ãã‚ãƒã„ã…ã†ã‡ãˆã‰ãŠã‹ãŒããŽããã‘ã’ã“ã”ã•ã–ã—ã˜ã™ãšã›ãœããžãŸã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ã‚€ã‚ã‚‚ã‚ƒã‚„ã‚…ã‚†ã‚‡ã‚ˆã‚‰ã‚Šã‚‹ã‚Œã‚ã‚Žã‚ã‚ã‚‘ã‚’ã‚“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
    D[131] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã‚¡ã‚¢ã‚£ã‚¤ã‚¥ã‚¦ã‚§ã‚¨ã‚©ã‚ªã‚«ã‚¬ã‚­ã‚®ã‚¯ã‚°ã‚±ã‚²ã‚³ã‚´ã‚µã‚¶ã‚·ã‚¸ã‚¹ã‚ºã‚»ã‚¼ã‚½ã‚¾ã‚¿ãƒ€ãƒãƒ‚ãƒƒãƒ„ãƒ…ãƒ†ãƒ‡ãƒˆãƒ‰ãƒŠãƒ‹ãƒŒãƒãƒŽãƒãƒãƒ‘ãƒ’ãƒ“ãƒ”ãƒ•ãƒ–ãƒ—ãƒ˜ãƒ™ãƒšãƒ›ãƒœãƒãƒžãƒŸï¿½ãƒ ãƒ¡ãƒ¢ãƒ£ãƒ¤ãƒ¥ãƒ¦ãƒ§ãƒ¨ãƒ©ãƒªãƒ«ãƒ¬ãƒ­ãƒ®ãƒ¯ãƒ°ãƒ±ãƒ²ãƒ³ãƒ´ãƒµãƒ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î‘Î’Î“Î”Î•Î–Î—Î˜Î™ÎšÎ›ÎœÎÎžÎŸÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿Ï€ÏÏƒÏ„Ï…Ï†Ï‡ÏˆÏ‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
    D[132] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÐÐ‘Ð’Ð“Ð”Ð•ÐÐ–Ð—Ð˜Ð™ÐšÐ›ÐœÐÐžÐŸÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑ‘Ð¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½ï¿½Ð¾Ð¿Ñ€ÑÑ‚ÑƒÑ„Ñ…Ñ†Ñ‡ÑˆÑ‰ÑŠÑ‹ÑŒÑÑŽÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â”€â”‚â”Œâ”â”˜â””â”œâ”¬â”¤â”´â”¼â”â”ƒâ”â”“â”›â”—â”£â”³â”«â”»â•‹â” â”¯â”¨â”·â”¿â”â”°â”¥â”¸â•‚ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
    D[135] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â‘ â‘¡â‘¢â‘£â‘¤â‘¥â‘¦â‘§â‘¨â‘©â‘ªâ‘«â‘¬â‘­â‘®â‘¯â‘°â‘±â‘²â‘³â… â…¡â…¢â…£â…¤â…¥â…¦â…§â…¨â…©ï¿½ã‰ãŒ”ãŒ¢ããŒ˜ãŒ§ãŒƒãŒ¶ã‘ã—ãŒãŒ¦ãŒ£ãŒ«ãŠãŒ»ãŽœãŽãŽžãŽŽãŽã„ãŽ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã»ï¿½ã€ã€Ÿâ„–ãâ„¡ãŠ¤ãŠ¥ãŠ¦ãŠ§ãŠ¨ãˆ±ãˆ²ãˆ¹ã¾ã½ã¼â‰’â‰¡âˆ«âˆ®âˆ‘âˆšâŠ¥âˆ âˆŸâŠ¿âˆµâˆ©âˆªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
    D[136] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½äºœå”–å¨ƒé˜¿å“€æ„›æŒ¨å§¶é€¢è‘µèŒœç©æ‚ªæ¡æ¸¥æ—­è‘¦èŠ¦é¯µæ¢“åœ§æ–¡æ‰±å®›å§è™»é£´çµ¢ç¶¾é®Žæˆ–ç²Ÿè¢·å®‰åºµæŒ‰æš—æ¡ˆé—‡éžæä»¥ä¼Šä½ä¾å‰å›²å¤·å§”å¨å°‰æƒŸæ„æ…°æ˜“æ¤…ç‚ºç•ç•°ç§»ç¶­ç·¯èƒƒèŽè¡£è¬‚é•éºåŒ»äº•äº¥åŸŸè‚²éƒç£¯ä¸€å£±æº¢é€¸ç¨²èŒ¨èŠ‹é°¯å…å°å’½å“¡å› å§»å¼•é£²æ·«èƒ¤è”­ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
    D[137] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é™¢é™°éš éŸ»å‹å³å®‡çƒç¾½è¿‚é›¨å¯éµœçªºä¸‘ç¢“è‡¼æ¸¦å˜˜å”„æ¬è”šé°»å§¥åŽ©æµ¦ç“œé–å™‚äº‘é‹é›²èé¤Œå¡å–¶å¬°å½±æ˜ æ›³æ „æ°¸æ³³æ´©ç‘›ç›ˆç©Žé ´è‹±è¡›è© é‹­æ¶²ç–«ç›Šé§…æ‚¦è¬è¶Šé–²æ¦ŽåŽ­å††ï¿½åœ’å °å¥„å®´å»¶æ€¨æŽ©æ´æ²¿æ¼”ç‚Žç„”ç…™ç‡•çŒ¿ç¸è‰¶è‹‘è–—é é‰›é´›å¡©æ–¼æ±šç”¥å‡¹å¤®å¥¥å¾€å¿œæŠ¼æ—ºæ¨ªæ¬§æ®´çŽ‹ç¿è¥–é´¬é´Žé»„å²¡æ²–è»å„„å±‹æ†¶è‡†æ¡¶ç‰¡ä¹™ä¿ºå¸æ©æ¸©ç©éŸ³ä¸‹åŒ–ä»®ä½•ä¼½ä¾¡ä½³åŠ å¯å˜‰å¤å«å®¶å¯¡ç§‘æš‡æžœæž¶æ­Œæ²³ç«ç‚ç¦ç¦¾ç¨¼ç®‡èŠ±è‹›èŒ„è·è¯è“è¦èª²å˜©è²¨è¿¦éŽéœžèšŠä¿„å³¨æˆ‘ç‰™ç”»è‡¥èŠ½è›¾è³€é›…é¤“é§•ä»‹ä¼šè§£å›žå¡Šå£Šå»»å¿«æ€ªæ‚”æ¢æ‡æˆ’æ‹æ”¹ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
    D[138] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é­æ™¦æ¢°æµ·ç°ç•Œçš†çµµèŠ¥èŸ¹é–‹éšŽè²å‡±åŠ¾å¤–å’³å®³å´–æ…¨æ¦‚æ¶¯ç¢è“‹è¡—è©²éŽ§éª¸æµ¬é¦¨è›™åž£æŸ¿è›ŽéˆŽåŠƒåš‡å„å»“æ‹¡æ’¹æ ¼æ ¸æ®»ç²ç¢ºç©«è¦šè§’èµ«è¼ƒéƒ­é–£éš”é©å­¦å²³æ¥½é¡é¡ŽæŽ›ç¬ æ¨«ï¿½æ©¿æ¢¶é°æ½Ÿå‰²å–æ°æ‹¬æ´»æ¸‡æ»‘è‘›è¤è½„ä¸”é°¹å¶æ¤›æ¨ºéž„æ ªå…œç«ƒè’²é‡œéŽŒå™›é´¨æ ¢èŒ…è±ç²¥åˆˆè‹…ç“¦ä¹¾ä¾ƒå† å¯’åˆŠå‹˜å‹§å·»å–šå ªå§¦å®Œå®˜å¯›å¹²å¹¹æ‚£æ„Ÿæ…£æ†¾æ›æ•¢æŸ‘æ¡“æ£ºæ¬¾æ­“æ±—æ¼¢æ¾—æ½…ç’°ç”˜ç›£çœ‹ç«¿ç®¡ç°¡ç·©ç¼¶ç¿°è‚è‰¦èŽžè¦³è«Œè²«é‚„é‘‘é–“é–‘é–¢é™¥éŸ“é¤¨èˆ˜ä¸¸å«å²¸å·ŒçŽ©ç™Œçœ¼å²©ç¿«è´‹é›é ‘é¡”é¡˜ä¼ä¼Žå±å–œå™¨åŸºå¥‡å¬‰å¯„å²å¸Œå¹¾å¿Œæ®æœºæ——æ—¢æœŸæ£‹æ£„ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
    D[139] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ©Ÿå¸°æ¯…æ°—æ±½ç•¿ç¥ˆå­£ç¨€ç´€å¾½è¦è¨˜è²´èµ·è»Œè¼é£¢é¨Žé¬¼äº€å½å„€å¦“å®œæˆ¯æŠ€æ“¬æ¬ºçŠ ç–‘ç¥‡ç¾©èŸ»èª¼è­°æŽ¬èŠéž å‰åƒå–«æ¡”æ©˜è©°ç §æµé»å´å®¢è„šè™é€†ä¸˜ä¹…ä»‡ä¼‘åŠå¸å®®å¼“æ€¥æ•‘ï¿½æœ½æ±‚æ±²æ³£ç¸çƒç©¶çª®ç¬ˆç´šç³¾çµ¦æ—§ç‰›åŽ»å±…å·¨æ‹’æ‹ æŒ™æ¸ è™šè¨±è·é‹¸æ¼ç¦¦é­šäº¨äº«äº¬ä¾›ä¾ åƒ‘å…‡ç«¶å…±å‡¶å”åŒ¡å¿å«å–¬å¢ƒå³¡å¼·å½Šæ€¯ææ­æŒŸæ•™æ©‹æ³ç‹‚ç‹­çŸ¯èƒ¸è„…èˆˆè•Žéƒ·é¡éŸ¿é¥—é©šä»°å‡å°­æšæ¥­å±€æ›²æ¥µçŽ‰æ¡ç²åƒ…å‹¤å‡å·¾éŒ¦æ–¤æ¬£æ¬½ç´ç¦ç¦½ç­‹ç·ŠèŠ¹èŒè¡¿è¥Ÿè¬¹è¿‘é‡‘åŸéŠ€ä¹å€¶å¥åŒºç‹—çŽ–çŸ©è‹¦èº¯é§†é§ˆé§’å…·æ„šè™žå–°ç©ºå¶å¯“é‡éš…ä¸²æ«›é‡§å±‘å±ˆï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
    D[140] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æŽ˜çªŸæ²“é´è½¡çªªç†Šéšˆç²‚æ —ç¹°æ¡‘é¬å‹²å›è–«è¨“ç¾¤è»éƒ¡å¦è¢ˆç¥ä¿‚å‚¾åˆ‘å…„å•“åœ­çªåž‹å¥‘å½¢å¾„æµæ…¶æ…§æ†©æŽ²æºæ•¬æ™¯æ¡‚æ¸“ç•¦ç¨½ç³»çµŒç¶™ç¹‹ç½«èŒŽèŠè›è¨ˆè©£è­¦è»½é šé¶èŠ¸è¿Žé¯¨ï¿½åŠ‡æˆŸæ’ƒæ¿€éš™æ¡å‚‘æ¬ æ±ºæ½”ç©´çµè¡€è¨£æœˆä»¶å€¹å€¦å¥å…¼åˆ¸å‰£å–§åœå …å«Œå»ºæ†²æ‡¸æ‹³æ²æ¤œæ¨©ç‰½çŠ¬çŒ®ç ”ç¡¯çµ¹çœŒè‚©è¦‹è¬™è³¢è»’é£éµé™ºé¡•é¨“é¹¸å…ƒåŽŸåŽ³å¹»å¼¦æ¸›æºçŽ„ç¾çµƒèˆ·è¨€è«ºé™ä¹Žå€‹å¤å‘¼å›ºå§‘å­¤å·±åº«å¼§æˆ¸æ•…æž¯æ¹–ç‹ç³Šè¢´è‚¡èƒ¡è°è™Žèª‡è·¨éˆ·é›‡é¡§é¼“äº”äº’ä¼åˆå‘‰å¾å¨¯å¾Œå¾¡æ‚Ÿæ¢§æªŽç‘šç¢èªžèª¤è­·é†ä¹žé¯‰äº¤ä½¼ä¾¯å€™å€–å…‰å…¬åŠŸåŠ¹å‹¾åŽšå£å‘ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
    D[141] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åŽå–‰å‘åž¢å¥½å­”å­å®å·¥å·§å··å¹¸åºƒåºšåº·å¼˜æ’æ…ŒæŠ—æ‹˜æŽ§æ”»æ˜‚æ™ƒæ›´æ­æ ¡æ¢—æ§‹æ±Ÿæ´ªæµ©æ¸¯æºç”²çš‡ç¡¬ç¨¿ç³ ç´…ç´˜çµžç¶±è€•è€ƒè‚¯è‚±è…”è†èˆªè’è¡Œè¡¡è¬›è²¢è³¼éƒŠé…µé‰±ç ¿é‹¼é–¤é™ï¿½é …é¦™é«˜é´»å‰›åŠ«å·åˆå£•æ‹·æ¿ è±ªè½Ÿéº¹å…‹åˆ»å‘Šå›½ç©€é…·éµ é»’ç„æ¼‰è…°ç”‘å¿½æƒšéª¨ç‹›è¾¼æ­¤é ƒä»Šå›°å¤å¢¾å©šæ¨æ‡‡æ˜æ˜†æ ¹æ¢±æ··ç—•ç´ºè‰®é­‚äº›ä½å‰å”†åµ¯å·¦å·®æŸ»æ²™ç‘³ç ‚è©éŽ–è£Ÿååº§æŒ«å‚µå‚¬å†æœ€å“‰å¡žå¦»å®°å½©æ‰æŽ¡æ ½æ­³æ¸ˆç½é‡‡çŠ€ç •ç ¦ç¥­æ–Žç´°èœè£è¼‰éš›å‰¤åœ¨æç½ªè²¡å†´å‚é˜ªå ºæ¦Šè‚´å’²å´ŽåŸ¼ç¢•é·ºä½œå‰Šå’‹æ¾æ˜¨æœ”æŸµçª„ç­–ç´¢éŒ¯æ¡œé®­ç¬¹åŒ™å†Šåˆ·ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
    D[142] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¯Ÿæ‹¶æ’®æ“¦æœ­æ®ºè–©é›‘çšé¯–æŒéŒ†é®«çš¿æ™’ä¸‰å‚˜å‚å±±æƒ¨æ’’æ•£æ¡Ÿç‡¦çŠç”£ç®—çº‚èš•è®ƒè³›é…¸é¤æ–¬æš«æ®‹ä»•ä»”ä¼ºä½¿åˆºå¸å²å—£å››å£«å§‹å§‰å§¿å­å±å¸‚å¸«å¿—æ€æŒ‡æ”¯å­œæ–¯æ–½æ—¨æžæ­¢ï¿½æ­»æ°ç…ç¥‰ç§ç³¸ç´™ç´«è‚¢è„‚è‡³è¦–è©žè©©è©¦èªŒè«®è³‡è³œé›Œé£¼æ­¯äº‹ä¼¼ä¾å…å­—å¯ºæ…ˆæŒæ™‚æ¬¡æ»‹æ²»çˆ¾ç’½ç—”ç£ç¤ºè€Œè€³è‡ªè’”è¾žæ±é¹¿å¼è­˜é´«ç«ºè»¸å®é›«ä¸ƒå±åŸ·å¤±å«‰å®¤æ‚‰æ¹¿æ¼†ç–¾è³ªå®Ÿè”€ç¯ å²æŸ´èŠå±¡è•Šç¸žèˆŽå†™å°„æ¨èµ¦æ–œç…®ç¤¾ç´—è€…è¬è»Šé®è›‡é‚ªå€Ÿå‹ºå°ºæ“ç¼çˆµé…Œé‡ˆéŒ«è‹¥å¯‚å¼±æƒ¹ä¸»å–å®ˆæ‰‹æœ±æ®Šç‹©ç ç¨®è…«è¶£é…’é¦–å„’å—å‘ªå¯¿æŽˆæ¨¹ç¶¬éœ€å›šåŽå‘¨ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
    D[143] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å®—å°±å·žä¿®æ„æ‹¾æ´²ç§€ç§‹çµ‚ç¹ç¿’è‡­èˆŸè’è¡†è¥²è®è¹´è¼¯é€±é…‹é…¬é›†é†œä»€ä½å……åå¾“æˆŽæŸ”æ±æ¸‹ç£ç¸¦é‡éŠƒå”å¤™å®¿æ·‘ç¥ç¸®ç²›å¡¾ç†Ÿå‡ºè¡“è¿°ä¿Šå³»æ˜¥çž¬ç«£èˆœé§¿å‡†å¾ªæ—¬æ¥¯æ®‰æ·³ï¿½æº–æ½¤ç›¾ç´”å·¡éµé†‡é †å‡¦åˆæ‰€æš‘æ›™æ¸šåº¶ç·’ç½²æ›¸è–¯è—·è«¸åŠ©å™å¥³åºå¾æ•é‹¤é™¤å‚·å„Ÿå‹åŒ å‡å¬å“¨å•†å”±å˜—å¥¨å¦¾å¨¼å®µå°†å°å°‘å°šåº„åºŠå» å½°æ‰¿æŠ„æ‹›æŽŒæ·æ˜‡æ˜Œæ˜­æ™¶æ¾æ¢¢æ¨Ÿæ¨µæ²¼æ¶ˆæ¸‰æ¹˜ç„¼ç„¦ç…§ç—‡çœç¡ç¤ç¥¥ç§°ç« ç¬‘ç²§ç´¹è‚–è–è’‹è•‰è¡è£³è¨Ÿè¨¼è©”è©³è±¡è³žé†¤é‰¦é¾é˜éšœéž˜ä¸Šä¸ˆä¸žä¹—å†—å‰°åŸŽå ´å£Œå¬¢å¸¸æƒ…æ“¾æ¡æ–æµ„çŠ¶ç•³ç©£è’¸è­²é†¸éŒ å˜±åŸ´é£¾ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
    D[144] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ‹­æ¤æ®–ç‡­ç¹”è·è‰²è§¦é£Ÿè•è¾±å°»ä¼¸ä¿¡ä¾µå”‡å¨ å¯å¯©å¿ƒæ…ŽæŒ¯æ–°æ™‹æ£®æ¦›æµ¸æ·±ç”³ç–¹çœŸç¥žç§¦ç´³è‡£èŠ¯è–ªè¦ªè¨ºèº«è¾›é€²é‡éœ‡äººä»åˆƒå¡µå£¬å°‹ç”šå°½è…Žè¨Šè¿…é™£é­ç¬¥è«é ˆé…¢å›³åŽ¨ï¿½é€—å¹åž‚å¸¥æŽ¨æ°´ç‚Šç¡ç²‹ç¿ è¡°é‚é…”éŒéŒ˜éšç‘žé«„å´‡åµ©æ•°æž¢è¶¨é››æ®æ‰æ¤™è…é —é›€è£¾æ¾„æ‘ºå¯¸ä¸–ç€¬ç•æ˜¯å‡„åˆ¶å‹¢å§“å¾æ€§æˆæ”¿æ•´æ˜Ÿæ™´æ£²æ –æ­£æ¸…ç‰²ç”Ÿç››ç²¾è–å£°è£½è¥¿èª èª“è«‹é€é†’é’é™æ–‰ç¨Žè„†éš»å¸­æƒœæˆšæ–¥æ˜”æžçŸ³ç©ç±ç¸¾è„Šè²¬èµ¤è·¡è¹Ÿç¢©åˆ‡æ‹™æŽ¥æ‘‚æŠ˜è¨­çªƒç¯€èª¬é›ªçµ¶èˆŒè‰ä»™å…ˆåƒå å®£å°‚å°–å·æˆ¦æ‰‡æ’°æ “æ ´æ³‰æµ…æ´—æŸ“æ½œç…Žç…½æ—‹ç©¿ç®­ç·šï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
    D[145] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¹Šç¾¨è…ºèˆ›èˆ¹è–¦è©®è³Žè·µé¸é·éŠ­éŠ‘é–ƒé®®å‰å–„æ¼¸ç„¶å…¨ç¦…ç¹•è†³ç³Žå™Œå¡‘å²¨æŽªæ›¾æ›½æ¥šç‹™ç–ç–Žç¤Žç¥–ç§Ÿç²—ç´ çµ„è˜‡è¨´é˜»é¡é¼ åƒ§å‰µåŒå¢å€‰å–ªå£®å¥çˆ½å®‹å±¤åŒæƒ£æƒ³æœæŽƒæŒ¿æŽ»ï¿½æ“æ—©æ›¹å·£æ§æ§½æ¼•ç‡¥äº‰ç—©ç›¸çª“ç³Ÿç·ç¶œè¡è‰è˜è‘¬è’¼è—»è£…èµ°é€é­éŽ—éœœé¨’åƒå¢—æ†Žè‡“è”µè´ˆé€ ä¿ƒå´å‰‡å³æ¯æ‰æŸæ¸¬è¶³é€Ÿä¿—å±žè³Šæ—ç¶šå’è¢–å…¶æƒå­˜å­«å°Šææ‘éœä»–å¤šå¤ªæ±°è©‘å”¾å •å¦¥æƒ°æ‰“æŸèˆµæ¥•é™€é§„é¨¨ä½“å †å¯¾è€å²±å¸¯å¾…æ€ æ…‹æˆ´æ›¿æ³°æ»žèƒŽè…¿è‹”è¢‹è²¸é€€é€®éšŠé»›é¯›ä»£å°å¤§ç¬¬é†é¡Œé·¹æ»ç€§å“å•„å®…æ‰˜æŠžæ‹“æ²¢æ¿¯ç¢è¨—é¸æ¿è«¾èŒ¸å‡§è›¸åªï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
    D[146] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å©ä½†é”è¾°å¥ªè„±å·½ç«ªè¾¿æ£šè°·ç‹¸é±ˆæ¨½èª°ä¸¹å˜å˜†å¦æ‹…æŽ¢æ—¦æ­Žæ·¡æ¹›ç‚­çŸ­ç«¯ç®ªç¶»è€½èƒ†è›‹èª•é›å›£å£‡å¼¾æ–­æš–æª€æ®µç”·è«‡å€¤çŸ¥åœ°å¼›æ¥æ™ºæ± ç—´ç¨šç½®è‡´èœ˜é…é¦³ç¯‰ç•œç«¹ç­‘è“„ï¿½é€ç§©çª’èŒ¶å«¡ç€ä¸­ä»²å®™å¿ æŠ½æ˜¼æŸ±æ³¨è™«è¡·è¨»é…Žé‹³é§æ¨—ç€¦çŒªè‹§è‘—è²¯ä¸å…†å‡‹å–‹å¯µå¸–å¸³åºå¼”å¼µå½«å¾´æ‡²æŒ‘æš¢æœæ½®ç‰’ç”ºçœºè´è„¹è…¸è¶èª¿è«œè¶…è·³éŠšé•·é ‚é³¥å‹…æ—ç›´æœ•æ²ˆçè³ƒéŽ®é™³æ´¥å¢œæ¤Žæ§Œè¿½éŽšç—›é€šå¡šæ ‚æŽ´æ§»ä½ƒæ¼¬æŸ˜è¾»è”¦ç¶´é”æ¤¿æ½°åªå£·å¬¬ç´¬çˆªåŠé‡£é¶´äº­ä½Žåœåµå‰ƒè²žå‘ˆå ¤å®šå¸åº•åº­å»·å¼Ÿæ‚ŒæŠµæŒºææ¢¯æ±€ç¢‡ç¦Žç¨‹ç· è‰‡è¨‚è«¦è¹„é€“ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
    D[147] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é‚¸é„­é‡˜é¼Žæ³¥æ‘˜æ“¢æ•µæ»´çš„ç¬›é©é‘æººå“²å¾¹æ’¤è½è¿­é‰„å…¸å¡«å¤©å±•åº—æ·»çºç”œè²¼è»¢é¡›ç‚¹ä¼æ®¿æ¾±ç”°é›»å…Žåå µå¡—å¦¬å± å¾’æ–—æœæ¸¡ç™»èŸè³­é€”éƒ½éç ¥ç ºåŠªåº¦åœŸå¥´æ€’å€’å…šå†¬ï¿½å‡åˆ€å”å¡”å¡˜å¥—å®•å³¶å¶‹æ‚¼æŠ•æ­æ±æ¡ƒæ¢¼æ£Ÿç›—æ·˜æ¹¯æ¶›ç¯ç‡ˆå½“ç—˜ç¥·ç­‰ç­”ç­’ç³–çµ±åˆ°è‘£è•©è—¤è¨Žè¬„è±†è¸é€ƒé€é™é™¶é ­é¨°é—˜åƒå‹•åŒå ‚å°Žæ†§æ’žæ´žçž³ç«¥èƒ´è„é“éŠ…å³ é´‡åŒ¿å¾—å¾³æ¶œç‰¹ç£ç¦¿ç¯¤æ¯’ç‹¬èª­æ ƒæ©¡å‡¸çªæ¤´å±Šé³¶è‹«å¯…é…‰ç€žå™¸å±¯æƒ‡æ•¦æ²Œè±šéé “å‘‘æ›‡éˆå¥ˆé‚£å†…ä¹å‡ªè–™è¬Žç˜æºé‹æ¥¢é¦´ç¸„ç•·å—æ¥ è»Ÿé›£æ±äºŒå°¼å¼è¿©åŒ‚è³‘è‚‰è™¹å»¿æ—¥ä¹³å…¥ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
    D[148] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¦‚å°¿éŸ®ä»»å¦Šå¿èªæ¿¡ç¦°ç¥¢å¯§è‘±çŒ«ç†±å¹´å¿µæ»æ’šç‡ƒç²˜ä¹ƒå»¼ä¹‹åŸœåš¢æ‚©æ¿ƒç´èƒ½è„³è†¿è¾²è¦—èš¤å·´æŠŠæ’­è¦‡æ·æ³¢æ´¾ç¶ç ´å©†ç½µèŠ­é¦¬ä¿³å»ƒæ‹æŽ’æ•—æ¯ç›ƒç‰ŒèƒŒè‚ºè¼©é…å€åŸ¹åª’æ¢…ï¿½æ¥³ç…¤ç‹½è²·å£²è³ é™ªé€™è¿ç§¤çŸ§è©ä¼¯å‰¥åšæ‹æŸæ³Šç™½ç®”ç²•èˆ¶è–„è¿«æ›æ¼ çˆ†ç¸›èŽ«é§éº¦å‡½ç®±ç¡²ç®¸è‚‡ç­ˆæ«¨å¹¡è‚Œç•‘ç• å…«é‰¢æºŒç™ºé†—é«ªä¼ç½°æŠœç­é–¥é³©å™ºå¡™è›¤éš¼ä¼´åˆ¤åŠåå›å¸†æ¬æ–‘æ¿æ°¾æ±Žç‰ˆçŠ¯ç­ç•”ç¹èˆ¬è—©è²©ç¯„é‡†ç…©é ’é£¯æŒ½æ™©ç•ªç›¤ç£è•ƒè›®åŒªå‘å¦å¦ƒåº‡å½¼æ‚²æ‰‰æ‰¹æŠ«æ–æ¯”æ³Œç–²çš®ç¢‘ç§˜ç·‹ç½·è‚¥è¢«èª¹è²»é¿éžé£›æ¨‹ç°¸å‚™å°¾å¾®æž‡æ¯˜çµçœ‰ç¾Žï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
    D[149] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼»æŸŠç¨—åŒ¹ç–‹é«­å½¦è†è±è‚˜å¼¼å¿…ç•¢ç­†é€¼æ¡§å§«åª›ç´ç™¾è¬¬ä¿µå½ªæ¨™æ°·æ¼‚ç“¢ç¥¨è¡¨è©•è±¹å»Ÿæç—…ç§’è‹—éŒ¨é‹²è’œè›­é°­å“å½¬æ–Œæµœç€•è²§è³“é »æ•ç“¶ä¸ä»˜åŸ å¤«å©¦å¯Œå†¨å¸ƒåºœæ€–æ‰¶æ•·ï¿½æ–§æ™®æµ®çˆ¶ç¬¦è…è†šèŠ™è­œè² è³¦èµ´é˜œé™„ä¾®æ’«æ­¦èˆžè‘¡è•ªéƒ¨å°æ¥“é¢¨è‘ºè•—ä¼å‰¯å¾©å¹…æœç¦è…¹è¤‡è¦†æ·µå¼—æ‰•æ²¸ä»ç‰©é®’åˆ†å»å™´å¢³æ†¤æ‰®ç„šå¥®ç²‰ç³žç´›é›°æ–‡èžä¸™ä½µå…µå¡€å¹£å¹³å¼ŠæŸ„ä¸¦è”½é–‰é™›ç±³é åƒ»å£ç™–ç¢§åˆ¥çž¥è”‘ç®†åå¤‰ç‰‡ç¯‡ç·¨è¾ºè¿”éä¾¿å‹‰å¨©å¼éž­ä¿èˆ—é‹ªåœƒæ•æ­©ç”«è£œè¼”ç©‚å‹Ÿå¢“æ…•æˆŠæš®æ¯ç°¿è©å€£ä¿¸åŒ…å‘†å ±å¥‰å®å³°å³¯å´©åº–æŠ±æ§æ”¾æ–¹æœ‹ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
    D[150] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ³•æ³¡çƒ¹ç ²ç¸«èƒžèŠ³èŒè“¬èœ‚è¤’è¨ªè±Šé‚¦é‹’é£½é³³éµ¬ä¹äº¡å‚å‰–åŠå¦¨å¸½å¿˜å¿™æˆ¿æš´æœ›æŸæ£’å†’ç´¡è‚ªè†¨è¬€è²Œè²¿é‰¾é˜²å é ¬åŒ—åƒ•åœå¢¨æ’²æœ´ç‰§ç¦ç©†é‡¦å‹ƒæ²¡æ®†å €å¹Œå¥”æœ¬ç¿»å‡¡ç›†ï¿½æ‘©ç£¨é­”éº»åŸ‹å¦¹æ˜§æžšæ¯Žå“©æ§™å¹•è†œæž•é®ªæŸ¾é±’æ¡äº¦ä¿£åˆæŠ¹æœ«æ²«è¿„ä¾­ç¹­éº¿ä¸‡æ…¢æº€æ¼«è”“å‘³æœªé­…å·³ç®•å²¬å¯†èœœæ¹Šè“‘ç¨”è„ˆå¦™ç²æ°‘çœ å‹™å¤¢ç„¡ç‰ŸçŸ›éœ§éµ¡æ¤‹å©¿å¨˜å†¥åå‘½æ˜Žç›Ÿè¿·éŠ˜é³´å§ªç‰æ»…å…æ£‰ç¶¿ç·¬é¢éººæ‘¸æ¨¡èŒ‚å¦„å­Ÿæ¯›çŒ›ç›²ç¶²è€—è’™å„²æœ¨é»™ç›®æ¢å‹¿é¤…å°¤æˆ»ç±¾è²°å•æ‚¶ç´‹é–€åŒä¹Ÿå†¶å¤œçˆºè€¶é‡Žå¼¥çŸ¢åŽ„å½¹ç´„è–¬è¨³èºé–æŸ³è–®é‘“æ„‰æ„ˆæ²¹ç™’ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
    D[151] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è«­è¼¸å”¯ä½‘å„ªå‹‡å‹å®¥å¹½æ‚ æ†‚æ–æœ‰æŸšæ¹§æ¶ŒçŒ¶çŒ·ç”±ç¥è£•èª˜éŠé‚‘éƒµé›„èžå¤•äºˆä½™ä¸Žèª‰è¼¿é å‚­å¹¼å¦–å®¹åº¸æšæºæ“æ›œæ¥Šæ§˜æ´‹æº¶ç†”ç”¨çª¯ç¾Šè€€è‘‰è“‰è¦è¬¡è¸Šé¥é™½é¤Šæ…¾æŠ‘æ¬²ï¿½æ²ƒæµ´ç¿Œç¿¼æ·€ç¾…èžºè£¸æ¥èŽ±é ¼é›·æ´›çµ¡è½é…ªä¹±åµåµæ¬„æ¿«è—è˜­è¦§åˆ©åå±¥æŽæ¢¨ç†ç’ƒç—¢è£è£¡é‡Œé›¢é™¸å¾‹çŽ‡ç«‹è‘ŽæŽ ç•¥åŠ‰æµæºœç‰ç•™ç¡«ç²’éš†ç«œé¾ä¾¶æ…®æ—…è™œäº†äº®åƒšä¸¡å‡Œå¯®æ–™æ¢æ¶¼çŒŸç™‚çž­ç¨œç³§è‰¯è«’é¼é‡é™µé ˜åŠ›ç·‘å€«åŽ˜æž—æ·‹ç‡ç³è‡¨è¼ªéš£é±—éºŸç‘ å¡æ¶™ç´¯é¡žä»¤ä¼¶ä¾‹å†·åŠ±å¶ºæ€œçŽ²ç¤¼è‹“éˆ´éš·é›¶éœŠéº—é½¢æš¦æ­´åˆ—åŠ£çƒˆè£‚å»‰æ‹æ†æ¼£ç…‰ç°¾ç·´è¯ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
    D[152] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è“®é€£éŒ¬å‘‚é­¯æ«“ç‚‰è³‚è·¯éœ²åŠ´å©å»Šå¼„æœ—æ¥¼æ¦”æµªæ¼ç‰¢ç‹¼ç¯­è€è¾è‹éƒŽå…­éº“ç¦„è‚‹éŒ²è«–å€­å’Œè©±æ­ªè³„è„‡æƒ‘æž é·²äº™äº˜é°è©«è—è•¨æ¤€æ¹¾ç¢—è…•ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¼Œä¸ä¸•ä¸ªä¸±ä¸¶ä¸¼ä¸¿ä¹‚ä¹–ä¹˜äº‚äº…è±«äºŠèˆ’å¼äºŽäºžäºŸäº äº¢äº°äº³äº¶ä»Žä»ä»„ä»†ä»‚ä»—ä»žä»­ä»Ÿä»·ä¼‰ä½šä¼°ä½›ä½ä½—ä½‡ä½¶ä¾ˆä¾ä¾˜ä½»ä½©ä½°ä¾‘ä½¯ä¾†ä¾–å„˜ä¿”ä¿Ÿä¿Žä¿˜ä¿›ä¿‘ä¿šä¿ä¿¤ä¿¥å€šå€¨å€”å€ªå€¥å€…ä¼œä¿¶å€¡å€©å€¬ä¿¾ä¿¯å€‘å€†åƒå‡æœƒå•ååˆåšå–å¬å¸å‚€å‚šå‚…å‚´å‚²ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
    D[153] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åƒ‰åƒŠå‚³åƒ‚åƒ–åƒžåƒ¥åƒ­åƒ£åƒ®åƒ¹åƒµå„‰å„å„‚å„–å„•å„”å„šå„¡å„ºå„·å„¼å„»å„¿å…€å…’å…Œå…”å…¢ç«¸å…©å…ªå…®å†€å†‚å›˜å†Œå†‰å†å†‘å†“å†•å†–å†¤å†¦å†¢å†©å†ªå†«å†³å†±å†²å†°å†µå†½å‡…å‡‰å‡›å‡ è™•å‡©å‡­ï¿½å‡°å‡µå‡¾åˆ„åˆ‹åˆ”åˆŽåˆ§åˆªåˆ®åˆ³åˆ¹å‰å‰„å‰‹å‰Œå‰žå‰”å‰ªå‰´å‰©å‰³å‰¿å‰½åŠåŠ”åŠ’å‰±åŠˆåŠ‘è¾¨è¾§åŠ¬åŠ­åŠ¼åŠµå‹å‹å‹—å‹žå‹£å‹¦é£­å‹ å‹³å‹µå‹¸å‹¹åŒ†åŒˆç”¸åŒåŒåŒåŒ•åŒšåŒ£åŒ¯åŒ±åŒ³åŒ¸å€å†å…ä¸—å‰åå‡–åžå©å®å¤˜å»å·åŽ‚åŽ–åŽ åŽ¦åŽ¥åŽ®åŽ°åŽ¶åƒç°’é›™åŸæ›¼ç‡®å®å¨å­åºåå½å‘€å¬å­å¼å®å¶å©åå‘Žå’å‘µå’Žå‘Ÿå‘±å‘·å‘°å’’å‘»å’€å‘¶å’„å’å’†å“‡å’¢å’¸å’¥å’¬å“„å“ˆå’¨ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
    D[154] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å’«å“‚å’¤å’¾å’¼å“˜å“¥å“¦å”å””å“½å“®å“­å“ºå“¢å”¹å•€å•£å•Œå”®å•œå•…å•–å•—å”¸å”³å•å–™å–€å’¯å–Šå–Ÿå•»å•¾å–˜å–žå–®å•¼å–ƒå–©å–‡å–¨å—šå—…å—Ÿå—„å—œå—¤å—”å˜”å—·å˜–å—¾å—½å˜›å—¹å™Žå™ç‡Ÿå˜´å˜¶å˜²å˜¸ï¿½å™«å™¤å˜¯å™¬å™ªåš†åš€åšŠåš åš”åšåš¥åš®åš¶åš´å›‚åš¼å›å›ƒå›€å›ˆå›Žå›‘å›“å›—å›®å›¹åœ€å›¿åœ„åœ‰åœˆåœ‹åœåœ“åœ˜åœ–å—‡åœœåœ¦åœ·åœ¸åŽåœ»å€åå©åŸ€åžˆå¡å¿åž‰åž“åž åž³åž¤åžªåž°åŸƒåŸ†åŸ”åŸ’åŸ“å ŠåŸ–åŸ£å ‹å ™å å¡²å ¡å¡¢å¡‹å¡°æ¯€å¡’å ½å¡¹å¢…å¢¹å¢Ÿå¢«å¢ºå£žå¢»å¢¸å¢®å£…å£“å£‘å£—å£™å£˜å£¥å£œå£¤å£Ÿå£¯å£ºå£¹å£»å£¼å£½å¤‚å¤Šå¤å¤›æ¢¦å¤¥å¤¬å¤­å¤²å¤¸å¤¾ç«’å¥•å¥å¥Žå¥šå¥˜å¥¢å¥ å¥§å¥¬å¥©ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
    D[155] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¥¸å¦å¦ä½žä¾«å¦£å¦²å§†å§¨å§œå¦å§™å§šå¨¥å¨Ÿå¨‘å¨œå¨‰å¨šå©€å©¬å©‰å¨µå¨¶å©¢å©ªåªšåª¼åª¾å«‹å«‚åª½å«£å«—å«¦å«©å«–å«ºå«»å¬Œå¬‹å¬–å¬²å«å¬ªå¬¶å¬¾å­ƒå­…å­€å­‘å­•å­šå­›å­¥å­©å­°å­³å­µå­¸æ–ˆå­ºå®€ï¿½å®ƒå®¦å®¸å¯ƒå¯‡å¯‰å¯”å¯å¯¤å¯¦å¯¢å¯žå¯¥å¯«å¯°å¯¶å¯³å°…å°‡å°ˆå°å°“å° å°¢å°¨å°¸å°¹å±å±†å±Žå±“å±å±å­±å±¬å±®ä¹¢å±¶å±¹å²Œå²‘å²”å¦›å²«å²»å²¶å²¼å²·å³…å²¾å³‡å³™å³©å³½å³ºå³­å¶Œå³ªå´‹å´•å´—åµœå´Ÿå´›å´‘å´”å´¢å´šå´™å´˜åµŒåµ’åµŽåµ‹åµ¬åµ³åµ¶å¶‡å¶„å¶‚å¶¢å¶å¶¬å¶®å¶½å¶å¶·å¶¼å·‰å·å·“å·’å·–å·›å·«å·²å·µå¸‹å¸šå¸™å¸‘å¸›å¸¶å¸·å¹„å¹ƒå¹€å¹Žå¹—å¹”å¹Ÿå¹¢å¹¤å¹‡å¹µå¹¶å¹ºéº¼å¹¿åº å»å»‚å»ˆå»å»ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
    D[156] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å»–å»£å»å»šå»›å»¢å»¡å»¨å»©å»¬å»±å»³å»°å»´å»¸å»¾å¼ƒå¼‰å½å½œå¼‹å¼‘å¼–å¼©å¼­å¼¸å½å½ˆå½Œå½Žå¼¯å½‘å½–å½—å½™å½¡å½­å½³å½·å¾ƒå¾‚å½¿å¾Šå¾ˆå¾‘å¾‡å¾žå¾™å¾˜å¾ å¾¨å¾­å¾¼å¿–å¿»å¿¤å¿¸å¿±å¿æ‚³å¿¿æ€¡æ ï¿½æ€™æ€æ€©æ€Žæ€±æ€›æ€•æ€«æ€¦æ€æ€ºæšææªæ·æŸæŠæ†ææ£æƒæ¤æ‚æ¬æ«æ™æ‚æ‚æƒ§æ‚ƒæ‚šæ‚„æ‚›æ‚–æ‚—æ‚’æ‚§æ‚‹æƒ¡æ‚¸æƒ æƒ“æ‚´å¿°æ‚½æƒ†æ‚µæƒ˜æ…æ„•æ„†æƒ¶æƒ·æ„€æƒ´æƒºæ„ƒæ„¡æƒ»æƒ±æ„æ„Žæ…‡æ„¾æ„¨æ„§æ…Šæ„¿æ„¼æ„¬æ„´æ„½æ…‚æ…„æ…³æ…·æ…˜æ…™æ…šæ…«æ…´æ…¯æ…¥æ…±æ…Ÿæ…æ…“æ…µæ†™æ†–æ†‡æ†¬æ†”æ†šæ†Šæ†‘æ†«æ†®æ‡Œæ‡Šæ‡‰æ‡·æ‡ˆæ‡ƒæ‡†æ†ºæ‡‹ç½¹æ‡æ‡¦æ‡£æ‡¶æ‡ºæ‡´æ‡¿æ‡½æ‡¼æ‡¾æˆ€æˆˆæˆ‰æˆæˆŒæˆ”æˆ›ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
    D[157] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æˆžæˆ¡æˆªæˆ®æˆ°æˆ²æˆ³æ‰æ‰Žæ‰žæ‰£æ‰›æ‰ æ‰¨æ‰¼æŠ‚æŠ‰æ‰¾æŠ’æŠ“æŠ–æ‹”æŠƒæŠ”æ‹—æ‹‘æŠ»æ‹æ‹¿æ‹†æ“”æ‹ˆæ‹œæ‹Œæ‹Šæ‹‚æ‹‡æŠ›æ‹‰æŒŒæ‹®æ‹±æŒ§æŒ‚æŒˆæ‹¯æ‹µææŒ¾ææœææŽ–æŽŽæŽ€æŽ«æ¶æŽ£æŽæŽ‰æŽŸæŽµæ«ï¿½æ©æŽ¾æ©æ€æ†æ£æ‰æ’æ¶æ„æ–æ´æ†æ“æ¦æ¶æ”æ—æ¨ææ‘§æ‘¯æ‘¶æ‘Žæ”ªæ’•æ’“æ’¥æ’©æ’ˆæ’¼æ“šæ“’æ“…æ“‡æ’»æ“˜æ“‚æ“±æ“§èˆ‰æ“ æ“¡æŠ¬æ“£æ“¯æ”¬æ“¶æ“´æ“²æ“ºæ”€æ“½æ”˜æ”œæ”…æ”¤æ”£æ”«æ”´æ”µæ”·æ”¶æ”¸ç•‹æ•ˆæ•–æ••æ•æ•˜æ•žæ•æ•²æ•¸æ–‚æ–ƒè®Šæ–›æ–Ÿæ–«æ–·æ—ƒæ—†æ—æ—„æ—Œæ—’æ—›æ—™æ— æ—¡æ—±æ²æ˜Šæ˜ƒæ—»æ³æ˜µæ˜¶æ˜´æ˜œæ™æ™„æ™‰æ™æ™žæ™æ™¤æ™§æ™¨æ™Ÿæ™¢æ™°æšƒæšˆæšŽæš‰æš„æš˜æšæ›æš¹æ›‰æš¾æš¼ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
    D[158] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ›„æš¸æ›–æ›šæ› æ˜¿æ›¦æ›©æ›°æ›µæ›·æœæœ–æœžæœ¦æœ§éœ¸æœ®æœ¿æœ¶ææœ¸æœ·æ†æžæ æ™æ£æ¤æž‰æ°æž©æ¼æªæžŒæž‹æž¦æž¡æž…æž·æŸ¯æž´æŸ¬æž³æŸ©æž¸æŸ¤æŸžæŸæŸ¢æŸ®æž¹æŸŽæŸ†æŸ§æªœæ žæ¡†æ ©æ¡€æ¡æ ²æ¡Žï¿½æ¢³æ «æ¡™æ¡£æ¡·æ¡¿æ¢Ÿæ¢æ¢­æ¢”æ¢æ¢›æ¢ƒæª®æ¢¹æ¡´æ¢µæ¢ æ¢ºæ¤æ¢æ¡¾æ¤æ£Šæ¤ˆæ£˜æ¤¢æ¤¦æ£¡æ¤Œæ£æ£”æ£§æ£•æ¤¶æ¤’æ¤„æ£—æ££æ¤¥æ£¹æ£ æ£¯æ¤¨æ¤ªæ¤šæ¤£æ¤¡æ£†æ¥¹æ¥·æ¥œæ¥¸æ¥«æ¥”æ¥¾æ¥®æ¤¹æ¥´æ¤½æ¥™æ¤°æ¥¡æ¥žæ¥æ¦æ¥ªæ¦²æ¦®æ§æ¦¿æ§æ§“æ¦¾æ§Žå¯¨æ§Šæ§æ¦»æ§ƒæ¦§æ¨®æ¦‘æ¦ æ¦œæ¦•æ¦´æ§žæ§¨æ¨‚æ¨›æ§¿æ¬Šæ§¹æ§²æ§§æ¨…æ¦±æ¨žæ§­æ¨”æ§«æ¨Šæ¨’æ«æ¨£æ¨“æ©„æ¨Œæ©²æ¨¶æ©¸æ©‡æ©¢æ©™æ©¦æ©ˆæ¨¸æ¨¢æªæªæª æª„æª¢æª£ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
    D[159] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æª—è˜—æª»æ«ƒæ«‚æª¸æª³æª¬æ«žæ«‘æ«Ÿæªªæ«šæ«ªæ«»æ¬…è˜–æ«ºæ¬’æ¬–é¬±æ¬Ÿæ¬¸æ¬·ç›œæ¬¹é£®æ­‡æ­ƒæ­‰æ­æ­™æ­”æ­›æ­Ÿæ­¡æ­¸æ­¹æ­¿æ®€æ®„æ®ƒæ®æ®˜æ®•æ®žæ®¤æ®ªæ®«æ®¯æ®²æ®±æ®³æ®·æ®¼æ¯†æ¯‹æ¯“æ¯Ÿæ¯¬æ¯«æ¯³æ¯¯ï¿½éº¾æ°ˆæ°“æ°”æ°›æ°¤æ°£æ±žæ±•æ±¢æ±ªæ²‚æ²æ²šæ²æ²›æ±¾æ±¨æ±³æ²’æ²æ³„æ³±æ³“æ²½æ³—æ³…æ³æ²®æ²±æ²¾æ²ºæ³›æ³¯æ³™æ³ªæ´Ÿè¡æ´¶æ´«æ´½æ´¸æ´™æ´µæ´³æ´’æ´Œæµ£æ¶“æµ¤æµšæµ¹æµ™æ¶Žæ¶•æ¿¤æ¶…æ·¹æ¸•æ¸Šæ¶µæ·‡æ·¦æ¶¸æ·†æ·¬æ·žæ·Œæ·¨æ·’æ·…æ·ºæ·™æ·¤æ·•æ·ªæ·®æ¸­æ¹®æ¸®æ¸™æ¹²æ¹Ÿæ¸¾æ¸£æ¹«æ¸«æ¹¶æ¹æ¸Ÿæ¹ƒæ¸ºæ¹Žæ¸¤æ»¿æ¸æ¸¸æº‚æºªæº˜æ»‰æº·æ»“æº½æº¯æ»„æº²æ»”æ»•æºæº¥æ»‚æºŸæ½æ¼‘çŒæ»¬æ»¸æ»¾æ¼¿æ»²æ¼±æ»¯æ¼²æ»Œï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
    D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¼¾æ¼“æ»·æ¾†æ½ºæ½¸æ¾æ¾€æ½¯æ½›æ¿³æ½­æ¾‚æ½¼æ½˜æ¾Žæ¾‘æ¿‚æ½¦æ¾³æ¾£æ¾¡æ¾¤æ¾¹æ¿†æ¾ªæ¿Ÿæ¿•æ¿¬æ¿”æ¿˜æ¿±æ¿®æ¿›ç€‰ç€‹æ¿ºç€‘ç€ç€æ¿¾ç€›ç€šæ½´ç€ç€˜ç€Ÿç€°ç€¾ç€²ç‘ç£ç‚™ç‚’ç‚¯çƒ±ç‚¬ç‚¸ç‚³ç‚®çƒŸçƒ‹çƒï¿½çƒ™ç„‰çƒ½ç„œç„™ç…¥ç…•ç†ˆç…¦ç…¢ç…Œç…–ç…¬ç†ç‡»ç†„ç†•ç†¨ç†¬ç‡—ç†¹ç†¾ç‡’ç‡‰ç‡”ç‡Žç‡ ç‡¬ç‡§ç‡µç‡¼ç‡¹ç‡¿çˆçˆçˆ›çˆ¨çˆ­çˆ¬çˆ°çˆ²çˆ»çˆ¼çˆ¿ç‰€ç‰†ç‰‹ç‰˜ç‰´ç‰¾çŠ‚çŠçŠ‡çŠ’çŠ–çŠ¢çŠ§çŠ¹çŠ²ç‹ƒç‹†ç‹„ç‹Žç‹’ç‹¢ç‹ ç‹¡ç‹¹ç‹·å€çŒ—çŒŠçŒœçŒ–çŒçŒ´çŒ¯çŒ©çŒ¥çŒ¾çŽçé»˜ç—çªç¨ç°ç¸çµç»çºçˆçŽ³çŽçŽ»ç€ç¥ç®çžç’¢ç…ç‘¯ç¥ç¸ç²çºç‘•ç¿ç‘Ÿç‘™ç‘ç‘œç‘©ç‘°ç‘£ç‘ªç‘¶ç‘¾ç’‹ç’žç’§ç“Šç“ç“”ç±ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
    D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç“ ç“£ç“§ç“©ç“®ç“²ç“°ç“±ç“¸ç“·ç”„ç”ƒç”…ç”Œç”Žç”ç”•ç”“ç”žç”¦ç”¬ç”¼ç•„ç•ç•Šç•‰ç•›ç•†ç•šç•©ç•¤ç•§ç•«ç•­ç•¸ç•¶ç–†ç–‡ç•´ç–Šç–‰ç–‚ç–”ç–šç–ç–¥ç–£ç—‚ç–³ç—ƒç–µç–½ç–¸ç–¼ç–±ç—ç—Šç—’ç—™ç—£ç—žç—¾ç—¿ï¿½ç—¼ç˜ç—°ç—ºç—²ç—³ç˜‹ç˜ç˜‰ç˜Ÿç˜§ç˜ ç˜¡ç˜¢ç˜¤ç˜´ç˜°ç˜»ç™‡ç™ˆç™†ç™œç™˜ç™¡ç™¢ç™¨ç™©ç™ªç™§ç™¬ç™°ç™²ç™¶ç™¸ç™¼çš€çšƒçšˆçš‹çšŽçš–çš“çš™çššçš°çš´çš¸çš¹çšºç›‚ç›ç›–ç›’ç›žç›¡ç›¥ç›§ç›ªè˜¯ç›»çœˆçœ‡çœ„çœ©çœ¤çœžçœ¥çœ¦çœ›çœ·çœ¸ç‡çšç¨ç«ç›ç¥ç¿ç¾ç¹çžŽçž‹çž‘çž çžžçž°çž¶çž¹çž¿çž¼çž½çž»çŸ‡çŸçŸ—çŸšçŸœçŸ£çŸ®çŸ¼ç Œç ’ç¤¦ç  ç¤ªç¡…ç¢Žç¡´ç¢†ç¡¼ç¢šç¢Œç¢£ç¢µç¢ªç¢¯ç£‘ç£†ç£‹ç£”ç¢¾ç¢¼ç£…ç£Šç£¬ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
    D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç£§ç£šç£½ç£´ç¤‡ç¤’ç¤‘ç¤™ç¤¬ç¤«ç¥€ç¥ ç¥—ç¥Ÿç¥šç¥•ç¥“ç¥ºç¥¿ç¦Šç¦ç¦§é½‹ç¦ªç¦®ç¦³ç¦¹ç¦ºç§‰ç§•ç§§ç§¬ç§¡ç§£ç¨ˆç¨ç¨˜ç¨™ç¨ ç¨Ÿç¦€ç¨±ç¨»ç¨¾ç¨·ç©ƒç©—ç©‰ç©¡ç©¢ç©©é¾ç©°ç©¹ç©½çªˆçª—çª•çª˜çª–çª©ç«ˆçª°ï¿½çª¶ç«…ç«„çª¿é‚ƒç«‡ç«Šç«ç«ç«•ç«“ç«™ç«šç«ç«¡ç«¢ç«¦ç«­ç«°ç¬‚ç¬ç¬Šç¬†ç¬³ç¬˜ç¬™ç¬žç¬µç¬¨ç¬¶ç­ç­ºç¬„ç­ç¬‹ç­Œç­…ç­µç­¥ç­´ç­§ç­°ç­±ç­¬ç­®ç®ç®˜ç®Ÿç®ç®œç®šç®‹ç®’ç®ç­ç®™ç¯‹ç¯ç¯Œç¯ç®´ç¯†ç¯ç¯©ç°‘ç°”ç¯¦ç¯¥ç± ç°€ç°‡ç°“ç¯³ç¯·ç°—ç°ç¯¶ç°£ç°§ç°ªç°Ÿç°·ç°«ç°½ç±Œç±ƒç±”ç±ç±€ç±ç±˜ç±Ÿç±¤ç±–ç±¥ç±¬ç±µç²ƒç²ç²¤ç²­ç²¢ç²«ç²¡ç²¨ç²³ç²²ç²±ç²®ç²¹ç²½ç³€ç³…ç³‚ç³˜ç³’ç³œç³¢é¬»ç³¯ç³²ç³´ç³¶ç³ºç´†ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
    D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç´‚ç´œç´•ç´Šçµ…çµ‹ç´®ç´²ç´¿ç´µçµ†çµ³çµ–çµŽçµ²çµ¨çµ®çµçµ£ç¶“ç¶‰çµ›ç¶çµ½ç¶›ç¶ºç¶®ç¶£ç¶µç·‡ç¶½ç¶«ç¸½ç¶¢ç¶¯ç·œç¶¸ç¶Ÿç¶°ç·˜ç·ç·¤ç·žç·»ç·²ç·¡ç¸…ç¸Šç¸£ç¸¡ç¸’ç¸±ç¸Ÿç¸‰ç¸‹ç¸¢ç¹†ç¹¦ç¸»ç¸µç¸¹ç¹ƒç¸·ï¿½ç¸²ç¸ºç¹§ç¹ç¹–ç¹žç¹™ç¹šç¹¹ç¹ªç¹©ç¹¼ç¹»çºƒç·•ç¹½è¾®ç¹¿çºˆçº‰çºŒçº’çºçº“çº”çº–çºŽçº›çºœç¼¸ç¼ºç½…ç½Œç½ç½Žç½ç½‘ç½•ç½”ç½˜ç½Ÿç½ ç½¨ç½©ç½§ç½¸ç¾‚ç¾†ç¾ƒç¾ˆç¾‡ç¾Œç¾”ç¾žç¾ç¾šç¾£ç¾¯ç¾²ç¾¹ç¾®ç¾¶ç¾¸è­±ç¿…ç¿†ç¿Šç¿•ç¿”ç¿¡ç¿¦ç¿©ç¿³ç¿¹é£œè€†è€„è€‹è€’è€˜è€™è€œè€¡è€¨è€¿è€»èŠè†è’è˜èšèŸè¢è¨è³è²è°è¶è¹è½è¿è‚„è‚†è‚…è‚›è‚“è‚šè‚­å†è‚¬èƒ›èƒ¥èƒ™èƒèƒ„èƒšèƒ–è„‰èƒ¯èƒ±è„›è„©è„£è„¯è…‹ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
    D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éš‹è…†è„¾è…“è…‘èƒ¼è…±è…®è…¥è…¦è…´è†ƒè†ˆè†Šè†€è†‚è† è†•è†¤è†£è…Ÿè†“è†©è†°è†µè†¾è†¸è†½è‡€è‡‚è†ºè‡‰è‡è‡‘è‡™è‡˜è‡ˆè‡šè‡Ÿè‡ è‡§è‡ºè‡»è‡¾èˆèˆ‚èˆ…èˆ‡èˆŠèˆèˆèˆ–èˆ©èˆ«èˆ¸èˆ³è‰€è‰™è‰˜è‰è‰šè‰Ÿè‰¤ï¿½è‰¢è‰¨è‰ªè‰«èˆ®è‰±è‰·è‰¸è‰¾èŠèŠ’èŠ«èŠŸèŠ»èŠ¬è‹¡è‹£è‹Ÿè‹’è‹´è‹³è‹ºèŽ“èŒƒè‹»è‹¹è‹žèŒ†è‹œèŒ‰è‹™èŒµèŒ´èŒ–èŒ²èŒ±è€èŒ¹èè…èŒ¯èŒ«èŒ—èŒ˜èŽ…èŽšèŽªèŽŸèŽ¢èŽ–èŒ£èŽŽèŽ‡èŽŠè¼èŽµè³èµèŽ èŽ‰èŽ¨è´è“è«èŽè½èƒè˜è‹èè·è‡è è²èè¢è èŽ½è¸è”†è»è‘­èªè¼è•šè’„è‘·è‘«è’­è‘®è’‚è‘©è‘†è¬è‘¯è‘¹èµè“Šè‘¢è’¹è’¿è’Ÿè“™è“è’»è“šè“è“è“†è“–è’¡è”¡è“¿è“´è”—è”˜è”¬è”Ÿè”•è””è“¼è•€è•£è•˜è•ˆï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
    D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è•è˜‚è•‹è••è–€è–¤è–ˆè–‘è–Šè–¨è•­è–”è–›è—ªè–‡è–œè•·è•¾è–è—‰è–ºè—è–¹è—è—•è—è—¥è—œè—¹è˜Šè˜“è˜‹è—¾è—ºè˜†è˜¢è˜šè˜°è˜¿è™ä¹•è™”è™Ÿè™§è™±èš“èš£èš©èšªèš‹èšŒèš¶èš¯è›„è›†èš°è›‰è £èš«è›”è›žè›©è›¬ï¿½è›Ÿè››è›¯èœ’èœ†èœˆèœ€èœƒè›»èœ‘èœ‰èœè›¹èœŠèœ´èœ¿èœ·èœ»èœ¥èœ©èœšè èŸè¸èŒèŽè´è—è¨è®è™è“è£èªè …èž¢èžŸèž‚èž¯èŸ‹èž½èŸ€èŸé›–èž«èŸ„èž³èŸ‡èŸ†èž»èŸ¯èŸ²èŸ è è èŸ¾èŸ¶èŸ·è ŽèŸ’è ‘è –è •è ¢è ¡è ±è ¶è ¹è §è »è¡„è¡‚è¡’è¡™è¡žè¡¢è¡«è¢è¡¾è¢žè¡µè¡½è¢µè¡²è¢‚è¢—è¢’è¢®è¢™è¢¢è¢è¢¤è¢°è¢¿è¢±è£ƒè£„è£”è£˜è£™è£è£¹è¤‚è£¼è£´è£¨è£²è¤„è¤Œè¤Šè¤“è¥ƒè¤žè¤¥è¤ªè¤«è¥è¥„è¤»è¤¶è¤¸è¥Œè¤è¥ è¥žï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
    D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¥¦è¥¤è¥­è¥ªè¥¯è¥´è¥·è¥¾è¦ƒè¦ˆè¦Šè¦“è¦˜è¦¡è¦©è¦¦è¦¬è¦¯è¦²è¦ºè¦½è¦¿è§€è§šè§œè§è§§è§´è§¸è¨ƒè¨–è¨è¨Œè¨›è¨è¨¥è¨¶è©è©›è©’è©†è©ˆè©¼è©­è©¬è©¢èª…èª‚èª„èª¨èª¡èª‘èª¥èª¦èªšèª£è«„è«è«‚è«šè««è«³è«§ï¿½è«¤è«±è¬”è« è«¢è«·è«žè«›è¬Œè¬‡è¬šè«¡è¬–è¬è¬—è¬ è¬³éž«è¬¦è¬«è¬¾è¬¨è­è­Œè­è­Žè­‰è­–è­›è­šè­«è­Ÿè­¬è­¯è­´è­½è®€è®Œè®Žè®’è®“è®–è®™è®šè°ºè±è°¿è±ˆè±Œè±Žè±è±•è±¢è±¬è±¸è±ºè²‚è²‰è²…è²Šè²è²Žè²”è±¼è²˜æˆè²­è²ªè²½è²²è²³è²®è²¶è³ˆè³è³¤è³£è³šè³½è³ºè³»è´„è´…è´Šè´‡è´è´è´é½Žè´“è³è´”è´–èµ§èµ­èµ±èµ³è¶è¶™è·‚è¶¾è¶ºè·è·šè·–è·Œè·›è·‹è·ªè·«è·Ÿè·£è·¼è¸ˆè¸‰è·¿è¸è¸žè¸è¸Ÿè¹‚è¸µè¸°è¸´è¹Šï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
    D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹‡è¹‰è¹Œè¹è¹ˆè¹™è¹¤è¹ è¸ªè¹£è¹•è¹¶è¹²è¹¼èºèº‡èº…èº„èº‹èºŠèº“èº‘èº”èº™èºªèº¡èº¬èº°è»†èº±èº¾è»…è»ˆè»‹è»›è»£è»¼è»»è»«è»¾è¼Šè¼…è¼•è¼’è¼™è¼“è¼œè¼Ÿè¼›è¼Œè¼¦è¼³è¼»è¼¹è½…è½‚è¼¾è½Œè½‰è½†è½Žè½—è½œï¿½è½¢è½£è½¤è¾œè¾Ÿè¾£è¾­è¾¯è¾·è¿šè¿¥è¿¢è¿ªè¿¯é‚‡è¿´é€…è¿¹è¿ºé€‘é€•é€¡é€é€žé€–é€‹é€§é€¶é€µé€¹è¿¸ééé‘é’é€Žé‰é€¾é–é˜éžé¨é¯é¶éš¨é²é‚‚é½é‚é‚€é‚Šé‚‰é‚é‚¨é‚¯é‚±é‚µéƒ¢éƒ¤æ‰ˆéƒ›é„‚é„’é„™é„²é„°é…Šé…–é…˜é…£é…¥é…©é…³é…²é†‹é†‰é†‚é†¢é†«é†¯é†ªé†µé†´é†ºé‡€é‡é‡‰é‡‹é‡é‡–é‡Ÿé‡¡é‡›é‡¼é‡µé‡¶éˆžé‡¿éˆ”éˆ¬éˆ•éˆ‘é‰žé‰—é‰…é‰‰é‰¤é‰ˆéŠ•éˆ¿é‰‹é‰éŠœéŠ–éŠ“éŠ›é‰šé‹éŠ¹éŠ·é‹©éŒé‹ºé„éŒ®ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
    D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŒ™éŒ¢éŒšéŒ£éŒºéŒµéŒ»éœé é¼é®é–éŽ°éŽ¬éŽ­éŽ”éŽ¹é–é—é¨é¥é˜éƒéééˆé¤éšé”é“éƒé‡éé¶é«éµé¡éºé‘é‘’é‘„é‘›é‘ é‘¢é‘žé‘ªéˆ©é‘°é‘µé‘·é‘½é‘šé‘¼é‘¾é’é‘¿é–‚é–‡é–Šé–”é––é–˜é–™ï¿½é– é–¨é–§é–­é–¼é–»é–¹é–¾é—Šæ¿¶é—ƒé—é—Œé—•é—”é—–é—œé—¡é—¥é—¢é˜¡é˜¨é˜®é˜¯é™‚é™Œé™é™‹é™·é™œé™žé™é™Ÿé™¦é™²é™¬éšéš˜éš•éš—éšªéš§éš±éš²éš°éš´éš¶éš¸éš¹é›Žé›‹é›‰é›è¥é›œéœé›•é›¹éœ„éœ†éœˆéœ“éœŽéœ‘éœéœ–éœ™éœ¤éœªéœ°éœ¹éœ½éœ¾é„é†éˆé‚é‰éœé é¤é¦é¨å‹’é«é±é¹éž…é¼éžéºéž†éž‹éžéžéžœéž¨éž¦éž£éž³éž´éŸƒéŸ†éŸˆéŸ‹éŸœéŸ­é½éŸ²ç«ŸéŸ¶éŸµé é Œé ¸é ¤é ¡é ·é ½é¡†é¡é¡‹é¡«é¡¯é¡°ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
    D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡±é¡´é¡³é¢ªé¢¯é¢±é¢¶é£„é£ƒé£†é£©é£«é¤ƒé¤‰é¤’é¤”é¤˜é¤¡é¤é¤žé¤¤é¤ é¤¬é¤®é¤½é¤¾é¥‚é¥‰é¥…é¥é¥‹é¥‘é¥’é¥Œé¥•é¦—é¦˜é¦¥é¦­é¦®é¦¼é§Ÿé§›é§é§˜é§‘é§­é§®é§±é§²é§»é§¸é¨é¨é¨…é§¢é¨™é¨«é¨·é©…é©‚é©€é©ƒï¿½é¨¾é©•é©é©›é©—é©Ÿé©¢é©¥é©¤é©©é©«é©ªéª­éª°éª¼é«€é«é«‘é«“é«”é«žé«Ÿé«¢é«£é«¦é«¯é««é«®é«´é«±é«·é«»é¬†é¬˜é¬šé¬Ÿé¬¢é¬£é¬¥é¬§é¬¨é¬©é¬ªé¬®é¬¯é¬²é­„é­ƒé­é­é­Žé­‘é­˜é­´é®“é®ƒé®‘é®–é®—é®Ÿé® é®¨é®´é¯€é¯Šé®¹é¯†é¯é¯‘é¯’é¯£é¯¢é¯¤é¯”é¯¡é°ºé¯²é¯±é¯°é°•é°”é°‰é°“é°Œé°†é°ˆé°’é°Šé°„é°®é°›é°¥é°¤é°¡é°°é±‡é°²é±†é°¾é±šé± é±§é±¶é±¸é³§é³¬é³°é´‰é´ˆé³«é´ƒé´†é´ªé´¦é¶¯é´£é´Ÿéµ„é´•é´’éµé´¿é´¾éµ†éµˆï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
    D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éµéµžéµ¤éµ‘éµéµ™éµ²é¶‰é¶‡é¶«éµ¯éµºé¶šé¶¤é¶©é¶²é·„é·é¶»é¶¸é¶ºé·†é·é·‚é·™é·“é·¸é·¦é·­é·¯é·½é¸šé¸›é¸žé¹µé¹¹é¹½éºéºˆéº‹éºŒéº’éº•éº‘éºéº¥éº©éº¸éºªéº­é¡é»Œé»Žé»é»é»”é»œé»žé»é» é»¥é»¨é»¯ï¿½é»´é»¶é»·é»¹é»»é»¼é»½é¼‡é¼ˆçš·é¼•é¼¡é¼¬é¼¾é½Šé½’é½”é½£é½Ÿé½ é½¡é½¦é½§é½¬é½ªé½·é½²é½¶é¾•é¾œé¾ å ¯æ§‡é™ç‘¤å‡œç†™ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
    D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çºŠè¤œéˆéŠˆè“œä¿‰ç‚»æ˜±æ£ˆé‹¹æ›»å½…ä¸¨ä»¡ä»¼ä¼€ä¼ƒä¼¹ä½–ä¾’ä¾Šä¾šä¾”ä¿å€å€¢ä¿¿å€žå†å°å‚å‚”åƒ´åƒ˜å…Šå…¤å†å†¾å‡¬åˆ•åŠœåŠ¦å‹€å‹›åŒ€åŒ‡åŒ¤å²åŽ“åŽ²åï¨Žå’œå’Šå’©å“¿å–†å™å¥åž¬åŸˆåŸ‡ï¨ï¿½ï¨å¢žå¢²å¤‹å¥“å¥›å¥å¥£å¦¤å¦ºå­–å¯€ç”¯å¯˜å¯¬å°žå²¦å²ºå³µå´§åµ“ï¨‘åµ‚åµ­å¶¸å¶¹å·å¼¡å¼´å½§å¾·å¿žææ‚…æ‚Šæƒžæƒ•æ„ æƒ²æ„‘æ„·æ„°æ†˜æˆ“æŠ¦æµæ‘ æ’æ“Žæ•Žæ˜€æ˜•æ˜»æ˜‰æ˜®æ˜žæ˜¤æ™¥æ™—æ™™ï¨’æ™³æš™æš æš²æš¿æ›ºæœŽï¤©æ¦æž»æ¡’æŸ€æ æ¡„æ£ï¨“æ¥¨ï¨”æ¦˜æ§¢æ¨°æ©«æ©†æ©³æ©¾æ«¢æ«¤æ¯–æ°¿æ±œæ²†æ±¯æ³šæ´„æ¶‡æµ¯æ¶–æ¶¬æ·æ·¸æ·²æ·¼æ¸¹æ¹œæ¸§æ¸¼æº¿æ¾ˆæ¾µæ¿µç€…ç€‡ç€¨ç‚…ç‚«ç„ç„„ç…œç…†ç…‡ï¨•ç‡ç‡¾çŠ±ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
    D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çŠ¾çŒ¤ï¨–ç·çŽ½ç‰ç–ç£ç’ç‡çµç¦çªç©ç®ç‘¢ç’‰ç’Ÿç”ç•¯çš‚çšœçšžçš›çš¦ï¨—ç†åŠ¯ç ¡ç¡Žç¡¤ç¡ºç¤°ï¨˜ï¨™ï¨šç¦”ï¨›ç¦›ç«‘ç«§ï¨œç««ç®žï¨çµˆçµœç¶·ç¶ ç·–ç¹’ç½‡ç¾¡ï¨žèŒè¢è¿è‡è¶è‘ˆè’´è•“è•™ï¿½è•«ï¨Ÿè–°ï¨ ï¨¡è ‡è£µè¨’è¨·è©¹èª§èª¾è«Ÿï¨¢è«¶è­“è­¿è³°è³´è´’èµ¶ï¨£è»ï¨¤ï¨¥é§éƒžï¨¦é„•é„§é‡šé‡—é‡žé‡­é‡®é‡¤é‡¥éˆ†éˆéˆŠéˆºé‰€éˆ¼é‰Žé‰™é‰‘éˆ¹é‰§éŠ§é‰·é‰¸é‹§é‹—é‹™é‹ï¨§é‹•é‹ é‹“éŒ¥éŒ¡é‹»ï¨¨éŒžé‹¿éŒéŒ‚é°é—éŽ¤é†éžé¸é±é‘…é‘ˆé–’ï§œï¨©éšéš¯éœ³éœ»éƒééé‘é•é¡—é¡¥ï¨ªï¨«é¤§ï¨¬é¦žé©Žé«™é«œé­µé­²é®é®±é®»é°€éµ°éµ«ï¨­é¸™é»‘ï¿½ï¿½â…°â…±â…²â…³â…´â…µâ…¶â…·â…¸â…¹ï¿¢ï¿¤ï¼‡ï¼‚ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
    D[250] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â…°â…±â…²â…³â…´â…µâ…¶â…·â…¸â…¹â… â…¡â…¢â…£â…¤â…¥â…¦â…§â…¨â…©ï¿¢ï¿¤ï¼‡ï¼‚ãˆ±â„–â„¡âˆµçºŠè¤œéˆéŠˆè“œä¿‰ç‚»æ˜±æ£ˆé‹¹æ›»å½…ä¸¨ä»¡ä»¼ä¼€ä¼ƒä¼¹ä½–ä¾’ä¾Šä¾šä¾”ä¿å€å€¢ä¿¿å€žå†å°å‚å‚”åƒ´åƒ˜å…Šï¿½å…¤å†å†¾å‡¬åˆ•åŠœåŠ¦å‹€å‹›åŒ€åŒ‡åŒ¤å²åŽ“åŽ²åï¨Žå’œå’Šå’©å“¿å–†å™å¥åž¬åŸˆåŸ‡ï¨ï¨å¢žå¢²å¤‹å¥“å¥›å¥å¥£å¦¤å¦ºå­–å¯€ç”¯å¯˜å¯¬å°žå²¦å²ºå³µå´§åµ“ï¨‘åµ‚åµ­å¶¸å¶¹å·å¼¡å¼´å½§å¾·å¿žææ‚…æ‚Šæƒžæƒ•æ„ æƒ²æ„‘æ„·æ„°æ†˜æˆ“æŠ¦æµæ‘ æ’æ“Žæ•Žæ˜€æ˜•æ˜»æ˜‰æ˜®æ˜žæ˜¤æ™¥æ™—æ™™ï¨’æ™³æš™æš æš²æš¿æ›ºæœŽï¤©æ¦æž»æ¡’æŸ€æ æ¡„æ£ï¨“æ¥¨ï¨”æ¦˜æ§¢æ¨°æ©«æ©†æ©³æ©¾æ«¢æ«¤æ¯–æ°¿æ±œæ²†æ±¯æ³šæ´„æ¶‡æµ¯ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
    D[251] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¶–æ¶¬æ·æ·¸æ·²æ·¼æ¸¹æ¹œæ¸§æ¸¼æº¿æ¾ˆæ¾µæ¿µç€…ç€‡ç€¨ç‚…ç‚«ç„ç„„ç…œç…†ç…‡ï¨•ç‡ç‡¾çŠ±çŠ¾çŒ¤ï¨–ç·çŽ½ç‰ç–ç£ç’ç‡çµç¦çªç©ç®ç‘¢ç’‰ç’Ÿç”ç•¯çš‚çšœçšžçš›çš¦ï¨—ç†åŠ¯ç ¡ç¡Žç¡¤ç¡ºç¤°ï¨˜ï¨™ï¿½ï¨šç¦”ï¨›ç¦›ç«‘ç«§ï¨œç««ç®žï¨çµˆçµœç¶·ç¶ ç·–ç¹’ç½‡ç¾¡ï¨žèŒè¢è¿è‡è¶è‘ˆè’´è•“è•™è•«ï¨Ÿè–°ï¨ ï¨¡è ‡è£µè¨’è¨·è©¹èª§èª¾è«Ÿï¨¢è«¶è­“è­¿è³°è³´è´’èµ¶ï¨£è»ï¨¤ï¨¥é§éƒžï¨¦é„•é„§é‡šé‡—é‡žé‡­é‡®é‡¤é‡¥éˆ†éˆéˆŠéˆºé‰€éˆ¼é‰Žé‰™é‰‘éˆ¹é‰§éŠ§é‰·é‰¸é‹§é‹—é‹™é‹ï¨§é‹•é‹ é‹“éŒ¥éŒ¡é‹»ï¨¨éŒžé‹¿éŒéŒ‚é°é—éŽ¤é†éžé¸é±é‘…é‘ˆé–’ï§œï¨©éšéš¯éœ³éœ»éƒééé‘é•é¡—é¡¥ï¨ªï¨«é¤§ï¨¬é¦žé©Žé«™ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
    D[252] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é«œé­µé­²é®é®±é®»é°€éµ°éµ«ï¨­é¸™é»‘ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
    return {"enc": e, "dec": d }; })();
    cptable[936] = (function(){ var d = [], e = {}, D = [], j;
    D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
    D[129] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸‚ä¸„ä¸…ä¸†ä¸ä¸’ä¸—ä¸Ÿä¸ ä¸¡ä¸£ä¸¦ä¸©ä¸®ä¸¯ä¸±ä¸³ä¸µä¸·ä¸¼ä¹€ä¹ä¹‚ä¹„ä¹†ä¹Šä¹‘ä¹•ä¹—ä¹šä¹›ä¹¢ä¹£ä¹¤ä¹¥ä¹§ä¹¨ä¹ªä¹«ä¹¬ä¹­ä¹®ä¹¯ä¹²ä¹´ä¹µä¹¶ä¹·ä¹¸ä¹¹ä¹ºä¹»ä¹¼ä¹½ä¹¿äº€äºäº‚äºƒäº„äº…äº‡äºŠï¿½äºäº–äº—äº™äºœäºäºžäº£äºªäº¯äº°äº±äº´äº¶äº·äº¸äº¹äº¼äº½äº¾ä»ˆä»Œä»ä»ä»’ä»šä»›ä»œä» ä»¢ä»¦ä»§ä»©ä»­ä»®ä»¯ä»±ä»´ä»¸ä»¹ä»ºä»¼ä»¾ä¼€ä¼‚ä¼ƒä¼„ä¼…ä¼†ä¼‡ä¼ˆä¼‹ä¼Œä¼’ä¼“ä¼”ä¼•ä¼–ä¼œä¼ä¼¡ä¼£ä¼¨ä¼©ä¼¬ä¼­ä¼®ä¼±ä¼³ä¼µä¼·ä¼¹ä¼»ä¼¾ä¼¿ä½€ä½ä½‚ä½„ä½…ä½‡ä½ˆä½‰ä½Šä½‹ä½Œä½’ä½”ä½–ä½¡ä½¢ä½¦ä½¨ä½ªä½«ä½­ä½®ä½±ä½²ä½µä½·ä½¸ä½¹ä½ºä½½ä¾€ä¾ä¾‚ä¾…ä¾†ä¾‡ä¾Šä¾Œä¾Žä¾ä¾’ä¾“ä¾•ä¾–ä¾˜ä¾™ä¾šä¾œä¾žä¾Ÿä¾¡ä¾¢ï¿½".split("");
    for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
    D[130] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¾¤ä¾«ä¾­ä¾°ä¾±ä¾²ä¾³ä¾´ä¾¶ä¾·ä¾¸ä¾¹ä¾ºä¾»ä¾¼ä¾½ä¾¾ä¿€ä¿ä¿‚ä¿†ä¿‡ä¿ˆä¿‰ä¿‹ä¿Œä¿ä¿’ä¿“ä¿”ä¿•ä¿–ä¿™ä¿›ä¿ ä¿¢ä¿¤ä¿¥ä¿§ä¿«ä¿¬ä¿°ä¿²ä¿´ä¿µä¿¶ä¿·ä¿¹ä¿»ä¿¼ä¿½ä¿¿å€€å€å€‚å€ƒå€„å€…å€†å€‡å€ˆå€‰å€Šï¿½å€‹å€Žå€å€‘å€“å€•å€–å€—å€›å€å€žå€ å€¢å€£å€¤å€§å€«å€¯å€°å€±å€²å€³å€´å€µå€¶å€·å€¸å€¹å€»å€½å€¿å€åå‚å„å…å†å‰åŠå‹ååå‘å’å“å”å–å—å˜å™å›ååžåŸå å¡å¢å£å¤å¦å§å¨å©åªå«å­å®å¯å°å±å²å³å´åµå¸å¹åºå¼å½å‚å‚‚å‚ƒå‚„å‚†å‚‡å‚‰å‚Šå‚‹å‚Œå‚Žå‚å‚å‚‘å‚’å‚“å‚”å‚•å‚–å‚—å‚˜å‚™å‚šå‚›å‚œå‚å‚žå‚Ÿå‚ å‚¡å‚¢å‚¤å‚¦å‚ªå‚«å‚­å‚®å‚¯å‚°å‚±å‚³å‚´å‚µå‚¶å‚·å‚¸å‚¹å‚¼ï¿½".split("");
    for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
    D[131] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å‚½å‚¾å‚¿åƒ€åƒåƒ‚åƒƒåƒ„åƒ…åƒ†åƒ‡åƒˆåƒ‰åƒŠåƒ‹åƒŒåƒåƒŽåƒåƒ‘åƒ’åƒ“åƒ”åƒ•åƒ—åƒ˜åƒ™åƒ›åƒœåƒåƒžåƒŸåƒ åƒ¡åƒ¢åƒ£åƒ¤åƒ¥åƒ¨åƒ©åƒªåƒ«åƒ¯åƒ°åƒ±åƒ²åƒ´åƒ¶åƒ·åƒ¸åƒ¹åƒºåƒ¼åƒ½åƒ¾åƒ¿å„€å„å„‚å„ƒå„„å„…å„ˆï¿½å„‰å„Šå„Œå„å„Žå„å„å„‘å„“å„”å„•å„–å„—å„˜å„™å„šå„›å„œå„å„žå„Ÿå„ å„¢å„£å„¤å„¥å„¦å„§å„¨å„©å„ªå„«å„¬å„­å„®å„¯å„°å„±å„²å„³å„´å„µå„¶å„·å„¸å„¹å„ºå„»å„¼å„½å„¾å…‚å…‡å…Šå…Œå…Žå…å…å…’å…“å…—å…˜å…™å…›å…å…žå…Ÿå… å…¡å…£å…¤å…¦å…§å…©å…ªå…¯å…²å…ºå…¾å…¿å†ƒå†„å††å†‡å†Šå†‹å†Žå†å†å†‘å†“å†”å†˜å†šå†å†žå†Ÿå†¡å†£å†¦å†§å†¨å†©å†ªå†­å†®å†´å†¸å†¹å†ºå†¾å†¿å‡å‡‚å‡ƒå‡…å‡ˆå‡Šå‡å‡Žå‡å‡’å‡“å‡”å‡•å‡–å‡—ï¿½".split("");
    for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
    D[132] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å‡˜å‡™å‡šå‡œå‡žå‡Ÿå‡¢å‡£å‡¥å‡¦å‡§å‡¨å‡©å‡ªå‡¬å‡®å‡±å‡²å‡´å‡·å‡¾åˆ„åˆ…åˆ‰åˆ‹åˆŒåˆåˆåˆ“åˆ”åˆ•åˆœåˆžåˆŸåˆ¡åˆ¢åˆ£åˆ¥åˆ¦åˆ§åˆªåˆ¬åˆ¯åˆ±åˆ²åˆ´åˆµåˆ¼åˆ¾å‰„å‰…å‰†å‰‡å‰ˆå‰‰å‰‹å‰Žå‰å‰’å‰“å‰•å‰—å‰˜ï¿½å‰™å‰šå‰›å‰å‰Ÿå‰ å‰¢å‰£å‰¤å‰¦å‰¨å‰«å‰¬å‰­å‰®å‰°å‰±å‰³å‰´å‰µå‰¶å‰·å‰¸å‰¹å‰ºå‰»å‰¼å‰¾åŠ€åŠƒåŠ„åŠ…åŠ†åŠ‡åŠ‰åŠŠåŠ‹åŠŒåŠåŠŽåŠåŠ‘åŠ’åŠ”åŠ•åŠ–åŠ—åŠ˜åŠ™åŠšåŠœåŠ¤åŠ¥åŠ¦åŠ§åŠ®åŠ¯åŠ°åŠ´åŠµåŠ¶åŠ·åŠ¸åŠ¹åŠºåŠ»åŠ¼åŠ½å‹€å‹å‹‚å‹„å‹…å‹†å‹ˆå‹Šå‹Œå‹å‹Žå‹å‹‘å‹“å‹”å‹•å‹—å‹™å‹šå‹›å‹œå‹å‹žå‹ å‹¡å‹¢å‹£å‹¥å‹¦å‹§å‹¨å‹©å‹ªå‹«å‹¬å‹­å‹®å‹¯å‹±å‹²å‹³å‹´å‹µå‹¶å‹·å‹¸å‹»å‹¼å‹½åŒåŒ‚åŒƒåŒ„åŒ‡åŒ‰åŒŠåŒ‹åŒŒåŒŽï¿½".split("");
    for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
    D[133] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åŒ‘åŒ’åŒ“åŒ”åŒ˜åŒ›åŒœåŒžåŒŸåŒ¢åŒ¤åŒ¥åŒ§åŒ¨åŒ©åŒ«åŒ¬åŒ­åŒ¯åŒ°åŒ±åŒ²åŒ³åŒ´åŒµåŒ¶åŒ·åŒ¸åŒ¼åŒ½å€å‚å„å†å‹åŒååå”å˜å™å›åå¥å¨åªå¬å­å²å¶å¹å»å¼å½å¾åŽ€åŽåŽƒåŽ‡åŽˆåŽŠåŽŽåŽï¿½åŽåŽ‘åŽ’åŽ“åŽ”åŽ–åŽ—åŽ™åŽ›åŽœåŽžåŽ åŽ¡åŽ¤åŽ§åŽªåŽ«åŽ¬åŽ­åŽ¯åŽ°åŽ±åŽ²åŽ³åŽ´åŽµåŽ·åŽ¸åŽ¹åŽºåŽ¼åŽ½åŽ¾å€åƒå„å…å†å‡åŽååå’å“å•åšåœååžå¡å¢å§å´åºå¾å¿å€å‚å…å‡å‹å”å˜å™åšåœå¢å¤å¥åªå°å³å¶å·åºå½å¿å‘å‘‚å‘„å‘…å‘‡å‘‰å‘Œå‘å‘Žå‘å‘‘å‘šå‘å‘žå‘Ÿå‘ å‘¡å‘£å‘¥å‘§å‘©å‘ªå‘«å‘¬å‘­å‘®å‘¯å‘°å‘´å‘¹å‘ºå‘¾å‘¿å’å’ƒå’…å’‡å’ˆå’‰å’Šå’å’‘å’“å’—å’˜å’œå’žå’Ÿå’ å’¡ï¿½".split("");
    for(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}
    D[134] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å’¢å’¥å’®å’°å’²å’µå’¶å’·å’¹å’ºå’¼å’¾å“ƒå“…å“Šå“‹å“–å“˜å“›å“ å“¡å“¢å“£å“¤å“«å“¬å“¯å“°å“±å“´å“µå“¶å“·å“¸å“¹å“»å“¾å”€å”‚å”ƒå”„å”…å”ˆå”Šå”‹å”Œå”å”Žå”’å”“å”•å”–å”—å”˜å”™å”šå”œå”å”žå”Ÿå”¡å”¥å”¦ï¿½å”¨å”©å”«å”­å”²å”´å”µå”¶å”¸å”¹å”ºå”»å”½å•€å•‚å•…å•‡å•ˆå•‹å•Œå•å•Žå•å•‘å•’å•“å•”å•—å•˜å•™å•šå•›å•å•žå•Ÿå• å•¢å•£å•¨å•©å•«å•¯å•°å•±å•²å•³å•´å•¹å•ºå•½å•¿å–…å–†å–Œå–å–Žå–å–’å–“å–•å––å–—å–šå–›å–žå– å–¡å–¢å–£å–¤å–¥å–¦å–¨å–©å–ªå–«å–¬å–­å–®å–¯å–°å–²å–´å–¶å–¸å–ºå–¼å–¿å—€å—å—‚å—ƒå—†å—‡å—ˆå—Šå—‹å—Žå—å—å—•å——å—˜å—™å—šå—›å—žå— å—¢å—§å—©å—­å—®å—°å—±å—´å—¶å—¸å—¹å—ºå—»å—¼å—¿å˜‚å˜ƒå˜„å˜…ï¿½".split("");
    for(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}
    D[135] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å˜†å˜‡å˜Šå˜‹å˜å˜å˜‘å˜’å˜“å˜”å˜•å˜–å˜—å˜™å˜šå˜œå˜å˜ å˜¡å˜¢å˜¥å˜¦å˜¨å˜©å˜ªå˜«å˜®å˜¯å˜°å˜³å˜µå˜·å˜¸å˜ºå˜¼å˜½å˜¾å™€å™å™‚å™ƒå™„å™…å™†å™‡å™ˆå™‰å™Šå™‹å™å™å™‘å™’å™“å™•å™–å™šå™›å™å™žå™Ÿå™ å™¡ï¿½å™£å™¥å™¦å™§å™­å™®å™¯å™°å™²å™³å™´å™µå™·å™¸å™¹å™ºå™½å™¾å™¿åš€åšåš‚åšƒåš„åš‡åšˆåš‰åšŠåš‹åšŒåšåšåš‘åš’åš”åš•åš–åš—åš˜åš™åššåš›åšœåšåšžåšŸåš åš¡åš¢åš¤åš¥åš¦åš§åš¨åš©åšªåš«åš¬åš­åš®åš°åš±åš²åš³åš´åšµåš¶åš¸åš¹åšºåš»åš½åš¾åš¿å›€å›å›‚å›ƒå›„å›…å›†å›‡å›ˆå›‰å›‹å›Œå›å›Žå›å›å›‘å›’å›“å›•å›–å›˜å›™å›œå›£å›¥å›¦å›§å›¨å›©å›ªå›¬å›®å›¯å›²å›³å›¶å›·å›¸å›»å›¼åœ€åœåœ‚åœ…åœ‡åœ‹åœŒåœåœŽåœåœåœ‘ï¿½".split("");
    for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
    D[136] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åœ’åœ“åœ”åœ•åœ–åœ—åœ˜åœ™åœšåœ›åœåœžåœ åœ¡åœ¢åœ¤åœ¥åœ¦åœ§åœ«åœ±åœ²åœ´åœµåœ¶åœ·åœ¸åœ¼åœ½åœ¿ååƒå„å…å†åˆå‰å‹å’å“å”å•å–å˜å™å¢å£å¥å§å¬å®å°å±å²å´åµå¸å¹åºå½å¾å¿åž€ï¿½åžåž‡åžˆåž‰åžŠåžåžŽåžåžåž‘åž”åž•åž–åž—åž˜åž™åžšåžœåžåžžåžŸåž¥åž¨åžªåž¬åž¯åž°åž±åž³åžµåž¶åž·åž¹åžºåž»åž¼åž½åž¾åž¿åŸ€åŸåŸ„åŸ…åŸ†åŸ‡åŸˆåŸ‰åŸŠåŸŒåŸåŸåŸ‘åŸ“åŸ–åŸ—åŸ›åŸœåŸžåŸ¡åŸ¢åŸ£åŸ¥åŸ¦åŸ§åŸ¨åŸ©åŸªåŸ«åŸ¬åŸ®åŸ°åŸ±åŸ²åŸ³åŸµåŸ¶åŸ·åŸ»åŸ¼åŸ¾åŸ¿å å ƒå „å …å ˆå ‰å Šå Œå Žå å å ’å “å ”å –å —å ˜å šå ›å œå å Ÿå ¢å £å ¥å ¦å §å ¨å ©å «å ¬å ­å ®å ¯å ±å ²å ³å ´å ¶å ·å ¸å ¹å ºå »å ¼å ½ï¿½".split("");
    for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
    D[137] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å ¾å ¿å¡€å¡å¡‚å¡ƒå¡…å¡†å¡‡å¡ˆå¡‰å¡Šå¡‹å¡Žå¡å¡å¡’å¡“å¡•å¡–å¡—å¡™å¡šå¡›å¡œå¡å¡Ÿå¡ å¡¡å¡¢å¡£å¡¤å¡¦å¡§å¡¨å¡©å¡ªå¡­å¡®å¡¯å¡°å¡±å¡²å¡³å¡´å¡µå¡¶å¡·å¡¸å¡¹å¡ºå¡»å¡¼å¡½å¡¿å¢‚å¢„å¢†å¢‡å¢ˆå¢Šå¢‹å¢Œï¿½å¢å¢Žå¢å¢å¢‘å¢”å¢•å¢–å¢—å¢˜å¢›å¢œå¢å¢ å¢¡å¢¢å¢£å¢¤å¢¥å¢¦å¢§å¢ªå¢«å¢¬å¢­å¢®å¢¯å¢°å¢±å¢²å¢³å¢´å¢µå¢¶å¢·å¢¸å¢¹å¢ºå¢»å¢½å¢¾å¢¿å£€å£‚å£ƒå£„å£†å£‡å£ˆå£‰å£Šå£‹å£Œå£å£Žå£å£å£’å£“å£”å£–å£—å£˜å£™å£šå£›å£œå£å£žå£Ÿå£ å£¡å£¢å££å£¥å£¦å£§å£¨å£©å£ªå£­å£¯å£±å£²å£´å£µå£·å£¸å£ºå£»å£¼å£½å£¾å£¿å¤€å¤å¤ƒå¤…å¤†å¤ˆå¤‰å¤Šå¤‹å¤Œå¤Žå¤å¤‘å¤’å¤“å¤—å¤˜å¤›å¤å¤žå¤ å¤¡å¤¢å¤£å¤¦å¤¨å¤¬å¤°å¤²å¤³å¤µå¤¶å¤»ï¿½".split("");
    for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
    D[138] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¤½å¤¾å¤¿å¥€å¥ƒå¥…å¥†å¥Šå¥Œå¥å¥å¥’å¥“å¥™å¥›å¥œå¥å¥žå¥Ÿå¥¡å¥£å¥¤å¥¦å¥§å¥¨å¥©å¥ªå¥«å¥¬å¥­å¥®å¥¯å¥°å¥±å¥²å¥µå¥·å¥ºå¥»å¥¼å¥¾å¥¿å¦€å¦…å¦‰å¦‹å¦Œå¦Žå¦å¦å¦‘å¦”å¦•å¦˜å¦šå¦›å¦œå¦å¦Ÿå¦ å¦¡å¦¢å¦¦ï¿½å¦§å¦¬å¦­å¦°å¦±å¦³å¦´å¦µå¦¶å¦·å¦¸å¦ºå¦¼å¦½å¦¿å§€å§å§‚å§ƒå§„å§…å§‡å§ˆå§‰å§Œå§å§Žå§å§•å§–å§™å§›å§žå§Ÿå§ å§¡å§¢å§¤å§¦å§§å§©å§ªå§«å§­å§®å§¯å§°å§±å§²å§³å§´å§µå§¶å§·å§¸å§ºå§¼å§½å§¾å¨€å¨‚å¨Šå¨‹å¨å¨Žå¨å¨å¨’å¨”å¨•å¨–å¨—å¨™å¨šå¨›å¨å¨žå¨¡å¨¢å¨¤å¨¦å¨§å¨¨å¨ªå¨«å¨¬å¨­å¨®å¨¯å¨°å¨³å¨µå¨·å¨¸å¨¹å¨ºå¨»å¨½å¨¾å¨¿å©å©‚å©ƒå©„å©…å©‡å©ˆå©‹å©Œå©å©Žå©å©å©‘å©’å©“å©”å©–å©—å©˜å©™å©›å©œå©å©žå©Ÿå© ï¿½".split("");
    for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
    D[139] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å©¡å©£å©¤å©¥å©¦å©¨å©©å©«å©¬å©­å©®å©¯å©°å©±å©²å©³å©¸å©¹å©»å©¼å©½å©¾åª€åªåª‚åªƒåª„åª…åª†åª‡åªˆåª‰åªŠåª‹åªŒåªåªŽåªåªåª‘åª“åª”åª•åª–åª—åª˜åª™åªœåªåªžåªŸåª åª¡åª¢åª£åª¤åª¥åª¦åª§åª¨åª©åª«åª¬ï¿½åª­åª®åª¯åª°åª±åª´åª¶åª·åª¹åªºåª»åª¼åª½åª¿å«€å«ƒå«„å«…å«†å«‡å«ˆå«Šå«‹å«å«Žå«å«å«‘å«“å«•å«—å«™å«šå«›å«å«žå«Ÿå«¢å«¤å«¥å«§å«¨å«ªå«¬å«­å«®å«¯å«°å«²å«³å«´å«µå«¶å«·å«¸å«¹å«ºå«»å«¼å«½å«¾å«¿å¬€å¬å¬‚å¬ƒå¬„å¬…å¬†å¬‡å¬ˆå¬Šå¬‹å¬Œå¬å¬Žå¬å¬å¬‘å¬’å¬“å¬”å¬•å¬˜å¬™å¬šå¬›å¬œå¬å¬žå¬Ÿå¬ å¬¡å¬¢å¬£å¬¤å¬¥å¬¦å¬§å¬¨å¬©å¬ªå¬«å¬¬å¬­å¬®å¬¯å¬°å¬±å¬³å¬µå¬¶å¬¸å¬¹å¬ºå¬»å¬¼å¬½å¬¾å¬¿å­å­‚å­ƒå­„å­…å­†å­‡ï¿½".split("");
    for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
    D[140] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å­ˆå­‰å­Šå­‹å­Œå­å­Žå­å­’å­–å­žå­ å­¡å­§å­¨å­«å­­å­®å­¯å­²å­´å­¶å­·å­¸å­¹å­»å­¼å­¾å­¿å®‚å®†å®Šå®å®Žå®å®‘å®’å®”å®–å®Ÿå®§å®¨å®©å®¬å®­å®®å®¯å®±å®²å®·å®ºå®»å®¼å¯€å¯å¯ƒå¯ˆå¯‰å¯Šå¯‹å¯å¯Žå¯ï¿½å¯‘å¯”å¯•å¯–å¯—å¯˜å¯™å¯šå¯›å¯œå¯ å¯¢å¯£å¯¦å¯§å¯©å¯ªå¯«å¯¬å¯­å¯¯å¯±å¯²å¯³å¯´å¯µå¯¶å¯·å¯½å¯¾å°€å°‚å°ƒå°…å°‡å°ˆå°‹å°Œå°å°Žå°å°’å°“å°—å°™å°›å°žå°Ÿå° å°¡å°£å°¦å°¨å°©å°ªå°«å°­å°®å°¯å°°å°²å°³å°µå°¶å°·å±ƒå±„å±†å±‡å±Œå±å±’å±“å±”å±–å±—å±˜å±šå±›å±œå±å±Ÿå±¢å±¤å±§å±¨å±©å±ªå±«å±¬å±­å±°å±²å±³å±´å±µå±¶å±·å±¸å±»å±¼å±½å±¾å²€å²ƒå²„å²…å²†å²‡å²‰å²Šå²‹å²Žå²å²’å²“å²•å²å²žå²Ÿå² å²¡å²¤å²¥å²¦å²§å²¨ï¿½".split("");
    for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
    D[141] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å²ªå²®å²¯å²°å²²å²´å²¶å²¹å²ºå²»å²¼å²¾å³€å³‚å³ƒå³…å³†å³‡å³ˆå³‰å³Šå³Œå³å³Žå³å³å³‘å³“å³”å³•å³–å³—å³˜å³šå³›å³œå³å³žå³Ÿå³ å³¢å³£å³§å³©å³«å³¬å³®å³¯å³±å³²å³³å³´å³µå³¶å³·å³¸å³¹å³ºå³¼å³½å³¾å³¿å´€ï¿½å´å´„å´…å´ˆå´‰å´Šå´‹å´Œå´å´å´å´‘å´’å´“å´•å´—å´˜å´™å´šå´œå´å´Ÿå´ å´¡å´¢å´£å´¥å´¨å´ªå´«å´¬å´¯å´°å´±å´²å´³å´µå´¶å´·å´¸å´¹å´ºå´»å´¼å´¿åµ€åµåµ‚åµƒåµ„åµ…åµ†åµˆåµ‰åµåµŽåµåµåµ‘åµ’åµ“åµ”åµ•åµ–åµ—åµ™åµšåµœåµžåµŸåµ åµ¡åµ¢åµ£åµ¤åµ¥åµ¦åµ§åµ¨åµªåµ­åµ®åµ°åµ±åµ²åµ³åµµåµ¶åµ·åµ¸åµ¹åµºåµ»åµ¼åµ½åµ¾åµ¿å¶€å¶å¶ƒå¶„å¶…å¶†å¶‡å¶ˆå¶‰å¶Šå¶‹å¶Œå¶å¶Žå¶å¶å¶‘å¶’å¶“å¶”å¶•å¶–å¶—å¶˜å¶šå¶›å¶œå¶žå¶Ÿå¶ ï¿½".split("");
    for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
    D[142] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¶¡å¶¢å¶£å¶¤å¶¥å¶¦å¶§å¶¨å¶©å¶ªå¶«å¶¬å¶­å¶®å¶¯å¶°å¶±å¶²å¶³å¶´å¶µå¶¶å¶¸å¶¹å¶ºå¶»å¶¼å¶½å¶¾å¶¿å·€å·å·‚å·ƒå·„å·†å·‡å·ˆå·‰å·Šå·‹å·Œå·Žå·å·å·‘å·’å·“å·”å·•å·–å·—å·˜å·™å·šå·œå·Ÿå· å·£å·¤å·ªå·¬å·­ï¿½å·°å·µå·¶å·¸å·¹å·ºå·»å·¼å·¿å¸€å¸„å¸‡å¸‰å¸Šå¸‹å¸å¸Žå¸’å¸“å¸—å¸žå¸Ÿå¸ å¸¡å¸¢å¸£å¸¤å¸¥å¸¨å¸©å¸ªå¸«å¸¬å¸¯å¸°å¸²å¸³å¸´å¸µå¸¶å¸¹å¸ºå¸¾å¸¿å¹€å¹å¹ƒå¹†å¹‡å¹ˆå¹‰å¹Šå¹‹å¹å¹Žå¹å¹å¹‘å¹’å¹“å¹–å¹—å¹˜å¹™å¹šå¹œå¹å¹Ÿå¹ å¹£å¹¤å¹¥å¹¦å¹§å¹¨å¹©å¹ªå¹«å¹¬å¹­å¹®å¹¯å¹°å¹±å¹µå¹·å¹¹å¹¾åºåº‚åºƒåº…åºˆåº‰åºŒåºåºŽåº’åº˜åº›åºåº¡åº¢åº£åº¤åº¨åº©åºªåº«åº¬åº®åº¯åº°åº±åº²åº´åººåº»åº¼åº½åº¿å»€å»å»‚å»ƒå»„å»…ï¿½".split("");
    for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
    D[143] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å»†å»‡å»ˆå»‹å»Œå»å»Žå»å»å»”å»•å»—å»˜å»™å»šå»œå»å»žå»Ÿå» å»¡å»¢å»£å»¤å»¥å»¦å»§å»©å»«å»¬å»­å»®å»¯å»°å»±å»²å»³å»µå»¸å»¹å»»å»¼å»½å¼…å¼†å¼‡å¼‰å¼Œå¼å¼Žå¼å¼’å¼”å¼–å¼™å¼šå¼œå¼å¼žå¼¡å¼¢å¼£å¼¤ï¿½å¼¨å¼«å¼¬å¼®å¼°å¼²å¼³å¼´å¼µå¼¶å¼·å¼¸å¼»å¼½å¼¾å¼¿å½å½‚å½ƒå½„å½…å½†å½‡å½ˆå½‰å½Šå½‹å½Œå½å½Žå½å½‘å½”å½™å½šå½›å½œå½žå½Ÿå½ å½£å½¥å½§å½¨å½«å½®å½¯å½²å½´å½µå½¶å½¸å½ºå½½å½¾å½¿å¾ƒå¾†å¾å¾Žå¾å¾‘å¾“å¾”å¾–å¾šå¾›å¾å¾žå¾Ÿå¾ å¾¢å¾£å¾¤å¾¥å¾¦å¾§å¾©å¾«å¾¬å¾¯å¾°å¾±å¾²å¾³å¾´å¾¶å¾¸å¾¹å¾ºå¾»å¾¾å¾¿å¿€å¿å¿‚å¿‡å¿ˆå¿Šå¿‹å¿Žå¿“å¿”å¿•å¿šå¿›å¿œå¿žå¿Ÿå¿¢å¿£å¿¥å¿¦å¿¨å¿©å¿¬å¿¯å¿°å¿²å¿³å¿´å¿¶å¿·å¿¹å¿ºå¿¼æ€‡ï¿½".split("");
    for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
    D[144] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ€ˆæ€‰æ€‹æ€Œæ€æ€‘æ€“æ€—æ€˜æ€šæ€žæ€Ÿæ€¢æ€£æ€¤æ€¬æ€­æ€®æ€°æ€±æ€²æ€³æ€´æ€¶æ€·æ€¸æ€¹æ€ºæ€½æ€¾æ€æ„æ…æ†æ‡æˆæ‰æŠæŒæŽææ‘æ“æ”æ–æ—æ˜æ›æœæžæŸæ æ¡æ¥æ¦æ®æ±æ²æ´æµæ·æ¾æ‚€ï¿½æ‚æ‚‚æ‚…æ‚†æ‚‡æ‚ˆæ‚Šæ‚‹æ‚Žæ‚æ‚æ‚‘æ‚“æ‚•æ‚—æ‚˜æ‚™æ‚œæ‚žæ‚¡æ‚¢æ‚¤æ‚¥æ‚§æ‚©æ‚ªæ‚®æ‚°æ‚³æ‚µæ‚¶æ‚·æ‚¹æ‚ºæ‚½æ‚¾æ‚¿æƒ€æƒæƒ‚æƒƒæƒ„æƒ‡æƒˆæƒ‰æƒŒæƒæƒŽæƒæƒæƒ’æƒ“æƒ”æƒ–æƒ—æƒ™æƒ›æƒžæƒ¡æƒ¢æƒ£æƒ¤æƒ¥æƒªæƒ±æƒ²æƒµæƒ·æƒ¸æƒ»æƒ¼æƒ½æƒ¾æƒ¿æ„‚æ„ƒæ„„æ„…æ„‡æ„Šæ„‹æ„Œæ„æ„‘æ„’æ„“æ„”æ„–æ„—æ„˜æ„™æ„›æ„œæ„æ„žæ„¡æ„¢æ„¥æ„¨æ„©æ„ªæ„¬æ„­æ„®æ„¯æ„°æ„±æ„²æ„³æ„´æ„µæ„¶æ„·æ„¸æ„¹æ„ºæ„»æ„¼æ„½æ„¾æ…€æ…æ…‚æ…ƒæ…„æ……æ…†ï¿½".split("");
    for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
    D[145] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ…‡æ…‰æ…‹æ…æ…æ…æ…’æ…“æ…”æ…–æ…—æ…˜æ…™æ…šæ…›æ…œæ…žæ…Ÿæ… æ…¡æ…£æ…¤æ…¥æ…¦æ…©æ…ªæ…«æ…¬æ…­æ…®æ…¯æ…±æ…²æ…³æ…´æ…¶æ…¸æ…¹æ…ºæ…»æ…¼æ…½æ…¾æ…¿æ†€æ†æ†‚æ†ƒæ†„æ†…æ††æ†‡æ†ˆæ†‰æ†Šæ†Œæ†æ†æ†æ†‘æ†’æ†“æ†•ï¿½æ†–æ†—æ†˜æ†™æ†šæ†›æ†œæ†žæ†Ÿæ† æ†¡æ†¢æ†£æ†¤æ†¥æ†¦æ†ªæ†«æ†­æ†®æ†¯æ†°æ†±æ†²æ†³æ†´æ†µæ†¶æ†¸æ†¹æ†ºæ†»æ†¼æ†½æ†¿æ‡€æ‡æ‡ƒæ‡„æ‡…æ‡†æ‡‡æ‡‰æ‡Œæ‡æ‡Žæ‡æ‡æ‡“æ‡•æ‡–æ‡—æ‡˜æ‡™æ‡šæ‡›æ‡œæ‡æ‡žæ‡Ÿæ‡ æ‡¡æ‡¢æ‡£æ‡¤æ‡¥æ‡§æ‡¨æ‡©æ‡ªæ‡«æ‡¬æ‡­æ‡®æ‡¯æ‡°æ‡±æ‡²æ‡³æ‡´æ‡¶æ‡·æ‡¸æ‡¹æ‡ºæ‡»æ‡¼æ‡½æ‡¾æˆ€æˆæˆ‚æˆƒæˆ„æˆ…æˆ‡æˆ‰æˆ“æˆ”æˆ™æˆœæˆæˆžæˆ æˆ£æˆ¦æˆ§æˆ¨æˆ©æˆ«æˆ­æˆ¯æˆ°æˆ±æˆ²æˆµæˆ¶æˆ¸æˆ¹æˆºæˆ»æˆ¼æ‰‚æ‰„æ‰…æ‰†æ‰Šï¿½".split("");
    for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
    D[146] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ‰æ‰æ‰•æ‰–æ‰—æ‰™æ‰šæ‰œæ‰æ‰žæ‰Ÿæ‰ æ‰¡æ‰¢æ‰¤æ‰¥æ‰¨æ‰±æ‰²æ‰´æ‰µæ‰·æ‰¸æ‰ºæ‰»æ‰½æŠæŠ‚æŠƒæŠ…æŠ†æŠ‡æŠˆæŠ‹æŠŒæŠæŠŽæŠæŠæŠ”æŠ™æŠœæŠæŠžæŠ£æŠ¦æŠ§æŠ©æŠªæŠ­æŠ®æŠ¯æŠ°æŠ²æŠ³æŠ´æŠ¶æŠ·æŠ¸æŠºæŠ¾æ‹€æ‹ï¿½æ‹ƒæ‹‹æ‹æ‹‘æ‹•æ‹æ‹žæ‹ æ‹¡æ‹¤æ‹ªæ‹«æ‹°æ‹²æ‹µæ‹¸æ‹¹æ‹ºæ‹»æŒ€æŒƒæŒ„æŒ…æŒ†æŒŠæŒ‹æŒŒæŒæŒæŒæŒ’æŒ“æŒ”æŒ•æŒ—æŒ˜æŒ™æŒœæŒ¦æŒ§æŒ©æŒ¬æŒ­æŒ®æŒ°æŒ±æŒ³æŒ´æŒµæŒ¶æŒ·æŒ¸æŒ»æŒ¼æŒ¾æŒ¿æ€ææ„æ‡æˆæŠæ‘æ’æ“æ”æ–æ—æ˜æ™æšæ›æœææ æ¤æ¥æ¦æ¨æªæ«æ¬æ¯æ°æ²æ³æ´æµæ¸æ¹æ¼æ½æ¾æ¿æŽæŽƒæŽ„æŽ…æŽ†æŽ‹æŽæŽ‘æŽ“æŽ”æŽ•æŽ—æŽ™æŽšæŽ›æŽœæŽæŽžæŽŸæŽ¡æŽ¤æŽ¦æŽ«æŽ¯æŽ±æŽ²æŽµæŽ¶æŽ¹æŽ»æŽ½æŽ¿æ€ï¿½".split("");
    for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
    D[147] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ‚æƒæ…æ‡æˆæŠæ‹æŒæ‘æ“æ”æ•æ—æ˜æ™æšæ›æœææŸæ¢æ¤æ¥æ¦æ§æ¨æ«æ¬æ®æ¯æ°æ±æ³æµæ·æ¹æºæ»æ¼æ¾æƒæ„æ†æ‡æˆæ‰æŠææŽæ‘æ’æ•æ–æ—æ˜æ™æšææŸæ¢æ£æ¤ï¿½æ¥æ§æ¨æ©æ«æ®æ¯æ°æ±æ²æ³æµæ¶æ·æ¸æ¹æ»æ¼æ¾æ‘€æ‘‚æ‘ƒæ‘‰æ‘‹æ‘Œæ‘æ‘Žæ‘æ‘æ‘‘æ‘“æ‘•æ‘–æ‘—æ‘™æ‘šæ‘›æ‘œæ‘æ‘Ÿæ‘ æ‘¡æ‘¢æ‘£æ‘¤æ‘¥æ‘¦æ‘¨æ‘ªæ‘«æ‘¬æ‘®æ‘¯æ‘°æ‘±æ‘²æ‘³æ‘´æ‘µæ‘¶æ‘·æ‘»æ‘¼æ‘½æ‘¾æ‘¿æ’€æ’æ’ƒæ’†æ’ˆæ’‰æ’Šæ’‹æ’Œæ’æ’Žæ’æ’æ’“æ’”æ’—æ’˜æ’šæ’›æ’œæ’æ’Ÿæ’ æ’¡æ’¢æ’£æ’¥æ’¦æ’§æ’¨æ’ªæ’«æ’¯æ’±æ’²æ’³æ’´æ’¶æ’¹æ’»æ’½æ’¾æ’¿æ“æ“ƒæ“„æ“†æ“‡æ“ˆæ“‰æ“Šæ“‹æ“Œæ“æ“‘æ““æ“”æ“•æ“–æ“™æ“šï¿½".split("");
    for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
    D[148] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ“›æ“œæ“æ“Ÿæ“ æ“¡æ“£æ“¥æ“§æ“¨æ“©æ“ªæ“«æ“¬æ“­æ“®æ“¯æ“°æ“±æ“²æ“³æ“´æ“µæ“¶æ“·æ“¸æ“¹æ“ºæ“»æ“¼æ“½æ“¾æ“¿æ”æ”‚æ”ƒæ”„æ”…æ”†æ”‡æ”ˆæ”Šæ”‹æ”Œæ”æ”Žæ”æ”æ”‘æ”“æ””æ”•æ”–æ”—æ”™æ”šæ”›æ”œæ”æ”žæ”Ÿæ” æ”¡ï¿½æ”¢æ”£æ”¤æ”¦æ”§æ”¨æ”©æ”ªæ”¬æ”­æ”°æ”±æ”²æ”³æ”·æ”ºæ”¼æ”½æ•€æ•æ•‚æ•ƒæ•„æ•†æ•‡æ•Šæ•‹æ•æ•Žæ•æ•’æ•“æ•”æ•—æ•˜æ•šæ•œæ•Ÿæ• æ•¡æ•¤æ•¥æ•§æ•¨æ•©æ•ªæ•­æ•®æ•¯æ•±æ•³æ•µæ•¶æ•¸æ•¹æ•ºæ•»æ•¼æ•½æ•¾æ•¿æ–€æ–æ–‚æ–ƒæ–„æ–…æ–†æ–ˆæ–‰æ–Šæ–æ–Žæ–æ–’æ–”æ–•æ––æ–˜æ–šæ–æ–žæ– æ–¢æ–£æ–¦æ–¨æ–ªæ–¬æ–®æ–±æ–²æ–³æ–´æ–µæ–¶æ–·æ–¸æ–ºæ–»æ–¾æ–¿æ—€æ—‚æ—‡æ—ˆæ—‰æ—Šæ—æ—æ—‘æ—“æ—”æ—•æ—˜æ—™æ—šæ—›æ—œæ—æ—žæ—Ÿæ—¡æ—£æ—¤æ—ªæ—«ï¿½".split("");
    for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
    D[149] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ—²æ—³æ—´æ—µæ—¸æ—¹æ—»æ—¼æ—½æ—¾æ—¿æ˜æ˜„æ˜…æ˜‡æ˜ˆæ˜‰æ˜‹æ˜æ˜æ˜‘æ˜’æ˜–æ˜—æ˜˜æ˜šæ˜›æ˜œæ˜žæ˜¡æ˜¢æ˜£æ˜¤æ˜¦æ˜©æ˜ªæ˜«æ˜¬æ˜®æ˜°æ˜²æ˜³æ˜·æ˜¸æ˜¹æ˜ºæ˜»æ˜½æ˜¿æ™€æ™‚æ™„æ™…æ™†æ™‡æ™ˆæ™‰æ™Šæ™æ™Žæ™æ™‘æ™˜ï¿½æ™™æ™›æ™œæ™æ™žæ™ æ™¢æ™£æ™¥æ™§æ™©æ™ªæ™«æ™¬æ™­æ™±æ™²æ™³æ™µæ™¸æ™¹æ™»æ™¼æ™½æ™¿æš€æšæšƒæš…æš†æšˆæš‰æšŠæš‹æšæšŽæšæšæš’æš“æš”æš•æš˜æš™æššæš›æšœæšžæšŸæš æš¡æš¢æš£æš¤æš¥æš¦æš©æšªæš«æš¬æš­æš¯æš°æš±æš²æš³æšµæš¶æš·æš¸æšºæš»æš¼æš½æš¿æ›€æ›æ›‚æ›ƒæ›„æ›…æ›†æ›‡æ›ˆæ›‰æ›Šæ›‹æ›Œæ›æ›Žæ›æ›æ›‘æ›’æ›“æ›”æ›•æ›–æ›—æ›˜æ›šæ›žæ›Ÿæ› æ›¡æ›¢æ›£æ›¤æ›¥æ›§æ›¨æ›ªæ›«æ›¬æ›­æ›®æ›¯æ›±æ›µæ›¶æ›¸æ›ºæ›»æ›½æœæœ‚æœƒï¿½".split("");
    for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
    D[150] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æœ„æœ…æœ†æœ‡æœŒæœŽæœæœ‘æœ’æœ“æœ–æœ˜æœ™æœšæœœæœžæœ æœ¡æœ¢æœ£æœ¤æœ¥æœ§æœ©æœ®æœ°æœ²æœ³æœ¶æœ·æœ¸æœ¹æœ»æœ¼æœ¾æœ¿ææ„æ…æ‡æŠæ‹ææ’æ”æ•æ—æ˜æ™æšæ›ææ¢æ£æ¤æ¦æ§æ«æ¬æ®æ±æ´æ¶ï¿½æ¸æ¹æºæ»æ½æž€æž‚æžƒæž…æž†æžˆæžŠæžŒæžæžŽæžæž‘æž’æž“æž”æž–æž™æž›æžŸæž æž¡æž¤æž¦æž©æž¬æž®æž±æž²æž´æž¹æžºæž»æž¼æž½æž¾æž¿æŸ€æŸ‚æŸ…æŸ†æŸ‡æŸˆæŸ‰æŸŠæŸ‹æŸŒæŸæŸŽæŸ•æŸ–æŸ—æŸ›æŸŸæŸ¡æŸ£æŸ¤æŸ¦æŸ§æŸ¨æŸªæŸ«æŸ­æŸ®æŸ²æŸµæŸ¶æŸ·æŸ¸æŸ¹æŸºæŸ»æŸ¼æŸ¾æ æ ‚æ ƒæ „æ †æ æ æ ’æ ”æ •æ ˜æ ™æ šæ ›æ œæ žæ Ÿæ  æ ¢æ £æ ¤æ ¥æ ¦æ §æ ¨æ «æ ¬æ ­æ ®æ ¯æ °æ ±æ ´æ µæ ¶æ ºæ »æ ¿æ¡‡æ¡‹æ¡æ¡æ¡’æ¡–æ¡—æ¡˜æ¡™æ¡šæ¡›ï¿½".split("");
    for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
    D[151] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¡œæ¡æ¡žæ¡Ÿæ¡ªæ¡¬æ¡­æ¡®æ¡¯æ¡°æ¡±æ¡²æ¡³æ¡µæ¡¸æ¡¹æ¡ºæ¡»æ¡¼æ¡½æ¡¾æ¡¿æ¢€æ¢‚æ¢„æ¢‡æ¢ˆæ¢‰æ¢Šæ¢‹æ¢Œæ¢æ¢Žæ¢æ¢‘æ¢’æ¢”æ¢•æ¢–æ¢˜æ¢™æ¢šæ¢›æ¢œæ¢æ¢žæ¢Ÿæ¢ æ¢¡æ¢£æ¢¤æ¢¥æ¢©æ¢ªæ¢«æ¢¬æ¢®æ¢±æ¢²æ¢´æ¢¶æ¢·æ¢¸ï¿½æ¢¹æ¢ºæ¢»æ¢¼æ¢½æ¢¾æ¢¿æ£æ£ƒæ£„æ£…æ£†æ£‡æ£ˆæ£Šæ£Œæ£Žæ£æ£æ£‘æ£“æ£”æ£–æ£—æ£™æ£›æ£œæ£æ£žæ£Ÿæ£¡æ£¢æ£¤æ£¥æ£¦æ£§æ£¨æ£©æ£ªæ£«æ£¬æ£­æ£¯æ£²æ£³æ£´æ£¶æ£·æ£¸æ£»æ£½æ£¾æ£¿æ¤€æ¤‚æ¤ƒæ¤„æ¤†æ¤‡æ¤ˆæ¤‰æ¤Šæ¤Œæ¤æ¤‘æ¤“æ¤”æ¤•æ¤–æ¤—æ¤˜æ¤™æ¤šæ¤›æ¤œæ¤æ¤žæ¤¡æ¤¢æ¤£æ¤¥æ¤¦æ¤§æ¤¨æ¤©æ¤ªæ¤«æ¤¬æ¤®æ¤¯æ¤±æ¤²æ¤³æ¤µæ¤¶æ¤·æ¤¸æ¤ºæ¤»æ¤¼æ¤¾æ¥€æ¥æ¥ƒæ¥„æ¥…æ¥†æ¥‡æ¥ˆæ¥‰æ¥Šæ¥‹æ¥Œæ¥æ¥Žæ¥æ¥æ¥‘æ¥’æ¥“æ¥•æ¥–æ¥˜æ¥™æ¥›æ¥œæ¥Ÿï¿½".split("");
    for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
    D[152] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¥¡æ¥¢æ¥¤æ¥¥æ¥§æ¥¨æ¥©æ¥ªæ¥¬æ¥­æ¥¯æ¥°æ¥²æ¥³æ¥´æ¥µæ¥¶æ¥ºæ¥»æ¥½æ¥¾æ¥¿æ¦æ¦ƒæ¦…æ¦Šæ¦‹æ¦Œæ¦Žæ¦æ¦æ¦‘æ¦’æ¦“æ¦–æ¦—æ¦™æ¦šæ¦æ¦žæ¦Ÿæ¦ æ¦¡æ¦¢æ¦£æ¦¤æ¦¥æ¦¦æ¦©æ¦ªæ¦¬æ¦®æ¦¯æ¦°æ¦²æ¦³æ¦µæ¦¶æ¦¸æ¦¹æ¦ºæ¦¼æ¦½ï¿½æ¦¾æ¦¿æ§€æ§‚æ§ƒæ§„æ§…æ§†æ§‡æ§ˆæ§‰æ§‹æ§æ§æ§‘æ§’æ§“æ§•æ§–æ§—æ§˜æ§™æ§šæ§œæ§æ§žæ§¡æ§¢æ§£æ§¤æ§¥æ§¦æ§§æ§¨æ§©æ§ªæ§«æ§¬æ§®æ§¯æ§°æ§±æ§³æ§´æ§µæ§¶æ§·æ§¸æ§¹æ§ºæ§»æ§¼æ§¾æ¨€æ¨æ¨‚æ¨ƒæ¨„æ¨…æ¨†æ¨‡æ¨ˆæ¨‰æ¨‹æ¨Œæ¨æ¨Žæ¨æ¨æ¨‘æ¨’æ¨“æ¨”æ¨•æ¨–æ¨™æ¨šæ¨›æ¨œæ¨æ¨žæ¨ æ¨¢æ¨£æ¨¤æ¨¥æ¨¦æ¨§æ¨©æ¨«æ¨¬æ¨­æ¨®æ¨°æ¨²æ¨³æ¨´æ¨¶æ¨·æ¨¸æ¨¹æ¨ºæ¨»æ¨¼æ¨¿æ©€æ©æ©‚æ©ƒæ©…æ©†æ©ˆæ©‰æ©Šæ©‹æ©Œæ©æ©Žæ©æ©‘æ©’æ©“æ©”æ©•æ©–æ©—æ©šï¿½".split("");
    for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
    D[153] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ©œæ©æ©žæ©Ÿæ© æ©¢æ©£æ©¤æ©¦æ©§æ©¨æ©©æ©ªæ©«æ©¬æ©­æ©®æ©¯æ©°æ©²æ©³æ©´æ©µæ©¶æ©·æ©¸æ©ºæ©»æ©½æ©¾æ©¿æªæª‚æªƒæª…æª†æª‡æªˆæª‰æªŠæª‹æªŒæªæªæª’æª“æª”æª•æª–æª˜æª™æªšæª›æªœæªæªžæªŸæª¡æª¢æª£æª¤æª¥æª¦ï¿½æª§æª¨æªªæª­æª®æª¯æª°æª±æª²æª³æª´æªµæª¶æª·æª¸æª¹æªºæª»æª¼æª½æª¾æª¿æ«€æ«æ«‚æ«ƒæ«„æ«…æ«†æ«‡æ«ˆæ«‰æ«Šæ«‹æ«Œæ«æ«Žæ«æ«æ«‘æ«’æ«“æ«”æ«•æ«–æ«—æ«˜æ«™æ«šæ«›æ«œæ«æ«žæ«Ÿæ« æ«¡æ«¢æ«£æ«¤æ«¥æ«¦æ«§æ«¨æ«©æ«ªæ««æ«¬æ«­æ«®æ«¯æ«°æ«±æ«²æ«³æ«´æ«µæ«¶æ«·æ«¸æ«¹æ«ºæ«»æ«¼æ«½æ«¾æ«¿æ¬€æ¬æ¬‚æ¬ƒæ¬„æ¬…æ¬†æ¬‡æ¬ˆæ¬‰æ¬Šæ¬‹æ¬Œæ¬æ¬Žæ¬æ¬æ¬‘æ¬’æ¬“æ¬”æ¬•æ¬–æ¬—æ¬˜æ¬™æ¬šæ¬›æ¬œæ¬æ¬žæ¬Ÿæ¬¥æ¬¦æ¬¨æ¬©æ¬ªæ¬«æ¬¬æ¬­æ¬®ï¿½".split("");
    for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
    D[154] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¬¯æ¬°æ¬±æ¬³æ¬´æ¬µæ¬¶æ¬¸æ¬»æ¬¼æ¬½æ¬¿æ­€æ­æ­‚æ­„æ­…æ­ˆæ­Šæ­‹æ­æ­Žæ­æ­æ­‘æ­’æ­“æ­”æ­•æ­–æ­—æ­˜æ­šæ­›æ­œæ­æ­žæ­Ÿæ­ æ­¡æ­¨æ­©æ­«æ­¬æ­­æ­®æ­¯æ­°æ­±æ­²æ­³æ­´æ­µæ­¶æ­·æ­¸æ­ºæ­½æ­¾æ­¿æ®€æ®…æ®ˆï¿½æ®Œæ®Žæ®æ®æ®‘æ®”æ®•æ®—æ®˜æ®™æ®œæ®æ®žæ®Ÿæ® æ®¢æ®£æ®¤æ®¥æ®¦æ®§æ®¨æ®©æ®«æ®¬æ®­æ®®æ®¯æ®°æ®±æ®²æ®¶æ®¸æ®¹æ®ºæ®»æ®¼æ®½æ®¾æ¯€æ¯ƒæ¯„æ¯†æ¯‡æ¯ˆæ¯‰æ¯Šæ¯Œæ¯Žæ¯æ¯‘æ¯˜æ¯šæ¯œæ¯æ¯žæ¯Ÿæ¯ æ¯¢æ¯£æ¯¤æ¯¥æ¯¦æ¯§æ¯¨æ¯©æ¯¬æ¯­æ¯®æ¯°æ¯±æ¯²æ¯´æ¯¶æ¯·æ¯¸æ¯ºæ¯»æ¯¼æ¯¾æ¯¿æ°€æ°æ°‚æ°ƒæ°„æ°ˆæ°‰æ°Šæ°‹æ°Œæ°Žæ°’æ°—æ°œæ°æ°žæ° æ°£æ°¥æ°«æ°¬æ°­æ°±æ°³æ°¶æ°·æ°¹æ°ºæ°»æ°¼æ°¾æ°¿æ±ƒæ±„æ±…æ±ˆæ±‹æ±Œæ±æ±Žæ±æ±‘æ±’æ±“æ±–æ±˜ï¿½".split("");
    for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
    D[155] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±™æ±šæ±¢æ±£æ±¥æ±¦æ±§æ±«æ±¬æ±­æ±®æ±¯æ±±æ±³æ±µæ±·æ±¸æ±ºæ±»æ±¼æ±¿æ²€æ²„æ²‡æ²Šæ²‹æ²æ²Žæ²‘æ²’æ²•æ²–æ²—æ²˜æ²šæ²œæ²æ²žæ² æ²¢æ²¨æ²¬æ²¯æ²°æ²´æ²µæ²¶æ²·æ²ºæ³€æ³æ³‚æ³ƒæ³†æ³‡æ³ˆæ³‹æ³æ³Žæ³æ³‘æ³’æ³˜ï¿½æ³™æ³šæ³œæ³æ³Ÿæ³¤æ³¦æ³§æ³©æ³¬æ³­æ³²æ³´æ³¹æ³¿æ´€æ´‚æ´ƒæ´…æ´†æ´ˆæ´‰æ´Šæ´æ´æ´æ´‘æ´“æ´”æ´•æ´–æ´˜æ´œæ´æ´Ÿæ´ æ´¡æ´¢æ´£æ´¤æ´¦æ´¨æ´©æ´¬æ´­æ´¯æ´°æ´´æ´¶æ´·æ´¸æ´ºæ´¿æµ€æµ‚æµ„æµ‰æµŒæµæµ•æµ–æµ—æµ˜æµ›æµæµŸæµ¡æµ¢æµ¤æµ¥æµ§æµ¨æµ«æµ¬æµ­æµ°æµ±æµ²æµ³æµµæµ¶æµ¹æµºæµ»æµ½æµ¾æµ¿æ¶€æ¶æ¶ƒæ¶„æ¶†æ¶‡æ¶Šæ¶‹æ¶æ¶æ¶æ¶’æ¶–æ¶—æ¶˜æ¶™æ¶šæ¶œæ¶¢æ¶¥æ¶¬æ¶­æ¶°æ¶±æ¶³æ¶´æ¶¶æ¶·æ¶¹æ¶ºæ¶»æ¶¼æ¶½æ¶¾æ·æ·‚æ·ƒæ·ˆæ·‰æ·Šï¿½".split("");
    for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
    D[156] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ·æ·Žæ·æ·æ·’æ·“æ·”æ·•æ·—æ·šæ·›æ·œæ·Ÿæ·¢æ·£æ·¥æ·§æ·¨æ·©æ·ªæ·­æ·¯æ·°æ·²æ·´æ·µæ·¶æ·¸æ·ºæ·½æ·¾æ·¿æ¸€æ¸æ¸‚æ¸ƒæ¸„æ¸†æ¸‡æ¸ˆæ¸‰æ¸‹æ¸æ¸’æ¸“æ¸•æ¸˜æ¸™æ¸›æ¸œæ¸žæ¸Ÿæ¸¢æ¸¦æ¸§æ¸¨æ¸ªæ¸¬æ¸®æ¸°æ¸±æ¸³æ¸µï¿½æ¸¶æ¸·æ¸¹æ¸»æ¸¼æ¸½æ¸¾æ¸¿æ¹€æ¹æ¹‚æ¹…æ¹†æ¹‡æ¹ˆæ¹‰æ¹Šæ¹‹æ¹Œæ¹æ¹æ¹‘æ¹’æ¹•æ¹—æ¹™æ¹šæ¹œæ¹æ¹žæ¹ æ¹¡æ¹¢æ¹£æ¹¤æ¹¥æ¹¦æ¹§æ¹¨æ¹©æ¹ªæ¹¬æ¹­æ¹¯æ¹°æ¹±æ¹²æ¹³æ¹´æ¹µæ¹¶æ¹·æ¹¸æ¹¹æ¹ºæ¹»æ¹¼æ¹½æº€æºæº‚æº„æº‡æºˆæºŠæº‹æºŒæºæºŽæº‘æº’æº“æº”æº•æº–æº—æº™æºšæº›æºæºžæº æº¡æº£æº¤æº¦æº¨æº©æº«æº¬æº­æº®æº°æº³æºµæº¸æº¹æº¼æº¾æº¿æ»€æ»ƒæ»„æ»…æ»†æ»ˆæ»‰æ»Šæ»Œæ»æ»Žæ»æ»’æ»–æ»˜æ»™æ»›æ»œæ»æ»£æ»§æ»ªæ»«æ»¬æ»­æ»®æ»¯ï¿½".split("");
    for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
    D[157] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ»°æ»±æ»²æ»³æ»µæ»¶æ»·æ»¸æ»ºæ»»æ»¼æ»½æ»¾æ»¿æ¼€æ¼æ¼ƒæ¼„æ¼…æ¼‡æ¼ˆæ¼Šæ¼‹æ¼Œæ¼æ¼Žæ¼æ¼‘æ¼’æ¼–æ¼—æ¼˜æ¼™æ¼šæ¼›æ¼œæ¼æ¼žæ¼Ÿæ¼¡æ¼¢æ¼£æ¼¥æ¼¦æ¼§æ¼¨æ¼¬æ¼®æ¼°æ¼²æ¼´æ¼µæ¼·æ¼¸æ¼¹æ¼ºæ¼»æ¼¼æ¼½æ¼¿æ½€æ½æ½‚ï¿½æ½ƒæ½„æ½…æ½ˆæ½‰æ½Šæ½Œæ½Žæ½æ½æ½‘æ½’æ½“æ½”æ½•æ½–æ½—æ½™æ½šæ½›æ½æ½Ÿæ½ æ½¡æ½£æ½¤æ½¥æ½§æ½¨æ½©æ½ªæ½«æ½¬æ½¯æ½°æ½±æ½³æ½µæ½¶æ½·æ½¹æ½»æ½½æ½¾æ½¿æ¾€æ¾æ¾‚æ¾ƒæ¾…æ¾†æ¾‡æ¾Šæ¾‹æ¾æ¾æ¾‘æ¾’æ¾“æ¾”æ¾•æ¾–æ¾—æ¾˜æ¾™æ¾šæ¾›æ¾æ¾žæ¾Ÿæ¾ æ¾¢æ¾£æ¾¤æ¾¥æ¾¦æ¾¨æ¾©æ¾ªæ¾«æ¾¬æ¾­æ¾®æ¾¯æ¾°æ¾±æ¾²æ¾´æ¾µæ¾·æ¾¸æ¾ºæ¾»æ¾¼æ¾½æ¾¾æ¾¿æ¿æ¿ƒæ¿„æ¿…æ¿†æ¿‡æ¿ˆæ¿Šæ¿‹æ¿Œæ¿æ¿Žæ¿æ¿æ¿“æ¿”æ¿•æ¿–æ¿—æ¿˜æ¿™æ¿šæ¿›æ¿œæ¿æ¿Ÿæ¿¢æ¿£æ¿¤æ¿¥ï¿½".split("");
    for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
    D[158] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿¦æ¿§æ¿¨æ¿©æ¿ªæ¿«æ¿¬æ¿­æ¿°æ¿±æ¿²æ¿³æ¿´æ¿µæ¿¶æ¿·æ¿¸æ¿¹æ¿ºæ¿»æ¿¼æ¿½æ¿¾æ¿¿ç€€ç€ç€‚ç€ƒç€„ç€…ç€†ç€‡ç€ˆç€‰ç€Šç€‹ç€Œç€ç€Žç€ç€ç€’ç€“ç€”ç€•ç€–ç€—ç€˜ç€™ç€œç€ç€žç€Ÿç€ ç€¡ç€¢ç€¤ç€¥ç€¦ç€§ç€¨ç€©ç€ªï¿½ç€«ç€¬ç€­ç€®ç€¯ç€°ç€±ç€²ç€³ç€´ç€¶ç€·ç€¸ç€ºç€»ç€¼ç€½ç€¾ç€¿ç€çç‚çƒç„ç…ç†ç‡çˆç‰çŠç‹ççŽçç‘ç’ç“ç”ç•ç–ç—ç˜ç™çšç›çœççŸç ç¡ç¢ç£ç¤ç¥ç¦ç§ç¨ç©çªç®ç±ç²ç³ç´ç·ç¹çºç»ç½ç‚ç‚‚ç‚ƒç‚„ç‚†ç‚‡ç‚ˆç‚‹ç‚Œç‚ç‚ç‚ç‚‘ç‚“ç‚—ç‚˜ç‚šç‚›ç‚žç‚Ÿç‚ ç‚¡ç‚¢ç‚£ç‚¤ç‚¥ç‚¦ç‚§ç‚¨ç‚©ç‚ªç‚°ç‚²ç‚´ç‚µç‚¶ç‚ºç‚¾ç‚¿çƒ„çƒ…çƒ†çƒ‡çƒ‰çƒ‹çƒŒçƒçƒŽçƒçƒçƒ‘çƒ’çƒ“çƒ”çƒ•çƒ–çƒ—çƒšï¿½".split("");
    for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
    D[159] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çƒœçƒçƒžçƒ çƒ¡çƒ¢çƒ£çƒ¥çƒªçƒ®çƒ°çƒ±çƒ²çƒ³çƒ´çƒµçƒ¶çƒ¸çƒºçƒ»çƒ¼çƒ¾çƒ¿ç„€ç„ç„‚ç„ƒç„„ç„…ç„†ç„‡ç„ˆç„‹ç„Œç„ç„Žç„ç„‘ç„’ç„”ç„—ç„›ç„œç„ç„žç„Ÿç„ ç„¡ç„¢ç„£ç„¤ç„¥ç„§ç„¨ç„©ç„ªç„«ç„¬ç„­ç„®ç„²ç„³ç„´ï¿½ç„µç„·ç„¸ç„¹ç„ºç„»ç„¼ç„½ç„¾ç„¿ç…€ç…ç…‚ç…ƒç…„ç…†ç…‡ç…ˆç…‰ç…‹ç…ç…ç…ç…‘ç…’ç…“ç…”ç…•ç…–ç…—ç…˜ç…™ç…šç…›ç…ç…Ÿç… ç…¡ç…¢ç…£ç…¥ç…©ç…ªç…«ç…¬ç…­ç…¯ç…°ç…±ç…´ç…µç…¶ç…·ç…¹ç…»ç…¼ç…¾ç…¿ç†€ç†ç†‚ç†ƒç†…ç††ç†‡ç†ˆç†‰ç†‹ç†Œç†ç†Žç†ç†‘ç†’ç†“ç†•ç†–ç†—ç†šç†›ç†œç†ç†žç†¡ç†¢ç†£ç†¤ç†¥ç†¦ç†§ç†©ç†ªç†«ç†­ç†®ç†¯ç†°ç†±ç†²ç†´ç†¶ç†·ç†¸ç†ºç†»ç†¼ç†½ç†¾ç†¿ç‡€ç‡ç‡‚ç‡„ç‡…ç‡†ç‡‡ç‡ˆç‡‰ç‡Šç‡‹ç‡Œç‡ç‡ç‡ç‡‘ç‡’ç‡“ï¿½".split("");
    for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
    D[160] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç‡–ç‡—ç‡˜ç‡™ç‡šç‡›ç‡œç‡ç‡žç‡Ÿç‡¡ç‡¢ç‡£ç‡¤ç‡¦ç‡¨ç‡©ç‡ªç‡«ç‡¬ç‡­ç‡¯ç‡°ç‡±ç‡²ç‡³ç‡´ç‡µç‡¶ç‡·ç‡¸ç‡ºç‡»ç‡¼ç‡½ç‡¾ç‡¿çˆ€çˆçˆ‚çˆƒçˆ„çˆ…çˆ‡çˆˆçˆ‰çˆŠçˆ‹çˆŒçˆçˆŽçˆçˆçˆ‘çˆ’çˆ“çˆ”çˆ•çˆ–çˆ—çˆ˜çˆ™çˆšï¿½çˆ›çˆœçˆžçˆŸçˆ çˆ¡çˆ¢çˆ£çˆ¤çˆ¥çˆ¦çˆ§çˆ©çˆ«çˆ­çˆ®çˆ¯çˆ²çˆ³çˆ´çˆºçˆ¼çˆ¾ç‰€ç‰ç‰‚ç‰ƒç‰„ç‰…ç‰†ç‰‰ç‰Šç‰‹ç‰Žç‰ç‰ç‰‘ç‰“ç‰”ç‰•ç‰—ç‰˜ç‰šç‰œç‰žç‰ ç‰£ç‰¤ç‰¥ç‰¨ç‰ªç‰«ç‰¬ç‰­ç‰°ç‰±ç‰³ç‰´ç‰¶ç‰·ç‰¸ç‰»ç‰¼ç‰½çŠ‚çŠƒçŠ…çŠ†çŠ‡çŠˆçŠ‰çŠŒçŠŽçŠçŠ‘çŠ“çŠ”çŠ•çŠ–çŠ—çŠ˜çŠ™çŠšçŠ›çŠœçŠçŠžçŠ çŠ¡çŠ¢çŠ£çŠ¤çŠ¥çŠ¦çŠ§çŠ¨çŠ©çŠªçŠ«çŠ®çŠ±çŠ²çŠ³çŠµçŠºçŠ»çŠ¼çŠ½çŠ¾çŠ¿ç‹€ç‹…ç‹†ç‹‡ç‹‰ç‹Šç‹‹ç‹Œç‹ç‹‘ç‹“ç‹”ç‹•ç‹–ç‹˜ç‹šç‹›ï¿½".split("");
    for(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}
    D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã€€ã€ã€‚Â·Ë‰Ë‡Â¨ã€ƒã€…â€”ï½žâ€–â€¦â€˜â€™â€œâ€ã€”ã€•ã€ˆã€‰ã€Šã€‹ã€Œã€ã€Žã€ã€–ã€—ã€ã€‘Â±Ã—Ã·âˆ¶âˆ§âˆ¨âˆ‘âˆâˆªâˆ©âˆˆâˆ·âˆšâŠ¥âˆ¥âˆ âŒ’âŠ™âˆ«âˆ®â‰¡â‰Œâ‰ˆâˆ½âˆâ‰ â‰®â‰¯â‰¤â‰¥âˆžâˆµâˆ´â™‚â™€Â°â€²â€³â„ƒï¼„Â¤ï¿ ï¿¡â€°Â§â„–â˜†â˜…â—‹â—â—Žâ—‡â—†â–¡â– â–³â–²â€»â†’â†â†‘â†“ã€“ï¿½".split("");
    for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
    D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â…°â…±â…²â…³â…´â…µâ…¶â…·â…¸â…¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â’ˆâ’‰â’Šâ’‹â’Œâ’â’Žâ’â’â’‘â’’â’“â’”â’•â’–â’—â’˜â’™â’šâ’›â‘´â‘µâ‘¶â‘·â‘¸â‘¹â‘ºâ‘»â‘¼â‘½â‘¾â‘¿â’€â’â’‚â’ƒâ’„â’…â’†â’‡â‘ â‘¡â‘¢â‘£â‘¤â‘¥â‘¦â‘§â‘¨â‘©ï¿½ï¿½ãˆ ãˆ¡ãˆ¢ãˆ£ãˆ¤ãˆ¥ãˆ¦ãˆ§ãˆ¨ãˆ©ï¿½ï¿½â… â…¡â…¢â…£â…¤â…¥â…¦â…§â…¨â…©â…ªâ…«ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
    D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼ï¼‚ï¼ƒï¿¥ï¼…ï¼†ï¼‡ï¼ˆï¼‰ï¼Šï¼‹ï¼Œï¼ï¼Žï¼ï¼ï¼‘ï¼’ï¼“ï¼”ï¼•ï¼–ï¼—ï¼˜ï¼™ï¼šï¼›ï¼œï¼ï¼žï¼Ÿï¼ ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¼»ï¼¼ï¼½ï¼¾ï¼¿ï½€ï½ï½‚ï½ƒï½„ï½…ï½†ï½‡ï½ˆï½‰ï½Šï½‹ï½Œï½ï½Žï½ï½ï½‘ï½’ï½“ï½”ï½•ï½–ï½—ï½˜ï½™ï½šï½›ï½œï½ï¿£ï¿½".split("");
    for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
    D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãã‚ãƒã„ã…ã†ã‡ãˆã‰ãŠã‹ãŒããŽããã‘ã’ã“ã”ã•ã–ã—ã˜ã™ãšã›ãœããžãŸã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ã‚€ã‚ã‚‚ã‚ƒã‚„ã‚…ã‚†ã‚‡ã‚ˆã‚‰ã‚Šã‚‹ã‚Œã‚ã‚Žã‚ã‚ã‚‘ã‚’ã‚“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
    D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã‚¡ã‚¢ã‚£ã‚¤ã‚¥ã‚¦ã‚§ã‚¨ã‚©ã‚ªã‚«ã‚¬ã‚­ã‚®ã‚¯ã‚°ã‚±ã‚²ã‚³ã‚´ã‚µã‚¶ã‚·ã‚¸ã‚¹ã‚ºã‚»ã‚¼ã‚½ã‚¾ã‚¿ãƒ€ãƒãƒ‚ãƒƒãƒ„ãƒ…ãƒ†ãƒ‡ãƒˆãƒ‰ãƒŠãƒ‹ãƒŒãƒãƒŽãƒãƒãƒ‘ãƒ’ãƒ“ãƒ”ãƒ•ãƒ–ãƒ—ãƒ˜ãƒ™ãƒšãƒ›ãƒœãƒãƒžãƒŸãƒ ãƒ¡ãƒ¢ãƒ£ãƒ¤ãƒ¥ãƒ¦ãƒ§ãƒ¨ãƒ©ãƒªãƒ«ãƒ¬ãƒ­ãƒ®ãƒ¯ãƒ°ãƒ±ãƒ²ãƒ³ãƒ´ãƒµãƒ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
    D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î‘Î’Î“Î”Î•Î–Î—Î˜Î™ÎšÎ›ÎœÎÎžÎŸÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿Ï€ÏÏƒÏ„Ï…Ï†Ï‡ÏˆÏ‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¸µï¸¶ï¸¹ï¸ºï¸¿ï¹€ï¸½ï¸¾ï¹ï¹‚ï¹ƒï¹„ï¿½ï¿½ï¸»ï¸¼ï¸·ï¸¸ï¸±ï¿½ï¸³ï¸´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
    D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÐÐ‘Ð’Ð“Ð”Ð•ÐÐ–Ð—Ð˜Ð™ÐšÐ›ÐœÐÐžÐŸÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑ‘Ð¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿Ñ€ÑÑ‚ÑƒÑ„Ñ…Ñ†Ñ‡ÑˆÑ‰ÑŠÑ‹ÑŒÑÑŽÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
    D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ËŠË‹Ë™â€“â€•â€¥â€µâ„…â„‰â†–â†—â†˜â†™âˆ•âˆŸâˆ£â‰’â‰¦â‰§âŠ¿â•â•‘â•’â•“â•”â••â•–â•—â•˜â•™â•šâ•›â•œâ•â•žâ•Ÿâ• â•¡â•¢â•£â•¤â•¥â•¦â•§â•¨â•©â•ªâ•«â•¬â•­â•®â•¯â•°â•±â•²â•³â–â–‚â–ƒâ–„â–…â–†â–‡ï¿½â–ˆâ–‰â–Šâ–‹â–Œâ–â–Žâ–â–“â–”â–•â–¼â–½â—¢â—£â—¤â—¥â˜‰âŠ•ã€’ã€ã€žï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÄÃ¡ÇŽÃ Ä“Ã©Ä›Ã¨Ä«Ã­ÇÃ¬ÅÃ³Ç’Ã²Å«ÃºÇ”Ã¹Ç–Ç˜ÇšÇœÃ¼ÃªÉ‘ï¿½Å„Åˆï¿½É¡ï¿½ï¿½ï¿½ï¿½ã„…ã„†ã„‡ã„ˆã„‰ã„Šã„‹ã„Œã„ã„Žã„ã„ã„‘ã„’ã„“ã„”ã„•ã„–ã„—ã„˜ã„™ã„šã„›ã„œã„ã„žã„Ÿã„ ã„¡ã„¢ã„£ã„¤ã„¥ã„¦ã„§ã„¨ã„©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
    D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã€¡ã€¢ã€£ã€¤ã€¥ã€¦ã€§ã€¨ã€©ãŠ£ãŽŽãŽãŽœãŽãŽžãŽ¡ã„ãŽã‘ã’ã•ï¸°ï¿¢ï¿¤ï¿½â„¡ãˆ±ï¿½â€ï¿½ï¿½ï¿½ãƒ¼ã‚›ã‚œãƒ½ãƒ¾ã€†ã‚ã‚žï¹‰ï¹Šï¹‹ï¹Œï¹ï¹Žï¹ï¹ï¹‘ï¹’ï¹”ï¹•ï¹–ï¹—ï¹™ï¹šï¹›ï¹œï¹ï¹žï¹Ÿï¹ ï¹¡ï¿½ï¹¢ï¹£ï¹¤ï¹¥ï¹¦ï¹¨ï¹©ï¹ªï¹«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã€‡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â”€â”â”‚â”ƒâ”„â”…â”†â”‡â”ˆâ”‰â”Šâ”‹â”Œâ”â”Žâ”â”â”‘â”’â”“â””â”•â”–â”—â”˜â”™â”šâ”›â”œâ”â”žâ”Ÿâ” â”¡â”¢â”£â”¤â”¥â”¦â”§â”¨â”©â”ªâ”«â”¬â”­â”®â”¯â”°â”±â”²â”³â”´â”µâ”¶â”·â”¸â”¹â”ºâ”»â”¼â”½â”¾â”¿â•€â•â•‚â•ƒâ•„â•…â•†â•‡â•ˆâ•‰â•Šâ•‹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
    D[170] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç‹œç‹ç‹Ÿç‹¢ç‹£ç‹¤ç‹¥ç‹¦ç‹§ç‹ªç‹«ç‹µç‹¶ç‹¹ç‹½ç‹¾ç‹¿çŒ€çŒ‚çŒ„çŒ…çŒ†çŒ‡çŒˆçŒ‰çŒ‹çŒŒçŒçŒçŒçŒ‘çŒ’çŒ”çŒ˜çŒ™çŒšçŒŸçŒ çŒ£çŒ¤çŒ¦çŒ§çŒ¨çŒ­çŒ¯çŒ°çŒ²çŒ³çŒµçŒ¶çŒºçŒ»çŒ¼çŒ½ç€çç‚çƒç„ç…ç†ç‡çˆï¿½ç‰çŠç‹çŒçŽçç‘ç“ç”ç•ç–ç˜ç™çšç›çœççžçŸç¡ç¢ç£ç¤ç¥ç¦ç§ç¨ç©çªç«ç®ç°ç±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
    D[171] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç²ç³ç´çµç¶ç·ç¸ç¹çºç»ç¼ç½ç¿çŽ€çŽçŽ‚çŽƒçŽ…çŽ†çŽˆçŽŠçŽŒçŽçŽçŽçŽ’çŽ“çŽ”çŽ•çŽ—çŽ˜çŽ™çŽšçŽœçŽçŽžçŽ çŽ¡çŽ£çŽ¤çŽ¥çŽ¦çŽ§çŽ¨çŽªçŽ¬çŽ­çŽ±çŽ´çŽµçŽ¶çŽ¸çŽ¹çŽ¼çŽ½çŽ¾çŽ¿ççƒç„ç…ç†ç‡ï¿½ç‹çŒçŽç’ç“ç”ç•ç–ç—ç˜çšç›çœççŸç¡ç¢ç£ç¤ç¦ç¨çªç«ç¬ç®ç¯ç°ç±ç³ç´çµç¶ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
    D[172] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¸ç¹çºç»ç¼ç½ç¾ç¿ç€çç‚ç„ç‡çˆç‹çŒççŽç‘ç’ç“ç”ç•ç–ç—ç˜ç™çœççžçŸç ç¡ç£ç¤ç§ç©ç«ç­ç¯ç±ç²ç·ç¸ç¹çºç»ç½ç¾ç¿ç‘€ç‘‚ç‘ƒç‘„ç‘…ç‘†ç‘‡ç‘ˆç‘‰ç‘Šç‘‹ç‘Œç‘ï¿½ç‘Žç‘ç‘ç‘‘ç‘’ç‘“ç‘”ç‘–ç‘˜ç‘ç‘ ç‘¡ç‘¢ç‘£ç‘¤ç‘¥ç‘¦ç‘§ç‘¨ç‘©ç‘ªç‘«ç‘¬ç‘®ç‘¯ç‘±ç‘²ç‘³ç‘´ç‘µç‘¸ç‘¹ç‘ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
    D[173] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç‘»ç‘¼ç‘½ç‘¿ç’‚ç’„ç’…ç’†ç’ˆç’‰ç’Šç’Œç’ç’ç’‘ç’’ç’“ç’”ç’•ç’–ç’—ç’˜ç’™ç’šç’›ç’ç’Ÿç’ ç’¡ç’¢ç’£ç’¤ç’¥ç’¦ç’ªç’«ç’¬ç’­ç’®ç’¯ç’°ç’±ç’²ç’³ç’´ç’µç’¶ç’·ç’¸ç’¹ç’»ç’¼ç’½ç’¾ç’¿ç“€ç“ç“‚ç“ƒç“„ç“…ç“†ç“‡ï¿½ç“ˆç“‰ç“Šç“‹ç“Œç“ç“Žç“ç“ç“‘ç““ç“”ç“•ç“–ç“—ç“˜ç“™ç“šç“›ç“ç“Ÿç“¡ç“¥ç“§ç“¨ç“©ç“ªç“«ç“¬ç“­ç“°ç“±ç“²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
    D[174] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç“³ç“µç“¸ç“¹ç“ºç“»ç“¼ç“½ç“¾ç”€ç”ç”‚ç”ƒç”…ç”†ç”‡ç”ˆç”‰ç”Šç”‹ç”Œç”Žç”ç”’ç””ç”•ç”–ç”—ç”›ç”ç”žç” ç”¡ç”¢ç”£ç”¤ç”¦ç”§ç”ªç”®ç”´ç”¶ç”¹ç”¼ç”½ç”¿ç•ç•‚ç•ƒç•„ç•†ç•‡ç•‰ç•Šç•ç•ç•‘ç•’ç•“ç••ç•–ç•—ç•˜ï¿½ç•ç•žç•Ÿç• ç•¡ç•¢ç•£ç•¤ç•§ç•¨ç•©ç•«ç•¬ç•­ç•®ç•¯ç•°ç•±ç•³ç•µç•¶ç•·ç•ºç•»ç•¼ç•½ç•¾ç–€ç–ç–‚ç–„ç–…ç–‡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
    D[175] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç–ˆç–‰ç–Šç–Œç–ç–Žç–ç–“ç–•ç–˜ç–›ç–œç–žç–¢ç–¦ç–§ç–¨ç–©ç–ªç–­ç–¶ç–·ç–ºç–»ç–¿ç—€ç—ç—†ç—‹ç—Œç—Žç—ç—ç—‘ç—“ç——ç—™ç—šç—œç—ç—Ÿç— ç—¡ç—¥ç—©ç—¬ç—­ç—®ç—¯ç—²ç—³ç—µç—¶ç—·ç—¸ç—ºç—»ç—½ç—¾ç˜‚ç˜„ç˜†ç˜‡ï¿½ç˜ˆç˜‰ç˜‹ç˜ç˜Žç˜ç˜‘ç˜’ç˜“ç˜”ç˜–ç˜šç˜œç˜ç˜žç˜¡ç˜£ç˜§ç˜¨ç˜¬ç˜®ç˜¯ç˜±ç˜²ç˜¶ç˜·ç˜¹ç˜ºç˜»ç˜½ç™ç™‚ç™„ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
    D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç™…ç™†ç™‡ç™ˆç™‰ç™Šç™‹ç™Žç™ç™ç™‘ç™’ç™“ç™•ç™—ç™˜ç™™ç™šç™›ç™ç™Ÿç™ ç™¡ç™¢ç™¤ç™¥ç™¦ç™§ç™¨ç™©ç™ªç™¬ç™­ç™®ç™°ç™±ç™²ç™³ç™´ç™µç™¶ç™·ç™¹ç™ºç™¼ç™¿çš€çšçšƒçš…çš‰çšŠçšŒçšçšçšçš’çš”çš•çš—çš˜çššçš›ï¿½çšœçšçšžçšŸçš çš¡çš¢çš£çš¥çš¦çš§çš¨çš©çšªçš«çš¬çš­çš¯çš°çš³çšµçš¶çš·çš¸çš¹çšºçš»çš¼çš½çš¾ç›€ç›ç›ƒå•Šé˜¿åŸƒæŒ¨å“Žå”‰å“€çš‘ç™Œè”¼çŸ®è‰¾ç¢çˆ±éš˜éžæ°¨å®‰ä¿ºæŒ‰æš—å²¸èƒºæ¡ˆè‚®æ˜‚ç›Žå‡¹æ•–ç†¬ç¿±è¢„å‚²å¥¥æ‡Šæ¾³èŠ­æŒæ‰’å­å§ç¬†å…«ç–¤å·´æ‹”è·‹é¶æŠŠè€™åéœ¸ç½¢çˆ¸ç™½æŸç™¾æ‘†ä½°è´¥æ‹œç¨—æ–‘ç­æ¬æ‰³èˆ¬é¢æ¿ç‰ˆæ‰®æ‹Œä¼´ç“£åŠåŠžç»Šé‚¦å¸®æ¢†æ¦œè†€ç»‘æ£’ç£…èšŒé•‘å‚è°¤è‹žèƒžåŒ…è¤’å‰¥ï¿½".split("");
    for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
    D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç›„ç›‡ç›‰ç›‹ç›Œç›“ç›•ç›™ç›šç›œç›ç›žç› ç›¡ç›¢ç›£ç›¤ç›¦ç›§ç›¨ç›©ç›ªç›«ç›¬ç›­ç›°ç›³ç›µç›¶ç›·ç›ºç›»ç›½ç›¿çœ€çœ‚çœƒçœ…çœ†çœŠçœŒçœŽçœçœçœ‘çœ’çœ“çœ”çœ•çœ–çœ—çœ˜çœ›çœœçœçœžçœ¡çœ£çœ¤çœ¥çœ§çœªçœ«ï¿½çœ¬çœ®çœ°çœ±çœ²çœ³çœ´çœ¹çœ»çœ½çœ¾çœ¿ç‚ç„ç…ç†çˆç‰çŠç‹çŒççŽçç’ç“ç”ç•ç–ç—ç˜ç™çœè–„é›¹ä¿å ¡é¥±å®æŠ±æŠ¥æš´è±¹é²çˆ†æ¯ç¢‘æ‚²å‘åŒ—è¾ˆèƒŒè´é’¡å€ç‹ˆå¤‡æƒ«ç„™è¢«å¥”è‹¯æœ¬ç¬¨å´©ç»·ç”­æ³µè¹¦è¿¸é€¼é¼»æ¯”é„™ç¬”å½¼ç¢§è“–è”½æ¯•æ¯™æ¯–å¸åº‡ç—¹é—­æ•å¼Šå¿…è¾Ÿå£è‡‚é¿é™›éž­è¾¹ç¼–è´¬æ‰ä¾¿å˜åžè¾¨è¾©è¾«éæ ‡å½ªè†˜è¡¨é³–æ†‹åˆ«ç˜ªå½¬æ–Œæ¿’æ»¨å®¾æ‘ˆå…µå†°æŸ„ä¸™ç§‰é¥¼ç‚³ï¿½".split("");
    for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
    D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ççžçŸç ç¤ç§ç©çªç­ç®ç¯ç°ç±ç²ç³ç´çµç¶ç·ç¸çºç»ç¼çžçž‚çžƒçž†çž‡çžˆçž‰çžŠçž‹çžçžçž“çž”çž•çž–çž—çž˜çž™çžšçž›çžœçžçžžçž¡çž£çž¤çž¦çž¨çž«çž­çž®çž¯çž±çž²çž´çž¶çž·çž¸çž¹çžºï¿½çž¼çž¾çŸ€çŸçŸ‚çŸƒçŸ„çŸ…çŸ†çŸ‡çŸˆçŸ‰çŸŠçŸ‹çŸŒçŸŽçŸçŸçŸ‘çŸ’çŸ“çŸ”çŸ•çŸ–çŸ˜çŸ™çŸšçŸçŸžçŸŸçŸ çŸ¡çŸ¤ç—…å¹¶çŽ»è æ’­æ‹¨é’µæ³¢åšå‹ƒæé“‚ç®”ä¼¯å¸›èˆ¶è„–è†Šæ¸¤æ³Šé©³æ•åœå“ºè¡¥åŸ ä¸å¸ƒæ­¥ç°¿éƒ¨æ€–æ“¦çŒœè£ææ‰è´¢ç¬è¸©é‡‡å½©èœè”¡é¤å‚èš•æ®‹æƒ­æƒ¨ç¿è‹èˆ±ä»“æ²§è—æ“ç³™æ§½æ›¹è‰åŽ•ç­–ä¾§å†Œæµ‹å±‚è¹­æ’å‰èŒ¬èŒ¶æŸ¥ç¢´æ½å¯Ÿå²”å·®è¯§æ‹†æŸ´è±ºæ€æŽºè‰é¦‹è°—ç¼ é“²äº§é˜é¢¤æ˜ŒçŒ–ï¿½".split("");
    for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
    D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çŸ¦çŸ¨çŸªçŸ¯çŸ°çŸ±çŸ²çŸ´çŸµçŸ·çŸ¹çŸºçŸ»çŸ¼ç ƒç „ç …ç †ç ‡ç ˆç Šç ‹ç Žç ç ç “ç •ç ™ç ›ç žç  ç ¡ç ¢ç ¤ç ¨ç ªç «ç ®ç ¯ç ±ç ²ç ³ç µç ¶ç ½ç ¿ç¡ç¡‚ç¡ƒç¡„ç¡†ç¡ˆç¡‰ç¡Šç¡‹ç¡ç¡ç¡‘ç¡“ç¡”ç¡˜ç¡™ç¡šï¿½ç¡›ç¡œç¡žç¡Ÿç¡ ç¡¡ç¡¢ç¡£ç¡¤ç¡¥ç¡¦ç¡§ç¡¨ç¡©ç¡¯ç¡°ç¡±ç¡²ç¡³ç¡´ç¡µç¡¶ç¡¸ç¡¹ç¡ºç¡»ç¡½ç¡¾ç¡¿ç¢€ç¢ç¢‚ç¢ƒåœºå°å¸¸é•¿å¿è‚ åŽ‚æ•žç•…å”±å€¡è¶…æŠ„é’žæœå˜²æ½®å·¢åµç‚’è½¦æ‰¯æ’¤æŽ£å½»æ¾ˆéƒ´è‡£è¾°å°˜æ™¨å¿±æ²‰é™ˆè¶è¡¬æ’‘ç§°åŸŽæ©™æˆå‘ˆä¹˜ç¨‹æƒ©æ¾„è¯šæ‰¿é€žéª‹ç§¤åƒç—´æŒåŒ™æ± è¿Ÿå¼›é©°è€»é½¿ä¾ˆå°ºèµ¤ç¿…æ–¥ç‚½å……å†²è™«å´‡å® æŠ½é…¬ç•´è¸Œç¨ æ„ç­¹ä»‡ç»¸çž…ä¸‘è‡­åˆå‡ºæ©±åŽ¨èº‡é”„é›æ»é™¤æ¥šï¿½".split("");
    for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
    D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢„ç¢…ç¢†ç¢ˆç¢Šç¢‹ç¢ç¢ç¢’ç¢”ç¢•ç¢–ç¢™ç¢ç¢žç¢ ç¢¢ç¢¤ç¢¦ç¢¨ç¢©ç¢ªç¢«ç¢¬ç¢­ç¢®ç¢¯ç¢µç¢¶ç¢·ç¢¸ç¢ºç¢»ç¢¼ç¢½ç¢¿ç£€ç£‚ç£ƒç£„ç£†ç£‡ç£ˆç£Œç£ç£Žç£ç£‘ç£’ç£“ç£–ç£—ç£˜ç£šç£›ç£œç£ç£žç£Ÿç£ ç£¡ç£¢ç££ï¿½ç£¤ç£¥ç£¦ç£§ç£©ç£ªç£«ç£­ç£®ç£¯ç£°ç£±ç£³ç£µç£¶ç£¸ç£¹ç£»ç£¼ç£½ç£¾ç£¿ç¤€ç¤‚ç¤ƒç¤„ç¤†ç¤‡ç¤ˆç¤‰ç¤Šç¤‹ç¤Œç¡€å‚¨çŸ—æè§¦å¤„æ£å·ç©¿æ¤½ä¼ èˆ¹å–˜ä¸²ç–®çª—å¹¢åºŠé—¯åˆ›å¹ç‚Šæ¶é”¤åž‚æ˜¥æ¤¿é†‡å”‡æ·³çº¯è ¢æˆ³ç»°ç–µèŒ¨ç£é›Œè¾žæ…ˆç“·è¯æ­¤åˆºèµæ¬¡èªè‘±å›±åŒ†ä»Žä¸›å‡‘ç²—é†‹ç°‡ä¿ƒè¹¿ç¯¡çªœæ‘§å´”å‚¬è„†ç˜ç²¹æ·¬ç¿ æ‘å­˜å¯¸ç£‹æ’®æ“æŽªæŒ«é”™æ­è¾¾ç­”ç˜©æ‰“å¤§å‘†æ­¹å‚£æˆ´å¸¦æ®†ä»£è´·è¢‹å¾…é€®ï¿½".split("");
    for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
    D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¤ç¤Žç¤ç¤ç¤‘ç¤’ç¤”ç¤•ç¤–ç¤—ç¤˜ç¤™ç¤šç¤›ç¤œç¤ç¤Ÿç¤ ç¤¡ç¤¢ç¤£ç¤¥ç¤¦ç¤§ç¤¨ç¤©ç¤ªç¤«ç¤¬ç¤­ç¤®ç¤¯ç¤°ç¤±ç¤²ç¤³ç¤µç¤¶ç¤·ç¤¸ç¤¹ç¤½ç¤¿ç¥‚ç¥ƒç¥„ç¥…ç¥‡ç¥Šç¥‹ç¥Œç¥ç¥Žç¥ç¥ç¥‘ç¥’ç¥”ç¥•ç¥˜ç¥™ç¥¡ç¥£ï¿½ç¥¤ç¥¦ç¥©ç¥ªç¥«ç¥¬ç¥®ç¥°ç¥±ç¥²ç¥³ç¥´ç¥µç¥¶ç¥¹ç¥»ç¥¼ç¥½ç¥¾ç¥¿ç¦‚ç¦ƒç¦†ç¦‡ç¦ˆç¦‰ç¦‹ç¦Œç¦ç¦Žç¦ç¦‘ç¦’æ€ è€½æ‹…ä¸¹å•éƒ¸æŽ¸èƒ†æ—¦æ°®ä½†æƒ®æ·¡è¯žå¼¹è›‹å½“æŒ¡å…šè¡æ¡£åˆ€æ£è¹ˆå€’å²›ç¥·å¯¼åˆ°ç¨»æ‚¼é“ç›—å¾·å¾—çš„è¹¬ç¯ç™»ç­‰çžªå‡³é‚“å ¤ä½Žæ»´è¿ªæ•Œç¬›ç‹„æ¶¤ç¿Ÿå«¡æŠµåº•åœ°è’‚ç¬¬å¸å¼Ÿé€’ç¼”é¢ æŽ‚æ»‡ç¢˜ç‚¹å…¸é›åž«ç”µä½ƒç”¸åº—æƒ¦å¥ æ·€æ®¿ç¢‰å¼é›•å‡‹åˆæŽ‰åŠé’“è°ƒè·Œçˆ¹ç¢Ÿè¶è¿­è°å ï¿½".split("");
    for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
    D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦“ç¦”ç¦•ç¦–ç¦—ç¦˜ç¦™ç¦›ç¦œç¦ç¦žç¦Ÿç¦ ç¦¡ç¦¢ç¦£ç¦¤ç¦¥ç¦¦ç¦¨ç¦©ç¦ªç¦«ç¦¬ç¦­ç¦®ç¦¯ç¦°ç¦±ç¦²ç¦´ç¦µç¦¶ç¦·ç¦¸ç¦¼ç¦¿ç§‚ç§„ç§…ç§‡ç§ˆç§Šç§Œç§Žç§ç§ç§“ç§”ç§–ç§—ç§™ç§šç§›ç§œç§ç§žç§ ç§¡ç§¢ç§¥ç§¨ç§ªï¿½ç§¬ç§®ç§±ç§²ç§³ç§´ç§µç§¶ç§·ç§¹ç§ºç§¼ç§¾ç§¿ç¨ç¨„ç¨…ç¨‡ç¨ˆç¨‰ç¨Šç¨Œç¨ç¨ç¨‘ç¨’ç¨“ç¨•ç¨–ç¨˜ç¨™ç¨›ç¨œä¸ç›¯å®é’‰é¡¶é¼Žé”­å®šè®¢ä¸¢ä¸œå†¬è‘£æ‡‚åŠ¨æ ‹ä¾—æ«å†»æ´žå…œæŠ–æ–—é™¡è±†é€—ç—˜éƒ½ç£æ¯’çŠŠç‹¬è¯»å µç¹èµŒæœé•€è‚šåº¦æ¸¡å¦’ç«¯çŸ­é”»æ®µæ–­ç¼Žå †å…‘é˜Ÿå¯¹å¢©å¨è¹²æ•¦é¡¿å›¤é’ç›¾éæŽ‡å“†å¤šå¤ºåž›èº²æœµè·ºèˆµå‰æƒ°å •è›¾å³¨é¹…ä¿„é¢è®¹å¨¥æ¶åŽ„æ‰¼éé„‚é¥¿æ©è€Œå„¿è€³å°”é¥µæ´±äºŒï¿½".split("");
    for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
    D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨ç¨Ÿç¨¡ç¨¢ç¨¤ç¨¥ç¨¦ç¨§ç¨¨ç¨©ç¨ªç¨«ç¨¬ç¨­ç¨®ç¨¯ç¨°ç¨±ç¨²ç¨´ç¨µç¨¶ç¨¸ç¨ºç¨¾ç©€ç©ç©‚ç©ƒç©„ç©…ç©‡ç©ˆç©‰ç©Šç©‹ç©Œç©ç©Žç©ç©ç©’ç©“ç©”ç©•ç©–ç©˜ç©™ç©šç©›ç©œç©ç©žç©Ÿç© ç©¡ç©¢ç©£ç©¤ç©¥ç©¦ç©§ç©¨ï¿½ç©©ç©ªç©«ç©¬ç©­ç©®ç©¯ç©±ç©²ç©³ç©µç©»ç©¼ç©½ç©¾çª‚çª…çª‡çª‰çªŠçª‹çªŒçªŽçªçªçª“çª”çª™çªšçª›çªžçª¡çª¢è´°å‘ç½šç­ä¼ä¹é˜€æ³•çè—©å¸†ç•ªç¿»æ¨ŠçŸ¾é’’ç¹å‡¡çƒ¦åè¿”èŒƒè´©çŠ¯é¥­æ³›åŠèŠ³æ–¹è‚ªæˆ¿é˜²å¦¨ä»¿è®¿çººæ”¾è²éžå•¡é£žè‚¥åŒªè¯½å è‚ºåºŸæ²¸è´¹èŠ¬é…šå©æ°›åˆ†çº·åŸç„šæ±¾ç²‰å¥‹ä»½å¿¿æ„¤ç²ªä¸°å°æž«èœ‚å³°é”‹é£Žç–¯çƒ½é€¢å†¯ç¼è®½å¥‰å‡¤ä½›å¦å¤«æ•·è‚¤å­µæ‰¶æ‹‚è¾å¹…æ°Ÿç¬¦ä¼ä¿˜æœï¿½".split("");
    for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
    D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çª£çª¤çª§çª©çªªçª«çª®çª¯çª°çª±çª²çª´çªµçª¶çª·çª¸çª¹çªºçª»çª¼çª½çª¾ç«€ç«ç«‚ç«ƒç«„ç«…ç«†ç«‡ç«ˆç«‰ç«Šç«Œç«ç«Žç«ç«ç«‘ç«’ç«“ç«”ç«•ç«—ç«˜ç«šç«›ç«œç«ç«¡ç«¢ç«¤ç«§ç«¨ç«©ç«ªç««ç«¬ç«®ç«°ç«±ç«²ç«³ï¿½ç«´ç«µç«¶ç«·ç«¸ç«»ç«¼ç«¾ç¬€ç¬ç¬‚ç¬…ç¬‡ç¬‰ç¬Œç¬ç¬Žç¬ç¬’ç¬“ç¬–ç¬—ç¬˜ç¬šç¬œç¬ç¬Ÿç¬¡ç¬¢ç¬£ç¬§ç¬©ç¬­æµ®æ¶ªç¦è¢±å¼—ç”«æŠšè¾…ä¿¯é‡œæ–§è„¯è…‘åºœè…èµ´å‰¯è¦†èµ‹å¤å‚…ä»˜é˜œçˆ¶è…¹è´Ÿå¯Œè®£é™„å¦‡ç¼šå’å™¶å˜Žè¯¥æ”¹æ¦‚é’™ç›–æº‰å¹²ç”˜æ†æŸ‘ç«¿è‚èµ¶æ„Ÿç§†æ•¢èµ£å†ˆåˆšé’¢ç¼¸è‚›çº²å²—æ¸¯æ ç¯™çš‹é«˜è†ç¾”ç³•æžé•ç¨¿å‘Šå“¥æ­Œææˆˆé¸½èƒ³ç–™å‰²é©è‘›æ ¼è›¤é˜éš”é“¬ä¸ªå„ç»™æ ¹è·Ÿè€•æ›´åºšç¾¹ï¿½".split("");
    for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
    D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¬¯ç¬°ç¬²ç¬´ç¬µç¬¶ç¬·ç¬¹ç¬»ç¬½ç¬¿ç­€ç­ç­‚ç­ƒç­„ç­†ç­ˆç­Šç­ç­Žç­“ç­•ç­—ç­™ç­œç­žç­Ÿç­¡ç­£ç­¤ç­¥ç­¦ç­§ç­¨ç­©ç­ªç­«ç­¬ç­­ç­¯ç­°ç­³ç­´ç­¶ç­¸ç­ºç­¼ç­½ç­¿ç®ç®‚ç®ƒç®„ç®†ç®‡ç®ˆç®‰ç®Šç®‹ç®Œç®Žç®ï¿½ç®‘ç®’ç®“ç®–ç®˜ç®™ç®šç®›ç®žç®Ÿç® ç®£ç®¤ç®¥ç®®ç®¯ç®°ç®²ç®³ç®µç®¶ç®·ç®¹ç®ºç®»ç®¼ç®½ç®¾ç®¿ç¯€ç¯‚ç¯ƒç¯„åŸ‚è€¿æ¢—å·¥æ”»åŠŸæ­é¾šä¾›èº¬å…¬å®«å¼“å·©æ±žæ‹±è´¡å…±é’©å‹¾æ²Ÿè‹Ÿç‹—åž¢æž„è´­å¤Ÿè¾œè‡å’•ç®ä¼°æ²½å­¤å§‘é¼“å¤è›Šéª¨è°·è‚¡æ•…é¡¾å›ºé›‡åˆ®ç“œå‰å¯¡æŒ‚è¤‚ä¹–æ‹æ€ªæ£ºå…³å®˜å† è§‚ç®¡é¦†ç½æƒ¯çŒè´¯å…‰å¹¿é€›ç‘°è§„åœ­ç¡…å½’é¾Ÿé—ºè½¨é¬¼è¯¡ç™¸æ¡‚æŸœè·ªè´µåˆ½è¾Šæ»šæ£é”…éƒ­å›½æžœè£¹è¿‡å“ˆï¿½".split("");
    for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
    D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¯…ç¯ˆç¯‰ç¯Šç¯‹ç¯ç¯Žç¯ç¯ç¯’ç¯”ç¯•ç¯–ç¯—ç¯˜ç¯›ç¯œç¯žç¯Ÿç¯ ç¯¢ç¯£ç¯¤ç¯§ç¯¨ç¯©ç¯«ç¯¬ç¯­ç¯¯ç¯°ç¯²ç¯³ç¯´ç¯µç¯¶ç¯¸ç¯¹ç¯ºç¯»ç¯½ç¯¿ç°€ç°ç°‚ç°ƒç°„ç°…ç°†ç°ˆç°‰ç°Šç°ç°Žç°ç°‘ç°’ç°“ç°”ç°•ç°—ç°˜ç°™ï¿½ç°šç°›ç°œç°ç°žç° ç°¡ç°¢ç°£ç°¤ç°¥ç°¨ç°©ç°«ç°¬ç°­ç°®ç°¯ç°°ç°±ç°²ç°³ç°´ç°µç°¶ç°·ç°¹ç°ºç°»ç°¼ç°½ç°¾ç±‚éª¸å­©æµ·æ°¦äº¥å®³éª‡é…£æ†¨é‚¯éŸ©å«æ¶µå¯’å‡½å–Šç½•ç¿°æ’¼ææ—±æ†¾æ‚ç„Šæ±—æ±‰å¤¯æ­èˆªå£•åšŽè±ªæ¯«éƒå¥½è€—å·æµ©å‘µå–è·èæ ¸ç¦¾å’Œä½•åˆç›’è²‰é˜‚æ²³æ¶¸èµ«è¤é¹¤è´ºå˜¿é»‘ç—•å¾ˆç‹ æ¨å“¼äº¨æ¨ªè¡¡æ’è½°å“„çƒ˜è™¹é¸¿æ´ªå®å¼˜çº¢å–‰ä¾¯çŒ´å¼åŽšå€™åŽå‘¼ä¹Žå¿½ç‘šå£¶è‘«èƒ¡è´ç‹ç³Šæ¹–ï¿½".split("");
    for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
    D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç±ƒç±„ç±…ç±†ç±‡ç±ˆç±‰ç±Šç±‹ç±Œç±Žç±ç±ç±‘ç±’ç±“ç±”ç±•ç±–ç±—ç±˜ç±™ç±šç±›ç±œç±ç±žç±Ÿç± ç±¡ç±¢ç±£ç±¤ç±¥ç±¦ç±§ç±¨ç±©ç±ªç±«ç±¬ç±­ç±®ç±¯ç±°ç±±ç±²ç±µç±¶ç±·ç±¸ç±¹ç±ºç±¾ç±¿ç²€ç²ç²‚ç²ƒç²„ç²…ç²†ç²‡ï¿½ç²ˆç²Šç²‹ç²Œç²ç²Žç²ç²ç²“ç²”ç²–ç²™ç²šç²›ç² ç²¡ç²£ç²¦ç²§ç²¨ç²©ç²«ç²¬ç²­ç²¯ç²°ç²´ç²µç²¶ç²·ç²¸ç²ºç²»å¼§è™Žå”¬æŠ¤äº’æ²ªæˆ·èŠ±å“—åŽçŒ¾æ»‘ç”»åˆ’åŒ–è¯æ§å¾Šæ€€æ·®åæ¬¢çŽ¯æ¡“è¿˜ç¼“æ¢æ‚£å”¤ç—ªè±¢ç„•æ¶£å®¦å¹»è’æ…Œé»„ç£ºè—ç°§çš‡å‡°æƒ¶ç…Œæ™ƒå¹Œæè°Žç°æŒ¥è¾‰å¾½æ¢è›”å›žæ¯æ‚”æ…§å‰æƒ æ™¦è´¿ç§½ä¼šçƒ©æ±‡è®³è¯²ç»˜è¤æ˜å©šé­‚æµ‘æ··è±æ´»ä¼™ç«èŽ·æˆ–æƒ‘éœè´§ç¥¸å‡»åœ¾åŸºæœºç•¸ç¨½ç§¯ç®•ï¿½".split("");
    for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
    D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç²¿ç³€ç³‚ç³ƒç³„ç³†ç³‰ç³‹ç³Žç³ç³ç³‘ç³’ç³“ç³”ç³˜ç³šç³›ç³ç³žç³¡ç³¢ç³£ç³¤ç³¥ç³¦ç³§ç³©ç³ªç³«ç³¬ç³­ç³®ç³°ç³±ç³²ç³³ç³´ç³µç³¶ç³·ç³¹ç³ºç³¼ç³½ç³¾ç³¿ç´€ç´ç´‚ç´ƒç´„ç´…ç´†ç´‡ç´ˆç´‰ç´‹ç´Œç´ç´Žç´ç´ï¿½ç´‘ç´’ç´“ç´”ç´•ç´–ç´—ç´˜ç´™ç´šç´›ç´œç´ç´žç´Ÿç´¡ç´£ç´¤ç´¥ç´¦ç´¨ç´©ç´ªç´¬ç´­ç´®ç´°ç´±ç´²ç´³ç´´ç´µç´¶è‚Œé¥¥è¿¹æ¿€è®¥é¸¡å§¬ç»©ç¼‰å‰æžæ£˜è¾‘ç±é›†åŠæ€¥ç–¾æ±²å³å«‰çº§æŒ¤å‡ è„Šå·±è“ŸæŠ€å†€å­£ä¼Žç¥­å‰‚æ‚¸æµŽå¯„å¯‚è®¡è®°æ—¢å¿Œé™…å¦“ç»§çºªå˜‰æž·å¤¹ä½³å®¶åŠ èšé¢Šè´¾ç”²é’¾å‡ç¨¼ä»·æž¶é©¾å«æ­¼ç›‘åšå°–ç¬ºé—´ç…Žå…¼è‚©è‰°å¥¸ç¼„èŒ§æ£€æŸ¬ç¢±ç¡·æ‹£æ¡ç®€ä¿­å‰ªå‡èæ§›é‰´è·µè´±è§é”®ç®­ä»¶ï¿½".split("");
    for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
    D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç´·ç´¸ç´¹ç´ºç´»ç´¼ç´½ç´¾ç´¿çµ€çµçµ‚çµƒçµ„çµ…çµ†çµ‡çµˆçµ‰çµŠçµ‹çµŒçµçµŽçµçµçµ‘çµ’çµ“çµ”çµ•çµ–çµ—çµ˜çµ™çµšçµ›çµœçµçµžçµŸçµ çµ¡çµ¢çµ£çµ¤çµ¥çµ¦çµ§çµ¨çµ©çµªçµ«çµ¬çµ­çµ¯çµ°çµ±çµ²çµ³çµ´çµµçµ¶ï¿½çµ¸çµ¹çµºçµ»çµ¼çµ½çµ¾çµ¿ç¶€ç¶ç¶‚ç¶ƒç¶„ç¶…ç¶†ç¶‡ç¶ˆç¶‰ç¶Šç¶‹ç¶Œç¶ç¶Žç¶ç¶ç¶‘ç¶’ç¶“ç¶”ç¶•ç¶–ç¶—ç¶˜å¥èˆ°å‰‘é¥¯æ¸æº…æ¶§å»ºåƒµå§œå°†æµ†æ±Ÿç–†è’‹æ¡¨å¥–è®²åŒ é…±é™è•‰æ¤’ç¤ç„¦èƒ¶äº¤éƒŠæµ‡éª„å¨‡åš¼æ…é“°çŸ«ä¾¥è„šç‹¡è§’é¥ºç¼´ç»žå‰¿æ•™é…µè½¿è¾ƒå«çª–æ­æŽ¥çš†ç§¸è¡—é˜¶æˆªåŠ«èŠ‚æ¡”æ°æ·ç«ç«­æ´ç»“è§£å§æˆ’è—‰èŠ¥ç•Œå€Ÿä»‹ç–¥è¯«å±Šå·¾ç­‹æ–¤é‡‘ä»Šæ´¥è¥Ÿç´§é”¦ä»…è°¨è¿›é³æ™‹ç¦è¿‘çƒ¬æµ¸ï¿½".split("");
    for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
    D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¶™ç¶šç¶›ç¶œç¶ç¶žç¶Ÿç¶ ç¶¡ç¶¢ç¶£ç¶¤ç¶¥ç¶§ç¶¨ç¶©ç¶ªç¶«ç¶¬ç¶­ç¶¯ç¶°ç¶±ç¶²ç¶³ç¶´ç¶µç¶¶ç¶·ç¶¸ç¶¹ç¶ºç¶»ç¶¼ç¶½ç¶¾ç¶¿ç·€ç·ç·‚ç·ƒç·„ç·…ç·†ç·‡ç·ˆç·‰ç·Šç·‹ç·Œç·ç·Žç·ç·ç·‘ç·’ç·“ç·”ç·•ç·–ç·—ç·˜ç·™ï¿½ç·šç·›ç·œç·ç·žç·Ÿç· ç·¡ç·¢ç·£ç·¤ç·¥ç·¦ç·§ç·¨ç·©ç·ªç·«ç·¬ç·­ç·®ç·¯ç·°ç·±ç·²ç·³ç·´ç·µç·¶ç··ç·¸ç·¹ç·ºå°½åŠ²è†å…¢èŒŽç›æ™¶é²¸äº¬æƒŠç²¾ç²³ç»äº•è­¦æ™¯é¢ˆé™å¢ƒæ•¬é•œå¾„ç—‰é–ç«Ÿç«žå‡€ç‚¯çª˜æªç©¶çº çŽ–éŸ­ä¹…ç¸ä¹é…’åŽ©æ•‘æ—§è‡¼èˆ…å’Žå°±ç–šéž æ‹˜ç‹™ç–½å±…é©¹èŠå±€å’€çŸ©ä¸¾æ²®èšæ‹’æ®å·¨å…·è·è¸žé”¯ä¿±å¥æƒ§ç‚¬å‰§æé¹ƒå¨Ÿå€¦çœ·å·ç»¢æ’…æ”«æŠ‰æŽ˜å€”çˆµè§‰å†³è¯€ç»å‡èŒé’§å†›å›å³»ï¿½".split("");
    for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
    D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç·»ç·¼ç·½ç·¾ç·¿ç¸€ç¸ç¸‚ç¸ƒç¸„ç¸…ç¸†ç¸‡ç¸ˆç¸‰ç¸Šç¸‹ç¸Œç¸ç¸Žç¸ç¸ç¸‘ç¸’ç¸“ç¸”ç¸•ç¸–ç¸—ç¸˜ç¸™ç¸šç¸›ç¸œç¸ç¸žç¸Ÿç¸ ç¸¡ç¸¢ç¸£ç¸¤ç¸¥ç¸¦ç¸§ç¸¨ç¸©ç¸ªç¸«ç¸¬ç¸­ç¸®ç¸¯ç¸°ç¸±ç¸²ç¸³ç¸´ç¸µç¸¶ç¸·ç¸¸ç¸¹ï¿½ç¸ºç¸¼ç¸½ç¸¾ç¸¿ç¹€ç¹‚ç¹ƒç¹„ç¹…ç¹†ç¹ˆç¹‰ç¹Šç¹‹ç¹Œç¹ç¹Žç¹ç¹ç¹‘ç¹’ç¹“ç¹”ç¹•ç¹–ç¹—ç¹˜ç¹™ç¹šç¹›ç¹œç¹ä¿Šç«£æµšéƒ¡éªå–€å’–å¡å’¯å¼€æ©æ¥·å‡¯æ…¨åˆŠå ªå‹˜åŽç çœ‹åº·æ…·ç³ æ‰›æŠ—äº¢ç‚•è€ƒæ‹·çƒ¤é å·è‹›æŸ¯æ£µç£•é¢—ç§‘å£³å’³å¯æ¸´å…‹åˆ»å®¢è¯¾è‚¯å•ƒåž¦æ³å‘å­ç©ºæå­”æŽ§æŠ å£æ‰£å¯‡æž¯å“­çªŸè‹¦é…·åº“è£¤å¤¸åž®æŒŽè·¨èƒ¯å—ç­·ä¾©å¿«å®½æ¬¾åŒ¡ç­ç‹‚æ¡†çŸ¿çœ¶æ—·å†µäºç›”å²¿çª¥è‘µå¥Žé­å‚€ï¿½".split("");
    for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
    D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¹žç¹Ÿç¹ ç¹¡ç¹¢ç¹£ç¹¤ç¹¥ç¹¦ç¹§ç¹¨ç¹©ç¹ªç¹«ç¹¬ç¹­ç¹®ç¹¯ç¹°ç¹±ç¹²ç¹³ç¹´ç¹µç¹¶ç¹·ç¹¸ç¹¹ç¹ºç¹»ç¹¼ç¹½ç¹¾ç¹¿çº€çºçºƒçº„çº…çº†çº‡çºˆçº‰çºŠçº‹çºŒçºçºŽçºçºçº‘çº’çº“çº”çº•çº–çº—çº˜çº™çºšçºœçºçºžï¿½çº®çº´çº»çº¼ç»–ç»¤ç»¬ç»¹ç¼Šç¼ç¼žç¼·ç¼¹ç¼»ç¼¼ç¼½ç¼¾ç¼¿ç½€ç½ç½ƒç½†ç½‡ç½ˆç½‰ç½Šç½‹ç½Œç½ç½Žç½ç½’ç½“é¦ˆæ„§æºƒå¤æ˜†æ†å›°æ‹¬æ‰©å»“é˜”åžƒæ‹‰å–‡èœ¡è…Šè¾£å•¦èŽ±æ¥èµ–è“å©ªæ æ‹¦ç¯®é˜‘å…°æ¾œè°°æ½è§ˆæ‡’ç¼†çƒ‚æ»¥ç…æ¦”ç‹¼å»ŠéƒŽæœ—æµªæžåŠ³ç‰¢è€ä½¬å§¥é…ªçƒ™æ¶å‹’ä¹é›·é•­è•¾ç£Šç´¯å„¡åž’æ“‚è‚‹ç±»æ³ªæ£±æ¥žå†·åŽ˜æ¢¨çŠé»Žç¯±ç‹¸ç¦»æ¼“ç†æŽé‡Œé²¤ç¤¼èŽ‰è”åæ —ä¸½åŽ‰åŠ±ç ¾åŽ†åˆ©å‚ˆä¾‹ä¿ï¿½".split("");
    for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
    D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç½–ç½™ç½›ç½œç½ç½žç½ ç½£ç½¤ç½¥ç½¦ç½§ç½«ç½¬ç½­ç½¯ç½°ç½³ç½µç½¶ç½·ç½¸ç½ºç½»ç½¼ç½½ç½¿ç¾€ç¾‚ç¾ƒç¾„ç¾…ç¾†ç¾‡ç¾ˆç¾‰ç¾‹ç¾ç¾ç¾ç¾‘ç¾’ç¾“ç¾•ç¾–ç¾—ç¾˜ç¾™ç¾›ç¾œç¾ ç¾¢ç¾£ç¾¥ç¾¦ç¾¨ç¾©ç¾ªç¾«ç¾¬ç¾­ç¾®ç¾±ï¿½ç¾³ç¾´ç¾µç¾¶ç¾·ç¾ºç¾»ç¾¾ç¿€ç¿‚ç¿ƒç¿„ç¿†ç¿‡ç¿ˆç¿‰ç¿‹ç¿ç¿ç¿ç¿‘ç¿’ç¿“ç¿–ç¿—ç¿™ç¿šç¿›ç¿œç¿ç¿žç¿¢ç¿£ç—¢ç«‹ç²’æ²¥éš¶åŠ›ç’ƒå“©ä¿©è”èŽ²è¿žé•°å»‰æ€œæ¶Ÿå¸˜æ•›è„¸é“¾æ‹ç‚¼ç»ƒç²®å‡‰æ¢ç²±è‰¯ä¸¤è¾†é‡æ™¾äº®è°…æ’©èŠåƒšç–—ç‡Žå¯¥è¾½æ½¦äº†æ’‚é•£å»–æ–™åˆ—è£‚çƒˆåŠ£çŒŽç³æž—ç£·éœ–ä¸´é‚»é³žæ·‹å‡›èµåæ‹ŽçŽ²è±é›¶é¾„é“ƒä¼¶ç¾šå‡Œçµé™µå²­é¢†å¦ä»¤æºœç‰æ¦´ç¡«é¦ç•™åˆ˜ç˜¤æµæŸ³å…­é¾™è‹å’™ç¬¼çª¿ï¿½".split("");
    for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
    D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¿¤ç¿§ç¿¨ç¿ªç¿«ç¿¬ç¿­ç¿¯ç¿²ç¿´ç¿µç¿¶ç¿·ç¿¸ç¿¹ç¿ºç¿½ç¿¾ç¿¿è€‚è€‡è€ˆè€‰è€Šè€Žè€è€‘è€“è€šè€›è€è€žè€Ÿè€¡è€£è€¤è€«è€¬è€­è€®è€¯è€°è€²è€´è€¹è€ºè€¼è€¾è€èè„è…è‡èˆè‰èŽèèè‘è“è•è–è—ï¿½è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éš†åž„æ‹¢é™‡æ¥¼å¨„æ‚ç¯“æ¼é™‹èŠ¦å¢é¢…åºç‚‰æŽ³å¤è™é²éº“ç¢Œéœ²è·¯èµ‚é¹¿æ½žç¦„å½•é™†æˆ®é©´å•é“ä¾£æ—…å±¥å±¡ç¼•è™‘æ°¯å¾‹çŽ‡æ»¤ç»¿å³¦æŒ›å­ªæ»¦åµä¹±æŽ ç•¥æŠ¡è½®ä¼¦ä»‘æ²¦çº¶è®ºèèžºç½—é€»é”£ç®©éª¡è£¸è½æ´›éª†ç»œå¦ˆéº»çŽ›ç èš‚é©¬éª‚å˜›å—åŸ‹ä¹°éº¦å–è¿ˆè„‰çž’é¦’è›®æ»¡è”“æ›¼æ…¢æ¼«ï¿½".split("");
    for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
    D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾è‚è‚‚è‚…è‚ˆè‚Šè‚è‚Žè‚è‚è‚‘è‚’è‚”è‚•è‚—è‚™è‚žè‚£è‚¦è‚§è‚¨è‚¬è‚°è‚³è‚µè‚¶è‚¸è‚¹è‚»èƒ…èƒ‡èƒˆèƒ‰èƒŠèƒ‹èƒèƒèƒ‘èƒ’èƒ“èƒ”èƒ•èƒ˜èƒŸèƒ èƒ¢èƒ£èƒ¦èƒ®èƒµèƒ·èƒ¹èƒ»èƒ¾èƒ¿è„€è„è„ƒè„„è„…è„‡è„ˆè„‹ï¿½è„Œè„•è„—è„™è„›è„œè„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§è„¨è„©è„ªè„«è„­è„®è„°è„³è„´è„µè„·è„¹è„ºè„»è„¼è„½è„¿è°©èŠ’èŒ«ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚å†’å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰åª’é•æ¯ç¾Žæ˜§å¯å¦¹åªšé—¨é—·ä»¬èŒè’™æª¬ç›Ÿé”°çŒ›æ¢¦å­Ÿçœ¯é†šé¡ç³œè¿·è°œå¼¥ç±³ç§˜è§…æ³Œèœœå¯†å¹‚æ£‰çœ ç»µå†•å…å‹‰å¨©ç¼…é¢è‹—æçž„è—ç§’æ¸ºåº™å¦™è”‘ç­æ°‘æŠ¿çš¿æ•æ‚¯é—½æ˜ŽèžŸé¸£é“­åå‘½è°¬æ‘¸ï¿½".split("");
    for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
    D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è…€è…è…‚è…ƒè…„è……è…‡è…‰è…è…Žè…è…’è…–è…—è…˜è…›è…œè…è…žè…Ÿè…¡è…¢è…£è…¤è…¦è…¨è…ªè…«è…¬è…¯è…²è…³è…µè…¶è…·è…¸è†è†ƒè†„è†…è††è†‡è†‰è†‹è†Œè†è†Žè†è†’è†“è†”è†•è†–è†—è†™è†šè†žè†Ÿè† è†¡è†¢è†¤è†¥ï¿½è†§è†©è†«è†¬è†­è†®è†¯è†°è†±è†²è†´è†µè†¶è†·è†¸è†¹è†¼è†½è†¾è†¿è‡„è‡…è‡‡è‡ˆè‡‰è‡‹è‡è‡Žè‡è‡è‡‘è‡’è‡“æ‘¹è˜‘æ¨¡è†œç£¨æ‘©é­”æŠ¹æœ«èŽ«å¢¨é»˜æ²«æ¼ å¯žé™Œè°‹ç‰ŸæŸæ‹‡ç‰¡äº©å§†æ¯å¢“æš®å¹•å‹Ÿæ…•æœ¨ç›®ç¦ç‰§ç©†æ‹¿å“ªå‘é’ é‚£å¨œçº³æ°–ä¹ƒå¥¶è€å¥ˆå—ç”·éš¾å›ŠæŒ è„‘æ¼é—¹æ·–å‘¢é¦å†…å«©èƒ½å¦®éœ“å€ªæ³¥å°¼æ‹Ÿä½ åŒ¿è…»é€†æººè”«æ‹ˆå¹´ç¢¾æ’µæ»å¿µå¨˜é…¿é¸Ÿå°¿æè‚å­½å•®é•Šé•æ¶…æ‚¨æŸ ç‹žå‡å®ï¿½".split("");
    for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
    D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‡”è‡•è‡–è‡—è‡˜è‡™è‡šè‡›è‡œè‡è‡žè‡Ÿè‡ è‡¡è‡¢è‡¤è‡¥è‡¦è‡¨è‡©è‡«è‡®è‡¯è‡°è‡±è‡²è‡µè‡¶è‡·è‡¸è‡¹è‡ºè‡½è‡¿èˆƒèˆ‡èˆˆèˆ‰èˆŠèˆ‹èˆŽèˆèˆ‘èˆ“èˆ•èˆ–èˆ—èˆ˜èˆ™èˆšèˆèˆ èˆ¤èˆ¥èˆ¦èˆ§èˆ©èˆ®èˆ²èˆºèˆ¼èˆ½èˆ¿ï¿½è‰€è‰è‰‚è‰ƒè‰…è‰†è‰ˆè‰Šè‰Œè‰è‰Žè‰è‰‘è‰’è‰“è‰”è‰•è‰–è‰—è‰™è‰›è‰œè‰è‰žè‰ è‰¡è‰¢è‰£è‰¤è‰¥è‰¦è‰§è‰©æ‹§æ³žç‰›æ‰­é’®çº½è„“æµ“å†œå¼„å¥´åŠªæ€’å¥³æš–è™ç–ŸæŒªæ‡¦ç³¯è¯ºå“¦æ¬§é¸¥æ®´è—•å‘•å¶æ²¤å•ªè¶´çˆ¬å¸•æ€•ç¶æ‹æŽ’ç‰Œå¾˜æ¹ƒæ´¾æ”€æ½˜ç›˜ç£ç›¼ç•”åˆ¤å›ä¹“åºžæ—è€ªèƒ–æŠ›å’†åˆ¨ç‚®è¢è·‘æ³¡å‘¸èƒšåŸ¹è£´èµ”é™ªé…ä½©æ²›å–·ç›†ç °æŠ¨çƒ¹æ¾Žå½­è“¬æ£šç¡¼ç¯·è†¨æœ‹é¹æ§ç¢°å¯ç ’éœ¹æ‰¹æŠ«åŠˆçµæ¯—ï¿½".split("");
    for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
    D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‰ªè‰«è‰¬è‰­è‰±è‰µè‰¶è‰·è‰¸è‰»è‰¼èŠ€èŠèŠƒèŠ…èŠ†èŠ‡èŠ‰èŠŒèŠèŠ“èŠ”èŠ•èŠ–èŠšèŠ›èŠžèŠ èŠ¢èŠ£èŠ§èŠ²èŠµèŠ¶èŠºèŠ»èŠ¼èŠ¿è‹€è‹‚è‹ƒè‹…è‹†è‹‰è‹è‹–è‹™è‹šè‹è‹¢è‹§è‹¨è‹©è‹ªè‹¬è‹­è‹®è‹°è‹²è‹³è‹µè‹¶è‹¸ï¿½è‹ºè‹¼è‹½è‹¾è‹¿èŒ€èŒŠèŒ‹èŒèŒèŒ’èŒ“èŒ–èŒ˜èŒ™èŒèŒžèŒŸèŒ èŒ¡èŒ¢èŒ£èŒ¤èŒ¥èŒ¦èŒ©èŒªèŒ®èŒ°èŒ²èŒ·èŒ»èŒ½å•¤è„¾ç–²çš®åŒ¹ç—žåƒ»å±è­¬ç¯‡åç‰‡éª—é£˜æ¼‚ç“¢ç¥¨æ’‡çž¥æ‹¼é¢‘è´«å“è˜ä¹’åªè‹¹èå¹³å‡­ç“¶è¯„å±å¡æ³¼é¢‡å©†ç ´é­„è¿«ç²•å‰–æ‰‘é“ºä»†èŽ†è‘¡è©è’²åŸ”æœ´åœƒæ™®æµ¦è°±æ›ç€‘æœŸæ¬ºæ –æˆšå¦»ä¸ƒå‡„æ¼†æŸ’æ²å…¶æ£‹å¥‡æ­§ç•¦å´Žè„é½æ——ç¥ˆç¥éª‘èµ·å²‚ä¹žä¼å¯å¥‘ç Œå™¨æ°”è¿„å¼ƒæ±½æ³£è®«æŽï¿½".split("");
    for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
    D[199] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èŒ¾èŒ¿èè‚è„è…èˆèŠè‹èŒèèŽè“è•è–è—è˜è™èè¢è°è±è²è³è´èµè¶è¹èºè¾è¿èŽ€èŽèŽ‚èŽƒèŽ„èŽ‡èŽˆèŽŠèŽ‹èŽŒèŽèŽèŽèŽ‘èŽ”èŽ•èŽ–èŽ—èŽ™èŽšèŽèŽŸèŽ¡èŽ¢èŽ£èŽ¤èŽ¥èŽ¦èŽ§èŽ¬èŽ­èŽ®ï¿½èŽ¯èŽµèŽ»èŽ¾èŽ¿è‚èƒè„è†èˆè‰è‹èèŽèè‘è’è“è•è—è™èšè›èžè¢è£è¤è¦è§è¨è«è¬è­æ°æ´½ç‰µæ‰¦é’Žé“…åƒè¿ç­¾ä»Ÿè°¦ä¹¾é»”é’±é’³å‰æ½œé£æµ…è°´å ‘åµŒæ¬ æ­‰æžªå‘›è…”ç¾Œå¢™è”·å¼ºæŠ¢æ©‡é”¹æ•²æ‚„æ¡¥çž§ä¹”ä¾¨å·§éž˜æ’¬ç¿˜å³­ä¿çªåˆ‡èŒ„ä¸”æ€¯çªƒé’¦ä¾µäº²ç§¦ç´å‹¤èŠ¹æ“’ç¦½å¯æ²é’è½»æ°¢å€¾å¿æ¸…æ“Žæ™´æ°°æƒ…é¡·è¯·åº†ç¼ç©·ç§‹ä¸˜é‚±çƒæ±‚å›šé…‹æ³…è¶‹åŒºè›†æ›²èº¯å±ˆé©±æ¸ ï¿½".split("");
    for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
    D[200] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è®è¯è³è´èµè¶è·èºè»è¼è¾è¿è€è‚è…è‡èˆè‰èŠèè’è“è”è•è–è—è™èšè›èžèŸè è¡è¢è£è©èªè«è¬è­è®è¯è°è²è³è´èµè¶è·è¹èºè»è¾è¿è‘€è‘è‘‚è‘ƒè‘„è‘…è‘‡è‘ˆè‘‰ï¿½è‘Šè‘‹è‘Œè‘è‘Žè‘è‘è‘’è‘“è‘”è‘•è‘–è‘˜è‘è‘žè‘Ÿè‘ è‘¢è‘¤è‘¥è‘¦è‘§è‘¨è‘ªè‘®è‘¯è‘°è‘²è‘´è‘·è‘¹è‘»è‘¼å–å¨¶é¾‹è¶£åŽ»åœˆé¢§æƒé†›æ³‰å…¨ç—Šæ‹³çŠ¬åˆ¸åŠç¼ºç‚”ç˜¸å´é¹Šæ¦·ç¡®é›€è£™ç¾¤ç„¶ç‡ƒå†‰æŸ“ç“¤å£¤æ”˜åš·è®©é¥¶æ‰°ç»•æƒ¹çƒ­å£¬ä»äººå¿éŸ§ä»»è®¤åˆƒå¦Šçº«æ‰”ä»æ—¥æˆŽèŒ¸è“‰è£èžç†”æº¶å®¹ç»’å†—æ‰æŸ”è‚‰èŒ¹è •å„’å­ºå¦‚è¾±ä¹³æ±å…¥è¤¥è½¯é˜®è•Šç‘žé”é—°æ¶¦è‹¥å¼±æ’’æ´’è¨è…®é³ƒå¡žèµ›ä¸‰åï¿½".split("");
    for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
    D[201] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‘½è‘¾è‘¿è’€è’è’ƒè’„è’…è’†è’Šè’è’è’è’‘è’’è’“è’”è’•è’–è’˜è’šè’›è’è’žè’Ÿè’ è’¢è’£è’¤è’¥è’¦è’§è’¨è’©è’ªè’«è’¬è’­è’®è’°è’±è’³è’µè’¶è’·è’»è’¼è’¾è“€è“‚è“ƒè“…è“†è“‡è“ˆè“‹è“Œè“Žè“è“’è“”è“•è“—ï¿½è“˜è“™è“šè“›è“œè“žè“¡è“¢è“¤è“§è“¨è“©è“ªè“«è“­è“®è“¯è“±è“²è“³è“´è“µè“¶è“·è“¸è“¹è“ºè“»è“½è“¾è”€è”è”‚ä¼žæ•£æ¡‘å—“ä¸§æ”éªšæ‰«å«‚ç‘Ÿè‰²æ¶©æ£®åƒ§èŽŽç ‚æ€åˆ¹æ²™çº±å‚»å•¥ç…žç­›æ™’çŠè‹«æ‰å±±åˆ ç…½è¡«é—ªé™•æ“…èµ¡è†³å–„æ±•æ‰‡ç¼®å¢’ä¼¤å•†èµæ™Œä¸Šå°šè£³æ¢¢æŽç¨çƒ§èŠå‹ºéŸ¶å°‘å“¨é‚µç»å¥¢èµŠè›‡èˆŒèˆèµ¦æ‘„å°„æ…‘æ¶‰ç¤¾è®¾ç ·ç”³å‘»ä¼¸èº«æ·±å¨ ç»…ç¥žæ²ˆå®¡å©¶ç”šè‚¾æ…Žæ¸—å£°ç”Ÿç”¥ç‰²å‡ç»³ï¿½".split("");
    for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
    D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è”ƒè”„è”…è”†è”‡è”ˆè”‰è”Šè”‹è”è”Žè”è”è”’è””è”•è”–è”˜è”™è”›è”œè”è”žè” è”¢è”£è”¤è”¥è”¦è”§è”¨è”©è”ªè”­è”®è”¯è”°è”±è”²è”³è”´è”µè”¶è”¾è”¿è•€è•è•‚è•„è•…è•†è•‡è•‹è•Œè•è•Žè•è•è•‘è•’è•“è•”è••ï¿½è•—è•˜è•šè•›è•œè•è•Ÿè• è•¡è•¢è•£è•¥è•¦è•§è•©è•ªè•«è•¬è•­è•®è•¯è•°è•±è•³è•µè•¶è•·è•¸è•¼è•½è•¿è–€è–çœç››å‰©èƒœåœ£å¸ˆå¤±ç‹®æ–½æ¹¿è¯—å°¸è™±åçŸ³æ‹¾æ—¶ä»€é£Ÿèš€å®žè¯†å²çŸ¢ä½¿å±Žé©¶å§‹å¼ç¤ºå£«ä¸–æŸ¿äº‹æ‹­èª“é€åŠ¿æ˜¯å—œå™¬é€‚ä»•ä¾é‡Šé¥°æ°å¸‚æƒå®¤è§†è¯•æ”¶æ‰‹é¦–å®ˆå¯¿æŽˆå”®å—ç˜¦å…½è”¬æž¢æ¢³æ®ŠæŠ’è¾“å”èˆ’æ·‘ç–ä¹¦èµŽå­°ç†Ÿè–¯æš‘æ›™ç½²èœ€é»é¼ å±žæœ¯è¿°æ ‘æŸæˆç«–å¢…åº¶æ•°æ¼±ï¿½".split("");
    for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
    D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è–‚è–ƒè–†è–ˆè–‰è–Šè–‹è–Œè–è–Žè–è–‘è–’è–“è–”è–•è––è–—è–˜è–™è–šè–è–žè–Ÿè– è–¡è–¢è–£è–¥è–¦è–§è–©è–«è–¬è–­è–±è–²è–³è–´è–µè–¶è–¸è–ºè–»è–¼è–½è–¾è–¿è—€è—‚è—ƒè—„è—…è—†è—‡è—ˆè—Šè—‹è—Œè—è—Žè—‘è—’ï¿½è—”è—–è——è—˜è—™è—šè—›è—è—žè—Ÿè— è—¡è—¢è—£è—¥è—¦è—§è—¨è—ªè—«è—¬è—­è—®è—¯è—°è—±è—²è—³è—´è—µè—¶è—·è—¸æ•åˆ·è€æ‘”è¡°ç”©å¸…æ “æ‹´éœœåŒçˆ½è°æ°´ç¡ç¨Žå®çž¬é¡ºèˆœè¯´ç¡•æœ”çƒæ–¯æ’•å˜¶æ€ç§å¸ä¸æ­»è‚†å¯ºå—£å››ä¼ºä¼¼é¥²å·³æ¾è€¸æ€‚é¢‚é€å®‹è®¼è¯µæœè‰˜æ“žå—½è‹é…¥ä¿—ç´ é€Ÿç²Ÿåƒ³å¡‘æº¯å®¿è¯‰è‚ƒé…¸è’œç®—è™½éš‹éšç»¥é«“ç¢Žå²ç©—é‚éš§ç¥Ÿå­™æŸç¬‹è“‘æ¢­å”†ç¼©çç´¢é”æ‰€å¡Œä»–å®ƒå¥¹å¡”ï¿½".split("");
    for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
    D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è—¹è—ºè—¼è—½è—¾è˜€è˜è˜‚è˜ƒè˜„è˜†è˜‡è˜ˆè˜‰è˜Šè˜‹è˜Œè˜è˜Žè˜è˜è˜’è˜“è˜”è˜•è˜—è˜˜è˜™è˜šè˜›è˜œè˜è˜žè˜Ÿè˜ è˜¡è˜¢è˜£è˜¤è˜¥è˜¦è˜¨è˜ªè˜«è˜¬è˜­è˜®è˜¯è˜°è˜±è˜²è˜³è˜´è˜µè˜¶è˜·è˜¹è˜ºè˜»è˜½è˜¾è˜¿è™€ï¿½è™è™‚è™ƒè™„è™…è™†è™‡è™ˆè™‰è™Šè™‹è™Œè™’è™“è™•è™–è™—è™˜è™™è™›è™œè™è™Ÿè™ è™¡è™£è™¤è™¥è™¦è™§è™¨è™©è™ªç­æŒžè¹‹è¸èƒŽè‹”æŠ¬å°æ³°é…žå¤ªæ€æ±°åæ‘Šè´ªç˜«æ»©å›æª€ç—°æ½­è°­è°ˆå¦æ¯¯è¢’ç¢³æŽ¢å¹ç‚­æ±¤å¡˜æªå ‚æ£ è†›å”ç³–å€˜èººæ·Œè¶Ÿçƒ«æŽæ¶›æ»”ç»¦è„æ¡ƒé€ƒæ·˜é™¶è®¨å¥—ç‰¹è—¤è…¾ç–¼èªŠæ¢¯å‰”è¸¢é”‘æé¢˜è¹„å•¼ä½“æ›¿åšæƒ•æ¶•å‰ƒå±‰å¤©æ·»å¡«ç”°ç”œæ¬èˆ”è…†æŒ‘æ¡è¿¢çœºè·³è´´é“å¸–åŽ…å¬çƒƒï¿½".split("");
    for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
    D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è™­è™¯è™°è™²è™³è™´è™µè™¶è™·è™¸èšƒèš„èš…èš†èš‡èšˆèš‰èšŽèšèšèš‘èš’èš”èš–èš—èš˜èš™èššèš›èšžèšŸèš èš¡èš¢èš¥èš¦èš«èš­èš®èš²èš³èš·èš¸èš¹èš»èš¼èš½èš¾èš¿è›è›‚è›ƒè›…è›ˆè›Œè›è›’è›“è›•è›–è›—è›šè›œï¿½è›è› è›¡è›¢è›£è›¥è›¦è›§è›¨è›ªè›«è›¬è›¯è›µè›¶è›·è›ºè›»è›¼è›½è›¿èœèœ„èœ…èœ†èœ‹èœŒèœŽèœèœèœ‘èœ”èœ–æ±€å»·åœäº­åº­æŒºè‰‡é€šæ¡é…®çž³åŒé“œå½¤ç«¥æ¡¶æ…ç­’ç»Ÿç—›å·æŠ•å¤´é€å‡¸ç§ƒçªå›¾å¾’é€”æ¶‚å± åœŸåå…”æ¹å›¢æŽ¨é¢“è…¿èœ•è¤ªé€€åžå±¯è‡€æ‹–æ‰˜è„±é¸µé™€é©®é©¼æ¤­å¦¥æ‹“å”¾æŒ–å“‡è›™æ´¼å¨ƒç“¦è¢œæ­ªå¤–è±Œå¼¯æ¹¾çŽ©é¡½ä¸¸çƒ·å®Œç¢—æŒ½æ™šçš–æƒ‹å®›å©‰ä¸‡è…•æ±ªçŽ‹äº¡æž‰ç½‘å¾€æ—ºæœ›å¿˜å¦„å¨ï¿½".split("");
    for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
    D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èœ™èœ›èœèœŸèœ èœ¤èœ¦èœ§èœ¨èœªèœ«èœ¬èœ­èœ¯èœ°èœ²èœ³èœµèœ¶èœ¸èœ¹èœºèœ¼èœ½è€èè‚èƒè„è…è†èŠè‹èèèè‘è’è”è•è–è˜èšè›èœèèžèŸè¡è¢è¦è§è¨è©èªè«è¬è­è¯è±è²è³èµï¿½è·è¸è¹èºè¿èž€èžèž„èž†èž‡èž‰èžŠèžŒèžŽèžèžèž‘èž’èž”èž•èž–èž˜èž™èžšèž›èžœèžèžžèž èž¡èž¢èž£èž¤å·å¾®å±éŸ¦è¿æ¡…å›´å”¯æƒŸä¸ºæ½ç»´è‹‡èŽå§”ä¼Ÿä¼ªå°¾çº¬æœªè”šå‘³ç•èƒƒå–‚é­ä½æ¸­è°“å°‰æ…°å«ç˜Ÿæ¸©èšŠæ–‡é—»çº¹å»ç¨³ç´Šé—®å—¡ç¿ç“®æŒèœ—æ¶¡çªæˆ‘æ–¡å§æ¡æ²ƒå·«å‘œé’¨ä¹Œæ±¡è¯¬å±‹æ— èŠœæ¢§å¾å´æ¯‹æ­¦äº”æ‚åˆèˆžä¼ä¾®åžæˆŠé›¾æ™¤ç‰©å‹¿åŠ¡æ‚Ÿè¯¯æ˜”ç†™æžè¥¿ç¡’çŸ½æ™°å˜»å¸é”¡ç‰ºï¿½".split("");
    for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
    D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èž¥èž¦èž§èž©èžªèž®èž°èž±èž²èž´èž¶èž·èž¸èž¹èž»èž¼èž¾èž¿èŸèŸ‚èŸƒèŸ„èŸ…èŸ‡èŸˆèŸ‰èŸŒèŸèŸŽèŸèŸèŸ”èŸ•èŸ–èŸ—èŸ˜èŸ™èŸšèŸœèŸèŸžèŸŸèŸ¡èŸ¢èŸ£èŸ¤èŸ¦èŸ§èŸ¨èŸ©èŸ«èŸ¬èŸ­èŸ¯èŸ°èŸ±èŸ²èŸ³èŸ´èŸµèŸ¶èŸ·èŸ¸ï¿½èŸºèŸ»èŸ¼èŸ½èŸ¿è €è è ‚è „è …è †è ‡è ˆè ‰è ‹è Œè è Žè è è ‘è ’è ”è —è ˜è ™è šè œè è žè Ÿè  è £ç¨€æ¯å¸Œæ‚‰è†å¤•æƒœç†„çƒ¯æºªæ±çŠ€æª„è¢­å¸­ä¹ åª³å–œé“£æ´—ç³»éš™æˆç»†çžŽè™¾åŒ£éœžè¾–æš‡å³¡ä¾ ç‹­ä¸‹åŽ¦å¤å“æŽ€é”¨å…ˆä»™é²œçº¤å’¸è´¤è¡”èˆ·é—²æ¶Žå¼¦å«Œæ˜¾é™©çŽ°çŒ®åŽ¿è…ºé¦…ç¾¡å®ªé™·é™çº¿ç›¸åŽ¢é•¶é¦™ç®±è¥„æ¹˜ä¹¡ç¿”ç¥¥è¯¦æƒ³å“äº«é¡¹å··æ©¡åƒå‘è±¡è§ç¡éœ„å‰Šå“®åš£é”€æ¶ˆå®µæ·†æ™“ï¿½".split("");
    for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
    D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è ¤è ¥è ¦è §è ¨è ©è ªè «è ¬è ­è ®è ¯è °è ±è ³è ´è µè ¶è ·è ¸è ºè »è ½è ¾è ¿è¡è¡‚è¡ƒè¡†è¡‡è¡ˆè¡‰è¡Šè¡‹è¡Žè¡è¡è¡‘è¡’è¡“è¡•è¡–è¡˜è¡šè¡›è¡œè¡è¡žè¡Ÿè¡ è¡¦è¡§è¡ªè¡­è¡¯è¡±è¡³è¡´è¡µè¡¶è¡¸è¡¹è¡ºï¿½è¡»è¡¼è¢€è¢ƒè¢†è¢‡è¢‰è¢Šè¢Œè¢Žè¢è¢è¢‘è¢“è¢”è¢•è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œæ¬£è¾›æ–°å¿»å¿ƒä¿¡è¡…æ˜Ÿè…¥çŒ©æƒºå…´åˆ‘åž‹å½¢é‚¢è¡Œé†’å¹¸ææ€§å§“å…„å‡¶èƒ¸åŒˆæ±¹é›„ç†Šä¼‘ä¿®ç¾žæœ½å—…é”ˆç§€è¢–ç»£å¢ŸæˆŒéœ€è™šå˜˜é¡»å¾è®¸è“„é…—å™æ—­åºç•œæ¤çµ®å©¿ç»ªç»­è½©å–§å®£æ‚¬æ—‹çŽ„ï¿½".split("");
    for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
    D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¢¬è¢®è¢¯è¢°è¢²è¢³è¢´è¢µè¢¶è¢¸è¢¹è¢ºè¢»è¢½è¢¾è¢¿è£€è£ƒè£„è£‡è£ˆè£Šè£‹è£Œè£è£è£è£‘è£“è£–è£—è£šè£›è£œè£è£žè£ è£¡è£¦è£§è£©è£ªè£«è£¬è£­è£®è£¯è£²è£µè£¶è£·è£ºè£»è£½è£¿è¤€è¤è¤ƒè¤„è¤…è¤†è¤‡è¤ˆï¿½è¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿè¤ è¤¢è¤£è¤¤è¤¦è¤§è¤¨è¤©è¤¬è¤­è¤®è¤¯è¤±è¤²è¤³è¤µè¤·é€‰ç™£çœ©ç»šé´è–›å­¦ç©´é›ªè¡€å‹‹ç†å¾ªæ—¬è¯¢å¯»é©¯å·¡æ®‰æ±›è®­è®¯é€Šè¿…åŽ‹æŠ¼é¸¦é¸­å‘€ä¸«èŠ½ç‰™èšœå´–è¡™æ¶¯é›…å“‘äºšè®¶ç„‰å’½é˜‰çƒŸæ·¹ç›ä¸¥ç ”èœ’å²©å»¶è¨€é¢œé˜Žç‚Žæ²¿å¥„æŽ©çœ¼è¡æ¼”è‰³å °ç‡•åŽŒç šé›å”å½¦ç„°å®´è°šéªŒæ®ƒå¤®é¸¯ç§§æ¨æ‰¬ä½¯ç–¡ç¾Šæ´‹é˜³æ°§ä»°ç—’å…»æ ·æ¼¾é‚€è…°å¦–ç‘¶ï¿½".split("");
    for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
    D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¤¸è¤¹è¤ºè¤»è¤¼è¤½è¤¾è¤¿è¥€è¥‚è¥ƒè¥…è¥†è¥‡è¥ˆè¥‰è¥Šè¥‹è¥Œè¥è¥Žè¥è¥è¥‘è¥’è¥“è¥”è¥•è¥–è¥—è¥˜è¥™è¥šè¥›è¥œè¥è¥ è¥¡è¥¢è¥£è¥¤è¥¥è¥§è¥¨è¥©è¥ªè¥«è¥¬è¥­è¥®è¥¯è¥°è¥±è¥²è¥³è¥´è¥µè¥¶è¥·è¥¸è¥¹è¥ºè¥¼ï¿½è¥½è¥¾è¦€è¦‚è¦„è¦…è¦‡è¦ˆè¦‰è¦Šè¦‹è¦Œè¦è¦Žè¦è¦è¦‘è¦’è¦“è¦”è¦•è¦–è¦—è¦˜è¦™è¦šè¦›è¦œè¦è¦žè¦Ÿè¦ è¦¡æ‘‡å°§é¥çª‘è°£å§šå’¬èˆ€è¯è¦è€€æ¤°å™Žè€¶çˆ·é‡Žå†¶ä¹Ÿé¡µæŽ–ä¸šå¶æ›³è…‹å¤œæ¶²ä¸€å£¹åŒ»æ–é“±ä¾ä¼Šè¡£é¢å¤·é—ç§»ä»ªèƒ°ç–‘æ²‚å®œå§¨å½æ¤…èšå€šå·²ä¹™çŸ£ä»¥è‰ºæŠ‘æ˜“é‚‘å±¹äº¿å½¹è‡†é€¸è‚„ç–«äº¦è£”æ„æ¯…å¿†ä¹‰ç›Šæº¢è¯£è®®è°Šè¯‘å¼‚ç¿¼ç¿Œç»ŽèŒµè«å› æ®·éŸ³é˜´å§»åŸé“¶æ·«å¯…é¥®å°¹å¼•éšï¿½".split("");
    for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
    D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¦¢è¦£è¦¤è¦¥è¦¦è¦§è¦¨è¦©è¦ªè¦«è¦¬è¦­è¦®è¦¯è¦°è¦±è¦²è¦³è¦´è¦µè¦¶è¦·è¦¸è¦¹è¦ºè¦»è¦¼è¦½è¦¾è¦¿è§€è§ƒè§è§“è§”è§•è§—è§˜è§™è§›è§è§Ÿè§ è§¡è§¢è§¤è§§è§¨è§©è§ªè§¬è§­è§®è§°è§±è§²è§´è§µè§¶è§·è§¸è§¹è§ºï¿½è§»è§¼è§½è§¾è§¿è¨è¨‚è¨ƒè¨„è¨…è¨†è¨ˆè¨‰è¨Šè¨‹è¨Œè¨è¨Žè¨è¨è¨‘è¨’è¨“è¨”è¨•è¨–è¨—è¨˜è¨™è¨šè¨›è¨œè¨å°è‹±æ¨±å©´é¹°åº”ç¼¨èŽ¹è¤è¥è§è‡è¿Žèµ¢ç›ˆå½±é¢–ç¡¬æ˜ å“Ÿæ‹¥ä½£è‡ƒç—ˆåº¸é›è¸Šè›¹å’æ³³æ¶Œæ°¸æ¿å‹‡ç”¨å¹½ä¼˜æ‚ å¿§å°¤ç”±é‚®é“€çŠ¹æ²¹æ¸¸é…‰æœ‰å‹å³ä½‘é‡‰è¯±åˆå¹¼è¿‚æ·¤äºŽç›‚æ¦†è™žæ„šèˆ†ä½™ä¿žé€¾é±¼æ„‰æ¸æ¸”éš…äºˆå¨±é›¨ä¸Žå±¿ç¦¹å®‡è¯­ç¾½çŽ‰åŸŸèŠ‹éƒåé‡å–»å³ªå¾¡æ„ˆæ¬²ç‹±è‚²èª‰ï¿½".split("");
    for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
    D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¨žè¨Ÿè¨ è¨¡è¨¢è¨£è¨¤è¨¥è¨¦è¨§è¨¨è¨©è¨ªè¨«è¨¬è¨­è¨®è¨¯è¨°è¨±è¨²è¨³è¨´è¨µè¨¶è¨·è¨¸è¨¹è¨ºè¨»è¨¼è¨½è¨¿è©€è©è©‚è©ƒè©„è©…è©†è©‡è©‰è©Šè©‹è©Œè©è©Žè©è©è©‘è©’è©“è©”è©•è©–è©—è©˜è©™è©šè©›è©œè©è©žï¿½è©Ÿè© è©¡è©¢è©£è©¤è©¥è©¦è©§è©¨è©©è©ªè©«è©¬è©­è©®è©¯è©°è©±è©²è©³è©´è©µè©¶è©·è©¸è©ºè©»è©¼è©½è©¾è©¿èª€æµ´å¯“è£•é¢„è±«é©­é¸³æ¸Šå†¤å…ƒåž£è¢åŽŸæ´è¾•å›­å‘˜åœ†çŒ¿æºç¼˜è¿œè‹‘æ„¿æ€¨é™¢æ›°çº¦è¶Šè·ƒé’¥å²³ç²¤æœˆæ‚¦é˜…è€˜äº‘éƒ§åŒ€é™¨å…è¿è•´é…æ™•éŸµå­•åŒç ¸æ‚æ ½å“‰ç¾å®°è½½å†åœ¨å’±æ”’æš‚èµžèµƒè„è‘¬é­ç³Ÿå‡¿è—»æž£æ—©æ¾¡èš¤èºå™ªé€ çš‚ç¶ç‡¥è´£æ‹©åˆ™æ³½è´¼æ€Žå¢žæ†Žæ›¾èµ æ‰Žå–³æ¸£æœ­è½§ï¿½".split("");
    for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
    D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èªèª‚èªƒèª„èª…èª†èª‡èªˆèª‹èªŒèªèªŽèªèªèª‘èª’èª”èª•èª–èª—èª˜èª™èªšèª›èªœèªèªžèªŸèª èª¡èª¢èª£èª¤èª¥èª¦èª§èª¨èª©èªªèª«èª¬èª­èª®èª¯èª°èª±èª²èª³èª´èªµèª¶èª·èª¸èª¹èªºèª»èª¼èª½èª¾èª¿è«€è«è«‚ï¿½è«ƒè«„è«…è«†è«‡è«ˆè«‰è«Šè«‹è«Œè«è«Žè«è«è«‘è«’è«“è«”è«•è«–è«—è«˜è«™è«šè«›è«œè«è«žè«Ÿè« è«¡è«¢è«£é“¡é—¸çœ¨æ …æ¦¨å’‹ä¹ç‚¸è¯ˆæ‘˜æ–‹å®…çª„å€ºå¯¨çž»æ¯¡è©¹ç²˜æ²¾ç›æ–©è¾—å´­å±•è˜¸æ ˆå æˆ˜ç«™æ¹›ç»½æ¨Ÿç« å½°æ¼³å¼ æŽŒæ¶¨æ–ä¸ˆå¸è´¦ä»—èƒ€ç˜´éšœæ‹›æ˜­æ‰¾æ²¼èµµç…§ç½©å…†è‚‡å¬é®æŠ˜å“²è›°è¾™è€…é”—è”—è¿™æµ™çæ–ŸçœŸç”„ç §è‡»è´žé’ˆä¾¦æž•ç–¹è¯Šéœ‡æŒ¯é•‡é˜µè’¸æŒ£çå¾ç‹°äº‰æ€”æ•´æ‹¯æ­£æ”¿ï¿½".split("");
    for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
    D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è«¤è«¥è«¦è«§è«¨è«©è«ªè««è«¬è«­è«®è«¯è«°è«±è«²è«³è«´è«µè«¶è«·è«¸è«¹è«ºè«»è«¼è«½è«¾è«¿è¬€è¬è¬‚è¬ƒè¬„è¬…è¬†è¬ˆè¬‰è¬Šè¬‹è¬Œè¬è¬Žè¬è¬è¬‘è¬’è¬“è¬”è¬•è¬–è¬—è¬˜è¬™è¬šè¬›è¬œè¬è¬žè¬Ÿè¬ è¬¡è¬¢è¬£ï¿½è¬¤è¬¥è¬§è¬¨è¬©è¬ªè¬«è¬¬è¬­è¬®è¬¯è¬°è¬±è¬²è¬³è¬´è¬µè¬¶è¬·è¬¸è¬¹è¬ºè¬»è¬¼è¬½è¬¾è¬¿è­€è­è­‚è­ƒè­„è­…å¸§ç—‡éƒ‘è¯èŠæžæ”¯å±èœ˜çŸ¥è‚¢è„‚æ±ä¹‹ç»‡èŒç›´æ¤æ®–æ‰§å€¼ä¾„å€æŒ‡æ­¢è¶¾åªæ—¨çº¸å¿—æŒšæŽ·è‡³è‡´ç½®å¸œå³™åˆ¶æ™ºç§©ç¨šè´¨ç‚™ç—”æ»žæ²»çª’ä¸­ç›…å¿ é’Ÿè¡·ç»ˆç§è‚¿é‡ä»²ä¼—èˆŸå‘¨å·žæ´²è¯Œç²¥è½´è‚˜å¸šå’’çš±å®™æ˜¼éª¤ç æ ªè››æœ±çŒªè¯¸è¯›é€ç«¹çƒ›ç…®æ‹„çž©å˜±ä¸»è‘—æŸ±åŠ©è›€è´®é“¸ç­‘ï¿½".split("");
    for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
    D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­†è­‡è­ˆè­‰è­Šè­‹è­Œè­è­Žè­è­è­‘è­’è­“è­”è­•è­–è­—è­˜è­™è­šè­›è­œè­è­žè­Ÿè­ è­¡è­¢è­£è­¤è­¥è­§è­¨è­©è­ªè­«è­­è­®è­¯è­°è­±è­²è­³è­´è­µè­¶è­·è­¸è­¹è­ºè­»è­¼è­½è­¾è­¿è®€è®è®‚è®ƒè®„è®…è®†ï¿½è®‡è®ˆè®‰è®Šè®‹è®Œè®è®Žè®è®è®‘è®’è®“è®”è®•è®–è®—è®˜è®™è®šè®›è®œè®è®žè®Ÿè®¬è®±è®»è¯‡è¯è¯ªè°‰è°žä½æ³¨ç¥é©»æŠ“çˆªæ‹½ä¸“ç –è½¬æ’°èµšç¯†æ¡©åº„è£…å¦†æ’žå£®çŠ¶æ¤Žé”¥è¿½èµ˜å ç¼€è°†å‡†æ‰æ‹™å“æ¡Œç¢èŒé…Œå•„ç€ç¼æµŠå…¹å’¨èµ„å§¿æ»‹æ·„å­œç´«ä»”ç±½æ»“å­è‡ªæ¸å­—é¬ƒæ£•è¸ªå®—ç»¼æ€»çºµé‚¹èµ°å¥æç§Ÿè¶³å’æ—ç¥–è¯…é˜»ç»„é’»çº‚å˜´é†‰æœ€ç½ªå°Šéµæ˜¨å·¦ä½æŸžåšä½œååº§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
    D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è°¸è°¹è°ºè°»è°¼è°½è°¾è°¿è±€è±‚è±ƒè±„è±…è±ˆè±Šè±‹è±è±Žè±è±è±‘è±’è±“è±”è±–è±—è±˜è±™è±›è±œè±è±žè±Ÿè± è±£è±¤è±¥è±¦è±§è±¨è±©è±¬è±­è±®è±¯è±°è±±è±²è±´è±µè±¶è±·è±»è±¼è±½è±¾è±¿è²€è²è²ƒè²„è²†è²‡ï¿½è²ˆè²‹è²è²Žè²è²è²‘è²’è²“è²•è²–è²—è²™è²šè²›è²œè²è²žè²Ÿè² è²¡è²¢è²£è²¤è²¥è²¦è²§è²¨è²©è²ªè²«è²¬è²­äºä¸Œå…€ä¸å»¿å…ä¸•äº˜ä¸žé¬²å­¬å™©ä¸¨ç¦ºä¸¿åŒ•ä¹‡å¤­çˆ»å®æ°å›Ÿèƒ¤é¦—æ¯“ç¾é¼—ä¸¶äºŸé¼ä¹œä¹©äº“èŠˆå­›å•¬å˜ä»„åŽåŽåŽ£åŽ¥åŽ®é¥èµåŒšåµåŒ¦åŒ®åŒ¾èµœå¦å£åˆ‚åˆˆåˆŽåˆ­åˆ³åˆ¿å‰€å‰Œå‰žå‰¡å‰œè’¯å‰½åŠ‚åŠåŠåŠ“å†‚ç½”äº»ä»ƒä»‰ä»‚ä»¨ä»¡ä»«ä»žä¼›ä»³ä¼¢ä½¤ä»µä¼¥ä¼§ä¼‰ä¼«ä½žä½§æ”¸ä½šä½ï¿½".split("");
    for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
    D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è²®è²¯è²°è²±è²²è²³è²´è²µè²¶è²·è²¸è²¹è²ºè²»è²¼è²½è²¾è²¿è³€è³è³‚è³ƒè³„è³…è³†è³‡è³ˆè³‰è³Šè³‹è³Œè³è³Žè³è³è³‘è³’è³“è³”è³•è³–è³—è³˜è³™è³šè³›è³œè³è³žè³Ÿè³ è³¡è³¢è³£è³¤è³¥è³¦è³§è³¨è³©è³ªè³«è³¬ï¿½è³­è³®è³¯è³°è³±è³²è³³è³´è³µè³¶è³·è³¸è³¹è³ºè³»è³¼è³½è³¾è³¿è´€è´è´‚è´ƒè´„è´…è´†è´‡è´ˆè´‰è´Šè´‹è´Œè´ä½Ÿä½—ä¼²ä¼½ä½¶ä½´ä¾‘ä¾‰ä¾ƒä¾ä½¾ä½»ä¾ªä½¼ä¾¬ä¾”ä¿¦ä¿¨ä¿ªä¿…ä¿šä¿£ä¿œä¿‘ä¿Ÿä¿¸å€©åŒä¿³å€¬å€å€®å€­ä¿¾å€œå€Œå€¥å€¨å¾åƒå•åˆåŽå¬å»å‚¥å‚§å‚©å‚ºåƒ–å„†åƒ­åƒ¬åƒ¦åƒ®å„‡å„‹ä»æ°½ä½˜ä½¥ä¿Žé¾ æ±†ç±´å…®å·½é»‰é¦˜å†å¤”å‹¹åŒè¨‡åŒå‡«å¤™å…•äº å…–äº³è¡®è¢¤äºµè„”è£’ç¦€å¬´è ƒç¾¸å†«å†±å†½å†¼ï¿½".split("");
    for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
    D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è´Žè´è´è´‘è´’è´“è´”è´•è´–è´—è´˜è´™è´šè´›è´œè´ èµ‘èµ’èµ—èµŸèµ¥èµ¨èµ©èµªèµ¬èµ®èµ¯èµ±èµ²èµ¸èµ¹èµºèµ»èµ¼èµ½èµ¾èµ¿è¶€è¶‚è¶ƒè¶†è¶‡è¶ˆè¶‰è¶Œè¶è¶Žè¶è¶è¶’è¶“è¶•è¶–è¶—è¶˜è¶™è¶šè¶›è¶œè¶è¶žè¶ è¶¡ï¿½è¶¢è¶¤è¶¥è¶¦è¶§è¶¨è¶©è¶ªè¶«è¶¬è¶­è¶®è¶¯è¶°è¶²è¶¶è¶·è¶¹è¶»è¶½è·€è·è·‚è·…è·‡è·ˆè·‰è·Šè·è·è·’è·“è·”å‡‡å†–å†¢å†¥è® è®¦è®§è®ªè®´è®µè®·è¯‚è¯ƒè¯‹è¯è¯Žè¯’è¯“è¯”è¯–è¯˜è¯™è¯œè¯Ÿè¯ è¯¤è¯¨è¯©è¯®è¯°è¯³è¯¶è¯¹è¯¼è¯¿è°€è°‚è°„è°‡è°Œè°è°‘è°’è°”è°•è°–è°™è°›è°˜è°è°Ÿè° è°¡è°¥è°§è°ªè°«è°®è°¯è°²è°³è°µè°¶å©åºé˜é˜¢é˜¡é˜±é˜ªé˜½é˜¼é™‚é™‰é™”é™Ÿé™§é™¬é™²é™´éšˆéšéš—éš°é‚—é‚›é‚é‚™é‚¬é‚¡é‚´é‚³é‚¶é‚ºï¿½".split("");
    for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
    D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è·•è·˜è·™è·œè· è·¡è·¢è·¥è·¦è·§è·©è·­è·®è·°è·±è·²è·´è·¶è·¼è·¾è·¿è¸€è¸è¸‚è¸ƒè¸„è¸†è¸‡è¸ˆè¸‹è¸è¸Žè¸è¸‘è¸’è¸“è¸•è¸–è¸—è¸˜è¸™è¸šè¸›è¸œè¸ è¸¡è¸¤è¸¥è¸¦è¸§è¸¨è¸«è¸­è¸°è¸²è¸³è¸´è¸¶è¸·è¸¸è¸»è¸¼è¸¾ï¿½è¸¿è¹ƒè¹…è¹†è¹Œè¹è¹Žè¹è¹è¹“è¹”è¹•è¹–è¹—è¹˜è¹šè¹›è¹œè¹è¹žè¹Ÿè¹ è¹¡è¹¢è¹£è¹¤è¹¥è¹§è¹¨è¹ªè¹«è¹®è¹±é‚¸é‚°éƒéƒ…é‚¾éƒéƒ„éƒ‡éƒ“éƒ¦éƒ¢éƒœéƒ—éƒ›éƒ«éƒ¯éƒ¾é„„é„¢é„žé„£é„±é„¯é„¹é…ƒé…†åˆå¥‚åŠ¢åŠ¬åŠ­åŠ¾å“¿å‹å‹–å‹°åŸç‡®çŸå»´å‡µå‡¼é¬¯åŽ¶å¼ç•šå·¯åŒåž©åž¡å¡¾å¢¼å£…å£‘åœ©åœ¬åœªåœ³åœ¹åœ®åœ¯åœåœ»å‚å©åž…å«åž†å¼å»å¨å­å¶å³åž­åž¤åžŒåž²åŸåž§åž´åž“åž åŸ•åŸ˜åŸšåŸ™åŸ’åž¸åŸ´åŸ¯åŸ¸åŸ¤åŸï¿½".split("");
    for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
    D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹³è¹µè¹·è¹¸è¹¹è¹ºè¹»è¹½è¹¾èº€èº‚èºƒèº„èº†èºˆèº‰èºŠèº‹èºŒèºèºŽèº‘èº’èº“èº•èº–èº—èº˜èº™èºšèº›èºèºŸèº èº¡èº¢èº£èº¤èº¥èº¦èº§èº¨èº©èºªèº­èº®èº°èº±èº³èº´èºµèº¶èº·èº¸èº¹èº»èº¼èº½èº¾èº¿è»€è»è»‚ï¿½è»ƒè»„è»…è»†è»‡è»ˆè»‰è»Šè»‹è»Œè»è»è»è»‘è»’è»“è»”è»•è»–è»—è»˜è»™è»šè»›è»œè»è»žè»Ÿè» è»¡è»¢è»£è»¤å ‹å åŸ½åŸ­å €å žå ™å¡„å  å¡¥å¡¬å¢å¢‰å¢šå¢€é¦¨é¼™æ‡¿è‰¹è‰½è‰¿èŠèŠŠèŠ¨èŠ„èŠŽèŠ‘èŠ—èŠ™èŠ«èŠ¸èŠ¾èŠ°è‹ˆè‹Šè‹£èŠ˜èŠ·èŠ®è‹‹è‹Œè‹èŠ©èŠ´èŠ¡èŠªèŠŸè‹„è‹ŽèŠ¤è‹¡èŒ‰è‹·è‹¤èŒèŒ‡è‹œè‹´è‹’è‹˜èŒŒè‹»è‹“èŒ‘èŒšèŒ†èŒ”èŒ•è‹ è‹•èŒœè‘è›èœèŒˆèŽ’èŒ¼èŒ´èŒ±èŽ›èžèŒ¯èè‡èƒèŸè€èŒ—è èŒ­èŒºèŒ³è¦è¥ï¿½".split("");
    for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
    D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è»¥è»¦è»§è»¨è»©è»ªè»«è»¬è»­è»®è»¯è»°è»±è»²è»³è»´è»µè»¶è»·è»¸è»¹è»ºè»»è»¼è»½è»¾è»¿è¼€è¼è¼‚è¼ƒè¼„è¼…è¼†è¼‡è¼ˆè¼‰è¼Šè¼‹è¼Œè¼è¼Žè¼è¼è¼‘è¼’è¼“è¼”è¼•è¼–è¼—è¼˜è¼™è¼šè¼›è¼œè¼è¼žè¼Ÿè¼ è¼¡è¼¢è¼£ï¿½è¼¤è¼¥è¼¦è¼§è¼¨è¼©è¼ªè¼«è¼¬è¼­è¼®è¼¯è¼°è¼±è¼²è¼³è¼´è¼µè¼¶è¼·è¼¸è¼¹è¼ºè¼»è¼¼è¼½è¼¾è¼¿è½€è½è½‚è½ƒè½„è¨èŒ›è©è¬èªè­è®èŽ°è¸èŽ³èŽ´èŽ èŽªèŽ“èŽœèŽ…è¼èŽ¶èŽ©è½èŽ¸è»èŽ˜èŽžèŽ¨èŽºèŽ¼èèè¥è˜å ‡è˜è‹èè½è–èœè¸è‘è†è”èŸèèƒè¸è¹èªè…è€è¦è°è¡è‘œè‘‘è‘šè‘™è‘³è’‡è’ˆè‘ºè’‰è‘¸è¼è‘†è‘©è‘¶è’Œè’Žè±è‘­è“è“è“è“¦è’½è““è“Šè’¿è’ºè“ è’¡è’¹è’´è’—è“¥è“£è”Œç”è”¸è“°è”¹è”Ÿè”ºï¿½".split("");
    for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
    D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è½…è½†è½‡è½ˆè½‰è½Šè½‹è½Œè½è½Žè½è½è½‘è½’è½“è½”è½•è½–è½—è½˜è½™è½šè½›è½œè½è½žè½Ÿè½ è½¡è½¢è½£è½¤è½¥è½ªè¾€è¾Œè¾’è¾è¾ è¾¡è¾¢è¾¤è¾¥è¾¦è¾§è¾ªè¾¬è¾­è¾®è¾¯è¾²è¾³è¾´è¾µè¾·è¾¸è¾ºè¾»è¾¼è¾¿è¿€è¿ƒè¿†ï¿½è¿‰è¿Šè¿‹è¿Œè¿è¿è¿’è¿–è¿—è¿šè¿ è¿¡è¿£è¿§è¿¬è¿¯è¿±è¿²è¿´è¿µè¿¶è¿ºè¿»è¿¼è¿¾è¿¿é€‡é€ˆé€Œé€Žé€“é€•é€˜è•–è”»è“¿è“¼è•™è•ˆè•¨è•¤è•žè•ºçž¢è•ƒè•²è•»è–¤è–¨è–‡è–è•¹è–®è–œè–…è–¹è–·è–°è—“è—è—œè—¿è˜§è˜…è˜©è˜–è˜¼å»¾å¼ˆå¤¼å¥è€·å¥•å¥šå¥˜åŒå°¢å°¥å°¬å°´æ‰Œæ‰ªæŠŸæŠ»æ‹Šæ‹šæ‹—æ‹®æŒ¢æ‹¶æŒ¹æ‹æƒæŽ­æ¶æ±æºæŽŽæŽ´æ­æŽ¬æŽŠæ©æŽ®æŽ¼æ²æ¸æ æ¿æ„æžæŽæ‘’æ†æŽ¾æ‘…æ‘æ‹æ›æ æŒæ¦æ¡æ‘žæ’„æ‘­æ’–ï¿½".split("");
    for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
    D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é€™é€œé€£é€¤é€¥é€§é€¨é€©é€ªé€«é€¬é€°é€±é€²é€³é€´é€·é€¹é€ºé€½é€¿é€éƒé…é†éˆé‰éŠé‹éŒéŽé”é•é–é™éšéœééžéŸé é¡é¤é¦é§é©éªé«é¬é¯é°é±é²é³é¶é·é¸é¹éºé»é¼é¾é‚ï¿½é‚„é‚…é‚†é‚‡é‚‰é‚Šé‚Œé‚é‚Žé‚é‚é‚’é‚”é‚–é‚˜é‚šé‚œé‚žé‚Ÿé‚ é‚¤é‚¥é‚§é‚¨é‚©é‚«é‚­é‚²é‚·é‚¼é‚½é‚¿éƒ€æ‘ºæ’·æ’¸æ’™æ’ºæ“€æ“æ“—æ“¤æ“¢æ”‰æ”¥æ”®å¼‹å¿’ç”™å¼‘åŸå±å½å©å¨å»å’å–å†å‘‹å‘’å‘“å‘”å‘–å‘ƒå¡å‘—å‘™å£å²å’‚å’”å‘·å‘±å‘¤å’šå’›å’„å‘¶å‘¦å’å“å’­å“‚å’´å“’å’§å’¦å““å“”å‘²å’£å“•å’»å’¿å“Œå“™å“šå“œå’©å’ªå’¤å“å“å“žå”›å“§å” å“½å””å“³å”¢å”£å”å”‘å”§å”ªå•§å–å–µå•‰å•­å•å••å”¿å•å”¼ï¿½".split("");
    for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
    D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éƒ‚éƒƒéƒ†éƒˆéƒ‰éƒ‹éƒŒéƒéƒ’éƒ”éƒ•éƒ–éƒ˜éƒ™éƒšéƒžéƒŸéƒ éƒ£éƒ¤éƒ¥éƒ©éƒªéƒ¬éƒ®éƒ°éƒ±éƒ²éƒ³éƒµéƒ¶éƒ·éƒ¹éƒºéƒ»éƒ¼éƒ¿é„€é„é„ƒé„…é„†é„‡é„ˆé„‰é„Šé„‹é„Œé„é„Žé„é„é„‘é„’é„“é„”é„•é„–é„—é„˜é„šé„›é„œï¿½é„é„Ÿé„ é„¡é„¤é„¥é„¦é„§é„¨é„©é„ªé„«é„¬é„­é„®é„°é„²é„³é„´é„µé„¶é„·é„¸é„ºé„»é„¼é„½é„¾é„¿é…€é…é…‚é…„å”·å•–å•µå•¶å•·å”³å”°å•œå–‹å—’å–ƒå–±å–¹å–ˆå–å–Ÿå•¾å—–å–‘å•»å—Ÿå–½å–¾å–”å–™å—ªå—·å—‰å˜Ÿå—‘å—«å—¬å—”å—¦å—å—„å—¯å—¥å—²å—³å—Œå—å—¨å—µå—¤è¾”å˜žå˜ˆå˜Œå˜å˜¤å˜£å—¾å˜€å˜§å˜­å™˜å˜¹å™—å˜¬å™å™¢å™™å™œå™Œå™”åš†å™¤å™±å™«å™»å™¼åš…åš“åš¯å›”å›—å›å›¡å›µå›«å›¹å›¿åœ„åœŠåœ‰åœœå¸å¸™å¸”å¸‘å¸±å¸»å¸¼ï¿½".split("");
    for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
    D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é……é…‡é…ˆé…‘é…“é…”é…•é…–é…˜é…™é…›é…œé…Ÿé… é…¦é…§é…¨é…«é…­é…³é…ºé…»é…¼é†€é†é†‚é†ƒé†„é††é†ˆé†Šé†Žé†é†“é†”é†•é†–é†—é†˜é†™é†œé†é†žé†Ÿé† é†¡é†¤é†¥é†¦é†§é†¨é†©é†«é†¬é†°é†±é†²é†³é†¶é†·é†¸é†¹é†»ï¿½é†¼é†½é†¾é†¿é‡€é‡é‡‚é‡ƒé‡„é‡…é‡†é‡ˆé‡‹é‡é‡’é‡“é‡”é‡•é‡–é‡—é‡˜é‡™é‡šé‡›é‡é‡žé‡Ÿé‡ é‡¡é‡¢é‡£é‡¤é‡¥å¸·å¹„å¹”å¹›å¹žå¹¡å²Œå±ºå²å²å²–å²ˆå²˜å²™å²‘å²šå²œå²µå²¢å²½å²¬å²«å²±å²£å³å²·å³„å³’å³¤å³‹å³¥å´‚å´ƒå´§å´¦å´®å´¤å´žå´†å´›åµ˜å´¾å´´å´½åµ¬åµ›åµ¯åµåµ«åµ‹åµŠåµ©åµ´å¶‚å¶™å¶è±³å¶·å·…å½³å½·å¾‚å¾‡å¾‰å¾Œå¾•å¾™å¾œå¾¨å¾­å¾µå¾¼è¡¢å½¡çŠ­çŠ°çŠ´çŠ·çŠ¸ç‹ƒç‹ç‹Žç‹ç‹’ç‹¨ç‹¯ç‹©ç‹²ç‹´ç‹·çŒç‹³çŒƒç‹ºï¿½".split("");
    for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
    D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é‡¦é‡§é‡¨é‡©é‡ªé‡«é‡¬é‡­é‡®é‡¯é‡°é‡±é‡²é‡³é‡´é‡µé‡¶é‡·é‡¸é‡¹é‡ºé‡»é‡¼é‡½é‡¾é‡¿éˆ€éˆéˆ‚éˆƒéˆ„éˆ…éˆ†éˆ‡éˆˆéˆ‰éˆŠéˆ‹éˆŒéˆéˆŽéˆéˆéˆ‘éˆ’éˆ“éˆ”éˆ•éˆ–éˆ—éˆ˜éˆ™éˆšéˆ›éˆœéˆéˆžéˆŸéˆ éˆ¡éˆ¢éˆ£éˆ¤ï¿½éˆ¥éˆ¦éˆ§éˆ¨éˆ©éˆªéˆ«éˆ¬éˆ­éˆ®éˆ¯éˆ°éˆ±éˆ²éˆ³éˆ´éˆµéˆ¶éˆ·éˆ¸éˆ¹éˆºéˆ»éˆ¼éˆ½éˆ¾éˆ¿é‰€é‰é‰‚é‰ƒé‰„é‰…ç‹»çŒ—çŒ“çŒ¡çŒŠçŒžçŒçŒ•çŒ¢çŒ¹çŒ¥çŒ¬çŒ¸çŒ±ççç—ç ç¬ç¯ç¾èˆ›å¤¥é£§å¤¤å¤‚é¥£é¥§é¥¨é¥©é¥ªé¥«é¥¬é¥´é¥·é¥½é¦€é¦„é¦‡é¦Šé¦é¦é¦‘é¦“é¦”é¦•åº€åº‘åº‹åº–åº¥åº åº¹åºµåº¾åº³èµ“å»’å»‘å»›å»¨å»ªè†ºå¿„å¿‰å¿–å¿æ€ƒå¿®æ€„å¿¡å¿¤å¿¾æ€…æ€†å¿ªå¿­å¿¸æ€™æ€µæ€¦æ€›æ€æ€æ€©æ€«æ€Šæ€¿æ€¡æ¸æ¹æ»æºæ‚ï¿½".split("");
    for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
    D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é‰†é‰‡é‰ˆé‰‰é‰Šé‰‹é‰Œé‰é‰Žé‰é‰é‰‘é‰’é‰“é‰”é‰•é‰–é‰—é‰˜é‰™é‰šé‰›é‰œé‰é‰žé‰Ÿé‰ é‰¡é‰¢é‰£é‰¤é‰¥é‰¦é‰§é‰¨é‰©é‰ªé‰«é‰¬é‰­é‰®é‰¯é‰°é‰±é‰²é‰³é‰µé‰¶é‰·é‰¸é‰¹é‰ºé‰»é‰¼é‰½é‰¾é‰¿éŠ€éŠéŠ‚éŠƒéŠ„éŠ…ï¿½éŠ†éŠ‡éŠˆéŠ‰éŠŠéŠ‹éŠŒéŠéŠéŠéŠ‘éŠ’éŠ“éŠ”éŠ•éŠ–éŠ—éŠ˜éŠ™éŠšéŠ›éŠœéŠéŠžéŠŸéŠ éŠ¡éŠ¢éŠ£éŠ¤éŠ¥éŠ¦éŠ§æªæ½æ‚–æ‚šæ‚­æ‚æ‚ƒæ‚’æ‚Œæ‚›æƒ¬æ‚»æ‚±æƒæƒ˜æƒ†æƒšæ‚´æ„ æ„¦æ„•æ„£æƒ´æ„€æ„Žæ„«æ…Šæ…µæ†¬æ†”æ†§æ†·æ‡”æ‡µå¿éš³é—©é—«é—±é—³é—µé—¶é—¼é—¾é˜ƒé˜„é˜†é˜ˆé˜Šé˜‹é˜Œé˜é˜é˜’é˜•é˜–é˜—é˜™é˜šä¸¬çˆ¿æˆ•æ°µæ±”æ±œæ±Šæ²£æ²…æ²æ²”æ²Œæ±¨æ±©æ±´æ±¶æ²†æ²©æ³æ³”æ²­æ³·æ³¸æ³±æ³—æ²²æ³ æ³–æ³ºæ³«æ³®æ²±æ³“æ³¯æ³¾ï¿½".split("");
    for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
    D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŠ¨éŠ©éŠªéŠ«éŠ¬éŠ­éŠ¯éŠ°éŠ±éŠ²éŠ³éŠ´éŠµéŠ¶éŠ·éŠ¸éŠ¹éŠºéŠ»éŠ¼éŠ½éŠ¾éŠ¿é‹€é‹é‹‚é‹ƒé‹„é‹…é‹†é‹‡é‹‰é‹Šé‹‹é‹Œé‹é‹Žé‹é‹é‹‘é‹’é‹“é‹”é‹•é‹–é‹—é‹˜é‹™é‹šé‹›é‹œé‹é‹žé‹Ÿé‹ é‹¡é‹¢é‹£é‹¤é‹¥é‹¦é‹§é‹¨ï¿½é‹©é‹ªé‹«é‹¬é‹­é‹®é‹¯é‹°é‹±é‹²é‹³é‹´é‹µé‹¶é‹·é‹¸é‹¹é‹ºé‹»é‹¼é‹½é‹¾é‹¿éŒ€éŒéŒ‚éŒƒéŒ„éŒ…éŒ†éŒ‡éŒˆéŒ‰æ´¹æ´§æ´Œæµƒæµˆæ´‡æ´„æ´™æ´Žæ´«æµæ´®æ´µæ´šæµæµ’æµ”æ´³æ¶‘æµ¯æ¶žæ¶ æµžæ¶“æ¶”æµœæµ æµ¼æµ£æ¸šæ·‡æ·…æ·žæ¸Žæ¶¿æ· æ¸‘æ·¦æ·æ·™æ¸–æ¶«æ¸Œæ¶®æ¸«æ¹®æ¹Žæ¹«æº²æ¹Ÿæº†æ¹“æ¹”æ¸²æ¸¥æ¹„æ»Ÿæº±æº˜æ» æ¼­æ»¢æº¥æº§æº½æº»æº·æ»—æº´æ»æºæ»‚æºŸæ½¢æ½†æ½‡æ¼¤æ¼•æ»¹æ¼¯æ¼¶æ½‹æ½´æ¼ªæ¼‰æ¼©æ¾‰æ¾æ¾Œæ½¸æ½²æ½¼æ½ºæ¿‘ï¿½".split("");
    for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
    D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŒŠéŒ‹éŒŒéŒéŒŽéŒéŒéŒ‘éŒ’éŒ“éŒ”éŒ•éŒ–éŒ—éŒ˜éŒ™éŒšéŒ›éŒœéŒéŒžéŒŸéŒ éŒ¡éŒ¢éŒ£éŒ¤éŒ¥éŒ¦éŒ§éŒ¨éŒ©éŒªéŒ«éŒ¬éŒ­éŒ®éŒ¯éŒ°éŒ±éŒ²éŒ³éŒ´éŒµéŒ¶éŒ·éŒ¸éŒ¹éŒºéŒ»éŒ¼éŒ½éŒ¿é€éé‚éƒé„é…é†é‡éˆé‰ï¿½éŠé‹éŒééŽééé‘é’é“é”é•é–é—é˜é™éšé›éœééžéŸé é¡é¢é£é¤é¥é¦é§é¨é©é«æ¿‰æ¾§æ¾¹æ¾¶æ¿‚æ¿¡æ¿®æ¿žæ¿ æ¿¯ç€šç€£ç€›ç€¹ç€µççžå®€å®„å®•å®“å®¥å®¸ç”¯éªžæ´å¯¤å¯®è¤°å¯°è¹‡è¬‡è¾¶è¿“è¿•è¿¥è¿®è¿¤è¿©è¿¦è¿³è¿¨é€…é€„é€‹é€¦é€‘é€é€–é€¡é€µé€¶é€­é€¯é„é‘é’éé¨é˜é¢é›æš¹é´é½é‚‚é‚ˆé‚ƒé‚‹å½å½—å½–å½˜å°»å’«å±å±™å­±å±£å±¦ç¾¼å¼ªå¼©å¼­è‰´å¼¼é¬»å±®å¦å¦ƒå¦å¦©å¦ªå¦£ï¿½".split("");
    for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
    D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿éŽ€éŽéŽ‚éŽƒéŽ„éŽ…éŽ†éŽ‡éŽˆéŽ‰éŽŠéŽ‹éŽŒéŽéŽŽéŽéŽ‘éŽ’éŽ“éŽ”éŽ•éŽ–éŽ—éŽ˜éŽ™éŽšéŽ›éŽœéŽéŽžéŽŸéŽ éŽ¡éŽ¢éŽ£éŽ¤éŽ¥éŽ¦éŽ§éŽ¨éŽ©éŽªéŽ«ï¿½éŽ¬éŽ­éŽ®éŽ¯éŽ°éŽ±éŽ²éŽ³éŽ´éŽµéŽ¶éŽ·éŽ¸éŽ¹éŽºéŽ»éŽ¼éŽ½éŽ¾éŽ¿é€éé‚éƒé„é…é†é‡éˆé‰é‹éŒéå¦—å§Šå¦«å¦žå¦¤å§’å¦²å¦¯å§—å¦¾å¨…å¨†å§å¨ˆå§£å§˜å§¹å¨Œå¨‰å¨²å¨´å¨‘å¨£å¨“å©€å©§å©Šå©•å¨¼å©¢å©µèƒ¬åªªåª›å©·å©ºåª¾å««åª²å«’å«”åª¸å« å«£å«±å«–å«¦å«˜å«œå¬‰å¬—å¬–å¬²å¬·å­€å°•å°œå­šå­¥å­³å­‘å­“å­¢é©µé©·é©¸é©ºé©¿é©½éª€éªéª…éªˆéªŠéªéª’éª“éª–éª˜éª›éªœéªéªŸéª éª¢éª£éª¥éª§çºŸçº¡çº£çº¥çº¨çº©ï¿½".split("");
    for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
    D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŽééé‘é’é“é”é•é—é˜é™éšé›éœééžéŸé é¡é¢é£é¤é¥é¦é§é¨é©éªé«é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿é€éé‚éƒé„é…é†é‡éˆé‰éŠé‹éŒéï¿½éŽééé‘é’é“é”é•é–é—é˜é™éšé›éœééžéŸé é¡é¢é£é¤é¥é¦é§é¨é©éªé«é¬é­é®çº­çº°çº¾ç»€ç»ç»‚ç»‰ç»‹ç»Œç»ç»”ç»—ç»›ç» ç»¡ç»¨ç»«ç»®ç»¯ç»±ç»²ç¼ç»¶ç»ºç»»ç»¾ç¼ç¼‚ç¼ƒç¼‡ç¼ˆç¼‹ç¼Œç¼ç¼‘ç¼’ç¼—ç¼™ç¼œç¼›ç¼Ÿç¼¡ç¼¢ç¼£ç¼¤ç¼¥ç¼¦ç¼§ç¼ªç¼«ç¼¬ç¼­ç¼¯ç¼°ç¼±ç¼²ç¼³ç¼µå¹ºç•¿å·›ç”¾é‚•çŽŽçŽ‘çŽ®çŽ¢çŽŸçç‚ç‘çŽ·çŽ³ç€ç‰çˆç¥ç™é¡¼çŠç©ç§çžçŽºç²ççªç‘›ç¦ç¥ç¨ç°ç®ç¬ï¿½".split("");
    for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
    D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¿é‘€é‘é‘‚é‘ƒé‘„é‘…é‘†é‘‡é‘ˆé‘‰é‘Šé‘‹é‘Œé‘é‘Žé‘é‘é‘‘é‘’é‘“é‘”é‘•é‘–é‘—é‘˜é‘™é‘šé‘›é‘œé‘é‘žé‘Ÿé‘ é‘¡é‘¢é‘£é‘¤é‘¥é‘¦é‘§é‘¨é‘©é‘ªé‘¬é‘­é‘®é‘¯ï¿½é‘°é‘±é‘²é‘³é‘´é‘µé‘¶é‘·é‘¸é‘¹é‘ºé‘»é‘¼é‘½é‘¾é‘¿é’€é’é’‚é’ƒé’„é’‘é’–é’˜é“‡é“é““é“”é“šé“¦é“»é”œé” ç›çšç‘ç‘œç‘—ç‘•ç‘™ç‘·ç‘­ç‘¾ç’œç’Žç’€ç’ç’‡ç’‹ç’žç’¨ç’©ç’ç’§ç“’ç’ºéŸªéŸ«éŸ¬æŒæ“æžæˆæ©æž¥æž‡æªæ³æž˜æž§æµæž¨æžžæž­æž‹æ·æ¼æŸ°æ ‰æŸ˜æ ŠæŸ©æž°æ ŒæŸ™æžµæŸšæž³æŸæ €æŸƒæž¸æŸ¢æ ŽæŸæŸ½æ ²æ ³æ¡ æ¡¡æ¡Žæ¡¢æ¡„æ¡¤æ¢ƒæ æ¡•æ¡¦æ¡æ¡§æ¡€æ ¾æ¡Šæ¡‰æ ©æ¢µæ¢æ¡´æ¡·æ¢“æ¡«æ£‚æ¥®æ£¼æ¤Ÿæ¤ æ£¹ï¿½".split("");
    for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
    D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é”§é”³é”½é•ƒé•ˆé•‹é••é•šé• é•®é•´é•µé•·é•¸é•¹é•ºé•»é•¼é•½é•¾é–€é–é–‚é–ƒé–„é–…é–†é–‡é–ˆé–‰é–Šé–‹é–Œé–é–Žé–é–é–‘é–’é–“é–”é–•é––é–—é–˜é–™é–šé–›é–œé–é–žé–Ÿé– é–¡é–¢é–£é–¤é–¥é–¦é–§é–¨é–©é–ªï¿½é–«é–¬é–­é–®é–¯é–°é–±é–²é–³é–´é–µé–¶é–·é–¸é–¹é–ºé–»é–¼é–½é–¾é–¿é—€é—é—‚é—ƒé—„é—…é—†é—‡é—ˆé—‰é—Šé—‹æ¤¤æ£°æ¤‹æ¤æ¥—æ££æ¤æ¥±æ¤¹æ¥ æ¥‚æ¥æ¦„æ¥«æ¦€æ¦˜æ¥¸æ¤´æ§Œæ¦‡æ¦ˆæ§Žæ¦‰æ¥¦æ¥£æ¥¹æ¦›æ¦§æ¦»æ¦«æ¦­æ§”æ¦±æ§æ§Šæ§Ÿæ¦•æ§ æ¦æ§¿æ¨¯æ§­æ¨—æ¨˜æ©¥æ§²æ©„æ¨¾æª æ©æ©›æ¨µæªŽæ©¹æ¨½æ¨¨æ©˜æ©¼æª‘æªæª©æª—æª«çŒ·ç’æ®æ®‚æ®‡æ®„æ®’æ®“æ®æ®šæ®›æ®¡æ®ªè½«è½­è½±è½²è½³è½µè½¶è½¸è½·è½¹è½ºè½¼è½¾è¾è¾‚è¾„è¾‡è¾‹ï¿½".split("");
    for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
    D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é—Œé—é—Žé—é—é—‘é—’é—“é—”é—•é—–é——é—˜é—™é—šé—›é—œé—é—žé—Ÿé— é—¡é—¢é—£é—¤é—¥é—¦é—§é—¬é—¿é˜‡é˜“é˜˜é˜›é˜žé˜ é˜£é˜¤é˜¥é˜¦é˜§é˜¨é˜©é˜«é˜¬é˜­é˜¯é˜°é˜·é˜¸é˜¹é˜ºé˜¾é™é™ƒé™Šé™Žé™é™‘é™’é™“é™–é™—ï¿½é™˜é™™é™šé™œé™é™žé™ é™£é™¥é™¦é™«é™­é™®é™¯é™°é™±é™³é™¸é™¹é™ºé™»é™¼é™½é™¾é™¿éš€éšéš‚éšƒéš„éš‡éš‰éšŠè¾è¾Žè¾è¾˜è¾šè»Žæˆ‹æˆ—æˆ›æˆŸæˆ¢æˆ¡æˆ¥æˆ¤æˆ¬è‡§ç“¯ç“´ç“¿ç”ç”‘ç”“æ”´æ—®æ—¯æ—°æ˜Šæ˜™æ²æ˜ƒæ˜•æ˜€ç‚…æ›·æ˜æ˜´æ˜±æ˜¶æ˜µè€†æ™Ÿæ™”æ™æ™æ™–æ™¡æ™—æ™·æš„æšŒæš§æšæš¾æ››æ›œæ›¦æ›©è´²è´³è´¶è´»è´½èµ€èµ…èµ†èµˆèµ‰èµ‡èµèµ•èµ™è§‡è§Šè§‹è§Œè§Žè§è§è§‘ç‰®çŠŸç‰ç‰¦ç‰¯ç‰¾ç‰¿çŠ„çŠ‹çŠçŠçŠ’æŒˆæŒ²æŽ°ï¿½".split("");
    for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
    D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éšŒéšŽéš‘éš’éš“éš•éš–éššéš›éšéšžéšŸéš éš¡éš¢éš£éš¤éš¥éš¦éš¨éš©éšªéš«éš¬éš­éš®éš¯éš±éš²éš´éšµéš·éš¸éšºéš»éš¿é›‚é›ƒé›ˆé›Šé›‹é›é›‘é›“é›”é›–é›—é›˜é›™é›šé››é›œé›é›žé›Ÿé›¡é›¢é›£é›¤é›¥é›¦é›§é›«ï¿½é›¬é›­é›®é›°é›±é›²é›´é›µé›¸é›ºé›»é›¼é›½é›¿éœ‚éœƒéœ…éœŠéœ‹éœŒéœéœ‘éœ’éœ”éœ•éœ—éœ˜éœ™éœšéœ›éœéœŸéœ æ¿æ“˜è€„æ¯ªæ¯³æ¯½æ¯µæ¯¹æ°…æ°‡æ°†æ°æ°•æ°˜æ°™æ°šæ°¡æ°©æ°¤æ°ªæ°²æ”µæ••æ•«ç‰ç‰’ç‰–çˆ°è™¢åˆ–è‚Ÿè‚œè‚“è‚¼æœŠè‚½è‚±è‚«è‚­è‚´è‚·èƒ§èƒ¨èƒ©èƒªèƒ›èƒ‚èƒ„èƒ™èƒèƒ—æœèƒèƒ«èƒ±èƒ´èƒ­è„è„Žèƒ²èƒ¼æœ•è„’è±šè„¶è„žè„¬è„˜è„²è…ˆè…Œè…“è…´è…™è…šè…±è… è…©è…¼è…½è…­è…§å¡åªµè†ˆè†‚è†‘æ»•è†£è†ªè‡Œæœ¦è‡Šè†»ï¿½".split("");
    for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
    D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éœ¡éœ¢éœ£éœ¤éœ¥éœ¦éœ§éœ¨éœ©éœ«éœ¬éœ®éœ¯éœ±éœ³éœ´éœµéœ¶éœ·éœºéœ»éœ¼éœ½éœ¿é€éé‚éƒé„é…é†é‡éˆé‰éŠé‹éŒééŽééé‘é”é•é—é˜éšéœééŸé£é¤é¦é§é¨éªé«é¬é­é®é¯é°é±ï¿½é²éµé·é¸é¹éºé»é½é¾é¿éž€éžéž‚éžƒéž„éž†éž‡éžˆéž‰éžŠéžŒéžŽéžéžéž“éž•éž–éž—éž™éžšéž›éžœéžè‡è†¦æ¬¤æ¬·æ¬¹æ­ƒæ­†æ­™é£‘é£’é£“é£•é£™é£šæ®³å½€æ¯‚è§³æ–é½‘æ–“æ–¼æ—†æ—„æ—ƒæ—Œæ—Žæ—’æ—–ç‚€ç‚œç‚–ç‚ç‚»çƒ€ç‚·ç‚«ç‚±çƒ¨çƒŠç„ç„“ç„–ç„¯ç„±ç…³ç…œç…¨ç……ç…²ç…Šç…¸ç…ºç†˜ç†³ç†µç†¨ç† ç‡ ç‡”ç‡§ç‡¹çˆçˆ¨ç¬ç„˜ç…¦ç†¹æˆ¾æˆ½æ‰ƒæ‰ˆæ‰‰ç¤»ç¥€ç¥†ç¥‰ç¥›ç¥œç¥“ç¥šç¥¢ç¥—ç¥ ç¥¯ç¥§ç¥ºç¦…ç¦Šç¦šç¦§ç¦³å¿‘å¿ï¿½".split("");
    for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
    D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éžžéžŸéž¡éž¢éž¤éž¥éž¦éž§éž¨éž©éžªéž¬éž®éž°éž±éž³éžµéž¶éž·éž¸éž¹éžºéž»éž¼éž½éž¾éž¿éŸ€éŸéŸ‚éŸƒéŸ„éŸ…éŸ†éŸ‡éŸˆéŸ‰éŸŠéŸ‹éŸŒéŸéŸŽéŸéŸéŸ‘éŸ’éŸ“éŸ”éŸ•éŸ–éŸ—éŸ˜éŸ™éŸšéŸ›éŸœéŸéŸžéŸŸéŸ éŸ¡éŸ¢éŸ£ï¿½éŸ¤éŸ¥éŸ¨éŸ®éŸ¯éŸ°éŸ±éŸ²éŸ´éŸ·éŸ¸éŸ¹éŸºéŸ»éŸ¼éŸ½éŸ¾éŸ¿é €é é ‚é ƒé „é …é †é ‡é ˆé ‰é Šé ‹é Œé é Žæ€¼ææšæ§ææ™æ£æ‚«æ„†æ„æ…æ†©æ†æ‡‹æ‡‘æˆ†è‚€è¿æ²“æ³¶æ·¼çŸ¶çŸ¸ç €ç ‰ç —ç ˜ç ‘æ–«ç ­ç œç ç ¹ç ºç »ç Ÿç ¼ç ¥ç ¬ç £ç ©ç¡Žç¡­ç¡–ç¡—ç ¦ç¡ç¡‡ç¡Œç¡ªç¢›ç¢“ç¢šç¢‡ç¢œç¢¡ç¢£ç¢²ç¢¹ç¢¥ç£”ç£™ç£‰ç£¬ç£²ç¤…ç£´ç¤“ç¤¤ç¤žç¤´é¾›é»¹é»»é»¼ç›±çœ„çœç›¹çœ‡çœˆçœšçœ¢çœ™çœ­çœ¦çœµçœ¸çç‘ç‡çƒçšç¨ï¿½".split("");
    for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
    D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é é é ‘é ’é “é ”é •é –é —é ˜é ™é šé ›é œé é žé Ÿé  é ¡é ¢é £é ¤é ¥é ¦é §é ¨é ©é ªé «é ¬é ­é ®é ¯é °é ±é ²é ³é ´é µé ¶é ·é ¸é ¹é ºé »é ¼é ½é ¾é ¿é¡€é¡é¡‚é¡ƒé¡„é¡…é¡†é¡‡é¡ˆé¡‰é¡Šé¡‹é¡Œé¡ï¿½é¡Žé¡é¡é¡‘é¡’é¡“é¡”é¡•é¡–é¡—é¡˜é¡™é¡šé¡›é¡œé¡é¡žé¡Ÿé¡ é¡¡é¡¢é¡£é¡¤é¡¥é¡¦é¡§é¡¨é¡©é¡ªé¡«é¡¬é¡­é¡®ç¢ç¥ç¿çžç½çž€çžŒçž‘çžŸçž çž°çžµçž½ç”ºç•€ç•Žç•‹ç•ˆç•›ç•²ç•¹ç–ƒç½˜ç½¡ç½Ÿè©ˆç½¨ç½´ç½±ç½¹ç¾ç½¾ç›ç›¥è ²é’…é’†é’‡é’‹é’Šé’Œé’é’é’é’”é’—é’•é’šé’›é’œé’£é’¤é’«é’ªé’­é’¬é’¯é’°é’²é’´é’¶é’·é’¸é’¹é’ºé’¼é’½é’¿é“„é“ˆé“‰é“Šé“‹é“Œé“é“Žé“é“‘é“’é“•é“–é“—é“™é“˜é“›é“žé“Ÿé“ é“¢é“¤é“¥é“§é“¨é“ªï¿½".split("");
    for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
    D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡¯é¡°é¡±é¡²é¡³é¡´é¢‹é¢Žé¢’é¢•é¢™é¢£é¢¨é¢©é¢ªé¢«é¢¬é¢­é¢®é¢¯é¢°é¢±é¢²é¢³é¢´é¢µé¢¶é¢·é¢¸é¢¹é¢ºé¢»é¢¼é¢½é¢¾é¢¿é£€é£é£‚é£ƒé£„é£…é£†é£‡é£ˆé£‰é£Šé£‹é£Œé£é£é£é£”é£–é£—é£›é£œé£é£ é£¡é£¢é££é£¤ï¿½é£¥é£¦é£©é£ªé£«é£¬é£­é£®é£¯é£°é£±é£²é£³é£´é£µé£¶é£·é£¸é£¹é£ºé£»é£¼é£½é£¾é£¿é¤€é¤é¤‚é¤ƒé¤„é¤…é¤†é¤‡é“©é“«é“®é“¯é“³é“´é“µé“·é“¹é“¼é“½é“¿é”ƒé”‚é”†é”‡é”‰é”Šé”é”Žé”é”’é”“é””é”•é”–é”˜é”›é”é”žé”Ÿé”¢é”ªé”«é”©é”¬é”±é”²é”´é”¶é”·é”¸é”¼é”¾é”¿é•‚é”µé•„é•…é•†é•‰é•Œé•Žé•é•’é•“é•”é•–é•—é•˜é•™é•›é•žé•Ÿé•é•¡é•¢é•¤é•¥é•¦é•§é•¨é•©é•ªé•«é•¬é•¯é•±é•²é•³é”ºçŸ§çŸ¬é›‰ç§•ç§­ç§£ç§«ç¨†åµ‡ç¨ƒç¨‚ç¨žç¨”ï¿½".split("");
    for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
    D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¤ˆé¤‰é¤Šé¤‹é¤Œé¤Žé¤é¤‘é¤’é¤“é¤”é¤•é¤–é¤—é¤˜é¤™é¤šé¤›é¤œé¤é¤žé¤Ÿé¤ é¤¡é¤¢é¤£é¤¤é¤¥é¤¦é¤§é¤¨é¤©é¤ªé¤«é¤¬é¤­é¤¯é¤°é¤±é¤²é¤³é¤´é¤µé¤¶é¤·é¤¸é¤¹é¤ºé¤»é¤¼é¤½é¤¾é¤¿é¥€é¥é¥‚é¥ƒé¥„é¥…é¥†é¥‡é¥ˆé¥‰ï¿½é¥Šé¥‹é¥Œé¥é¥Žé¥é¥é¥‘é¥’é¥“é¥–é¥—é¥˜é¥™é¥šé¥›é¥œé¥é¥žé¥Ÿé¥ é¥¡é¥¢é¥¤é¥¦é¥³é¥¸é¥¹é¥»é¥¾é¦‚é¦ƒé¦‰ç¨¹ç¨·ç©‘é»é¦¥ç©°çšˆçšŽçš“çš™çš¤ç“žç“ ç”¬é¸ é¸¢é¸¨é¸©é¸ªé¸«é¸¬é¸²é¸±é¸¶é¸¸é¸·é¸¹é¸ºé¸¾é¹é¹‚é¹„é¹†é¹‡é¹ˆé¹‰é¹‹é¹Œé¹Žé¹‘é¹•é¹—é¹šé¹›é¹œé¹žé¹£é¹¦é¹§é¹¨é¹©é¹ªé¹«é¹¬é¹±é¹­é¹³ç–’ç–”ç––ç– ç–ç–¬ç–£ç–³ç–´ç–¸ç—„ç–±ç–°ç—ƒç—‚ç—–ç—ç—£ç—¨ç—¦ç—¤ç—«ç—§ç˜ƒç—±ç—¼ç—¿ç˜ç˜€ç˜…ç˜Œç˜—ç˜Šç˜¥ç˜˜ç˜•ç˜™ï¿½".split("");
    for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
    D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¦Œé¦Žé¦šé¦›é¦œé¦é¦žé¦Ÿé¦ é¦¡é¦¢é¦£é¦¤é¦¦é¦§é¦©é¦ªé¦«é¦¬é¦­é¦®é¦¯é¦°é¦±é¦²é¦³é¦´é¦µé¦¶é¦·é¦¸é¦¹é¦ºé¦»é¦¼é¦½é¦¾é¦¿é§€é§é§‚é§ƒé§„é§…é§†é§‡é§ˆé§‰é§Šé§‹é§Œé§é§Žé§é§é§‘é§’é§“é§”é§•é§–é§—é§˜ï¿½é§™é§šé§›é§œé§é§žé§Ÿé§ é§¡é§¢é§£é§¤é§¥é§¦é§§é§¨é§©é§ªé§«é§¬é§­é§®é§¯é§°é§±é§²é§³é§´é§µé§¶é§·é§¸é§¹ç˜›ç˜¼ç˜¢ç˜ ç™€ç˜­ç˜°ç˜¿ç˜µç™ƒç˜¾ç˜³ç™ç™žç™”ç™œç™–ç™«ç™¯ç¿Šç«¦ç©¸ç©¹çª€çª†çªˆçª•çª¦çª çª¬çª¨çª­çª³è¡¤è¡©è¡²è¡½è¡¿è¢‚è¢¢è£†è¢·è¢¼è£‰è£¢è£Žè££è£¥è£±è¤šè£¼è£¨è£¾è£°è¤¡è¤™è¤“è¤›è¤Šè¤´è¤«è¤¶è¥è¥¦è¥»ç–‹èƒ¥çš²çš´çŸœè€’è€”è€–è€œè€ è€¢è€¥è€¦è€§è€©è€¨è€±è€‹è€µèƒè†èè’è©è±è¦ƒé¡¸é¢€é¢ƒï¿½".split("");
    for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
    D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é§ºé§»é§¼é§½é§¾é§¿é¨€é¨é¨‚é¨ƒé¨„é¨…é¨†é¨‡é¨ˆé¨‰é¨Šé¨‹é¨Œé¨é¨Žé¨é¨é¨‘é¨’é¨“é¨”é¨•é¨–é¨—é¨˜é¨™é¨šé¨›é¨œé¨é¨žé¨Ÿé¨ é¨¡é¨¢é¨£é¨¤é¨¥é¨¦é¨§é¨¨é¨©é¨ªé¨«é¨¬é¨­é¨®é¨¯é¨°é¨±é¨²é¨³é¨´é¨µé¨¶é¨·é¨¸ï¿½é¨¹é¨ºé¨»é¨¼é¨½é¨¾é¨¿é©€é©é©‚é©ƒé©„é©…é©†é©‡é©ˆé©‰é©Šé©‹é©Œé©é©Žé©é©é©‘é©’é©“é©”é©•é©–é©—é©˜é©™é¢‰é¢Œé¢é¢é¢”é¢šé¢›é¢žé¢Ÿé¢¡é¢¢é¢¥é¢¦è™è™”è™¬è™®è™¿è™ºè™¼è™»èš¨èšèš‹èš¬èšèš§èš£èšªèš“èš©èš¶è›„èšµè›Žèš°èšºèš±èš¯è›‰è›èš´è›©è›±è›²è›­è›³è›èœ“è›žè›´è›Ÿè›˜è›‘èœƒèœ‡è›¸èœˆèœŠèœèœ‰èœ£èœ»èœžèœ¥èœ®èœšèœ¾èˆèœ´èœ±èœ©èœ·èœ¿èž‚èœ¢è½è¾è»è è°èŒè®èž‹è“è£è¼è¤è™è¥èž“èž¯èž¨èŸ’ï¿½".split("");
    for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
    D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é©šé©›é©œé©é©žé©Ÿé© é©¡é©¢é©£é©¤é©¥é©¦é©§é©¨é©©é©ªé©«é©²éªƒéª‰éªéªŽéª”éª•éª™éª¦éª©éªªéª«éª¬éª­éª®éª¯éª²éª³éª´éªµéª¹éª»éª½éª¾éª¿é«ƒé«„é«†é«‡é«ˆé«‰é«Šé«é«Žé«é«é«’é«”é«•é«–é«—é«™é«šé«›é«œï¿½é«é«žé« é«¢é«£é«¤é«¥é«§é«¨é«©é«ªé«¬é«®é«°é«±é«²é«³é«´é«µé«¶é«·é«¸é«ºé«¼é«½é«¾é«¿é¬€é¬é¬‚é¬„é¬…é¬†èŸ†èžˆèž…èž­èž—èžƒèž«èŸ¥èž¬èžµèž³èŸ‹èŸ“èž½èŸ‘èŸ€èŸŠèŸ›èŸªèŸ èŸ®è –è “èŸ¾è Šè ›è ¡è ¹è ¼ç¼¶ç½‚ç½„ç½…èˆç«ºç«½ç¬ˆç¬ƒç¬„ç¬•ç¬Šç¬«ç¬ç­‡ç¬¸ç¬ªç¬™ç¬®ç¬±ç¬ ç¬¥ç¬¤ç¬³ç¬¾ç¬žç­˜ç­šç­…ç­µç­Œç­ç­ ç­®ç­»ç­¢ç­²ç­±ç®ç®¦ç®§ç®¸ç®¬ç®ç®¨ç®…ç®ªç®œç®¢ç®«ç®´ç¯‘ç¯ç¯Œç¯ç¯šç¯¥ç¯¦ç¯ªç°Œç¯¾ç¯¼ç°ç°–ç°‹ï¿½".split("");
    for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
    D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¬‡é¬‰é¬Šé¬‹é¬Œé¬é¬Žé¬é¬‘é¬’é¬”é¬•é¬–é¬—é¬˜é¬™é¬šé¬›é¬œé¬é¬žé¬ é¬¡é¬¢é¬¤é¬¥é¬¦é¬§é¬¨é¬©é¬ªé¬«é¬¬é¬­é¬®é¬°é¬±é¬³é¬´é¬µé¬¶é¬·é¬¸é¬¹é¬ºé¬½é¬¾é¬¿é­€é­†é­Šé­‹é­Œé­Žé­é­’é­“é­•é­–é­—é­˜é­™é­šï¿½é­›é­œé­é­žé­Ÿé­ é­¡é­¢é­£é­¤é­¥é­¦é­§é­¨é­©é­ªé­«é­¬é­­é­®é­¯é­°é­±é­²é­³é­´é­µé­¶é­·é­¸é­¹é­ºé­»ç°Ÿç°ªç°¦ç°¸ç±ç±€è‡¾èˆèˆ‚èˆ„è‡¬è¡„èˆ¡èˆ¢èˆ£èˆ­èˆ¯èˆ¨èˆ«èˆ¸èˆ»èˆ³èˆ´èˆ¾è‰„è‰‰è‰‹è‰è‰šè‰Ÿè‰¨è¡¾è¢…è¢ˆè£˜è£Ÿè¥žç¾ç¾Ÿç¾§ç¾¯ç¾°ç¾²ç±¼æ•‰ç²‘ç²ç²œç²žç²¢ç²²ç²¼ç²½ç³ç³‡ç³Œç³ç³ˆç³…ç³—ç³¨è‰®æš¨ç¾¿ç¿Žç¿•ç¿¥ç¿¡ç¿¦ç¿©ç¿®ç¿³ç³¸çµ·ç¶¦ç¶®ç¹‡çº›éº¸éº´èµ³è¶„è¶”è¶‘è¶±èµ§èµ­è±‡è±‰é…Šé…é…Žé…é…¤ï¿½".split("");
    for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
    D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é­¼é­½é­¾é­¿é®€é®é®‚é®ƒé®„é®…é®†é®‡é®ˆé®‰é®Šé®‹é®Œé®é®Žé®é®é®‘é®’é®“é®”é®•é®–é®—é®˜é®™é®šé®›é®œé®é®žé®Ÿé® é®¡é®¢é®£é®¤é®¥é®¦é®§é®¨é®©é®ªé®«é®¬é®­é®®é®¯é®°é®±é®²é®³é®´é®µé®¶é®·é®¸é®¹é®ºï¿½é®»é®¼é®½é®¾é®¿é¯€é¯é¯‚é¯ƒé¯„é¯…é¯†é¯‡é¯ˆé¯‰é¯Šé¯‹é¯Œé¯é¯Žé¯é¯é¯‘é¯’é¯“é¯”é¯•é¯–é¯—é¯˜é¯™é¯šé¯›é…¢é…¡é…°é…©é…¯é…½é…¾é…²é…´é…¹é†Œé†…é†é†é†‘é†¢é†£é†ªé†­é†®é†¯é†µé†´é†ºè±•é¹¾è¶¸è·«è¸…è¹™è¹©è¶µè¶¿è¶¼è¶ºè·„è·–è·—è·šè·žè·Žè·è·›è·†è·¬è··è·¸è·£è·¹è·»è·¤è¸‰è·½è¸”è¸è¸Ÿè¸¬è¸®è¸£è¸¯è¸ºè¹€è¸¹è¸µè¸½è¸±è¹‰è¹è¹‚è¹‘è¹’è¹Šè¹°è¹¶è¹¼è¹¯è¹´èº…èºèº”èºèºœèºžè±¸è²‚è²Šè²…è²˜è²”æ–›è§–è§žè§šè§œï¿½".split("");
    for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
    D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¯œé¯é¯žé¯Ÿé¯ é¯¡é¯¢é¯£é¯¤é¯¥é¯¦é¯§é¯¨é¯©é¯ªé¯«é¯¬é¯­é¯®é¯¯é¯°é¯±é¯²é¯³é¯´é¯µé¯¶é¯·é¯¸é¯¹é¯ºé¯»é¯¼é¯½é¯¾é¯¿é°€é°é°‚é°ƒé°„é°…é°†é°‡é°ˆé°‰é°Šé°‹é°Œé°é°Žé°é°é°‘é°’é°“é°”é°•é°–é°—é°˜é°™é°šï¿½é°›é°œé°é°žé°Ÿé° é°¡é°¢é°£é°¤é°¥é°¦é°§é°¨é°©é°ªé°«é°¬é°­é°®é°¯é°°é°±é°²é°³é°´é°µé°¶é°·é°¸é°¹é°ºé°»è§¥è§«è§¯è¨¾è¬¦é“é›©é›³é›¯éœ†éœéœˆéœéœŽéœªéœ­éœ°éœ¾é¾€é¾ƒé¾…é¾†é¾‡é¾ˆé¾‰é¾Šé¾Œé»¾é¼‹é¼éš¹éš¼éš½é›Žé›’çž¿é› éŠŽéŠ®é‹ˆéŒ¾éªéŠéŽé¾é‘«é±¿é²‚é²…é²†é²‡é²ˆç¨£é²‹é²Žé²é²‘é²’é²”é²•é²šé²›é²žé²Ÿé² é²¡é²¢é²£é²¥é²¦é²§é²¨é²©é²«é²­é²®é²°é²±é²²é²³é²´é²µé²¶é²·é²ºé²»é²¼é²½é³„é³…é³†é³‡é³Šé³‹ï¿½".split("");
    for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
    D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é°¼é°½é°¾é°¿é±€é±é±‚é±ƒé±„é±…é±†é±‡é±ˆé±‰é±Šé±‹é±Œé±é±Žé±é±é±‘é±’é±“é±”é±•é±–é±—é±˜é±™é±šé±›é±œé±é±žé±Ÿé± é±¡é±¢é±£é±¤é±¥é±¦é±§é±¨é±©é±ªé±«é±¬é±­é±®é±¯é±°é±±é±²é±³é±´é±µé±¶é±·é±¸é±¹é±ºï¿½é±»é±½é±¾é²€é²ƒé²„é²‰é²Šé²Œé²é²“é²–é²—é²˜é²™é²é²ªé²¬é²¯é²¹é²¾é²¿é³€é³é³‚é³ˆé³‰é³‘é³’é³šé³›é³ é³¡é³Œé³é³Žé³é³é³“é³”é³•é³—é³˜é³™é³œé³é³Ÿé³¢é¼éž…éž‘éž’éž”éž¯éž«éž£éž²éž´éª±éª°éª·é¹˜éª¶éªºéª¼é«é«€é«…é«‚é«‹é«Œé«‘é­…é­ƒé­‡é­‰é­ˆé­é­‘é£¨é¤é¤®é¥•é¥”é«Ÿé«¡é«¦é«¯é««é«»é«­é«¹é¬ˆé¬é¬“é¬Ÿé¬£éº½éº¾ç¸»éº‚éº‡éºˆéº‹éº’é–éºéºŸé»›é»œé»é» é»Ÿé»¢é»©é»§é»¥é»ªé»¯é¼¢é¼¬é¼¯é¼¹é¼·é¼½é¼¾é½„ï¿½".split("");
    for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
    D[248] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é³£é³¤é³¥é³¦é³§é³¨é³©é³ªé³«é³¬é³­é³®é³¯é³°é³±é³²é³³é³´é³µé³¶é³·é³¸é³¹é³ºé³»é³¼é³½é³¾é³¿é´€é´é´‚é´ƒé´„é´…é´†é´‡é´ˆé´‰é´Šé´‹é´Œé´é´Žé´é´é´‘é´’é´“é´”é´•é´–é´—é´˜é´™é´šé´›é´œé´é´žé´Ÿé´ é´¡ï¿½é´¢é´£é´¤é´¥é´¦é´§é´¨é´©é´ªé´«é´¬é´­é´®é´¯é´°é´±é´²é´³é´´é´µé´¶é´·é´¸é´¹é´ºé´»é´¼é´½é´¾é´¿éµ€éµéµ‚ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
    D[249] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éµƒéµ„éµ…éµ†éµ‡éµˆéµ‰éµŠéµ‹éµŒéµéµŽéµéµéµ‘éµ’éµ“éµ”éµ•éµ–éµ—éµ˜éµ™éµšéµ›éµœéµéµžéµŸéµ éµ¡éµ¢éµ£éµ¤éµ¥éµ¦éµ§éµ¨éµ©éµªéµ«éµ¬éµ­éµ®éµ¯éµ°éµ±éµ²éµ³éµ´éµµéµ¶éµ·éµ¸éµ¹éµºéµ»éµ¼éµ½éµ¾éµ¿é¶€é¶ï¿½é¶‚é¶ƒé¶„é¶…é¶†é¶‡é¶ˆé¶‰é¶Šé¶‹é¶Œé¶é¶Žé¶é¶é¶‘é¶’é¶“é¶”é¶•é¶–é¶—é¶˜é¶™é¶šé¶›é¶œé¶é¶žé¶Ÿé¶ é¶¡é¶¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
    D[250] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¶£é¶¤é¶¥é¶¦é¶§é¶¨é¶©é¶ªé¶«é¶¬é¶­é¶®é¶¯é¶°é¶±é¶²é¶³é¶´é¶µé¶¶é¶·é¶¸é¶¹é¶ºé¶»é¶¼é¶½é¶¾é¶¿é·€é·é·‚é·ƒé·„é·…é·†é·‡é·ˆé·‰é·Šé·‹é·Œé·é·Žé·é·é·‘é·’é·“é·”é·•é·–é·—é·˜é·™é·šé·›é·œé·é·žé·Ÿé· é·¡ï¿½é·¢é·£é·¤é·¥é·¦é·§é·¨é·©é·ªé·«é·¬é·­é·®é·¯é·°é·±é·²é·³é·´é·µé·¶é··é·¸é·¹é·ºé·»é·¼é·½é·¾é·¿é¸€é¸é¸‚ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
    D[251] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¸ƒé¸„é¸…é¸†é¸‡é¸ˆé¸‰é¸Šé¸‹é¸Œé¸é¸Žé¸é¸é¸‘é¸’é¸“é¸”é¸•é¸–é¸—é¸˜é¸™é¸šé¸›é¸œé¸é¸žé¸¤é¸§é¸®é¸°é¸´é¸»é¸¼é¹€é¹é¹é¹’é¹“é¹”é¹–é¹™é¹é¹Ÿé¹ é¹¡é¹¢é¹¥é¹®é¹¯é¹²é¹´é¹µé¹¶é¹·é¹¸é¹¹é¹ºé¹»é¹¼é¹½éº€ï¿½éºéºƒéº„éº…éº†éº‰éºŠéºŒéºéºŽéºéºéº‘éº”éº•éº–éº—éº˜éº™éºšéº›éºœéºžéº éº¡éº¢éº£éº¤éº¥éº§éº¨éº©éºªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
    D[252] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éº«éº¬éº­éº®éº¯éº°éº±éº²éº³éºµéº¶éº·éº¹éººéº¼éº¿é»€é»é»‚é»ƒé»…é»†é»‡é»ˆé»Šé»‹é»Œé»é»’é»“é»•é»–é»—é»™é»šé»žé»¡é»£é»¤é»¦é»¨é»«é»¬é»­é»®é»°é»±é»²é»³é»´é»µé»¶é»·é»¸é»ºé»½é»¿é¼€é¼é¼‚é¼ƒé¼„é¼…ï¿½é¼†é¼‡é¼ˆé¼‰é¼Šé¼Œé¼é¼‘é¼’é¼”é¼•é¼–é¼˜é¼šé¼›é¼œé¼é¼žé¼Ÿé¼¡é¼£é¼¤é¼¥é¼¦é¼§é¼¨é¼©é¼ªé¼«é¼­é¼®é¼°é¼±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
    D[253] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼²é¼³é¼´é¼µé¼¶é¼¸é¼ºé¼¼é¼¿é½€é½é½‚é½ƒé½…é½†é½‡é½ˆé½‰é½Šé½‹é½Œé½é½Žé½é½’é½“é½”é½•é½–é½—é½˜é½™é½šé½›é½œé½é½žé½Ÿé½ é½¡é½¢é½£é½¤é½¥é½¦é½§é½¨é½©é½ªé½«é½¬é½­é½®é½¯é½°é½±é½²é½³é½´é½µé½¶é½·é½¸ï¿½é½¹é½ºé½»é½¼é½½é½¾é¾é¾‚é¾é¾Žé¾é¾é¾‘é¾’é¾“é¾”é¾•é¾–é¾—é¾˜é¾œé¾é¾žé¾¡é¾¢é¾£é¾¤é¾¥ï¤¬ï¥¹ï¦•ï§§ï§±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}
    D[254] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¨Œï¨ï¨Žï¨ï¨‘ï¨“ï¨”ï¨˜ï¨Ÿï¨ ï¨¡ï¨£ï¨¤ï¨§ï¨¨ï¨©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[254].length; ++j) if(D[254][j].charCodeAt(0) !== 0xFFFD) { e[D[254][j]] = 65024 + j; d[65024 + j] = D[254][j];}
    return {"enc": e, "dec": d }; })();
    cptable[949] = (function(){ var d = [], e = {}, D = [], j;
    D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
    D[129] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê°‚ê°ƒê°…ê°†ê°‹ê°Œê°ê°Žê°ê°˜ê°žê°Ÿê°¡ê°¢ê°£ê°¥ê°¦ê°§ê°¨ê°©ê°ªê°«ê°®ê°²ê°³ê°´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê°µê°¶ê°·ê°ºê°»ê°½ê°¾ê°¿ê±ê±‚ê±ƒê±„ê±…ê±†ê±‡ê±ˆê±‰ê±Šê±Œê±Žê±ê±ê±‘ê±’ê±“ê±•ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê±–ê±—ê±™ê±šê±›ê±ê±žê±Ÿê± ê±¡ê±¢ê±£ê±¤ê±¥ê±¦ê±§ê±¨ê±©ê±ªê±«ê±¬ê±­ê±®ê±¯ê±²ê±³ê±µê±¶ê±¹ê±»ê±¼ê±½ê±¾ê±¿ê²‚ê²‡ê²ˆê²ê²Žê²ê²‘ê²’ê²“ê²•ê²–ê²—ê²˜ê²™ê²šê²›ê²žê²¢ê²£ê²¤ê²¥ê²¦ê²§ê²«ê²­ê²®ê²±ê²²ê²³ê²´ê²µê²¶ê²·ê²ºê²¾ê²¿ê³€ê³‚ê³ƒê³…ê³†ê³‡ê³‰ê³Šê³‹ê³ê³Žê³ê³ê³‘ê³’ê³“ê³”ê³–ê³˜ê³™ê³šê³›ê³œê³ê³žê³Ÿê³¢ê³£ê³¥ê³¦ê³©ê³«ê³­ê³®ê³²ê³´ê³·ê³¸ê³¹ê³ºê³»ê³¾ê³¿ê´ê´‚ê´ƒê´…ê´‡ê´ˆê´‰ê´Šê´‹ê´Žê´ê´’ê´“ï¿½".split("");
    for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
    D[130] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê´”ê´•ê´–ê´—ê´™ê´šê´›ê´ê´žê´Ÿê´¡ê´¢ê´£ê´¤ê´¥ê´¦ê´§ê´¨ê´ªê´«ê´®ê´¯ê´°ê´±ê´²ê´³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê´¶ê´·ê´¹ê´ºê´»ê´½ê´¾ê´¿êµ€êµêµ‚êµƒêµ†êµˆêµŠêµ‹êµŒêµêµŽêµêµ‘êµ’êµ“êµ•êµ–êµ—ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½êµ™êµšêµ›êµœêµêµžêµŸêµ êµ¢êµ¤êµ¥êµ¦êµ§êµ¨êµ©êµªêµ«êµ®êµ¯êµ±êµ²êµ·êµ¸êµ¹êµºêµ¾ê¶€ê¶ƒê¶„ê¶…ê¶†ê¶‡ê¶Šê¶‹ê¶ê¶Žê¶ê¶‘ê¶’ê¶“ê¶”ê¶•ê¶–ê¶—ê¶˜ê¶™ê¶šê¶›ê¶žê¶Ÿê¶ ê¶¡ê¶¢ê¶£ê¶¥ê¶¦ê¶§ê¶¨ê¶©ê¶ªê¶«ê¶¬ê¶­ê¶®ê¶¯ê¶°ê¶±ê¶²ê¶³ê¶´ê¶µê¶¶ê¶¸ê¶¹ê¶ºê¶»ê¶¼ê¶½ê¶¾ê¶¿ê·‚ê·ƒê·…ê·†ê·‡ê·‰ê·Šê·‹ê·Œê·ê·Žê·ê·’ê·”ê·•ê·–ê·—ê·˜ê·™ê·šê·›ê·ê·žê·Ÿê·¡ê·¢ê·£ê·¥ê·¦ê·§ê·¨ê·©ê·ªê·«ê·¬ê·­ê·®ê·¯ê·°ê·±ê·²ê·³ê·´ê·µê·¶ê··ï¿½".split("");
    for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
    D[131] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê·ºê·»ê·½ê·¾ê¸‚ê¸ƒê¸„ê¸…ê¸†ê¸‡ê¸Šê¸Œê¸Žê¸ê¸ê¸‘ê¸’ê¸“ê¸•ê¸–ê¸—ê¸˜ê¸™ê¸šê¸›ê¸œï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¸ê¸žê¸Ÿê¸ ê¸¡ê¸¢ê¸£ê¸¤ê¸¥ê¸¦ê¸§ê¸¨ê¸©ê¸ªê¸«ê¸¬ê¸­ê¸®ê¸¯ê¸²ê¸³ê¸µê¸¶ê¸¹ê¸»ê¸¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¸½ê¸¾ê¸¿ê¹‚ê¹„ê¹‡ê¹ˆê¹‰ê¹‹ê¹ê¹‘ê¹’ê¹“ê¹•ê¹—ê¹˜ê¹™ê¹šê¹›ê¹žê¹¢ê¹£ê¹¤ê¹¦ê¹§ê¹ªê¹«ê¹­ê¹®ê¹¯ê¹±ê¹²ê¹³ê¹´ê¹µê¹¶ê¹·ê¹ºê¹¾ê¹¿êº€êºêº‚êºƒêº†êº‡êºˆêº‰êºŠêº‹êºêºŽêºêºêº‘êº’êº“êº”êº•êº–êº—êº˜êº™êºšêº›êºœêºêºžêºŸêº êº¡êº¢êº£êº¤êº¥êº¦êº§êº¨êº©êºªêº«êº¬êº­êº®êº¯êº°êº±êº²êº³êº´êºµêº¶êº·êº¸êº¹êººêº»êº¿ê»ê»‚ê»ƒê»…ê»†ê»‡ê»ˆê»‰ê»Šê»‹ê»Žê»’ê»“ê»”ê»•ê»–ê»—ê»šê»›ê»ê»žê»Ÿê» ê»¡ê»¢ê»£ê»¤ê»¥ï¿½".split("");
    for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
    D[132] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê»¦ê»§ê»©ê»ªê»¬ê»®ê»¯ê»°ê»±ê»²ê»³ê»µê»¶ê»·ê»¹ê»ºê»»ê»½ê»¾ê»¿ê¼€ê¼ê¼‚ê¼ƒê¼„ê¼…ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¼†ê¼‰ê¼Šê¼‹ê¼Œê¼Žê¼ê¼‘ê¼’ê¼“ê¼”ê¼•ê¼–ê¼—ê¼˜ê¼™ê¼šê¼›ê¼œê¼ê¼žê¼Ÿê¼ ê¼¡ê¼¢ê¼£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¼¤ê¼¥ê¼¦ê¼§ê¼¨ê¼©ê¼ªê¼«ê¼®ê¼¯ê¼±ê¼³ê¼µê¼¶ê¼·ê¼¸ê¼¹ê¼ºê¼»ê¼¾ê½€ê½„ê½…ê½†ê½‡ê½Šê½‹ê½Œê½ê½Žê½ê½‘ê½’ê½“ê½”ê½•ê½–ê½—ê½˜ê½™ê½šê½›ê½žê½Ÿê½ ê½¡ê½¢ê½£ê½¦ê½§ê½¨ê½©ê½ªê½«ê½¬ê½­ê½®ê½¯ê½°ê½±ê½²ê½³ê½´ê½µê½¶ê½·ê½¸ê½ºê½»ê½¼ê½½ê½¾ê½¿ê¾ê¾‚ê¾ƒê¾…ê¾†ê¾‡ê¾‰ê¾Šê¾‹ê¾Œê¾ê¾Žê¾ê¾’ê¾“ê¾”ê¾–ê¾—ê¾˜ê¾™ê¾šê¾›ê¾ê¾žê¾Ÿê¾ ê¾¡ê¾¢ê¾£ê¾¤ê¾¥ê¾¦ê¾§ê¾¨ê¾©ê¾ªê¾«ê¾¬ê¾­ê¾®ê¾¯ê¾°ê¾±ê¾²ê¾³ê¾´ê¾µê¾¶ê¾·ê¾ºê¾»ê¾½ê¾¾ï¿½".split("");
    for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
    D[133] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¾¿ê¿ê¿‚ê¿ƒê¿„ê¿…ê¿†ê¿Šê¿Œê¿ê¿ê¿‘ê¿’ê¿“ê¿•ê¿–ê¿—ê¿˜ê¿™ê¿šê¿›ê¿ê¿žê¿Ÿê¿ ê¿¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¿¢ê¿£ê¿¤ê¿¥ê¿¦ê¿§ê¿ªê¿«ê¿¬ê¿­ê¿®ê¿¯ê¿²ê¿³ê¿µê¿¶ê¿·ê¿¹ê¿ºê¿»ê¿¼ê¿½ê¿¾ê¿¿ë€‚ë€ƒï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë€…ë€†ë€‡ë€ˆë€‰ë€Šë€‹ë€ë€Žë€ë€‘ë€’ë€“ë€•ë€–ë€—ë€˜ë€™ë€šë€›ë€žë€Ÿë€ ë€¡ë€¢ë€£ë€¤ë€¥ë€¦ë€§ë€©ë€ªë€«ë€¬ë€­ë€®ë€¯ë€°ë€±ë€²ë€³ë€´ë€µë€¶ë€·ë€¸ë€¹ë€ºë€»ë€¼ë€½ë€¾ë€¿ë€ëë‚ëƒë†ë‡ë‰ë‹ëëëë‘ë’ë–ë˜ëšë›ëœëžëŸë ë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¾ë¿ë‚ë‚‚ë‚ƒë‚…ë‚†ë‚‡ë‚ˆë‚‰ë‚Šë‚‹ë‚Žë‚ë‚’ë‚“ë‚”ë‚•ë‚–ë‚—ë‚›ë‚ë‚žë‚£ë‚¤ï¿½".split("");
    for(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}
    D[134] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë‚¥ë‚¦ë‚§ë‚ªë‚°ë‚²ë‚¶ë‚·ë‚¹ë‚ºë‚»ë‚½ë‚¾ë‚¿ëƒ€ëƒëƒ‚ëƒƒëƒ†ëƒŠëƒ‹ëƒŒëƒëƒŽëƒëƒ’ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëƒ“ëƒ•ëƒ–ëƒ—ëƒ™ëƒšëƒ›ëƒœëƒëƒžëƒŸëƒ¡ëƒ¢ëƒ£ëƒ¤ëƒ¦ëƒ§ëƒ¨ëƒ©ëƒªëƒ«ëƒ¬ëƒ­ëƒ®ëƒ¯ëƒ°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëƒ±ëƒ²ëƒ³ëƒ´ëƒµëƒ¶ëƒ·ëƒ¸ëƒ¹ëƒºëƒ»ëƒ¼ëƒ½ëƒ¾ëƒ¿ë„€ë„ë„‚ë„ƒë„„ë„…ë„†ë„‡ë„Šë„ë„Žë„ë„‘ë„”ë„•ë„–ë„—ë„šë„žë„Ÿë„ ë„¡ë„¢ë„¦ë„§ë„©ë„ªë„«ë„­ë„®ë„¯ë„°ë„±ë„²ë„³ë„¶ë„ºë„»ë„¼ë„½ë„¾ë„¿ë…‚ë…ƒë……ë…†ë…‡ë…‰ë…Šë…‹ë…Œë…ë…Žë…ë…’ë…“ë…–ë…—ë…™ë…šë…›ë…ë…žë…Ÿë…¡ë…¢ë…£ë…¤ë…¥ë…¦ë…§ë…¨ë…©ë…ªë…«ë…¬ë…­ë…®ë…¯ë…°ë…±ë…²ë…³ë…´ë…µë…¶ë…·ë…ºë…»ë…½ë…¾ë…¿ë†ë†ƒë†„ë†…ë††ë†‡ë†Šë†Œë†Žë†ë†ë†‘ë†•ë†–ë†—ë†™ë†šë†›ë†ï¿½".split("");
    for(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}
    D[135] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë†žë†Ÿë† ë†¡ë†¢ë†£ë†¤ë†¥ë†¦ë†§ë†©ë†ªë†«ë†¬ë†­ë†®ë†¯ë†°ë†±ë†²ë†³ë†´ë†µë†¶ë†·ë†¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë†¹ë†ºë†»ë†¼ë†½ë†¾ë†¿ë‡€ë‡ë‡‚ë‡ƒë‡„ë‡…ë‡†ë‡‡ë‡ˆë‡‰ë‡Šë‡‹ë‡ë‡Žë‡ë‡‘ë‡’ë‡“ë‡•ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë‡–ë‡—ë‡˜ë‡™ë‡šë‡›ë‡žë‡ ë‡¡ë‡¢ë‡£ë‡¤ë‡¥ë‡¦ë‡§ë‡ªë‡«ë‡­ë‡®ë‡¯ë‡±ë‡²ë‡³ë‡´ë‡µë‡¶ë‡·ë‡¸ë‡ºë‡¼ë‡¾ë‡¿ëˆ€ëˆëˆ‚ëˆƒëˆ†ëˆ‡ëˆ‰ëˆŠëˆëˆŽëˆëˆëˆ‘ëˆ’ëˆ“ëˆ–ëˆ˜ëˆšëˆ›ëˆœëˆëˆžëˆŸëˆ¡ëˆ¢ëˆ£ëˆ¤ëˆ¥ëˆ¦ëˆ§ëˆ¨ëˆ©ëˆªëˆ«ëˆ¬ëˆ­ëˆ®ëˆ¯ëˆ°ëˆ±ëˆ²ëˆ³ëˆµëˆ¶ëˆ·ëˆ¸ëˆ¹ëˆºëˆ»ëˆ½ëˆ¾ëˆ¿ë‰€ë‰ë‰‚ë‰ƒë‰„ë‰…ë‰†ë‰‡ë‰ˆë‰‰ë‰Šë‰‹ë‰Œë‰ë‰Žë‰ë‰ë‰‘ë‰’ë‰“ë‰”ë‰•ë‰–ë‰—ë‰™ë‰šë‰›ë‰ë‰žë‰Ÿë‰¡ë‰¢ë‰£ë‰¤ë‰¥ë‰¦ë‰§ë‰ªë‰«ë‰¬ë‰­ë‰®ï¿½".split("");
    for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
    D[136] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë‰¯ë‰°ë‰±ë‰²ë‰³ë‰¶ë‰·ë‰¸ë‰¹ë‰ºë‰»ë‰½ë‰¾ë‰¿ëŠ€ëŠëŠ‚ëŠƒëŠ†ëŠ‡ëŠˆëŠŠëŠ‹ëŠŒëŠëŠŽï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëŠëŠ’ëŠ“ëŠ•ëŠ–ëŠ—ëŠ›ëŠœëŠëŠžëŠŸëŠ¢ëŠ¤ëŠ§ëŠ¨ëŠ©ëŠ«ëŠ­ëŠ®ëŠ¯ëŠ±ëŠ²ëŠ³ëŠµëŠ¶ëŠ·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëŠ¸ëŠ¹ëŠºëŠ»ëŠ¼ëŠ½ëŠ¾ëŠ¿ë‹€ë‹ë‹‚ë‹ƒë‹„ë‹…ë‹†ë‹‡ë‹Šë‹‹ë‹ë‹Žë‹ë‹‘ë‹“ë‹”ë‹•ë‹–ë‹—ë‹šë‹œë‹žë‹Ÿë‹ ë‹¡ë‹£ë‹§ë‹©ë‹ªë‹°ë‹±ë‹²ë‹¶ë‹¼ë‹½ë‹¾ëŒ‚ëŒƒëŒ…ëŒ†ëŒ‡ëŒ‰ëŒŠëŒ‹ëŒŒëŒëŒŽëŒëŒ’ëŒ–ëŒ—ëŒ˜ëŒ™ëŒšëŒ›ëŒëŒžëŒŸëŒ ëŒ¡ëŒ¢ëŒ£ëŒ¤ëŒ¥ëŒ¦ëŒ§ëŒ¨ëŒ©ëŒªëŒ«ëŒ¬ëŒ­ëŒ®ëŒ¯ëŒ°ëŒ±ëŒ²ëŒ³ëŒ´ëŒµëŒ¶ëŒ·ëŒ¸ëŒ¹ëŒºëŒ»ëŒ¼ëŒ½ëŒ¾ëŒ¿ë€ëë‚ëƒë„ë…ë†ë‡ëˆë‰ëŠë‹ëŒëëŽëëë‘ë’ë“ë—ë™ëšëë ë¡ë¢ë£ï¿½".split("");
    for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
    D[137] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¦ë¨ëªë¬ë­ë¯ë²ë³ëµë¶ë·ë¹ëºë»ë¼ë½ë¾ë¿ëŽ‚ëŽ†ëŽ‡ëŽˆëŽ‰ëŽŠëŽ‹ëŽï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëŽŽëŽëŽ‘ëŽ’ëŽ“ëŽ•ëŽ–ëŽ—ëŽ˜ëŽ™ëŽšëŽ›ëŽœëŽëŽžëŽŸëŽ¢ëŽ£ëŽ¤ëŽ¥ëŽ¦ëŽ§ëŽ©ëŽªëŽ«ëŽ­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëŽ®ëŽ¯ëŽ°ëŽ±ëŽ²ëŽ³ëŽ´ëŽµëŽ¶ëŽ·ëŽ¸ëŽ¹ëŽºëŽ»ëŽ¼ëŽ½ëŽ¾ëŽ¿ë€ëë‚ëƒë†ë‡ë‰ëŠëëë‘ë’ë“ë–ë˜ëšëœëžëŸë¡ë¢ë£ë¥ë¦ë§ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë½ë¾ë¿ë€ëë‚ëƒë„ë…ë†ë‡ëˆë‰ëŠë‹ëŒëëŽëë‘ë’ë“ë”ë•ë–ë—ë™ëšë›ëëžëŸë¡ë¢ë£ë¤ë¥ë¦ë§ëªë¬ë­ë®ë¯ë°ë±ë²ë³ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ë‘€ë‘ë‘‚ë‘ƒë‘„ï¿½".split("");
    for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
    D[138] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë‘…ë‘†ë‘‡ë‘ˆë‘‰ë‘Šë‘‹ë‘Œë‘ë‘Žë‘ë‘’ë‘“ë‘•ë‘–ë‘—ë‘™ë‘šë‘›ë‘œë‘ë‘žë‘Ÿë‘¢ë‘¤ë‘¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë‘§ë‘¨ë‘©ë‘ªë‘«ë‘­ë‘®ë‘¯ë‘°ë‘±ë‘²ë‘³ë‘´ë‘µë‘¶ë‘·ë‘¸ë‘¹ë‘ºë‘»ë‘¼ë‘½ë‘¾ë‘¿ë’ë’‚ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë’ƒë’„ë’…ë’†ë’‡ë’‰ë’Šë’‹ë’Œë’ë’Žë’ë’ë’‘ë’’ë’“ë’”ë’•ë’–ë’—ë’˜ë’™ë’šë’›ë’œë’žë’Ÿë’ ë’¡ë’¢ë’£ë’¥ë’¦ë’§ë’©ë’ªë’«ë’­ë’®ë’¯ë’°ë’±ë’²ë’³ë’´ë’¶ë’¸ë’ºë’»ë’¼ë’½ë’¾ë’¿ë“ë“‚ë“ƒë“…ë“†ë“‡ë“‰ë“Šë“‹ë“Œë“ë“Žë“ë“‘ë“’ë““ë“”ë“–ë“—ë“˜ë“™ë“šë“›ë“žë“Ÿë“¡ë“¢ë“¥ë“§ë“¨ë“©ë“ªë“«ë“®ë“°ë“²ë“³ë“´ë“µë“¶ë“·ë“¹ë“ºë“»ë“¼ë“½ë“¾ë“¿ë”€ë”ë”‚ë”ƒë”„ë”…ë”†ë”‡ë”ˆë”‰ë”Šë”‹ë”Œë”ë”Žë”ë”ë”‘ë”’ë”“ë”–ë”—ë”™ë”šë”ï¿½".split("");
    for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
    D[139] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë”žë”Ÿë” ë”¡ë”¢ë”£ë”¦ë”«ë”¬ë”­ë”®ë”¯ë”²ë”³ë”µë”¶ë”·ë”¹ë”ºë”»ë”¼ë”½ë”¾ë”¿ë•‚ë•†ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë•‡ë•ˆë•‰ë•Šë•Žë•ë•‘ë•’ë•“ë••ë•–ë•—ë•˜ë•™ë•šë•›ë•žë•¢ë•£ë•¤ë•¥ë•¦ë•§ë•¨ë•©ë•ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë•«ë•¬ë•­ë•®ë•¯ë•°ë•±ë•²ë•³ë•´ë•µë•¶ë•·ë•¸ë•¹ë•ºë•»ë•¼ë•½ë•¾ë•¿ë–€ë–ë–‚ë–ƒë–„ë–…ë–†ë–‡ë–ˆë–‰ë–Šë–‹ë–Œë–ë–Žë–ë–ë–‘ë–’ë–“ë–”ë–•ë––ë–—ë–˜ë–™ë–šë–›ë–œë–ë–žë–Ÿë–¢ë–£ë–¥ë–¦ë–§ë–©ë–¬ë–­ë–®ë–¯ë–²ë–¶ë–·ë–¸ë–¹ë–ºë–¾ë–¿ë—ë—‚ë—ƒë—…ë—†ë—‡ë—ˆë—‰ë—Šë—‹ë—Žë—’ë—“ë—”ë—•ë—–ë——ë—™ë—šë—›ë—œë—ë—žë—Ÿë— ë—¡ë—¢ë—£ë—¤ë—¥ë—¦ë—§ë—¨ë—©ë—ªë—«ë—­ë—®ë—¯ë—°ë—±ë—²ë—³ë—´ë—µë—¶ë—·ë—¸ë—¹ë—ºë—»ë—¼ë—½ë—¾ë—¿ï¿½".split("");
    for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
    D[140] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë˜€ë˜ë˜‚ë˜ƒë˜„ë˜…ë˜†ë˜‡ë˜ˆë˜‰ë˜Šë˜‹ë˜Œë˜ë˜Žë˜ë˜’ë˜“ë˜•ë˜–ë˜—ë˜™ë˜šë˜›ë˜œë˜ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë˜žë˜Ÿë˜ ë˜¡ë˜¢ë˜£ë˜¤ë˜¦ë˜§ë˜¨ë˜©ë˜ªë˜«ë˜­ë˜®ë˜¯ë˜°ë˜±ë˜²ë˜³ë˜µë˜¶ë˜·ë˜¸ë˜¹ë˜ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë˜»ë˜¼ë˜½ë˜¾ë˜¿ë™€ë™ë™‚ë™ƒë™„ë™…ë™†ë™‡ë™‰ë™Šë™‹ë™Œë™ë™Žë™ë™ë™‘ë™’ë™“ë™”ë™•ë™–ë™—ë™˜ë™™ë™šë™›ë™œë™ë™žë™Ÿë™ ë™¡ë™¢ë™£ë™¥ë™¦ë™§ë™©ë™ªë™«ë™¬ë™­ë™®ë™¯ë™°ë™±ë™²ë™³ë™´ë™µë™¶ë™·ë™¸ë™¹ë™ºë™»ë™¼ë™½ë™¾ë™¿ëš€ëšëš‚ëšƒëš„ëš…ëš†ëš‡ëšˆëš‰ëšŠëš‹ëšŒëšëšŽëšëšëš‘ëš’ëš“ëš”ëš•ëš–ëš—ëš˜ëš™ëššëš›ëšžëšŸëš¡ëš¢ëš£ëš¥ëš¦ëš§ëš¨ëš©ëšªëš­ëš®ëš¯ëš°ëš²ëš³ëš´ëšµëš¶ëš·ëš¸ëš¹ëšºëš»ëš¼ëš½ëš¾ëš¿ë›€ë›ë›‚ï¿½".split("");
    for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
    D[141] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë›ƒë›„ë›…ë›†ë›‡ë›ˆë›‰ë›Šë›‹ë›Œë›ë›Žë›ë›ë›‘ë›’ë›“ë›•ë›–ë›—ë›˜ë›™ë›šë››ë›œë›ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë›žë›Ÿë› ë›¡ë›¢ë›£ë›¤ë›¥ë›¦ë›§ë›¨ë›©ë›ªë›«ë›¬ë›­ë›®ë›¯ë›±ë›²ë›³ë›µë›¶ë›·ë›¹ë›ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë›»ë›¼ë›½ë›¾ë›¿ëœ‚ëœƒëœ„ëœ†ëœ‡ëœˆëœ‰ëœŠëœ‹ëœŒëœëœŽëœëœëœ‘ëœ’ëœ“ëœ”ëœ•ëœ–ëœ—ëœ˜ëœ™ëœšëœ›ëœœëœëœžëœŸëœ ëœ¡ëœ¢ëœ£ëœ¤ëœ¥ëœ¦ëœ§ëœªëœ«ëœ­ëœ®ëœ±ëœ²ëœ³ëœ´ëœµëœ¶ëœ·ëœºëœ¼ëœ½ëœ¾ëœ¿ë€ëë‚ëƒë…ë†ë‡ë‰ëŠë‹ëëŽëëë‘ë’ë“ë–ë—ë˜ë™ëšë›ëœëëžëŸë¡ë¢ë£ë¥ë¦ë§ë©ëªë«ë¬ë­ë®ë¯ë²ë´ë¶ë·ë¸ë¹ëºë»ë¾ë¿ëžëž‚ëžƒëž…ëž†ëž‡ëžˆëž‰ëžŠëž‹ëžŽëž“ëž”ëž•ëžšëž›ëžëžžï¿½".split("");
    for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
    D[142] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëžŸëž¡ëž¢ëž£ëž¤ëž¥ëž¦ëž§ëžªëž®ëž¯ëž°ëž±ëž²ëž³ëž¶ëž·ëž¹ëžºëž»ëž¼ëž½ëž¾ëž¿ëŸ€ëŸï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëŸ‚ëŸƒëŸ„ëŸ…ëŸ†ëŸˆëŸŠëŸ‹ëŸŒëŸëŸŽëŸëŸëŸ‘ëŸ’ëŸ“ëŸ”ëŸ•ëŸ–ëŸ—ëŸ˜ëŸ™ëŸšëŸ›ëŸœëŸï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëŸžëŸŸëŸ ëŸ¡ëŸ¢ëŸ£ëŸ¤ëŸ¥ëŸ¦ëŸ§ëŸ¨ëŸ©ëŸªëŸ«ëŸ®ëŸ¯ëŸ±ëŸ²ëŸ³ëŸµëŸ¶ëŸ·ëŸ¸ëŸ¹ëŸºëŸ»ëŸ¾ë ‚ë ƒë „ë …ë †ë Šë ‹ë ë Žë ë ‘ë ’ë “ë ”ë •ë –ë —ë šë œë žë Ÿë  ë ¡ë ¢ë £ë ¦ë §ë ©ë ªë «ë ­ë ®ë ¯ë °ë ±ë ²ë ³ë ¶ë ºë »ë ¼ë ½ë ¾ë ¿ë¡ë¡‚ë¡ƒë¡…ë¡†ë¡‡ë¡ˆë¡‰ë¡Šë¡‹ë¡Œë¡ë¡Žë¡ë¡ë¡’ë¡”ë¡•ë¡–ë¡—ë¡˜ë¡™ë¡šë¡›ë¡žë¡Ÿë¡¡ë¡¢ë¡£ë¡¥ë¡¦ë¡§ë¡¨ë¡©ë¡ªë¡«ë¡®ë¡°ë¡²ë¡³ë¡´ë¡µë¡¶ë¡·ë¡¹ë¡ºë¡»ë¡½ë¡¾ë¡¿ë¢€ë¢ë¢‚ë¢ƒë¢„ï¿½".split("");
    for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
    D[143] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¢…ë¢†ë¢‡ë¢ˆë¢‰ë¢Šë¢‹ë¢Œë¢Žë¢ë¢ë¢‘ë¢’ë¢“ë¢”ë¢•ë¢–ë¢—ë¢˜ë¢™ë¢šë¢›ë¢œë¢ë¢žë¢Ÿï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¢ ë¢¡ë¢¢ë¢£ë¢¤ë¢¥ë¢¦ë¢§ë¢©ë¢ªë¢«ë¢¬ë¢­ë¢®ë¢¯ë¢±ë¢²ë¢³ë¢µë¢¶ë¢·ë¢¹ë¢ºë¢»ë¢¼ë¢½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¢¾ë¢¿ë£‚ë£„ë£†ë£‡ë£ˆë£‰ë£Šë£‹ë£ë£Žë£ë£‘ë£’ë£“ë£•ë£–ë£—ë£˜ë£™ë£šë£›ë£œë£žë£ ë£¢ë££ë£¤ë£¥ë£¦ë£§ë£ªë£«ë£­ë£®ë£¯ë£±ë£²ë£³ë£´ë£µë£¶ë£·ë£ºë£¼ë£¾ë£¿ë¤€ë¤ë¤‚ë¤ƒë¤…ë¤†ë¤‡ë¤ˆë¤‰ë¤Šë¤‹ë¤Œë¤ë¤Žë¤ë¤ë¤‘ë¤’ë¤“ë¤”ë¤•ë¤–ë¤—ë¤™ë¤šë¤›ë¤œë¤ë¤žë¤Ÿë¤¡ë¤¢ë¤£ë¤¤ë¤¥ë¤¦ë¤§ë¤¨ë¤©ë¤ªë¤«ë¤¬ë¤­ë¤®ë¤¯ë¤°ë¤±ë¤²ë¤³ë¤´ë¤µë¤¶ë¤·ë¤¸ë¤¹ë¤ºë¤»ë¤¾ë¤¿ë¥ë¥‚ë¥ƒë¥…ë¥†ë¥‡ë¥ˆë¥‰ë¥Šë¥‹ë¥ë¥Žë¥ë¥’ë¥“ë¥”ë¥•ë¥–ë¥—ï¿½".split("");
    for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
    D[144] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¥šë¥›ë¥ë¥žë¥Ÿë¥¡ë¥¢ë¥£ë¥¤ë¥¥ë¥¦ë¥§ë¥ªë¥¬ë¥®ë¥¯ë¥°ë¥±ë¥²ë¥³ë¥¶ë¥·ë¥¹ë¥ºë¥»ë¥½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¥¾ë¥¿ë¦€ë¦ë¦‚ë¦ƒë¦†ë¦ˆë¦‹ë¦Œë¦ë¦ë¦‘ë¦’ë¦“ë¦”ë¦•ë¦–ë¦—ë¦˜ë¦™ë¦šë¦›ë¦œë¦ë¦žï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¦Ÿë¦ ë¦¡ë¦¢ë¦£ë¦¤ë¦¥ë¦¦ë¦§ë¦¨ë¦©ë¦ªë¦«ë¦®ë¦¯ë¦±ë¦²ë¦³ë¦µë¦¶ë¦·ë¦¸ë¦¹ë¦ºë¦»ë¦¾ë§€ë§‚ë§ƒë§„ë§…ë§†ë§‡ë§Šë§‹ë§ë§“ë§”ë§•ë§–ë§—ë§šë§œë§Ÿë§ ë§¢ë§¦ë§§ë§©ë§ªë§«ë§­ë§®ë§¯ë§°ë§±ë§²ë§³ë§¶ë§»ë§¼ë§½ë§¾ë§¿ë¨‚ë¨ƒë¨„ë¨…ë¨†ë¨‡ë¨‰ë¨Šë¨‹ë¨Œë¨ë¨Žë¨ë¨ë¨‘ë¨’ë¨“ë¨”ë¨–ë¨—ë¨˜ë¨™ë¨šë¨›ë¨œë¨ë¨žë¨Ÿë¨ ë¨¡ë¨¢ë¨£ë¨¤ë¨¥ë¨¦ë¨§ë¨¨ë¨©ë¨ªë¨«ë¨¬ë¨­ë¨®ë¨¯ë¨°ë¨±ë¨²ë¨³ë¨´ë¨µë¨¶ë¨·ë¨ºë¨»ë¨½ë¨¾ë¨¿ë©ë©ƒë©„ë©…ë©†ï¿½".split("");
    for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
    D[145] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë©‡ë©Šë©Œë©ë©ë©‘ë©’ë©–ë©—ë©™ë©šë©›ë©ë©žë©Ÿë© ë©¡ë©¢ë©£ë©¦ë©ªë©«ë©¬ë©­ë©®ë©¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë©²ë©³ë©µë©¶ë©·ë©¹ë©ºë©»ë©¼ë©½ë©¾ë©¿ëª€ëªëª‚ëª†ëªˆëª‰ëªŠëª‹ëªëªŽëªëªëª‘ëª’ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëª“ëª”ëª•ëª–ëª—ëª˜ëª™ëªšëª›ëªœëªëªžëªŸëª ëª¡ëª¢ëª£ëª¤ëª¥ëª¦ëª§ëªªëª­ëª®ëª¯ëª±ëª³ëª´ëªµëª¶ëª·ëªºëª¼ëª¾ëª¿ë«€ë«ë«‚ë«ƒë«…ë«†ë«‡ë«‰ë«Šë«‹ë«Œë«ë«Žë«ë«ë«‘ë«’ë«“ë«”ë«•ë«–ë«—ë«šë«›ë«œë«ë«žë«Ÿë« ë«¡ë«¢ë«£ë«¤ë«¥ë«¦ë«§ë«¨ë«©ë«ªë««ë«¬ë«­ë«®ë«¯ë«°ë«±ë«²ë«³ë«´ë«µë«¶ë«·ë«¸ë«¹ë«ºë«»ë«½ë«¾ë«¿ë¬ë¬‚ë¬ƒë¬…ë¬†ë¬‡ë¬ˆë¬‰ë¬Šë¬‹ë¬Œë¬Žë¬ë¬’ë¬“ë¬”ë¬•ë¬–ë¬—ë¬™ë¬šë¬›ë¬ë¬žë¬Ÿë¬¡ë¬¢ë¬£ë¬¤ë¬¥ë¬¦ë¬§ï¿½".split("");
    for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
    D[146] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¬¨ë¬ªë¬¬ë¬­ë¬®ë¬¯ë¬°ë¬±ë¬²ë¬³ë¬·ë¬¹ë¬ºë¬¿ë­€ë­ë­‚ë­ƒë­†ë­ˆë­Šë­‹ë­Œë­Žë­‘ë­’ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë­“ë­•ë­–ë­—ë­™ë­šë­›ë­œë­ë­žë­Ÿë­ ë­¢ë­¤ë­¥ë­¦ë­§ë­¨ë­©ë­ªë­«ë­­ë­®ë­¯ë­°ë­±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë­²ë­³ë­´ë­µë­¶ë­·ë­¸ë­¹ë­ºë­»ë­¼ë­½ë­¾ë­¿ë®€ë®ë®‚ë®ƒë®„ë®…ë®†ë®‡ë®‰ë®Šë®‹ë®ë®Žë®ë®‘ë®’ë®“ë®”ë®•ë®–ë®—ë®˜ë®™ë®šë®›ë®œë®ë®žë®Ÿë® ë®¡ë®¢ë®£ë®¥ë®¦ë®§ë®©ë®ªë®«ë®­ë®®ë®¯ë®°ë®±ë®²ë®³ë®µë®¶ë®¸ë®¹ë®ºë®»ë®¼ë®½ë®¾ë®¿ë¯ë¯‚ë¯ƒë¯…ë¯†ë¯‡ë¯‰ë¯Šë¯‹ë¯Œë¯ë¯Žë¯ë¯‘ë¯’ë¯”ë¯•ë¯–ë¯—ë¯˜ë¯™ë¯šë¯›ë¯œë¯ë¯žë¯Ÿë¯ ë¯¡ë¯¢ë¯£ë¯¤ë¯¥ë¯¦ë¯§ë¯¨ë¯©ë¯ªë¯«ë¯¬ë¯­ë¯®ë¯¯ë¯°ë¯±ë¯²ë¯³ë¯´ë¯µë¯¶ë¯·ë¯ºë¯»ë¯½ë¯¾ë°ï¿½".split("");
    for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
    D[147] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë°ƒë°„ë°…ë°†ë°‡ë°Šë°Žë°ë°’ë°“ë°™ë°šë° ë°¡ë°¢ë°£ë°¦ë°¨ë°ªë°«ë°¬ë°®ë°¯ë°²ë°³ë°µï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë°¶ë°·ë°¹ë°ºë°»ë°¼ë°½ë°¾ë°¿ë±‚ë±†ë±‡ë±ˆë±Šë±‹ë±Žë±ë±‘ë±’ë±“ë±”ë±•ë±–ë±—ë±˜ë±™ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë±šë±›ë±œë±žë±Ÿë± ë±¡ë±¢ë±£ë±¤ë±¥ë±¦ë±§ë±¨ë±©ë±ªë±«ë±¬ë±­ë±®ë±¯ë±°ë±±ë±²ë±³ë±´ë±µë±¶ë±·ë±¸ë±¹ë±ºë±»ë±¼ë±½ë±¾ë±¿ë²€ë²ë²‚ë²ƒë²†ë²‡ë²‰ë²Šë²ë²ë²ë²‘ë²’ë²“ë²–ë²˜ë²›ë²œë²ë²žë²Ÿë²¢ë²£ë²¥ë²¦ë²©ë²ªë²«ë²¬ë²­ë²®ë²¯ë²²ë²¶ë²·ë²¸ë²¹ë²ºë²»ë²¾ë²¿ë³ë³‚ë³ƒë³…ë³†ë³‡ë³ˆë³‰ë³Šë³‹ë³Œë³Žë³’ë³“ë³”ë³–ë³—ë³™ë³šë³›ë³ë³žë³Ÿë³ ë³¡ë³¢ë³£ë³¤ë³¥ë³¦ë³§ë³¨ë³©ë³ªë³«ë³¬ë³­ë³®ë³¯ë³°ë³±ë³²ë³³ë³·ë³¹ë³ºë³»ë³½ï¿½".split("");
    for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
    D[148] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë³¾ë³¿ë´€ë´ë´‚ë´ƒë´†ë´ˆë´Šë´‹ë´Œë´ë´Žë´ë´‘ë´’ë´“ë´•ë´–ë´—ë´˜ë´™ë´šë´›ë´œë´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë´žë´Ÿë´ ë´¡ë´¢ë´£ë´¥ë´¦ë´§ë´¨ë´©ë´ªë´«ë´­ë´®ë´¯ë´°ë´±ë´²ë´³ë´´ë´µë´¶ë´·ë´¸ë´¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë´ºë´»ë´¼ë´½ë´¾ë´¿ëµëµ‚ëµƒëµ„ëµ…ëµ†ëµ‡ëµŠëµ‹ëµëµŽëµëµ‘ëµ’ëµ“ëµ”ëµ•ëµ–ëµ—ëµšëµ›ëµœëµëµžëµŸëµ ëµ¡ëµ¢ëµ£ëµ¥ëµ¦ëµ§ëµ©ëµªëµ«ëµ¬ëµ­ëµ®ëµ¯ëµ°ëµ±ëµ²ëµ³ëµ´ëµµëµ¶ëµ·ëµ¸ëµ¹ëµºëµ»ëµ¼ëµ½ëµ¾ëµ¿ë¶‚ë¶ƒë¶…ë¶†ë¶‹ë¶Œë¶ë¶Žë¶ë¶’ë¶”ë¶–ë¶—ë¶˜ë¶›ë¶ë¶žë¶Ÿë¶ ë¶¡ë¶¢ë¶£ë¶¥ë¶¦ë¶§ë¶¨ë¶©ë¶ªë¶«ë¶¬ë¶­ë¶®ë¶¯ë¶±ë¶²ë¶³ë¶´ë¶µë¶¶ë¶·ë¶¹ë¶ºë¶»ë¶¼ë¶½ë¶¾ë¶¿ë·€ë·ë·‚ë·ƒë·„ë·…ë·†ë·‡ë·ˆë·‰ë·Šë·‹ë·Œë·ë·Žë·ë·ë·‘ï¿½".split("");
    for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
    D[149] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë·’ë·“ë·–ë·—ë·™ë·šë·›ë·ë·žë·Ÿë· ë·¡ë·¢ë·£ë·¤ë·¥ë·¦ë·§ë·¨ë·ªë·«ë·¬ë·­ë·®ë·¯ë·±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë·²ë·³ë·µë·¶ë··ë·¹ë·ºë·»ë·¼ë·½ë·¾ë·¿ë¸ë¸‚ë¸„ë¸†ë¸‡ë¸ˆë¸‰ë¸Šë¸‹ë¸Žë¸ë¸‘ë¸’ë¸“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¸•ë¸–ë¸—ë¸˜ë¸™ë¸šë¸›ë¸žë¸ ë¸¡ë¸¢ë¸£ë¸¤ë¸¥ë¸¦ë¸§ë¸¨ë¸©ë¸ªë¸«ë¸¬ë¸­ë¸®ë¸¯ë¸°ë¸±ë¸²ë¸³ë¸´ë¸µë¸¶ë¸·ë¸¸ë¸¹ë¸ºë¸»ë¸¼ë¸½ë¸¾ë¸¿ë¹€ë¹ë¹‚ë¹ƒë¹†ë¹‡ë¹‰ë¹Šë¹‹ë¹ë¹ë¹ë¹‘ë¹’ë¹“ë¹–ë¹˜ë¹œë¹ë¹žë¹Ÿë¹¢ë¹£ë¹¥ë¹¦ë¹§ë¹©ë¹«ë¹¬ë¹­ë¹®ë¹¯ë¹²ë¹¶ë¹·ë¹¸ë¹¹ë¹ºë¹¾ë¹¿ëºëº‚ëºƒëº…ëº†ëº‡ëºˆëº‰ëºŠëº‹ëºŽëº’ëº“ëº”ëº•ëº–ëº—ëºšëº›ëºœëºëºžëºŸëº ëº¡ëº¢ëº£ëº¤ëº¥ëº¦ëº§ëº©ëºªëº«ëº¬ëº­ëº®ëº¯ëº°ëº±ëº²ëº³ëº´ëºµëº¶ëº·ï¿½".split("");
    for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
    D[150] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëº¸ëº¹ëººëº»ëº¼ëº½ëº¾ëº¿ë»€ë»ë»‚ë»ƒë»„ë»…ë»†ë»‡ë»ˆë»‰ë»Šë»‹ë»Œë»ë»Žë»ë»’ë»“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë»•ë»–ë»™ë»šë»›ë»œë»ë»žë»Ÿë»¡ë»¢ë»¦ë»§ë»¨ë»©ë»ªë»«ë»­ë»®ë»¯ë»°ë»±ë»²ë»³ë»´ë»µï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë»¶ë»·ë»¸ë»¹ë»ºë»»ë»¼ë»½ë»¾ë»¿ë¼€ë¼‚ë¼ƒë¼„ë¼…ë¼†ë¼‡ë¼Šë¼‹ë¼Œë¼ë¼Žë¼ë¼ë¼‘ë¼’ë¼“ë¼”ë¼•ë¼–ë¼—ë¼šë¼žë¼Ÿë¼ ë¼¡ë¼¢ë¼£ë¼¤ë¼¥ë¼¦ë¼§ë¼¨ë¼©ë¼ªë¼«ë¼¬ë¼­ë¼®ë¼¯ë¼°ë¼±ë¼²ë¼³ë¼´ë¼µë¼¶ë¼·ë¼¸ë¼¹ë¼ºë¼»ë¼¼ë¼½ë¼¾ë¼¿ë½‚ë½ƒë½…ë½†ë½‡ë½‰ë½Šë½‹ë½Œë½ë½Žë½ë½’ë½“ë½”ë½–ë½—ë½˜ë½™ë½šë½›ë½œë½ë½žë½Ÿë½ ë½¡ë½¢ë½£ë½¤ë½¥ë½¦ë½§ë½¨ë½©ë½ªë½«ë½¬ë½­ë½®ë½¯ë½°ë½±ë½²ë½³ë½´ë½µë½¶ë½·ë½¸ë½¹ë½ºë½»ë½¼ë½½ë½¾ë½¿ë¾€ë¾ë¾‚ï¿½".split("");
    for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
    D[151] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¾ƒë¾„ë¾…ë¾†ë¾‡ë¾ˆë¾‰ë¾Šë¾‹ë¾Œë¾ë¾Žë¾ë¾ë¾‘ë¾’ë¾“ë¾•ë¾–ë¾—ë¾˜ë¾™ë¾šë¾›ë¾œë¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¾žë¾Ÿë¾ ë¾¡ë¾¢ë¾£ë¾¤ë¾¥ë¾¦ë¾§ë¾¨ë¾©ë¾ªë¾«ë¾¬ë¾­ë¾®ë¾¯ë¾±ë¾²ë¾³ë¾´ë¾µë¾¶ë¾·ë¾¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¾¹ë¾ºë¾»ë¾¼ë¾½ë¾¾ë¾¿ë¿€ë¿ë¿‚ë¿ƒë¿„ë¿†ë¿‡ë¿ˆë¿‰ë¿Šë¿‹ë¿Žë¿ë¿‘ë¿’ë¿“ë¿•ë¿–ë¿—ë¿˜ë¿™ë¿šë¿›ë¿ë¿žë¿ ë¿¢ë¿£ë¿¤ë¿¥ë¿¦ë¿§ë¿¨ë¿©ë¿ªë¿«ë¿¬ë¿­ë¿®ë¿¯ë¿°ë¿±ë¿²ë¿³ë¿´ë¿µë¿¶ë¿·ë¿¸ë¿¹ë¿ºë¿»ë¿¼ë¿½ë¿¾ë¿¿ì€€ì€ì€‚ì€ƒì€„ì€…ì€†ì€‡ì€ˆì€‰ì€Šì€‹ì€Œì€ì€Žì€ì€ì€‘ì€’ì€“ì€”ì€•ì€–ì€—ì€˜ì€™ì€šì€›ì€œì€ì€žì€Ÿì€ ì€¡ì€¢ì€£ì€¤ì€¥ì€¦ì€§ì€¨ì€©ì€ªì€«ì€¬ì€­ì€®ì€¯ì€°ì€±ì€²ì€³ì€´ì€µì€¶ì€·ì€¸ì€¹ì€ºì€»ì€½ì€¾ì€¿ï¿½".split("");
    for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
    D[152] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì€ìì‚ìƒì„ì…ì†ì‡ìˆì‰ìŠì‹ìŒììŽììì’ì“ì”ì•ì–ì—ì™ìšì›ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ììžìŸì¡ì¢ì£ì¤ì¥ì¦ì§ìªì«ì¬ì­ì®ì¯ì°ì±ì²ì³ì´ìµì¶ì·ì¸ì¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìºì»ì¼ì½ì¾ì¿ì‚€ì‚ì‚‚ì‚ƒì‚„ì‚…ì‚†ì‚‡ì‚ˆì‚‰ì‚Šì‚‹ì‚Œì‚ì‚Žì‚ì‚’ì‚“ì‚•ì‚–ì‚—ì‚™ì‚šì‚›ì‚œì‚ì‚žì‚Ÿì‚¢ì‚¤ì‚¦ì‚§ì‚¨ì‚©ì‚ªì‚«ì‚®ì‚±ì‚²ì‚·ì‚¸ì‚¹ì‚ºì‚»ì‚¾ìƒ‚ìƒƒìƒ„ìƒ†ìƒ‡ìƒŠìƒ‹ìƒìƒŽìƒìƒ‘ìƒ’ìƒ“ìƒ”ìƒ•ìƒ–ìƒ—ìƒšìƒžìƒŸìƒ ìƒ¡ìƒ¢ìƒ£ìƒ¦ìƒ§ìƒ©ìƒªìƒ«ìƒ­ìƒ®ìƒ¯ìƒ°ìƒ±ìƒ²ìƒ³ìƒ¶ìƒ¸ìƒºìƒ»ìƒ¼ìƒ½ìƒ¾ìƒ¿ì„ì„‚ì„ƒì„…ì„†ì„‡ì„‰ì„Šì„‹ì„Œì„ì„Žì„ì„‘ì„’ì„“ì„”ì„–ì„—ì„˜ì„™ì„šì„›ì„¡ì„¢ì„¥ì„¨ì„©ì„ªì„«ì„®ï¿½".split("");
    for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
    D[153] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì„²ì„³ì„´ì„µì„·ì„ºì„»ì„½ì„¾ì„¿ì…ì…‚ì…ƒì…„ì……ì…†ì…‡ì…Šì…Žì…ì…ì…‘ì…’ì…“ì…–ì…—ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì…™ì…šì…›ì…ì…žì…Ÿì… ì…¡ì…¢ì…£ì…¦ì…ªì…«ì…¬ì…­ì…®ì…¯ì…±ì…²ì…³ì…µì…¶ì…·ì…¹ì…ºì…»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì…¼ì…½ì…¾ì…¿ì†€ì†ì†‚ì†ƒì†„ì††ì†‡ì†ˆì†‰ì†Šì†‹ì†ì†‘ì†’ì†“ì†•ì†—ì†˜ì†™ì†šì†›ì†žì† ì†¢ì†£ì†¤ì†¦ì†§ì†ªì†«ì†­ì†®ì†¯ì†±ì†²ì†³ì†´ì†µì†¶ì†·ì†¸ì†¹ì†ºì†»ì†¼ì†¾ì†¿ì‡€ì‡ì‡‚ì‡ƒì‡…ì‡†ì‡‡ì‡‰ì‡Šì‡‹ì‡ì‡Žì‡ì‡ì‡‘ì‡’ì‡“ì‡•ì‡–ì‡™ì‡šì‡›ì‡œì‡ì‡žì‡Ÿì‡¡ì‡¢ì‡£ì‡¥ì‡¦ì‡§ì‡©ì‡ªì‡«ì‡¬ì‡­ì‡®ì‡¯ì‡²ì‡´ì‡µì‡¶ì‡·ì‡¸ì‡¹ì‡ºì‡»ì‡¾ì‡¿ìˆìˆ‚ìˆƒìˆ…ìˆ†ìˆ‡ìˆˆìˆ‰ìˆŠìˆ‹ìˆŽìˆìˆ’ìˆ“ìˆ”ìˆ•ìˆ–ìˆ—ìˆšìˆ›ìˆìˆžìˆ¡ìˆ¢ìˆ£ï¿½".split("");
    for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
    D[154] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìˆ¤ìˆ¥ìˆ¦ìˆ§ìˆªìˆ¬ìˆ®ìˆ°ìˆ³ìˆµìˆ¶ìˆ·ìˆ¸ìˆ¹ìˆºìˆ»ìˆ¼ìˆ½ìˆ¾ìˆ¿ì‰€ì‰ì‰‚ì‰ƒì‰„ì‰…ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì‰†ì‰‡ì‰‰ì‰Šì‰‹ì‰Œì‰ì‰Žì‰ì‰’ì‰“ì‰•ì‰–ì‰—ì‰™ì‰šì‰›ì‰œì‰ì‰žì‰Ÿì‰¡ì‰¢ì‰£ì‰¤ì‰¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì‰§ì‰¨ì‰©ì‰ªì‰«ì‰®ì‰¯ì‰±ì‰²ì‰³ì‰µì‰¶ì‰·ì‰¸ì‰¹ì‰ºì‰»ì‰¾ìŠ€ìŠ‚ìŠƒìŠ„ìŠ…ìŠ†ìŠ‡ìŠŠìŠ‹ìŠŒìŠìŠŽìŠìŠ‘ìŠ’ìŠ“ìŠ”ìŠ•ìŠ–ìŠ—ìŠ™ìŠšìŠœìŠžìŠŸìŠ ìŠ¡ìŠ¢ìŠ£ìŠ¦ìŠ§ìŠ©ìŠªìŠ«ìŠ®ìŠ¯ìŠ°ìŠ±ìŠ²ìŠ³ìŠ¶ìŠ¸ìŠºìŠ»ìŠ¼ìŠ½ìŠ¾ìŠ¿ì‹€ì‹ì‹‚ì‹ƒì‹„ì‹…ì‹†ì‹‡ì‹ˆì‹‰ì‹Šì‹‹ì‹Œì‹ì‹Žì‹ì‹ì‹‘ì‹’ì‹“ì‹”ì‹•ì‹–ì‹—ì‹˜ì‹™ì‹šì‹›ì‹žì‹Ÿì‹¡ì‹¢ì‹¥ì‹¦ì‹§ì‹¨ì‹©ì‹ªì‹®ì‹°ì‹²ì‹³ì‹´ì‹µì‹·ì‹ºì‹½ì‹¾ì‹¿ìŒìŒ‚ìŒƒìŒ„ìŒ…ìŒ†ìŒ‡ìŒŠìŒ‹ìŒŽìŒï¿½".split("");
    for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
    D[155] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìŒìŒ‘ìŒ’ìŒ–ìŒ—ìŒ™ìŒšìŒ›ìŒìŒžìŒŸìŒ ìŒ¡ìŒ¢ìŒ£ìŒ¦ìŒ§ìŒªìŒ«ìŒ¬ìŒ­ìŒ®ìŒ¯ìŒ°ìŒ±ìŒ²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìŒ³ìŒ´ìŒµìŒ¶ìŒ·ìŒ¸ìŒ¹ìŒºìŒ»ìŒ¼ìŒ½ìŒ¾ìŒ¿ì€ìì‚ìƒì„ì†ì‡ìˆì‰ìŠì‹ìŒìï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìŽììì‘ì’ì“ì”ì•ì–ì—ì˜ì™ìšì›ìœììžìŸì ì¡ì¢ì£ì¤ì¥ì¦ì§ìªì«ì­ì®ì¯ì±ì³ì´ìµì¶ì·ìºì»ì¾ì¿ìŽ€ìŽìŽ‚ìŽƒìŽ…ìŽ†ìŽ‡ìŽ‰ìŽŠìŽ‹ìŽìŽŽìŽìŽìŽ‘ìŽ’ìŽ“ìŽ”ìŽ•ìŽ–ìŽ—ìŽ˜ìŽ™ìŽšìŽ›ìŽœìŽìŽžìŽŸìŽ ìŽ¡ìŽ¢ìŽ£ìŽ¤ìŽ¥ìŽ¦ìŽ§ìŽ¨ìŽ©ìŽªìŽ«ìŽ¬ìŽ­ìŽ®ìŽ¯ìŽ°ìŽ±ìŽ²ìŽ³ìŽ´ìŽµìŽ¶ìŽ·ìŽ¸ìŽ¹ìŽºìŽ»ìŽ¼ìŽ½ìŽ¾ìŽ¿ìì‚ìƒì„ì…ì†ì‡ìˆì‰ìŠì‹ìŒììŽììì‘ì’ì“ì”ì•ì–ì—ìšï¿½".split("");
    for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
    D[156] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì›ììžì¡ì£ì¤ì¥ì¦ì§ìªì«ì¬ì®ì¯ì°ì±ì²ì³ì¶ì·ì¹ìºì»ì¼ì½ì¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¿ì€ìì‚ìƒì„ì…ì†ì‡ì‰ìŠì‹ìŒììŽìì‘ì’ì“ì”ì•ì–ì—ì˜ì™ìšï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì›ìœììžìŸì ì¡ì¢ì£ì¥ì¦ì§ì¨ì©ìªì«ì­ì®ì¯ì±ì²ì³ìµì¶ì·ì¸ì¹ìºì»ì¾ì¿ì‘€ì‘ì‘‚ì‘ƒì‘„ì‘…ì‘†ì‘‡ì‘‰ì‘Šì‘‹ì‘Œì‘ì‘Žì‘ì‘ì‘‘ì‘’ì‘“ì‘”ì‘•ì‘–ì‘—ì‘˜ì‘™ì‘šì‘›ì‘œì‘ì‘žì‘Ÿì‘ ì‘¡ì‘¢ì‘£ì‘¦ì‘§ì‘©ì‘ªì‘«ì‘­ì‘®ì‘¯ì‘°ì‘±ì‘²ì‘³ì‘¶ì‘·ì‘¸ì‘ºì‘»ì‘¼ì‘½ì‘¾ì‘¿ì’ì’‚ì’ƒì’„ì’…ì’†ì’‡ì’ˆì’‰ì’Šì’‹ì’Œì’ì’Žì’ì’ì’‘ì’’ì’“ì’•ì’–ì’—ì’˜ì’™ì’šì’›ì’ì’žì’Ÿì’ ì’¡ì’¢ì’£ì’¤ì’¥ì’¦ì’§ì’¨ì’©ï¿½".split("");
    for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
    D[157] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì’ªì’«ì’¬ì’­ì’®ì’¯ì’°ì’±ì’²ì’³ì’´ì’µì’¶ì’·ì’¹ì’ºì’»ì’½ì’¾ì’¿ì“€ì“ì“‚ì“ƒì“„ì“…ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì“†ì“‡ì“ˆì“‰ì“Šì“‹ì“Œì“ì“Žì“ì“ì“‘ì“’ì““ì“”ì“•ì“–ì“—ì“˜ì“™ì“šì“›ì“œì“ì“žì“Ÿï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì“ ì“¡ì“¢ì“£ì“¤ì“¥ì“¦ì“§ì“¨ì“ªì“«ì“¬ì“­ì“®ì“¯ì“²ì“³ì“µì“¶ì“·ì“¹ì“»ì“¼ì“½ì“¾ì”‚ì”ƒì”„ì”…ì”†ì”‡ì”ˆì”‰ì”Šì”‹ì”ì”Žì”ì”‘ì”’ì”“ì”•ì”–ì”—ì”˜ì”™ì”šì”›ì”ì”žì”Ÿì” ì”¡ì”¢ì”£ì”¤ì”¥ì”¦ì”§ì”ªì”«ì”­ì”®ì”¯ì”±ì”²ì”³ì”´ì”µì”¶ì”·ì”ºì”¼ì”¾ì”¿ì•€ì•ì•‚ì•ƒì•†ì•‡ì•‹ì•ì•ì•‘ì•’ì•–ì•šì•›ì•œì•Ÿì•¢ì•£ì•¥ì•¦ì•§ì•©ì•ªì•«ì•¬ì•­ì•®ì•¯ì•²ì•¶ì•·ì•¸ì•¹ì•ºì•»ì•¾ì•¿ì–ì–‚ì–ƒì–…ì–†ì–ˆì–‰ì–Šì–‹ì–Žì–ì–’ì–“ì–”ï¿½".split("");
    for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
    D[158] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì––ì–™ì–šì–›ì–ì–žì–Ÿì–¡ì–¢ì–£ì–¤ì–¥ì–¦ì–§ì–¨ì–ªì–«ì–¬ì–­ì–®ì–¯ì–°ì–±ì–²ì–³ì–¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì–·ì–ºì–¿ì—€ì—ì—‚ì—ƒì—‹ì—ì—ì—’ì—“ì—•ì—–ì——ì—™ì—šì—›ì—œì—ì—žì—Ÿì—¢ì—¤ì—¦ì—§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì—¨ì—©ì—ªì—«ì—¯ì—±ì—²ì—³ì—µì—¸ì—¹ì—ºì—»ì˜‚ì˜ƒì˜„ì˜‰ì˜Šì˜‹ì˜ì˜Žì˜ì˜‘ì˜’ì˜“ì˜”ì˜•ì˜–ì˜—ì˜šì˜ì˜žì˜Ÿì˜ ì˜¡ì˜¢ì˜£ì˜¦ì˜§ì˜©ì˜ªì˜«ì˜¯ì˜±ì˜²ì˜¶ì˜¸ì˜ºì˜¼ì˜½ì˜¾ì˜¿ì™‚ì™ƒì™…ì™†ì™‡ì™‰ì™Šì™‹ì™Œì™ì™Žì™ì™’ì™–ì™—ì™˜ì™™ì™šì™›ì™žì™Ÿì™¡ì™¢ì™£ì™¤ì™¥ì™¦ì™§ì™¨ì™©ì™ªì™«ì™­ì™®ì™°ì™²ì™³ì™´ì™µì™¶ì™·ì™ºì™»ì™½ì™¾ì™¿ìšìš‚ìšƒìš„ìš…ìš†ìš‡ìšŠìšŒìšŽìšìšìš‘ìš’ìš“ìš–ìš—ìš™ìššìš›ìšìšžìšŸìš ìš¡ìš¢ìš£ìš¦ï¿½".split("");
    for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
    D[159] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìš¨ìšªìš«ìš¬ìš­ìš®ìš¯ìš²ìš³ìšµìš¶ìš·ìš»ìš¼ìš½ìš¾ìš¿ì›‚ì›„ì›†ì›‡ì›ˆì›‰ì›Šì›‹ì›Žï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì›ì›‘ì›’ì›“ì›•ì›–ì›—ì›˜ì›™ì›šì››ì›žì›Ÿì›¢ì›£ì›¤ì›¥ì›¦ì›§ì›ªì›«ì›­ì›®ì›¯ì›±ì›²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì›³ì›´ì›µì›¶ì›·ì›ºì›»ì›¼ì›¾ì›¿ìœ€ìœìœ‚ìœƒìœ†ìœ‡ìœ‰ìœŠìœ‹ìœìœŽìœìœìœ‘ìœ’ìœ“ìœ–ìœ˜ìœšìœ›ìœœìœìœžìœŸìœ¢ìœ£ìœ¥ìœ¦ìœ§ìœ©ìœªìœ«ìœ¬ìœ­ìœ®ìœ¯ìœ²ìœ´ìœ¶ìœ¸ìœ¹ìœºìœ»ìœ¾ìœ¿ìì‚ìƒì…ì†ì‡ìˆì‰ì‹ìŽìì™ìšì›ììžìŸì¡ì¢ì£ì¤ì¥ì¦ì§ì©ìªì¬ì­ì®ì¯ì°ì±ì²ì³ì¶ì·ì¹ìºì»ì¿ìž€ìžìž‚ìž†ìž‹ìžŒìžìžìž’ìž“ìž•ìž™ìž›ìžœìžìžžìžŸìž¢ìž§ìž¨ìž©ìžªìž«ìž®ìž¯ìž±ìž²ìž³ìžµìž¶ìž·ï¿½".split("");
    for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
    D[160] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìž¸ìž¹ìžºìž»ìž¾ìŸ‚ìŸƒìŸ„ìŸ…ìŸ†ìŸ‡ìŸŠìŸ‹ìŸìŸìŸ‘ìŸ’ìŸ“ìŸ”ìŸ•ìŸ–ìŸ—ìŸ™ìŸšìŸ›ìŸœï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìŸžìŸŸìŸ ìŸ¡ìŸ¢ìŸ£ìŸ¥ìŸ¦ìŸ§ìŸ©ìŸªìŸ«ìŸ­ìŸ®ìŸ¯ìŸ°ìŸ±ìŸ²ìŸ³ìŸ´ìŸµìŸ¶ìŸ·ìŸ¸ìŸ¹ìŸºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìŸ»ìŸ¼ìŸ½ìŸ¾ìŸ¿ì ‚ì ƒì …ì †ì ‡ì ‰ì ‹ì Œì ì Žì ì ’ì ”ì —ì ˜ì ™ì šì ›ì žì Ÿì ¡ì ¢ì £ì ¥ì ¦ì §ì ¨ì ©ì ªì «ì ®ì °ì ²ì ³ì ´ì µì ¶ì ·ì ¹ì ºì »ì ½ì ¾ì ¿ì¡ì¡‚ì¡ƒì¡„ì¡…ì¡†ì¡‡ì¡Šì¡‹ì¡Žì¡ì¡ì¡‘ì¡’ì¡“ì¡•ì¡–ì¡—ì¡˜ì¡™ì¡šì¡›ì¡œì¡ì¡žì¡Ÿì¡ ì¡¡ì¡¢ì¡£ì¡¤ì¡¥ì¡¦ì¡§ì¡¨ì¡©ì¡ªì¡«ì¡¬ì¡­ì¡®ì¡¯ì¡²ì¡³ì¡µì¡¶ì¡·ì¡¹ì¡»ì¡¼ì¡½ì¡¾ì¡¿ì¢‚ì¢„ì¢ˆì¢‰ì¢Šì¢Žì¢ì¢ì¢‘ì¢’ì¢“ì¢•ì¢–ì¢—ì¢˜ì¢™ì¢šì¢›ì¢œì¢žì¢ ì¢¢ì¢£ì¢¤ï¿½".split("");
    for(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}
    D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¢¥ì¢¦ì¢§ì¢©ì¢ªì¢«ì¢¬ì¢­ì¢®ì¢¯ì¢°ì¢±ì¢²ì¢³ì¢´ì¢µì¢¶ì¢·ì¢¸ì¢¹ì¢ºì¢»ì¢¾ì¢¿ì£€ì£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì£‚ì£ƒì£…ì£†ì£‡ì£‰ì£Šì£‹ì£ì£Žì£ì£ì£‘ì£’ì£“ì£–ì£˜ì£šì£›ì£œì£ì£žì£Ÿì£¢ì££ì£¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì£¦ì£§ì£¨ì£©ì£ªì£«ì£¬ì£­ì£®ì£¯ì£°ì£±ì£²ì£³ì£´ì£¶ì£·ì£¸ì£¹ì£ºì£»ì£¾ì£¿ì¤ì¤‚ì¤ƒì¤‡ì¤ˆì¤‰ì¤Šì¤‹ì¤Žã€€ã€ã€‚Â·â€¥â€¦Â¨ã€ƒÂ­â€•âˆ¥ï¼¼âˆ¼â€˜â€™â€œâ€ã€”ã€•ã€ˆã€‰ã€Šã€‹ã€Œã€ã€Žã€ã€ã€‘Â±Ã—Ã·â‰ â‰¤â‰¥âˆžâˆ´Â°â€²â€³â„ƒâ„«ï¿ ï¿¡ï¿¥â™‚â™€âˆ âŠ¥âŒ’âˆ‚âˆ‡â‰¡â‰’Â§â€»â˜†â˜…â—‹â—â—Žâ—‡â—†â–¡â– â–³â–²â–½â–¼â†’â†â†‘â†“â†”ã€“â‰ªâ‰«âˆšâˆ½âˆâˆµâˆ«âˆ¬âˆˆâˆ‹âŠ†âŠ‡âŠ‚âŠƒâˆªâˆ©âˆ§âˆ¨ï¿¢ï¿½".split("");
    for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
    D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¤ì¤’ì¤“ì¤”ì¤•ì¤–ì¤—ì¤™ì¤šì¤›ì¤œì¤ì¤žì¤Ÿì¤ ì¤¡ì¤¢ì¤£ì¤¤ì¤¥ì¤¦ì¤§ì¤¨ì¤©ì¤ªì¤«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¤­ì¤®ì¤¯ì¤°ì¤±ì¤²ì¤³ì¤µì¤¶ì¤·ì¤¸ì¤¹ì¤ºì¤»ì¤¼ì¤½ì¤¾ì¤¿ì¥€ì¥ì¥‚ì¥ƒì¥„ì¥…ì¥†ì¥‡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¥ˆì¥‰ì¥Šì¥‹ì¥Œì¥ì¥Žì¥ì¥’ì¥“ì¥•ì¥–ì¥—ì¥™ì¥šì¥›ì¥œì¥ì¥žì¥Ÿì¥¢ì¥¤ì¥¥ì¥¦ì¥§ì¥¨ì¥©ì¥ªì¥«ì¥­ì¥®ì¥¯â‡’â‡”âˆ€âˆƒÂ´ï½žË‡Ë˜ËËšË™Â¸Ë›Â¡Â¿Ëâˆ®âˆ‘âˆÂ¤â„‰â€°â—â—€â–·â–¶â™¤â™ â™¡â™¥â™§â™£âŠ™â—ˆâ–£â—â—‘â–’â–¤â–¥â–¨â–§â–¦â–©â™¨â˜â˜Žâ˜œâ˜žÂ¶â€ â€¡â†•â†—â†™â†–â†˜â™­â™©â™ªâ™¬ã‰¿ãˆœâ„–ã‡â„¢ã‚ã˜â„¡â‚¬Â®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
    D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¥±ì¥²ì¥³ì¥µì¥¶ì¥·ì¥¸ì¥¹ì¥ºì¥»ì¥½ì¥¾ì¥¿ì¦€ì¦ì¦‚ì¦ƒì¦„ì¦…ì¦†ì¦‡ì¦Šì¦‹ì¦ì¦Žì¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¦‘ì¦’ì¦“ì¦”ì¦•ì¦–ì¦—ì¦šì¦œì¦žì¦Ÿì¦ ì¦¡ì¦¢ì¦£ì¦¤ì¦¥ì¦¦ì¦§ì¦¨ì¦©ì¦ªì¦«ì¦¬ì¦­ì¦®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¦¯ì¦°ì¦±ì¦²ì¦³ì¦´ì¦µì¦¶ì¦·ì¦¸ì¦¹ì¦ºì¦»ì¦¼ì¦½ì¦¾ì¦¿ì§‚ì§ƒì§…ì§†ì§‰ì§‹ì§Œì§ì§Žì§ì§’ì§”ì§—ì§˜ì§›ï¼ï¼‚ï¼ƒï¼„ï¼…ï¼†ï¼‡ï¼ˆï¼‰ï¼Šï¼‹ï¼Œï¼ï¼Žï¼ï¼ï¼‘ï¼’ï¼“ï¼”ï¼•ï¼–ï¼—ï¼˜ï¼™ï¼šï¼›ï¼œï¼ï¼žï¼Ÿï¼ ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¼»ï¿¦ï¼½ï¼¾ï¼¿ï½€ï½ï½‚ï½ƒï½„ï½…ï½†ï½‡ï½ˆï½‰ï½Šï½‹ï½Œï½ï½Žï½ï½ï½‘ï½’ï½“ï½”ï½•ï½–ï½—ï½˜ï½™ï½šï½›ï½œï½ï¿£ï¿½".split("");
    for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
    D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì§žì§Ÿì§¡ì§£ì§¥ì§¦ì§¨ì§©ì§ªì§«ì§®ì§²ì§³ì§´ì§µì§¶ì§·ì§ºì§»ì§½ì§¾ì§¿ì¨ì¨‚ì¨ƒì¨„ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¨…ì¨†ì¨‡ì¨Šì¨Žì¨ì¨ì¨‘ì¨’ì¨“ì¨•ì¨–ì¨—ì¨™ì¨šì¨›ì¨œì¨ì¨žì¨Ÿì¨ ì¨¡ì¨¢ì¨£ì¨¤ì¨¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¨¦ì¨§ì¨¨ì¨ªì¨«ì¨¬ì¨­ì¨®ì¨¯ì¨°ì¨±ì¨²ì¨³ì¨´ì¨µì¨¶ì¨·ì¨¸ì¨¹ì¨ºì¨»ì¨¼ì¨½ì¨¾ì¨¿ì©€ì©ì©‚ì©ƒì©„ì©…ì©†ã„±ã„²ã„³ã„´ã„µã„¶ã„·ã„¸ã„¹ã„ºã„»ã„¼ã„½ã„¾ã„¿ã…€ã…ã…‚ã…ƒã…„ã……ã…†ã…‡ã…ˆã…‰ã…Šã…‹ã…Œã…ã…Žã…ã…ã…‘ã…’ã…“ã…”ã…•ã…–ã…—ã…˜ã…™ã…šã…›ã…œã…ã…žã…Ÿã… ã…¡ã…¢ã…£ã…¤ã…¥ã…¦ã…§ã…¨ã…©ã…ªã…«ã…¬ã…­ã…®ã…¯ã…°ã…±ã…²ã…³ã…´ã…µã…¶ã…·ã…¸ã…¹ã…ºã…»ã…¼ã…½ã…¾ã…¿ã†€ã†ã†‚ã†ƒã†„ã†…ã††ã†‡ã†ˆã†‰ã†Šã†‹ã†Œã†ã†Žï¿½".split("");
    for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
    D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì©‡ì©ˆì©‰ì©Šì©‹ì©Žì©ì©‘ì©’ì©“ì©•ì©–ì©—ì©˜ì©™ì©šì©›ì©žì©¢ì©£ì©¤ì©¥ì©¦ì©§ì©©ì©ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì©«ì©¬ì©­ì©®ì©¯ì©°ì©±ì©²ì©³ì©´ì©µì©¶ì©·ì©¸ì©¹ì©ºì©»ì©¼ì©¾ì©¿ìª€ìªìª‚ìªƒìª…ìª†ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìª‡ìªˆìª‰ìªŠìª‹ìªŒìªìªŽìªìªìª‘ìª’ìª“ìª”ìª•ìª–ìª—ìª™ìªšìª›ìªœìªìªžìªŸìª ìª¡ìª¢ìª£ìª¤ìª¥ìª¦ìª§â…°â…±â…²â…³â…´â…µâ…¶â…·â…¸â…¹ï¿½ï¿½ï¿½ï¿½ï¿½â… â…¡â…¢â…£â…¤â…¥â…¦â…§â…¨â…©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î‘Î’Î“Î”Î•Î–Î—Î˜Î™ÎšÎ›ÎœÎÎžÎŸÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿Ï€ÏÏƒÏ„Ï…Ï†Ï‡ÏˆÏ‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
    D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìª¨ìª©ìªªìª«ìª¬ìª­ìª®ìª¯ìª°ìª±ìª²ìª³ìª´ìªµìª¶ìª·ìª¸ìª¹ìªºìª»ìª¾ìª¿ì«ì«‚ì«ƒì«…ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì«†ì«‡ì«ˆì«‰ì«Šì«‹ì«Žì«ì«’ì«”ì«•ì«–ì«—ì«šì«›ì«œì«ì«žì«Ÿì«¡ì«¢ì«£ì«¤ì«¥ì«¦ì«§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì«¨ì«©ì«ªì««ì«­ì«®ì«¯ì«°ì«±ì«²ì«³ì«µì«¶ì«·ì«¸ì«¹ì«ºì«»ì«¼ì«½ì«¾ì«¿ì¬€ì¬ì¬‚ì¬ƒì¬„ì¬…ì¬†ì¬‡ì¬‰ì¬Šâ”€â”‚â”Œâ”â”˜â””â”œâ”¬â”¤â”´â”¼â”â”ƒâ”â”“â”›â”—â”£â”³â”«â”»â•‹â” â”¯â”¨â”·â”¿â”â”°â”¥â”¸â•‚â”’â”‘â”šâ”™â”–â”•â”Žâ”â”žâ”Ÿâ”¡â”¢â”¦â”§â”©â”ªâ”­â”®â”±â”²â”µâ”¶â”¹â”ºâ”½â”¾â•€â•â•ƒâ•„â•…â•†â•‡â•ˆâ•‰â•Šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
    D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¬‹ì¬Œì¬ì¬Žì¬ì¬‘ì¬’ì¬“ì¬•ì¬–ì¬—ì¬™ì¬šì¬›ì¬œì¬ì¬žì¬Ÿì¬¢ì¬£ì¬¤ì¬¥ì¬¦ì¬§ì¬¨ì¬©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¬ªì¬«ì¬¬ì¬­ì¬®ì¬¯ì¬°ì¬±ì¬²ì¬³ì¬´ì¬µì¬¶ì¬·ì¬¸ì¬¹ì¬ºì¬»ì¬¼ì¬½ì¬¾ì¬¿ì­€ì­‚ì­ƒì­„ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì­…ì­†ì­‡ì­Šì­‹ì­ì­Žì­ì­‘ì­’ì­“ì­”ì­•ì­–ì­—ì­šì­›ì­œì­žì­Ÿì­ ì­¡ì­¢ì­£ì­¥ì­¦ì­§ì­¨ì­©ì­ªì­«ì­¬ãŽ•ãŽ–ãŽ—â„“ãŽ˜ã„ãŽ£ãŽ¤ãŽ¥ãŽ¦ãŽ™ãŽšãŽ›ãŽœãŽãŽžãŽŸãŽ ãŽ¡ãŽ¢ãŠãŽãŽŽãŽããŽˆãŽ‰ãˆãŽ§ãŽ¨ãŽ°ãŽ±ãŽ²ãŽ³ãŽ´ãŽµãŽ¶ãŽ·ãŽ¸ãŽ¹ãŽ€ãŽãŽ‚ãŽƒãŽ„ãŽºãŽ»ãŽ¼ãŽ½ãŽ¾ãŽ¿ãŽãŽ‘ãŽ’ãŽ“ãŽ”â„¦ã€ããŽŠãŽ‹ãŽŒã–ã…ãŽ­ãŽ®ãŽ¯ã›ãŽ©ãŽªãŽ«ãŽ¬ããã“ãƒã‰ãœã†ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
    D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì­­ì­®ì­¯ì­°ì­±ì­²ì­³ì­´ì­µì­¶ì­·ì­ºì­»ì­¼ì­½ì­¾ì­¿ì®€ì®ì®‚ì®ƒì®„ì®…ì®†ì®‡ì®ˆï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì®‰ì®Šì®‹ì®Œì®ì®Žì®ì®ì®‘ì®’ì®“ì®”ì®•ì®–ì®—ì®˜ì®™ì®šì®›ì®ì®žì®Ÿì® ì®¡ì®¢ì®£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì®¤ì®¥ì®¦ì®§ì®¨ì®©ì®ªì®«ì®¬ì®­ì®®ì®¯ì®°ì®±ì®²ì®³ì®´ì®µì®¶ì®·ì®¹ì®ºì®»ì®¼ì®½ì®¾ì®¿ì¯€ì¯ì¯‚ì¯ƒì¯„Ã†ÃÂªÄ¦ï¿½Ä²ï¿½Ä¿ÅÃ˜Å’ÂºÃžÅ¦ÅŠï¿½ã‰ ã‰¡ã‰¢ã‰£ã‰¤ã‰¥ã‰¦ã‰§ã‰¨ã‰©ã‰ªã‰«ã‰¬ã‰­ã‰®ã‰¯ã‰°ã‰±ã‰²ã‰³ã‰´ã‰µã‰¶ã‰·ã‰¸ã‰¹ã‰ºã‰»â“â“‘â“’â““â“”â“•â“–â“—â“˜â“™â“šâ“›â“œâ“â“žâ“Ÿâ“ â“¡â“¢â“£â“¤â“¥â“¦â“§â“¨â“©â‘ â‘¡â‘¢â‘£â‘¤â‘¥â‘¦â‘§â‘¨â‘©â‘ªâ‘«â‘¬â‘­â‘®Â½â…“â…”Â¼Â¾â…›â…œâ…â…žï¿½".split("");
    for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
    D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¯…ì¯†ì¯‡ì¯ˆì¯‰ì¯Šì¯‹ì¯Œì¯ì¯Žì¯ì¯ì¯‘ì¯’ì¯“ì¯•ì¯–ì¯—ì¯˜ì¯™ì¯šì¯›ì¯œì¯ì¯žì¯Ÿï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¯ ì¯¡ì¯¢ì¯£ì¯¥ì¯¦ì¯¨ì¯ªì¯«ì¯¬ì¯­ì¯®ì¯¯ì¯°ì¯±ì¯²ì¯³ì¯´ì¯µì¯¶ì¯·ì¯¸ì¯¹ì¯ºì¯»ì¯¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¯½ì¯¾ì¯¿ì°€ì°ì°‚ì°ƒì°„ì°…ì°†ì°‡ì°ˆì°‰ì°Šì°‹ì°Žì°ì°‘ì°’ì°“ì°•ì°–ì°—ì°˜ì°™ì°šì°›ì°žì°Ÿì° ì°£ì°¤Ã¦Ä‘Ã°Ä§Ä±Ä³Ä¸Å€Å‚Ã¸Å“ÃŸÃ¾Å§Å‹Å‰ãˆ€ãˆãˆ‚ãˆƒãˆ„ãˆ…ãˆ†ãˆ‡ãˆˆãˆ‰ãˆŠãˆ‹ãˆŒãˆãˆŽãˆãˆãˆ‘ãˆ’ãˆ“ãˆ”ãˆ•ãˆ–ãˆ—ãˆ˜ãˆ™ãˆšãˆ›â’œâ’â’žâ’Ÿâ’ â’¡â’¢â’£â’¤â’¥â’¦â’§â’¨â’©â’ªâ’«â’¬â’­â’®â’¯â’°â’±â’²â’³â’´â’µâ‘´â‘µâ‘¶â‘·â‘¸â‘¹â‘ºâ‘»â‘¼â‘½â‘¾â‘¿â’€â’â’‚Â¹Â²Â³â´â¿â‚â‚‚â‚ƒâ‚„ï¿½".split("");
    for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
    D[170] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì°¥ì°¦ì°ªì°«ì°­ì°¯ì°±ì°²ì°³ì°´ì°µì°¶ì°·ì°ºì°¿ì±€ì±ì±‚ì±ƒì±†ì±‡ì±‰ì±Šì±‹ì±ì±Žï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì±ì±ì±‘ì±’ì±“ì±–ì±šì±›ì±œì±ì±žì±Ÿì±¡ì±¢ì±£ì±¥ì±§ì±©ì±ªì±«ì±¬ì±­ì±®ì±¯ì±±ì±²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì±³ì±´ì±¶ì±·ì±¸ì±¹ì±ºì±»ì±¼ì±½ì±¾ì±¿ì²€ì²ì²‚ì²ƒì²„ì²…ì²†ì²‡ì²ˆì²‰ì²Šì²‹ì²Œì²ì²Žì²ì²ì²‘ì²’ì²“ãã‚ãƒã„ã…ã†ã‡ãˆã‰ãŠã‹ãŒããŽããã‘ã’ã“ã”ã•ã–ã—ã˜ã™ãšã›ãœããžãŸã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ã‚€ã‚ã‚‚ã‚ƒã‚„ã‚…ã‚†ã‚‡ã‚ˆã‚‰ã‚Šã‚‹ã‚Œã‚ã‚Žã‚ã‚ã‚‘ã‚’ã‚“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
    D[171] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì²”ì²•ì²–ì²—ì²šì²›ì²ì²žì²Ÿì²¡ì²¢ì²£ì²¤ì²¥ì²¦ì²§ì²ªì²®ì²¯ì²°ì²±ì²²ì²³ì²¶ì²·ì²¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì²ºì²»ì²½ì²¾ì²¿ì³€ì³ì³‚ì³ƒì³†ì³ˆì³Šì³‹ì³Œì³ì³Žì³ì³‘ì³’ì³“ì³•ì³–ì³—ì³˜ì³™ì³šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì³›ì³œì³ì³žì³Ÿì³ ì³¡ì³¢ì³£ì³¥ì³¦ì³§ì³¨ì³©ì³ªì³«ì³­ì³®ì³¯ì³±ì³²ì³³ì³´ì³µì³¶ì³·ì³¸ì³¹ì³ºì³»ì³¼ì³½ã‚¡ã‚¢ã‚£ã‚¤ã‚¥ã‚¦ã‚§ã‚¨ã‚©ã‚ªã‚«ã‚¬ã‚­ã‚®ã‚¯ã‚°ã‚±ã‚²ã‚³ã‚´ã‚µã‚¶ã‚·ã‚¸ã‚¹ã‚ºã‚»ã‚¼ã‚½ã‚¾ã‚¿ãƒ€ãƒãƒ‚ãƒƒãƒ„ãƒ…ãƒ†ãƒ‡ãƒˆãƒ‰ãƒŠãƒ‹ãƒŒãƒãƒŽãƒãƒãƒ‘ãƒ’ãƒ“ãƒ”ãƒ•ãƒ–ãƒ—ãƒ˜ãƒ™ãƒšãƒ›ãƒœãƒãƒžãƒŸãƒ ãƒ¡ãƒ¢ãƒ£ãƒ¤ãƒ¥ãƒ¦ãƒ§ãƒ¨ãƒ©ãƒªãƒ«ãƒ¬ãƒ­ãƒ®ãƒ¯ãƒ°ãƒ±ãƒ²ãƒ³ãƒ´ãƒµãƒ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
    D[172] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì³¾ì³¿ì´€ì´‚ì´ƒì´„ì´…ì´†ì´‡ì´Šì´‹ì´ì´Žì´ì´‘ì´’ì´“ì´”ì´•ì´–ì´—ì´šì´œì´žì´Ÿì´ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì´¡ì´¢ì´£ì´¥ì´¦ì´§ì´©ì´ªì´«ì´­ì´®ì´¯ì´°ì´±ì´²ì´³ì´´ì´µì´¶ì´·ì´¸ì´ºì´»ì´¼ì´½ì´¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì´¿ìµ€ìµìµ‚ìµƒìµ„ìµ…ìµ†ìµ‡ìµˆìµ‰ìµŠìµ‹ìµŒìµìµŽìµìµìµ‘ìµ’ìµ“ìµ”ìµ•ìµ–ìµ—ìµ˜ìµ™ìµšìµ›ìµìµžìµŸÐÐ‘Ð’Ð“Ð”Ð•ÐÐ–Ð—Ð˜Ð™ÐšÐ›ÐœÐÐžÐŸÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑ‘Ð¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿Ñ€ÑÑ‚ÑƒÑ„Ñ…Ñ†Ñ‡ÑˆÑ‰ÑŠÑ‹ÑŒÑÑŽÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
    D[173] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìµ¡ìµ¢ìµ£ìµ¥ìµ¦ìµ§ìµ¨ìµ©ìµªìµ«ìµ®ìµ°ìµ²ìµ³ìµ´ìµµìµ¶ìµ·ìµ¹ìµºìµ»ìµ¼ìµ½ìµ¾ìµ¿ì¶€ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¶ì¶‚ì¶ƒì¶„ì¶…ì¶†ì¶‡ì¶‰ì¶Šì¶‹ì¶Œì¶ì¶Žì¶ì¶ì¶‘ì¶’ì¶“ì¶–ì¶—ì¶™ì¶šì¶›ì¶ì¶žì¶Ÿï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¶ ì¶¡ì¶¢ì¶£ì¶¦ì¶¨ì¶ªì¶«ì¶¬ì¶­ì¶®ì¶¯ì¶±ì¶²ì¶³ì¶´ì¶µì¶¶ì¶·ì¶¸ì¶¹ì¶ºì¶»ì¶¼ì¶½ì¶¾ì¶¿ì·€ì·ì·‚ì·ƒì·…ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
    D[174] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì·†ì·‡ì·ˆì·‰ì·Šì·‹ì·ì·Žì·ì·‘ì·’ì·“ì·”ì·•ì·–ì·—ì·˜ì·™ì·šì·›ì·œì·ì·žì·Ÿì· ì·¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì·¢ì·£ì·¤ì·¥ì·¦ì·§ì·©ì·ªì·«ì·­ì·®ì·¯ì·±ì·²ì·³ì·´ì·µì·¶ì··ì·ºì·¼ì·¾ì·¿ì¸€ì¸ì¸‚ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¸ƒì¸…ì¸†ì¸‡ì¸‰ì¸Šì¸‹ì¸ì¸Žì¸ì¸ì¸‘ì¸’ì¸“ì¸•ì¸–ì¸—ì¸˜ì¸šì¸›ì¸œì¸ì¸žì¸Ÿì¸¢ì¸£ì¸¥ì¸¦ì¸§ì¸©ì¸ªì¸«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
    D[175] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¸¬ì¸­ì¸®ì¸¯ì¸²ì¸´ì¸¶ì¸·ì¸¸ì¸¹ì¸ºì¸»ì¸¼ì¸½ì¸¾ì¸¿ì¹€ì¹ì¹‚ì¹ƒì¹„ì¹…ì¹†ì¹‡ì¹ˆì¹‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¹Šì¹‹ì¹Œì¹ì¹Žì¹ì¹ì¹‘ì¹’ì¹“ì¹”ì¹•ì¹–ì¹—ì¹šì¹›ì¹ì¹žì¹¢ì¹£ì¹¤ì¹¥ì¹¦ì¹§ì¹ªì¹¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¹®ì¹¯ì¹°ì¹±ì¹²ì¹³ì¹¶ì¹·ì¹¹ì¹ºì¹»ì¹½ì¹¾ì¹¿ìº€ìºìº‚ìºƒìº†ìºˆìºŠìº‹ìºŒìºìºŽìºìº’ìº“ìº•ìº–ìº—ìº™ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
    D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìºšìº›ìºœìºìºžìºŸìº¢ìº¦ìº§ìº¨ìº©ìºªìº«ìº®ìº¯ìº°ìº±ìº²ìº³ìº´ìºµìº¶ìº·ìº¸ìº¹ìººï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìº»ìº¼ìº½ìº¾ìº¿ì»€ì»‚ì»ƒì»„ì»…ì»†ì»‡ì»ˆì»‰ì»Šì»‹ì»Œì»ì»Žì»ì»ì»‘ì»’ì»“ì»”ì»•ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì»–ì»—ì»˜ì»™ì»šì»›ì»œì»ì»žì»Ÿì» ì»¡ì»¢ì»£ì»¦ì»§ì»©ì»ªì»­ì»®ì»¯ì»°ì»±ì»²ì»³ì»¶ì»ºì»»ì»¼ì»½ì»¾ì»¿ê°€ê°ê°„ê°‡ê°ˆê°‰ê°Šê°ê°‘ê°’ê°“ê°”ê°•ê°–ê°—ê°™ê°šê°›ê°œê°ê° ê°¤ê°¬ê°­ê°¯ê°°ê°±ê°¸ê°¹ê°¼ê±€ê±‹ê±ê±”ê±˜ê±œê±°ê±±ê±´ê±·ê±¸ê±ºê²€ê²ê²ƒê²„ê²…ê²†ê²‰ê²Šê²‹ê²Œê²ê²”ê²œê²ê²Ÿê² ê²¡ê²¨ê²©ê²ªê²¬ê²¯ê²°ê²¸ê²¹ê²»ê²¼ê²½ê³ê³„ê³ˆê³Œê³•ê³—ê³ ê³¡ê³¤ê³§ê³¨ê³ªê³¬ê³¯ê³°ê³±ê³³ê³µê³¶ê³¼ê³½ê´€ê´„ê´†ï¿½".split("");
    for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
    D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¼‚ì¼ƒì¼…ì¼†ì¼‡ì¼‰ì¼Šì¼‹ì¼Œì¼ì¼Žì¼ì¼’ì¼”ì¼–ì¼—ì¼˜ì¼™ì¼šì¼›ì¼ì¼žì¼Ÿì¼¡ì¼¢ì¼£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¼¥ì¼¦ì¼§ì¼¨ì¼©ì¼ªì¼«ì¼®ì¼²ì¼³ì¼´ì¼µì¼¶ì¼·ì¼¹ì¼ºì¼»ì¼¼ì¼½ì¼¾ì¼¿ì½€ì½ì½‚ì½ƒì½„ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì½…ì½†ì½‡ì½ˆì½‰ì½Šì½‹ì½Œì½ì½Žì½ì½ì½‘ì½’ì½“ì½–ì½—ì½™ì½šì½›ì½ì½žì½Ÿì½ ì½¡ì½¢ì½£ì½¦ì½¨ì½ªì½«ì½¬ê´Œê´ê´ê´‘ê´˜ê´œê´ ê´©ê´¬ê´­ê´´ê´µê´¸ê´¼êµ„êµ…êµ‡êµ‰êµêµ”êµ˜êµ¡êµ£êµ¬êµ­êµ°êµ³êµ´êµµêµ¶êµ»êµ¼êµ½êµ¿ê¶ê¶‚ê¶ˆê¶‰ê¶Œê¶ê¶œê¶ê¶¤ê¶·ê·€ê·ê·„ê·ˆê·ê·‘ê·“ê·œê· ê·¤ê·¸ê·¹ê·¼ê·¿ê¸€ê¸ê¸ˆê¸‰ê¸‹ê¸ê¸”ê¸°ê¸±ê¸´ê¸·ê¸¸ê¸ºê¹€ê¹ê¹ƒê¹…ê¹†ê¹Šê¹Œê¹ê¹Žê¹ê¹”ê¹–ê¹œê¹ê¹Ÿê¹ ê¹¡ê¹¥ê¹¨ê¹©ê¹¬ê¹°ê¹¸ï¿½".split("");
    for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
    D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì½­ì½®ì½¯ì½²ì½³ì½µì½¶ì½·ì½¹ì½ºì½»ì½¼ì½½ì½¾ì½¿ì¾ì¾‚ì¾ƒì¾„ì¾†ì¾‡ì¾ˆì¾‰ì¾Šì¾‹ì¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¾Žì¾ì¾ì¾‘ì¾’ì¾“ì¾”ì¾•ì¾–ì¾—ì¾˜ì¾™ì¾šì¾›ì¾œì¾ì¾žì¾Ÿì¾ ì¾¢ì¾£ì¾¤ì¾¥ì¾¦ì¾§ì¾©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¾ªì¾«ì¾¬ì¾­ì¾®ì¾¯ì¾±ì¾²ì¾³ì¾´ì¾µì¾¶ì¾·ì¾¸ì¾¹ì¾ºì¾»ì¾¼ì¾½ì¾¾ì¾¿ì¿€ì¿ì¿‚ì¿ƒì¿…ì¿†ì¿‡ì¿ˆì¿‰ì¿Šì¿‹ê¹¹ê¹»ê¹¼ê¹½êº„êº…êºŒêº¼êº½êº¾ê»€ê»„ê»Œê»ê»ê»ê»‘ê»˜ê»™ê»œê»¨ê»«ê»­ê»´ê»¸ê»¼ê¼‡ê¼ˆê¼ê¼ê¼¬ê¼­ê¼°ê¼²ê¼´ê¼¼ê¼½ê¼¿ê½ê½‚ê½ƒê½ˆê½‰ê½ê½œê½ê½¤ê½¥ê½¹ê¾€ê¾„ê¾ˆê¾ê¾‘ê¾•ê¾œê¾¸ê¾¹ê¾¼ê¿€ê¿‡ê¿ˆê¿‰ê¿‹ê¿ê¿Žê¿”ê¿œê¿¨ê¿©ê¿°ê¿±ê¿´ê¿¸ë€€ë€ë€„ë€Œë€ë€”ë€œë€ë€¨ë„ë…ëˆëŠëŒëŽë“ë”ë•ë—ë™ï¿½".split("");
    for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
    D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¿Œì¿ì¿Žì¿ì¿ì¿‘ì¿’ì¿“ì¿”ì¿•ì¿–ì¿—ì¿˜ì¿™ì¿šì¿›ì¿œì¿ì¿žì¿Ÿì¿¢ì¿£ì¿¥ì¿¦ì¿§ì¿©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¿ªì¿«ì¿¬ì¿­ì¿®ì¿¯ì¿²ì¿´ì¿¶ì¿·ì¿¸ì¿¹ì¿ºì¿»ì¿½ì¿¾ì¿¿í€í€‚í€ƒí€…í€†í€‡í€ˆí€‰í€Šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í€‹í€Œí€í€Ží€í€í€’í€“í€”í€•í€–í€—í€™í€ší€›í€œí€í€ží€Ÿí€ í€¡í€¢í€£í€¤í€¥í€¦í€§í€¨í€©í€ªí€«í€¬ëë¼ë½ë‚€ë‚„ë‚Œë‚ë‚ë‚‘ë‚˜ë‚™ë‚šë‚œë‚Ÿë‚ ë‚¡ë‚¢ë‚¨ë‚©ë‚«ë‚¬ë‚­ë‚®ë‚¯ë‚±ë‚³ë‚´ë‚µë‚¸ë‚¼ëƒ„ëƒ…ëƒ‡ëƒˆëƒ‰ëƒëƒ‘ëƒ”ëƒ˜ëƒ ëƒ¥ë„ˆë„‰ë„‹ë„Œë„ë„’ë„“ë„˜ë„™ë„›ë„œë„ë„£ë„¤ë„¥ë„¨ë„¬ë„´ë„µë„·ë„¸ë„¹ë…€ë…ë…„ë…ˆë…ë…‘ë…”ë…•ë…˜ë…œë… ë…¸ë…¹ë…¼ë†€ë†‚ë†ˆë†‰ë†‹ë†ë†’ë†“ë†”ë†˜ë†œë†¨ë‡Œë‡ë‡”ë‡œë‡ï¿½".split("");
    for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
    D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í€®í€¯í€°í€±í€²í€³í€¶í€·í€¹í€ºí€»í€½í€¾í€¿í€íí‚íƒí†íˆíŠí‹íŒííŽíï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‘í’í“í•í–í—í™íší›íœíížíŸí¡í¢í£í¤í¥í¦í§í¨í©íªí«í®í¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í±í²í³íµí¶í·í¸í¹íºí»í¾í¿í‚€í‚‚í‚ƒí‚„í‚…í‚†í‚‡í‚ˆí‚‰í‚Ší‚‹í‚Œí‚í‚Ží‚í‚í‚‘í‚’í‚“í‚”ë‡Ÿë‡¨ë‡©ë‡¬ë‡°ë‡¹ë‡»ë‡½ëˆ„ëˆ…ëˆˆëˆ‹ëˆŒëˆ”ëˆ•ëˆ—ëˆ™ëˆ ëˆ´ëˆ¼ë‰˜ë‰œë‰ ë‰¨ë‰©ë‰´ë‰µë‰¼ëŠ„ëŠ…ëŠ‰ëŠëŠ‘ëŠ”ëŠ˜ëŠ™ëŠšëŠ ëŠ¡ëŠ£ëŠ¥ëŠ¦ëŠªëŠ¬ëŠ°ëŠ´ë‹ˆë‹‰ë‹Œë‹ë‹’ë‹˜ë‹™ë‹›ë‹ë‹¢ë‹¤ë‹¥ë‹¦ë‹¨ë‹«ë‹¬ë‹­ë‹®ë‹¯ë‹³ë‹´ë‹µë‹·ë‹¸ë‹¹ë‹ºë‹»ë‹¿ëŒ€ëŒëŒ„ëŒˆëŒëŒ‘ëŒ“ëŒ”ëŒ•ëŒœë”ë•ë–ë˜ë›ëœëžëŸë¤ë¥ï¿½".split("");
    for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
    D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‚•í‚–í‚—í‚˜í‚™í‚ší‚›í‚œí‚í‚ží‚Ÿí‚ í‚¡í‚¢í‚£í‚¦í‚§í‚©í‚ªí‚«í‚­í‚®í‚¯í‚°í‚±í‚²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‚³í‚¶í‚¸í‚ºí‚»í‚¼í‚½í‚¾í‚¿íƒ‚íƒƒíƒ…íƒ†íƒ‡íƒŠíƒ‹íƒŒíƒíƒŽíƒíƒ’íƒ–íƒ—íƒ˜íƒ™íƒšï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íƒ›íƒžíƒŸíƒ¡íƒ¢íƒ£íƒ¥íƒ¦íƒ§íƒ¨íƒ©íƒªíƒ«íƒ®íƒ²íƒ³íƒ´íƒµíƒ¶íƒ·íƒ¹íƒºíƒ»íƒ¼íƒ½íƒ¾íƒ¿í„€í„í„‚í„ƒí„„ë§ë©ë«ë®ë°ë±ë´ë¸ëŽ€ëŽëŽƒëŽ„ëŽ…ëŽŒëŽëŽ”ëŽ ëŽ¡ëŽ¨ëŽ¬ë„ë…ëˆë‹ëŒëŽëë”ë•ë—ë™ë›ëë ë¤ë¨ë¼ëë˜ëœë ë¨ë©ë«ë´ë‘ë‘‘ë‘”ë‘˜ë‘ ë‘¡ë‘£ë‘¥ë‘¬ë’€ë’ˆë’ë’¤ë’¨ë’¬ë’µë’·ë’¹ë“€ë“„ë“ˆë“ë“•ë“œë“ë“ ë“£ë“¤ë“¦ë“¬ë“­ë“¯ë“±ë“¸ë””ë”•ë”˜ë”›ë”œë”¤ë”¥ë”§ë”¨ë”©ë”ªë”°ë”±ë”´ë”¸ï¿½".split("");
    for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
    D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í„…í„†í„‡í„ˆí„‰í„Ší„‹í„Œí„Ží„í„í„‘í„’í„“í„”í„•í„–í„—í„˜í„™í„ší„›í„œí„í„ží„Ÿï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í„ í„¡í„¢í„£í„¤í„¥í„¦í„§í„¨í„©í„ªí„«í„¬í„­í„®í„¯í„²í„³í„µí„¶í„·í„¹í„»í„¼í„½í„¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í„¿í…‚í…†í…‡í…ˆí…‰í…Ší…‹í…Ží…í…‘í…’í…“í…•í…–í…—í…˜í…™í…ší…›í…ží… í…¢í…£í…¤í…¥í…¦í…§í…©í…ªí…«í…­ë•€ë•ë•ƒë•„ë•…ë•‹ë•Œë•ë•ë•”ë•œë•ë•Ÿë• ë•¡ë– ë–¡ë–¤ë–¨ë–ªë–«ë–°ë–±ë–³ë–´ë–µë–»ë–¼ë–½ë—€ë—„ë—Œë—ë—ë—ë—‘ë—˜ë—¬ë˜ë˜‘ë˜”ë˜˜ë˜¥ë˜¬ë˜´ë™ˆë™¤ë™¨ëšœëšëš ëš¤ëš«ëš¬ëš±ë›”ë›°ë›´ë›¸ëœ€ëœëœ…ëœ¨ëœ©ëœ¬ëœ¯ëœ°ëœ¸ëœ¹ëœ»ë„ëˆëŒë”ë•ë ë¤ë¨ë°ë±ë³ëµë¼ë½ëž€ëž„ëžŒëžëžëžëž‘ëž’ëž–ëž—ï¿½".split("");
    for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
    D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í…®í…¯í…°í…±í…²í…³í…´í…µí…¶í…·í…¸í…¹í…ºí…»í…½í…¾í…¿í†€í†í†‚í†ƒí†…í††í†‡í†‰í†Šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í†‹í†Œí†í†Ží†í†í†‘í†’í†“í†”í†•í†–í†—í†˜í†™í†ší†›í†œí†í†ží†Ÿí†¢í†£í†¥í†¦í†§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í†©í†ªí†«í†¬í†­í†®í†¯í†²í†´í†¶í†·í†¸í†¹í†»í†½í†¾í†¿í‡í‡‚í‡ƒí‡„í‡…í‡†í‡‡í‡ˆí‡‰í‡Ší‡‹í‡Œí‡í‡Ží‡ëž˜ëž™ëžœëž ëž¨ëž©ëž«ëž¬ëž­ëž´ëžµëž¸ëŸ‡ëŸ‰ëŸ¬ëŸ­ëŸ°ëŸ´ëŸ¼ëŸ½ëŸ¿ë €ë ë ‡ë ˆë ‰ë Œë ë ˜ë ™ë ›ë ë ¤ë ¥ë ¨ë ¬ë ´ë µë ·ë ¸ë ¹ë¡€ë¡„ë¡‘ë¡“ë¡œë¡ë¡ ë¡¤ë¡¬ë¡­ë¡¯ë¡±ë¡¸ë¡¼ë¢ë¢¨ë¢°ë¢´ë¢¸ë£€ë£ë£ƒë£…ë£Œë£ë£”ë£ë£Ÿë£¡ë£¨ë£©ë£¬ë£°ë£¸ë£¹ë£»ë£½ë¤„ë¤˜ë¤ ë¤¼ë¤½ë¥€ë¥„ë¥Œë¥ë¥‘ë¥˜ë¥™ë¥œë¥ ë¥¨ë¥©ï¿½".split("");
    for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
    D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‡í‡‘í‡’í‡“í‡”í‡•í‡–í‡—í‡™í‡ší‡›í‡œí‡í‡ží‡Ÿí‡ í‡¡í‡¢í‡£í‡¤í‡¥í‡¦í‡§í‡¨í‡©í‡ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‡«í‡¬í‡­í‡®í‡¯í‡°í‡±í‡²í‡³í‡µí‡¶í‡·í‡¹í‡ºí‡»í‡¼í‡½í‡¾í‡¿íˆ€íˆíˆ‚íˆƒíˆ„íˆ…íˆ†ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íˆˆíˆŠíˆ‹íˆŒíˆíˆŽíˆíˆ‘íˆ’íˆ“íˆ”íˆ•íˆ–íˆ—íˆ˜íˆ™íˆšíˆ›íˆœíˆíˆžíˆŸíˆ íˆ¡íˆ¢íˆ£íˆ¤íˆ¥íˆ¦íˆ§íˆ¨íˆ©ë¥«ë¥­ë¥´ë¥µë¥¸ë¥¼ë¦„ë¦…ë¦‡ë¦‰ë¦Šë¦ë¦Žë¦¬ë¦­ë¦°ë¦´ë¦¼ë¦½ë¦¿ë§ë§ˆë§‰ë§Œë§Žë§ë§ë§‘ë§’ë§˜ë§™ë§›ë§ë§žë§¡ë§£ë§¤ë§¥ë§¨ë§¬ë§´ë§µë§·ë§¸ë§¹ë§ºë¨€ë¨ë¨ˆë¨•ë¨¸ë¨¹ë¨¼ë©€ë©‚ë©ˆë©‰ë©‹ë©ë©Žë©“ë©”ë©•ë©˜ë©œë©¤ë©¥ë©§ë©¨ë©©ë©°ë©±ë©´ë©¸ëªƒëª„ëª…ëª‡ëªŒëª¨ëª©ëª«ëª¬ëª°ëª²ëª¸ëª¹ëª»ëª½ë«„ë«ˆë«˜ë«™ë«¼ï¿½".split("");
    for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
    D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íˆªíˆ«íˆ®íˆ¯íˆ±íˆ²íˆ³íˆµíˆ¶íˆ·íˆ¸íˆ¹íˆºíˆ»íˆ¾í‰€í‰‚í‰ƒí‰„í‰…í‰†í‰‡í‰‰í‰Ší‰‹í‰Œï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‰í‰Ží‰í‰í‰‘í‰’í‰“í‰”í‰•í‰–í‰—í‰˜í‰™í‰ší‰›í‰í‰ží‰Ÿí‰ í‰¡í‰¢í‰£í‰¥í‰¦í‰§í‰¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‰©í‰ªí‰«í‰¬í‰­í‰®í‰¯í‰°í‰±í‰²í‰³í‰´í‰µí‰¶í‰·í‰¸í‰¹í‰ºí‰»í‰¼í‰½í‰¾í‰¿íŠ‚íŠƒíŠ…íŠ†íŠ‡íŠ‰íŠŠíŠ‹íŠŒë¬€ë¬„ë¬ë¬ë¬‘ë¬˜ë¬œë¬ ë¬©ë¬«ë¬´ë¬µë¬¶ë¬¸ë¬»ë¬¼ë¬½ë¬¾ë­„ë­…ë­‡ë­‰ë­ë­ë­ë­”ë­˜ë­¡ë­£ë­¬ë®ˆë®Œë®ë®¤ë®¨ë®¬ë®´ë®·ë¯€ë¯„ë¯ˆë¯ë¯“ë¯¸ë¯¹ë¯¼ë¯¿ë°€ë°‚ë°ˆë°‰ë°‹ë°Œë°ë°ë°‘ë°”ë°•ë°–ë°—ë°˜ë°›ë°œë°ë°žë°Ÿë°¤ë°¥ë°§ë°©ë°­ë°°ë°±ë°´ë°¸ë±€ë±ë±ƒë±„ë±…ë±‰ë±Œë±ë±ë±ë²„ë²…ë²ˆë²‹ë²Œë²Žë²”ë²•ë²—ï¿½".split("");
    for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
    D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íŠíŠŽíŠíŠ’íŠ“íŠ”íŠ–íŠ—íŠ˜íŠ™íŠšíŠ›íŠíŠžíŠŸíŠ¡íŠ¢íŠ£íŠ¥íŠ¦íŠ§íŠ¨íŠ©íŠªíŠ«íŠ­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íŠ®íŠ¯íŠ°íŠ²íŠ³íŠ´íŠµíŠ¶íŠ·íŠºíŠ»íŠ½íŠ¾í‹í‹ƒí‹„í‹…í‹†í‹‡í‹Ší‹Œí‹í‹Ží‹í‹í‹‘ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‹’í‹“í‹•í‹–í‹—í‹™í‹ší‹›í‹í‹ží‹Ÿí‹ í‹¡í‹¢í‹£í‹¦í‹§í‹¨í‹©í‹ªí‹«í‹¬í‹­í‹®í‹¯í‹²í‹³í‹µí‹¶í‹·í‹¹í‹ºë²™ë²šë² ë²¡ë²¤ë²§ë²¨ë²°ë²±ë²³ë²´ë²µë²¼ë²½ë³€ë³„ë³ë³ë³ë³‘ë³•ë³˜ë³œë³´ë³µë³¶ë³¸ë³¼ë´„ë´…ë´‡ë´‰ë´ë´”ë´¤ë´¬ëµ€ëµˆëµ‰ëµŒëµëµ˜ëµ™ëµ¤ëµ¨ë¶€ë¶ë¶„ë¶‡ë¶ˆë¶‰ë¶Šë¶ë¶‘ë¶“ë¶•ë¶™ë¶šë¶œë¶¤ë¶°ë¶¸ë·”ë·•ë·˜ë·œë·©ë·°ë·´ë·¸ë¸€ë¸ƒë¸…ë¸Œë¸ë¸ë¸”ë¸œë¸ë¸Ÿë¹„ë¹…ë¹ˆë¹Œë¹Žë¹”ë¹•ë¹—ë¹™ë¹šë¹›ë¹ ë¹¡ë¹¤ï¿½".split("");
    for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
    D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‹»í‹¼í‹½í‹¾í‹¿íŒ‚íŒ„íŒ†íŒ‡íŒˆíŒ‰íŒŠíŒ‹íŒíŒ‘íŒ’íŒ“íŒ•íŒ—íŒ˜íŒ™íŒšíŒ›íŒžíŒ¢íŒ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íŒ¤íŒ¦íŒ§íŒªíŒ«íŒ­íŒ®íŒ¯íŒ±íŒ²íŒ³íŒ´íŒµíŒ¶íŒ·íŒºíŒ¾íŒ¿í€íí‚íƒí†í‡íˆí‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íŠí‹íŒííŽííí‘í’í“í”í•í–í—í˜í™íší›íœíížíŸí í¡í¢í£í¤í¥í¦í§í¨í©ë¹¨ë¹ªë¹°ë¹±ë¹³ë¹´ë¹µë¹»ë¹¼ë¹½ëº€ëº„ëºŒëºëºëºëº‘ëº˜ëº™ëº¨ë»ë»‘ë»”ë»—ë»˜ë» ë»£ë»¤ë»¥ë»¬ë¼ë¼ˆë¼‰ë¼˜ë¼™ë¼›ë¼œë¼ë½€ë½ë½„ë½ˆë½ë½‘ë½•ë¾”ë¾°ë¿…ë¿Œë¿ë¿ë¿”ë¿œë¿Ÿë¿¡ì€¼ì‘ì˜ìœì ì¨ì©ì‚ì‚‘ì‚”ì‚˜ì‚ ì‚¡ì‚£ì‚¥ì‚¬ì‚­ì‚¯ì‚°ì‚³ì‚´ì‚µì‚¶ì‚¼ì‚½ì‚¿ìƒ€ìƒìƒ…ìƒˆìƒ‰ìƒŒìƒìƒ˜ìƒ™ìƒ›ìƒœìƒìƒ¤ï¿½".split("");
    for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
    D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·í¸í¹íºí»í¾í¿íŽíŽ‚íŽƒíŽ…íŽ†íŽ‡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íŽˆíŽ‰íŽŠíŽ‹íŽŽíŽ’íŽ“íŽ”íŽ•íŽ–íŽ—íŽšíŽ›íŽíŽžíŽŸíŽ¡íŽ¢íŽ£íŽ¤íŽ¥íŽ¦íŽ§íŽªíŽ¬íŽ®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íŽ¯íŽ°íŽ±íŽ²íŽ³íŽµíŽ¶íŽ·íŽ¹íŽºíŽ»íŽ½íŽ¾íŽ¿í€íí‚íƒí†í‡íŠí‹íŒííŽíí‘í’í“í”í•í–ìƒ¥ìƒ¨ìƒ¬ìƒ´ìƒµìƒ·ìƒ¹ì„€ì„„ì„ˆì„ì„•ì„œì„ì„žì„Ÿì„ ì„£ì„¤ì„¦ì„§ì„¬ì„­ì„¯ì„°ì„±ì„¶ì„¸ì„¹ì„¼ì…€ì…ˆì…‰ì…‹ì…Œì…ì…”ì…•ì…˜ì…œì…¤ì…¥ì…§ì…¨ì…©ì…°ì…´ì…¸ì†…ì†Œì†ì†Žì†ì†”ì†–ì†œì†ì†Ÿì†¡ì†¥ì†¨ì†©ì†¬ì†°ì†½ì‡„ì‡ˆì‡Œì‡”ì‡—ì‡˜ì‡ ì‡¤ì‡¨ì‡°ì‡±ì‡³ì‡¼ì‡½ìˆ€ìˆ„ìˆŒìˆìˆìˆ‘ìˆ˜ìˆ™ìˆœìˆŸìˆ ìˆ¨ìˆ©ìˆ«ìˆ­ï¿½".split("");
    for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
    D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í—í™íší›íœíížíŸí í¢í¤í¥í¦í§í¨í©íªí«í®í¯í±í²í³íµí¶í·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¸í¹íºí»í¾í€í‚íƒí„í…í†í‡í‰íŠí‹íŒííŽííí‘í’í“í”í•í–ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í—í˜í™íší›íœížíŸí í¡í¢í£í¤í¥í¦í§í¨í©íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·ìˆ¯ìˆ±ìˆ²ìˆ´ì‰ˆì‰ì‰‘ì‰”ì‰˜ì‰ ì‰¥ì‰¬ì‰­ì‰°ì‰´ì‰¼ì‰½ì‰¿ìŠìŠˆìŠ‰ìŠìŠ˜ìŠ›ìŠìŠ¤ìŠ¥ìŠ¨ìŠ¬ìŠ­ìŠ´ìŠµìŠ·ìŠ¹ì‹œì‹ì‹ ì‹£ì‹¤ì‹«ì‹¬ì‹­ì‹¯ì‹±ì‹¶ì‹¸ì‹¹ì‹»ì‹¼ìŒ€ìŒˆìŒ‰ìŒŒìŒìŒ“ìŒ”ìŒ•ìŒ˜ìŒœìŒ¤ìŒ¥ìŒ¨ìŒ©ì…ì¨ì©ì¬ì°ì²ì¸ì¹ì¼ì½ìŽ„ìŽˆìŽŒì€ì˜ì™ìœìŸì ì¢ì¨ì©ì­ì´ìµì¸ìˆìì¤ì¬ì°ï¿½".split("");
    for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
    D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¸í¹íºí»í¼í½í¾í¿í‘í‘‚í‘ƒí‘…í‘†í‘‡í‘ˆí‘‰í‘Ší‘‹í‘Œí‘í‘Ží‘í‘í‘‘í‘’í‘“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‘”í‘•í‘–í‘—í‘˜í‘™í‘ší‘›í‘í‘ží‘Ÿí‘¡í‘¢í‘£í‘¥í‘¦í‘§í‘¨í‘©í‘ªí‘«í‘¬í‘®í‘°í‘±í‘²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‘³í‘´í‘µí‘¶í‘·í‘ºí‘»í‘½í‘¾í’í’ƒí’„í’…í’†í’‡í’Ší’Œí’Ží’í’í’‘í’’í’“í’•í’–í’—í’˜í’™í’ší’›í’œí’ì´ì¼ì½ì‘ˆì‘¤ì‘¥ì‘¨ì‘¬ì‘´ì‘µì‘¹ì’€ì’”ì’œì’¸ì’¼ì“©ì“°ì“±ì“´ì“¸ì“ºì“¿ì”€ì”ì”Œì”ì””ì”œì”¨ì”©ì”¬ì”°ì”¸ì”¹ì”»ì”½ì•„ì•…ì•ˆì•‰ì•Šì•Œì•ì•Žì•“ì•”ì••ì•—ì•˜ì•™ì•ì•žì• ì•¡ì•¤ì•¨ì•°ì•±ì•³ì•´ì•µì•¼ì•½ì–€ì–„ì–‡ì–Œì–ì–ì–‘ì–•ì–—ì–˜ì–œì– ì–©ì–´ì–µì–¸ì–¹ì–»ì–¼ì–½ì–¾ì—„ì—…ì—†ì—‡ì—ˆì—‰ì—Šì—Œì—Žï¿½".split("");
    for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
    D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í’ží’Ÿí’ í’¡í’¢í’£í’¤í’¥í’¦í’§í’¨í’ªí’«í’¬í’­í’®í’¯í’°í’±í’²í’³í’´í’µí’¶í’·í’¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í’¹í’ºí’»í’¼í’½í’¾í’¿í“€í“í“‚í“ƒí“„í“…í“†í“‡í“ˆí“‰í“Ší“‹í“í“Ží“í“‘í“’í““í“•ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í“–í“—í“˜í“™í“ší“›í“í“ží“ í“¡í“¢í“£í“¤í“¥í“¦í“§í“©í“ªí“«í“­í“®í“¯í“±í“²í“³í“´í“µí“¶í“·í“¹í“ºí“¼ì—ì—‘ì—”ì—˜ì— ì—¡ì—£ì—¥ì—¬ì—­ì—®ì—°ì—´ì—¶ì—·ì—¼ì—½ì—¾ì—¿ì˜€ì˜ì˜…ì˜†ì˜‡ì˜ˆì˜Œì˜ì˜˜ì˜™ì˜›ì˜œì˜¤ì˜¥ì˜¨ì˜¬ì˜­ì˜®ì˜°ì˜³ì˜´ì˜µì˜·ì˜¹ì˜»ì™€ì™ì™„ì™ˆì™ì™‘ì™“ì™”ì™•ì™œì™ì™ ì™¬ì™¯ì™±ì™¸ì™¹ì™¼ìš€ìšˆìš‰ìš‹ìšìš”ìš•ìš˜ìšœìš¤ìš¥ìš§ìš©ìš°ìš±ìš´ìš¸ìš¹ìšºì›€ì›ì›ƒì›…ì›Œì›ì›ì›”ì›œì›ì› ì›¡ì›¨ï¿½".split("");
    for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
    D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í“¾í“¿í”€í”í”‚í”ƒí”…í”†í”‡í”‰í”Ší”‹í”í”Ží”í”í”‘í”’í”“í”–í”˜í”™í”ší”›í”œí”ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í”ží”Ÿí” í”¡í”¢í”£í”¤í”¥í”¦í”§í”¨í”©í”ªí”«í”¬í”­í”®í”¯í”°í”±í”²í”³í”´í”µí”¶í”·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í”¸í”¹í”ºí”»í”¾í”¿í•í•‚í•ƒí•…í•†í•‡í•ˆí•‰í•Ší•‹í•Ží•í•’í•“í•”í••í•–í•—í•ší•›í•í•ží•Ÿí•¡í•¢í•£ì›©ì›¬ì›°ì›¸ì›¹ì›½ìœ„ìœ…ìœˆìœŒìœ”ìœ•ìœ—ìœ™ìœ ìœ¡ìœ¤ìœ¨ìœ°ìœ±ìœ³ìœµìœ·ìœ¼ìœ½ì€ì„ìŠìŒììì‘ì’ì“ì”ì•ì–ì—ì˜ìœì ì¨ì«ì´ìµì¸ì¼ì½ì¾ìžƒìž„ìž…ìž‡ìžˆìž‰ìžŠìžŽìžìž‘ìž”ìž–ìž—ìž˜ìžšìž ìž¡ìž£ìž¤ìž¥ìž¦ìž¬ìž­ìž°ìž´ìž¼ìž½ìž¿ìŸ€ìŸìŸˆìŸ‰ìŸŒìŸŽìŸìŸ˜ìŸìŸ¤ìŸ¨ìŸ¬ì €ì ì „ì ˆì Šï¿½".split("");
    for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
    D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í•¤í•¦í•§í•ªí•¬í•®í•¯í•°í•±í•²í•³í•¶í•·í•¹í•ºí•»í•½í•¾í•¿í–€í–í–‚í–ƒí–†í–Ší–‹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í–Œí–í–Ží–í–‘í–’í–“í–”í–•í––í–—í–˜í–™í–ší–›í–œí–í–ží–Ÿí– í–¡í–¢í–£í–¤í–¦í–§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í–¨í–©í–ªí–«í–¬í–­í–®í–¯í–°í–±í–²í–³í–´í–µí–¶í–·í–¸í–¹í–ºí–»í–¼í–½í–¾í–¿í—€í—í—‚í—ƒí—„í—…í—†í—‡ì ì ‘ì “ì •ì –ì œì ì  ì ¤ì ¬ì ­ì ¯ì ±ì ¸ì ¼ì¡€ì¡ˆì¡‰ì¡Œì¡ì¡”ì¡°ì¡±ì¡´ì¡¸ì¡ºì¢€ì¢ì¢ƒì¢…ì¢†ì¢‡ì¢‹ì¢Œì¢ì¢”ì¢ì¢Ÿì¢¡ì¢¨ì¢¼ì¢½ì£„ì£ˆì£Œì£”ì£•ì£—ì£™ì£ ì£¡ì£¤ì£µì£¼ì£½ì¤€ì¤„ì¤…ì¤†ì¤Œì¤ì¤ì¤‘ì¤˜ì¤¬ì¤´ì¥ì¥‘ì¥”ì¥˜ì¥ ì¥¡ì¥£ì¥¬ì¥°ì¥´ì¥¼ì¦ˆì¦‰ì¦Œì¦ì¦˜ì¦™ì¦›ì¦ì§€ì§ì§„ì§‡ì§ˆì§Šì§ì§‘ì§“ï¿½".split("");
    for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
    D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í—Ší—‹í—í—Ží—í—‘í—“í—”í—•í—–í——í—ší—œí—ží—Ÿí— í—¡í—¢í—£í—¦í—§í—©í—ªí—«í—­í—®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í—¯í—°í—±í—²í—³í—¶í—¸í—ºí—»í—¼í—½í—¾í—¿í˜‚í˜ƒí˜…í˜†í˜‡í˜‰í˜Ší˜‹í˜Œí˜í˜Ží˜í˜’ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í˜–í˜—í˜˜í˜™í˜ší˜›í˜í˜ží˜Ÿí˜¡í˜¢í˜£í˜¥í˜¦í˜§í˜¨í˜©í˜ªí˜«í˜¬í˜®í˜¯í˜°í˜±í˜²í˜³í˜´í˜µí˜¶í˜·í˜ºí˜»ì§•ì§–ì§™ì§šì§œì§ì§ ì§¢ì§¤ì§§ì§¬ì§­ì§¯ì§°ì§±ì§¸ì§¹ì§¼ì¨€ì¨ˆì¨‰ì¨‹ì¨Œì¨ì¨”ì¨˜ì¨©ì©Œì©ì©ì©”ì©œì©ì©Ÿì© ì©¡ì©¨ì©½ìª„ìª˜ìª¼ìª½ì«€ì«„ì«Œì«ì«ì«‘ì«“ì«˜ì«™ì« ì«¬ì«´ì¬ˆì¬ì¬”ì¬˜ì¬ ì¬¡ì­ì­ˆì­‰ì­Œì­ì­˜ì­™ì­ì­¤ì­¸ì­¹ì®œì®¸ì¯”ì¯¤ì¯§ì¯©ì°Œì°ì°ì°”ì°œì°ì°¡ì°¢ì°§ì°¨ì°©ì°¬ì°®ì°°ì°¸ì°¹ì°»ï¿½".split("");
    for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
    D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í˜½í˜¾í˜¿í™í™‚í™ƒí™„í™†í™‡í™Ší™Œí™Ží™í™í™’í™“í™–í™—í™™í™ší™›í™í™ží™Ÿí™ í™¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í™¢í™£í™¤í™¥í™¦í™¨í™ªí™«í™¬í™­í™®í™¯í™²í™³í™µí™¶í™·í™¸í™¹í™ºí™»í™¼í™½í™¾í™¿íš€ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íšíš‚íš„íš†íš‡íšˆíš‰íšŠíš‹íšŽíšíš‘íš’íš“íš•íš–íš—íš˜íš™íššíš›íšœíšžíš íš¢íš£íš¤íš¥íš¦íš§íš©íšªì°¼ì°½ì°¾ì±„ì±…ì±ˆì±Œì±”ì±•ì±—ì±˜ì±™ì± ì±¤ì±¦ì±¨ì±°ì±µì²˜ì²™ì²œì² ì²¨ì²©ì²«ì²¬ì²­ì²´ì²µì²¸ì²¼ì³„ì³…ì³‡ì³‰ì³ì³”ì³¤ì³¬ì³°ì´ì´ˆì´‰ì´Œì´ì´˜ì´™ì´›ì´ì´¤ì´¨ì´¬ì´¹ìµœìµ ìµ¤ìµ¬ìµ­ìµ¯ìµ±ìµ¸ì¶ˆì¶”ì¶•ì¶˜ì¶œì¶¤ì¶¥ì¶§ì¶©ì¶°ì·„ì·Œì·ì·¨ì·¬ì·°ì·¸ì·¹ì·»ì·½ì¸„ì¸ˆì¸Œì¸”ì¸™ì¸ ì¸¡ì¸¤ì¸¨ì¸°ì¸±ì¸³ì¸µï¿½".split("");
    for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
    D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íš«íš­íš®íš¯íš±íš²íš³íš´íšµíš¶íš·íš¸íšºíš¼íš½íš¾íš¿í›€í›í›‚í›ƒí›†í›‡í›‰í›Ší›‹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í›í›Ží›í›í›’í›“í›•í›–í›˜í›ší››í›œí›í›ží›Ÿí›¡í›¢í›£í›¥í›¦í›§í›©í›ªí›«í›¬í›­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í›®í›¯í›±í›²í›³í›´í›¶í›·í›¸í›¹í›ºí›»í›¾í›¿íœíœ‚íœƒíœ…íœ†íœ‡íœˆíœ‰íœŠíœ‹íœŒíœíœŽíœíœíœ’íœ“íœ”ì¹˜ì¹™ì¹œì¹Ÿì¹ ì¹¡ì¹¨ì¹©ì¹«ì¹­ì¹´ì¹µì¹¸ì¹¼ìº„ìº…ìº‡ìº‰ìºìº‘ìº”ìº˜ìº ìº¡ìº£ìº¤ìº¥ìº¬ìº­ì»ì»¤ì»¥ì»¨ì»«ì»¬ì»´ì»µì»·ì»¸ì»¹ì¼€ì¼ì¼„ì¼ˆì¼ì¼‘ì¼“ì¼•ì¼œì¼ ì¼¤ì¼¬ì¼­ì¼¯ì¼°ì¼±ì¼¸ì½”ì½•ì½˜ì½œì½¤ì½¥ì½§ì½©ì½°ì½±ì½´ì½¸ì¾€ì¾…ì¾Œì¾¡ì¾¨ì¾°ì¿„ì¿ ì¿¡ì¿¤ì¿¨ì¿°ì¿±ì¿³ì¿µì¿¼í€€í€„í€‘í€˜í€­í€´í€µí€¸í€¼ï¿½".split("");
    for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
    D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íœ•íœ–íœ—íœšíœ›íœíœžíœŸíœ¡íœ¢íœ£íœ¤íœ¥íœ¦íœ§íœªíœ¬íœ®íœ¯íœ°íœ±íœ²íœ³íœ¶íœ·íœ¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íœºíœ»íœ½íœ¾íœ¿í€íí‚íƒí…í†íˆíŠí‹íŒííŽíí’í“í•íší›íœíížï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íŸí¢í¤í¦í§í¨íªí«í­í®í¯í±í²í³íµí¶í·í¸í¹íºí»í¾í¿íž€íž‚ížƒíž„íž…íž†íž‡ížŠíž‹í„í…í‡í‰íí”í˜í í¬í­í°í´í¼í½í‚í‚¤í‚¥í‚¨í‚¬í‚´í‚µí‚·í‚¹íƒ€íƒíƒ„íƒˆíƒ‰íƒíƒ‘íƒ“íƒ”íƒ•íƒœíƒíƒ íƒ¤íƒ¬íƒ­íƒ¯íƒ°íƒ±íƒ¸í„í„°í„±í„´í„¸í„ºí…€í…í…ƒí…„í……í…Œí…í…í…”í…œí…í…Ÿí…¡í…¨í…¬í…¼í†„í†ˆí† í†¡í†¤í†¨í†°í†±í†³í†µí†ºí†¼í‡€í‡˜í‡´í‡¸íˆ‡íˆ‰íˆíˆ¬íˆ­íˆ°íˆ´íˆ¼íˆ½íˆ¿í‰í‰ˆí‰œï¿½".split("");
    for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
    D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ížížŽížíž‘íž’íž“íž”íž•íž–íž—ížšížœížžížŸíž íž¡íž¢íž£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í‰¤íŠ€íŠíŠ„íŠˆíŠíŠ‘íŠ•íŠœíŠ íŠ¤íŠ¬íŠ±íŠ¸íŠ¹íŠ¼íŠ¿í‹€í‹‚í‹ˆí‹‰í‹‹í‹”í‹˜í‹œí‹¤í‹¥í‹°í‹±í‹´í‹¸íŒ€íŒíŒƒíŒ…íŒŒíŒíŒŽíŒíŒ”íŒ–íŒœíŒíŒŸíŒ íŒ¡íŒ¥íŒ¨íŒ©íŒ¬íŒ°íŒ¸íŒ¹íŒ»íŒ¼íŒ½í„í…í¼í½íŽ€íŽ„íŽŒíŽíŽíŽíŽ‘íŽ˜íŽ™íŽœíŽ íŽ¨íŽ©íŽ«íŽ­íŽ´íŽ¸íŽ¼í„í…íˆí‰íí˜í¡í£í¬í­í°í´í¼í½í¿íï¿½".split("");
    for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
    D[199] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íˆíí‘€í‘„í‘œí‘ í‘¤í‘­í‘¯í‘¸í‘¹í‘¼í‘¿í’€í’‚í’ˆí’‰í’‹í’í’”í’©í“Œí“í“”í“œí“Ÿí“¨í“¬í“°í“¸í“»í“½í”„í”ˆí”Œí””í”•í”—í”¼í”½í•€í•„í•Œí•í•í•‘í•˜í•™í•œí• í•¥í•¨í•©í•«í•­í•´í•µí•¸í•¼í–„í–…í–‡í–ˆí–‰í–í–¥í—ˆí—‰í—Œí—í—’í—˜í—™í—›í—í—¤í—¥í—¨í—¬í—´í—µí—·í—¹í˜€í˜í˜„í˜ˆí˜í˜‘í˜“í˜”í˜•í˜œí˜ ï¿½".split("");
    for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
    D[200] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í˜¤í˜­í˜¸í˜¹í˜¼í™€í™…í™ˆí™‰í™‹í™í™‘í™”í™•í™˜í™œí™§í™©í™°í™±í™´íšƒíš…íšŒíšíšíš”íšíšŸíš¡íš¨íš¬íš°íš¹íš»í›„í›…í›ˆí›Œí›‘í›”í›—í›™í› í›¤í›¨í›°í›µí›¼í›½íœ€íœ„íœ‘íœ˜íœ™íœœíœ íœ¨íœ©íœ«íœ­íœ´íœµíœ¸íœ¼í„í‡í‰íí‘í”í–í—í˜í™í í¡í£í¥í©í¬í°í´í¼í½ížížˆíž‰ížŒížíž˜íž™íž›ížï¿½".split("");
    for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
    D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¼½ä½³å‡åƒ¹åŠ å¯å‘µå“¥å˜‰å«å®¶æš‡æž¶æž·æŸ¯æ­Œç‚ç—‚ç¨¼è‹›èŒ„è¡—è¢ˆè¨¶è³ˆè·è»»è¿¦é§•åˆ»å´å„æªæ…¤æ®¼çè„šè¦ºè§’é–£ä¾ƒåˆŠå¢¾å¥¸å§¦å¹²å¹¹æ‡‡æ€æ†æŸ¬æ¡¿æ¾—ç™Žçœ‹ç£µç¨ˆç«¿ç°¡è‚è‰®è‰±è««é–“ä¹«å–æ›·æ¸´ç¢£ç«­è‘›è¤èŽéž¨å‹˜åŽå ªåµŒæ„Ÿæ†¾æˆ¡æ•¢æŸ‘æ©„æ¸›ç”˜ç–³ç›£çž°ç´ºé‚¯é‘‘é‘’é¾•ï¿½".split("");
    for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
    D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åŒ£å²¬ç”²èƒ›é‰€é–˜å‰›å ˆå§œå²¡å´—åº·å¼ºå½Šæ…·æ±Ÿç•ºç–†ç³ çµ³ç¶±ç¾Œè…”èˆ¡è–‘è¥è¬›é‹¼é™é±‡ä»‹ä»·å€‹å‡±å¡æ„·æ„¾æ…¨æ”¹æ§ªæ¼‘ç–¥çš†ç›–ç®‡èŠ¥è“‹ï¤€éŽ§é–‹å–€å®¢å‘ï¤ç²³ç¾¹é†µå€¨åŽ»å±…å·¨æ‹’æ®æ“šæ“§æ¸ ç‚¬ç¥›è·è¸žï¤‚é½é‰…é‹¸ä¹¾ä»¶å¥å·¾å»ºæ„†æ¥—è…±è™”è¹‡éµé¨«ä¹žå‚‘æ°æ¡€å„‰åŠåŠ’æª¢ï¿½".split("");
    for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
    D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çž¼éˆé»”åŠ«æ€¯è¿²åˆæ†©æ­æ“Šæ ¼æª„æ¿€è†ˆè¦¡éš”å …ç‰½çŠ¬ç”„çµ¹ç¹­è‚©è¦‹è­´é£éµ‘æŠ‰æ±ºæ½”çµç¼ºè¨£å…¼æ…Šç®è¬™é‰—éŽŒäº¬ä¿“å€žå‚¾å„†å‹å‹å¿å°å¢ƒåºšå¾‘æ…¶æ†¬æ“Žæ•¬æ™¯æš»æ›´æ¢—æ¶‡ç‚…çƒ±ç’Ÿç’¥ç“Šç—™ç¡¬ç£¬ç«Ÿç«¶çµ…ç¶“è€•è€¿è„›èŽ–è­¦è¼•é€•é¡é ƒé ¸é©šé¯¨ä¿‚å•“å ºå¥‘å­£å±†æ‚¸æˆ’æ¡‚æ¢°ï¿½".split("");
    for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
    D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ£¨æºªç•Œç™¸ç£Žç¨½ç³»ç¹«ç¹¼è¨ˆèª¡è°¿éšŽé·„å¤å©å‘Šå‘±å›ºå§‘å­¤å°»åº«æ‹·æ”·æ•…æ•²æš æž¯æ§æ²½ç—¼çšç¾ç¨¿ç¾”è€ƒè‚¡è†è‹¦è‹½è°è—è ±è¢´èª¥ï¤ƒè¾œéŒ®é›‡é¡§é«˜é¼“å“­æ–›æ›²æ¢ç©€è°·éµ å›°å¤å´‘æ˜†æ¢±æ£æ»¾ç¨è¢žé¯¤æ±¨ï¤„éª¨ä¾›å…¬å…±åŠŸå­”å·¥ææ­æ‹±æŽ§æ”»ç™ç©ºèš£è²¢éžä¸²å¯¡æˆˆæžœç“œï¿½".split("");
    for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
    D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç§‘è“èª‡èª²è·¨éŽé‹é¡†å»“æ§¨è—¿éƒ­ï¤…å† å®˜å¯¬æ…£æ£ºæ¬¾çŒç¯ç“˜ç®¡ç½è…è§€è²«é—œé¤¨åˆ®ææ‹¬é€‚ä¾Šå…‰åŒ¡å£™å»£æ› æ´¸ç‚šç‹‚ç–ç­èƒ±é‘›å¦æŽ›ç½«ä¹–å‚€å¡Šå£žæ€ªæ„§æ‹æ§é­å®ç´˜è‚±è½Ÿäº¤åƒ‘å’¬å–¬å¬Œå¶ å·§æ”ªæ•Žæ ¡æ©‹ç‹¡çšŽçŸ¯çµžç¿¹è† è•Žè›Ÿè¼ƒè½ŽéƒŠé¤ƒé©•é®«ä¸˜ä¹…ä¹ä»‡ä¿±å…·å‹¾ï¿½".split("");
    for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
    D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å€å£å¥å’Žå˜”åµåž¢å¯‡å¶‡å»æ‡¼æ‹˜æ•‘æž¸æŸ©æ§‹æ­æ¯†æ¯¬æ±‚æºç¸ç‹—çŽ–çƒçž¿çŸ©ç©¶çµ¿è€‰è‡¼èˆ…èˆŠè‹Ÿè¡¢è¬³è³¼è»€é€‘é‚±é‰¤éŠ¶é§’é©…é³©é·—é¾œåœ‹å±€èŠéž éž«éº´å›çª˜ç¾¤è£™è»éƒ¡å €å±ˆæŽ˜çªŸå®®å¼“ç©¹çª®èŠŽèº¬å€¦åˆ¸å‹¸å·åœˆæ‹³æ²æ¬Šæ·ƒçœ·åŽ¥ç—è•¨è¹¶é—•æœºæ«ƒæ½°è©­è»Œé¥‹ï¤†æ™·æ­¸è²´ï¿½".split("");
    for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
    D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¬¼ï¤‡å«åœ­å¥Žæ†æ§»çªç¡…çªºç«…ç³¾è‘µè¦èµ³é€µé–¨å‹»å‡ç•‡ç­ èŒéˆžï¤ˆæ©˜å…‹å‰‹åŠ‡æˆŸæ£˜æ¥µéš™åƒ…åŠ¤å‹¤æ‡ƒæ–¤æ ¹æ§¿ç‘¾ç­‹èŠ¹è«è¦²è¬¹è¿‘é¥‰ï¤‰ä»Šå¦—æ“’æ˜‘æªŽç´ç¦ç¦½èŠ©è¡¾è¡¿è¥Ÿï¤ŠéŒ¦ä¼‹åŠæ€¥æ‰±æ±²ç´šçµ¦äº˜å…¢çŸœè‚¯ä¼ä¼Žå…¶å†€å—œå™¨åœ»åŸºåŸ¼å¤”å¥‡å¦“å¯„å²å´Žå·±å¹¾å¿ŒæŠ€æ——æ—£ï¿½".split("");
    for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
    D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æœžæœŸæžæ£‹æ£„æ©Ÿæ¬ºæ°£æ±½æ²‚æ·‡çŽ˜ç¦çªç’‚ç’£ç•¸ç•¿ç¢ç£¯ç¥ç¥‡ç¥ˆç¥ºç®•ç´€ç¶ºç¾ˆè€†è€­è‚Œè¨˜è­è±ˆèµ·éŒ¡éŒ¤é£¢é¥‘é¨Žé¨é©¥éº’ç·Šä½¶å‰æ‹®æ¡”é‡‘å–«å„ºï¤‹ï¤Œå¨œæ‡¦ï¤æ‹æ‹¿ï¤Žï¤ï¤ï¤‘ï¤’ï¤“é‚£ï¤”ï¤•ï¤–ï¤—ï¤˜è«¾ï¤™ï¤šï¤›ï¤œæš–ï¤ç…–ï¤žï¤Ÿé›£ï¤ ææºå—ï¤¡æžæ¥ æ¹³ï¤¢ç”·ï¤£ï¤¤ï¤¥ï¿½".split("");
    for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
    D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç´ï¤¦ï¤§è¡²å›Šå¨˜ï¤¨ï¤©ï¤ªï¤«ï¤¬ä¹ƒï¤­å…§å¥ˆæŸ°è€ï¤®å¥³å¹´æ’šç§Šå¿µæ¬æ‹ˆæ»å¯§å¯—åŠªï¤¯å¥´å¼©æ€’ï¤°ï¤±ï¤²ç‘™ï¤³ï¤´ï¤µï¤¶ï¤·ï¤¸é§‘ï¤¹ï¤ºï¤»ï¤¼ï¤½ï¤¾ï¤¿ï¥€ï¥ï¥‚ï¥ƒæ¿ƒï¥„ï¥…è†¿è¾²æƒ±ï¥†ï¥‡è…¦ï¥ˆï¥‰å°¿ï¥Šï¥‹ï¥Œï¥ï¥Žï¥ï¥ï¥‘å«©è¨¥æ»ç´ï¥’ï¥“ï¥”ï¥•ï¥–ï¥—èƒ½ï¥˜ï¥™å°¼æ³¥åŒ¿æººå¤šèŒ¶ï¿½".split("");
    for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
    D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸¹äº¶ä½†å–®åœ˜å£‡å½–æ–·æ—¦æª€æ®µæ¹çŸ­ç«¯ç°žç·žè›‹è¢’é„²é›æ’»æ¾¾çºç–¸é”å•–åæ†ºæ“”æ›‡æ·¡æ¹›æ½­æ¾¹ç—°èƒè†½è•è¦ƒè«‡è­šéŒŸæ²“ç•“ç­”è¸éå”å ‚å¡˜å¹¢æˆ‡æ’žæ£ ç•¶ç³–èž³é»¨ä»£åžˆå®å¤§å°å²±å¸¶å¾…æˆ´æ“¡çŽ³è‡ºè¢‹è²¸éšŠé»›å®…å¾·æ‚³å€’åˆ€åˆ°åœ–å µå¡—å°Žå± å³¶å¶‹åº¦å¾’æ‚¼æŒ‘æŽ‰æ—æ¡ƒï¿½".split("");
    for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
    D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ£¹æ«‚æ·˜æ¸¡æ»”æ¿¤ç‡¾ç›œç¹ç¦±ç¨»è„è¦©è³­è·³è¹ˆé€ƒé€”é“éƒ½éé™¶éŸœæ¯’ç€†ç‰˜çŠ¢ç¨ç£ç¦¿ç¯¤çº›è®€å¢©æƒ‡æ•¦æ—½æš¾æ²Œç„žç‡‰è±šé “ä¹­çªä»å†¬å‡å‹•åŒæ†§æ±æ¡æ£Ÿæ´žæ½¼ç–¼çž³ç«¥èƒ´è‘£éŠ…å…œæ–—æœæž“ç—˜ç«‡è³ï¥šè±†é€—é ­å±¯è‡€èŠšéé¯éˆå¾—å¶æ©™ç‡ˆç™»ç­‰è—¤è¬„é„§é¨°å–‡æ‡¶ï¥›ç™©ç¾…ï¿½".split("");
    for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
    D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è˜¿èžºè£¸é‚ï¥œæ´›çƒ™çžçµ¡è½ï¥é…ªé§±ï¥žäº‚åµæ¬„æ¬’ç€¾çˆ›è˜­é¸žå‰Œè¾£åµæ“¥æ”¬æ¬–æ¿«ç±ƒçºœè—è¥¤è¦½æ‹‰è‡˜è Ÿå»Šæœ—æµªç‹¼ç…ç‘¯èž‚éƒžä¾†å´å¾ èŠå†·æŽ ç•¥äº®å€†å…©å‡‰æ¢æ¨‘ç²®ç²±ç³§è‰¯è«’è¼›é‡ä¾¶å„·å‹µå‘‚å»¬æ…®æˆ¾æ—…æ«šæ¿¾ç¤ªè—œè £é–­é©¢é©ªéº—é»ŽåŠ›æ›†æ­·ç€ç¤«è½¢é‚æ†æˆ€æ”£æ¼£ï¿½".split("");
    for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
    D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç…‰ç’‰ç·´è¯è“®è¼¦é€£éŠå†½åˆ—åŠ£æ´Œçƒˆè£‚å»‰æ–‚æ®®æ¿‚ç°¾çµä»¤ä¼¶å›¹ï¥Ÿå²ºå¶ºæ€œçŽ²ç¬­ç¾šç¿Žè†é€žéˆ´é›¶éˆé ˜é½¡ä¾‹æ¾§ç¦®é†´éš·å‹žï¥ æ’ˆæ“„æ«“æ½žç€˜çˆç›§è€è˜†è™œè·¯è¼…éœ²é­¯é·ºé¹µç¢Œç¥¿ç¶ è‰éŒ„é¹¿éº“è«–å£Ÿå¼„æœ§ç€§ç“ç± è¾å„¡ç€¨ç‰¢ç£Šè³‚è³šè³´é›·äº†åƒšå¯®å»–æ–™ç‡Žç™‚çž­èŠè“¼ï¿½".split("");
    for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
    D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼é¬§é¾å£˜å©å±¢æ¨“æ·šæ¼ç˜»ç´¯ç¸·è”žè¤¸é¤é™‹åŠ‰æ—’æŸ³æ¦´æµæºœç€ç‰ç‘ ç•™ç˜¤ç¡«è¬¬é¡žå…­æˆ®é™¸ä¾–å€«å´™æ·ªç¶¸è¼ªå¾‹æ…„æ —ï¥¡éš†å‹’è‚‹å‡œå‡Œæ¥žç¨œç¶¾è±é™µä¿šåˆ©åŽ˜åå”Žå±¥æ‚§æŽæ¢¨æµ¬çŠç‹¸ç†ç’ƒï¥¢ç—¢ç±¬ç½¹ç¾¸èŽ‰è£è£¡é‡Œé‡é›¢é¯‰åæ½¾ç‡ç’˜è—ºèºªéš£é±—éºŸæž—æ·‹ç³è‡¨éœ–ç ¬ï¿½".split("");
    for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
    D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç«‹ç¬ ç²’æ‘©ç‘ªç—²ç¢¼ç£¨é¦¬é­”éº»å¯žå¹•æ¼ è†œèŽ«é‚ˆä¸‡åå¨©å·’å½Žæ…¢æŒ½æ™©æ›¼æ»¿æ¼«ç£çžžè¬è”“è »è¼“é¥…é°»å”œæŠ¹æœ«æ²«èŒ‰è¥ªéºäº¡å¦„å¿˜å¿™æœ›ç¶²ç½”èŠ’èŒ«èŽ½è¼žé‚™åŸ‹å¦¹åª’å¯æ˜§æžšæ¢…æ¯ç…¤ç½µè²·è³£é‚é­…è„ˆè²Šé™Œé©€éº¥å­Ÿæ°“çŒ›ç›²ç›ŸèŒå†ªè¦“å…å†•å‹‰æ£‰æ²”çœ„çœ ç¶¿ç·¬é¢éºµæ»…ï¿½".split("");
    for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
    D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è”‘å†¥åå‘½æ˜Žæšæ¤§æºŸçš¿çž‘èŒ—è“‚èžŸé…©éŠ˜é³´è¢‚ä¾®å†’å‹Ÿå§†å¸½æ…•æ‘¸æ‘¹æš®æŸæ¨¡æ¯æ¯›ç‰Ÿç‰¡ç‘çœ¸çŸ›è€—èŠ¼èŒ…è¬€è¬¨è²Œæœ¨æ²ç‰§ç›®ç¦ç©†é¶©æ­¿æ²’å¤¢æœ¦è’™å¯å¢“å¦™å»Ÿææ˜´æ³æ¸ºçŒ«ç«—è‹—éŒ¨å‹™å·«æ†®æ‡‹æˆŠæ‹‡æ’«æ— æ¥™æ­¦æ¯‹ç„¡ç·ç•ç¹†èˆžèŒ‚è•ªèª£è²¿éœ§éµ¡å¢¨é»˜å€‘åˆŽå»å•æ–‡ï¿½".split("");
    for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
    D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±¶ç´Šç´‹èžèšŠé–€é›¯å‹¿æ²•ç‰©å‘³åªšå°¾åµ‹å½Œå¾®æœªæ¢¶æ¥£æ¸¼æ¹„çœ‰ç±³ç¾Žè–‡è¬Žè¿·é¡é»´å²·æ‚¶æ„æ†«æ•æ—»æ—¼æ°‘æ³¯çŽŸç‰ç·¡é–”å¯†èœœè¬å‰åšæ‹ææ’²æœ´æ¨¸æ³Šç€ç’žç®”ç²•ç¸›è†Šèˆ¶è–„è¿«é›¹é§ä¼´åŠåå›æ‹Œæ¬æ”€æ–‘æ§ƒæ³®æ½˜ç­ç•”ç˜¢ç›¤ç›¼ç£ç£»ç¤¬çµ†èˆ¬èŸ è¿”é ’é£¯å‹ƒæ‹”æ’¥æ¸¤æ½‘ï¿½".split("");
    for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
    D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç™¼è·‹é†±é‰¢é«®é­ƒå€£å‚åŠå¦¨å°¨å¹‡å½·æˆ¿æ”¾æ–¹æ—æ˜‰æž‹æ¦œæ»‚ç£…ç´¡è‚ªè†€èˆ«èŠ³è’¡èšŒè¨ªè¬—é‚¦é˜²é¾å€ä¿³ï¥£åŸ¹å¾˜æ‹œæŽ’æ¯æ¹ƒç„™ç›ƒèƒŒèƒšè£´è£µè¤™è³ è¼©é…é™ªä¼¯ä½°å¸›æŸæ ¢ç™½ç™¾é­„å¹¡æ¨Šç…©ç‡”ç•ªï¥¤ç¹è•ƒè—©é£œä¼ç­ç½°é–¥å‡¡å¸†æ¢µæ°¾æ±Žæ³›çŠ¯ç¯„èŒƒæ³•çºåƒ»åŠˆå£æ“˜æª—ç’§ç™–ï¿½".split("");
    for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
    D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢§è˜—é—¢éœ¹ï¥¥åžå¼è®Šè¾¨è¾¯é‚Šåˆ¥çž¥é±‰é¼ˆä¸™å€‚å…µå±›å¹·æ˜žæ˜ºæŸ„æ£…ç‚³ç”ç—…ç§‰ç«è¼§é¤ é¨ˆä¿å ¡å ±å¯¶æ™®æ­¥æ´‘æ¹ºæ½½ç¤ç”«è©è£œè¤“è­œè¼”ä¼åƒ•åŒåœå®“å¾©æœç¦è…¹èŒ¯è””è¤‡è¦†è¼¹è¼»é¦¥é°’æœ¬ä¹¶ä¿¸å¥‰å°å³¯å³°æ§æ£’çƒ½ç†¢ç«ç¸«è“¬èœ‚é€¢é‹’é³³ä¸ä»˜ä¿¯å‚…å‰–å‰¯å¦å’åŸ å¤«å©¦ï¿½".split("");
    for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
    D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å­šå­µå¯Œåºœï¥¦æ‰¶æ•·æ–§æµ®æº¥çˆ¶ç¬¦ç°¿ç¼¶è…è…‘è†šè‰€èŠ™èŽ©è¨ƒè² è³¦è³»èµ´è¶ºéƒ¨é‡œé˜œé™„é§™é³§åŒ—åˆ†å©å™´å¢³å¥”å¥®å¿¿æ†¤æ‰®æ˜æ±¾ç„šç›†ç²‰ç³žç´›èŠ¬è³é›°ï¥§ä½›å¼—å½¿æ‹‚å´©æœ‹æ£šç¡¼ç¹ƒéµ¬ä¸•å‚™åŒ•åŒªå‘å¦ƒå©¢åº‡æ‚²æ†Šæ‰‰æ‰¹æ–æž‡æ¦§æ¯”æ¯–æ¯—æ¯˜æ²¸ï¥¨çµç—ºç ’ç¢‘ç§•ç§˜ç²ƒç·‹ç¿¡è‚¥ï¿½".split("");
    for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
    D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è„¾è‡‚è²èœšè£¨èª¹è­¬è²»é„™éžé£›é¼»åš¬å¬ªå½¬æ–Œæª³æ®¯æµœæ¿±ç€•ç‰çŽ­è²§è³“é »æ†‘æ°·è˜é¨ä¹äº‹äº›ä»•ä¼ºä¼¼ä½¿ä¿Ÿåƒ¿å²å¸å”†å—£å››å£«å¥¢å¨‘å¯«å¯ºå°„å·³å¸«å¾™æ€æ¨æ–œæ–¯æŸ¶æŸ»æ¢­æ­»æ²™æ³—æ¸£ç€‰ç…ç ‚ç¤¾ç¥€ç¥ ç§ç¯©ç´—çµ²è‚†èˆèŽŽè“‘è›‡è£Ÿè©è©žè¬è³œèµ¦è¾­é‚ªé£¼é§Ÿéºå‰Šï¥©æœ”ï¥ªï¿½".split("");
    for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
    D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å‚˜åˆªå±±æ•£æ±•çŠç”£ç–ç®—è’œé…¸éœ°ä¹·æ’’æ®ºç…žè–©ä¸‰ï¥«æ‰æ£®æ¸—èŠŸè”˜è¡«æ·æ¾éˆ’é¢¯ä¸Šå‚·åƒå„Ÿå•†å–ªå˜—å­€å°™å³ å¸¸åºŠåº å»‚æƒ³æ¡‘æ©¡æ¹˜çˆ½ç‰€ç‹€ç›¸ç¥¥ç®±ç¿”è£³è§´è©³è±¡è³žéœœå¡žç’½è³½å—‡ï¥¬ç©¡ç´¢è‰²ç‰²ç”Ÿç”¥ï¥­ç¬™å¢…å£»å¶¼åºåº¶å¾æ•æŠ’æ¿æ•æš‘æ›™æ›¸æ –æ£²çŠ€ç‘žç­®çµ®ç·–ç½²ï¿½".split("");
    for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
    D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èƒ¥èˆ’è–¯è¥¿èª“é€é‹¤é»é¼ å¤•å¥­å¸­æƒœæ˜”æ™³æžæ±æ·…æ½ŸçŸ³ç¢©è“†é‡‹éŒ«ä»™åƒŠå…ˆå–„å¬‹å®£æ‰‡æ•¾æ—‹æ¸²ç…½çç‘„ç’‡ç’¿ç™¬ç¦ªç·šç¹•ç¾¨è…ºè†³èˆ¹è˜šèŸ¬è©µè·£é¸éŠ‘é¥é¥é®®å¨å±‘æ¥”æ³„æ´©æ¸«èˆŒè–›è¤»è¨­èªªé›ªé½§å‰¡æš¹æ®²çº–èŸ¾è´é–ƒé™æ”æ¶‰ç‡®ï¥®åŸŽå§“å®¬æ€§æƒºæˆæ˜Ÿæ™ŸçŒ©ç¹ç››çœç­¬ï¿½".split("");
    for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
    D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è–è²è…¥èª é†’ä¸–å‹¢æ­²æ´—ç¨…ç¬¹ç´°ï¥¯è²°å¬å˜¯å¡‘å®µå°å°‘å·¢æ‰€æŽƒæ”æ˜­æ¢³æ²¼æ¶ˆæº¯ç€Ÿç‚¤ç‡’ç”¦ç–ç–Žç˜™ç¬‘ç¯ ç°«ç´ ç´¹è”¬è•­è˜‡è¨´é€é¡é‚µéŠ·éŸ¶é¨·ä¿—å±¬æŸæ¶‘ç²ŸçºŒè¬–è´–é€Ÿå­«å·½æè“€éœé£¡çŽ‡å®‹æ‚šæ¾æ·žè¨Ÿèª¦é€é Œåˆ·ï¥°ç‘ç¢ŽéŽ–è¡°é‡—ä¿®å—å—½å›šåž‚å£½å«‚å®ˆå²«å³€å¸¥æ„ï¿½".split("");
    for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
    D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æˆæ‰‹æŽˆæœæ”¶æ•¸æ¨¹æ®Šæ°´æ´™æ¼±ç‡§ç‹©ç¸ç‡ç’²ç˜¦ç¡ç§€ç©—ç«ªç²¹ç¶ç¶¬ç¹¡ç¾žè„©èŒ±è’è“šè—ªè¢–èª°è®è¼¸é‚é‚ƒé…¬éŠ–éŠ¹éš‹éš§éš¨é›–éœ€é ˆé¦–é«“é¬šå”å¡¾å¤™å­°å®¿æ·‘æ½šç†Ÿç¡ç’¹è‚…è½å·¡å¾‡å¾ªæ‚æ—¬æ ’æ¥¯æ©“æ®‰æ´µæ·³ç£ç›¾çž¬ç­ç´”è„£èˆœè€è“´è•£è©¢è«„é†‡éŒžé †é¦´æˆŒè¡“è¿°é‰¥å´‡å´§ï¿½".split("");
    for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
    D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åµ©ç‘Ÿè†è¨æ¿•æ‹¾ç¿’è¤¶è¥²ä¸žä¹˜åƒ§å‹å‡æ‰¿æ˜‡ç¹©è …é™žä¾åŒ™å˜¶å§‹åª¤å°¸å±Žå±å¸‚å¼‘æƒæ–½æ˜¯æ™‚æž¾æŸ´çŒœçŸ¢ç¤ºç¿…è’”è“è¦–è©¦è©©è«¡è±•è±ºåŸ´å¯”å¼æ¯æ‹­æ¤æ®–æ¹œç†„ç¯’è•è­˜è»¾é£Ÿé£¾ä¼¸ä¾ä¿¡å‘»å¨ å®¸æ„¼æ–°æ™¨ç‡¼ç”³ç¥žç´³è…Žè‡£èŽ˜è–ªè—Žèœƒè¨Šèº«è¾›ï¥±è¿…å¤±å®¤å¯¦æ‚‰å¯©å°‹å¿ƒæ²ï¿½".split("");
    for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
    D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¥²æ·±ç€‹ç”šèŠ¯è«¶ä»€åï¥³é›™æ°äºžä¿„å…’å•žå¨¥å³¨æˆ‘ç‰™èŠ½èŽªè›¾è¡™è¨é˜¿é›…é¤“é´‰éµå Šå²³å¶½å¹„æƒ¡æ„•æ¡æ¨‚æ¸¥é„‚é”é¡Žé°é½·å®‰å²¸æŒ‰æ™æ¡ˆçœ¼é›éžé¡”é®Ÿæ–¡è¬è»‹é–¼å”µå²©å·–åºµæš—ç™Œè´é—‡å£“æŠ¼ç‹Žé´¨ä»°å¤®æ€æ˜»æ®ƒç§§é´¦åŽ“å“€åŸƒå´–æ„›æ›–æ¶¯ç¢è‰¾éš˜é„åŽ„æ‰¼æŽ–æ¶²ç¸Šè…‹é¡ï¿½".split("");
    for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
    D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ«»ç½Œé¶¯é¸šä¹Ÿå€»å†¶å¤œæƒ¹æ¶æ¤°çˆºè€¶ï¥´é‡Žå¼±ï¥µï¥¶ç´„è‹¥è‘¯è’»è—¥èºï¥·ä½¯ï¥¸ï¥¹å£¤å­ƒæ™æšæ”˜æ•­æš˜ï¥ºæ¥Šæ¨£æ´‹ç€ç…¬ç—’ç˜ç¦³ç©°ï¥»ç¾Šï¥¼è¥„ï¥½è®“é‡€é™½ï¥¾é¤Šåœ„å¾¡æ–¼æ¼ç˜€ç¦¦èªžé¦­é­šé½¬å„„æ†¶æŠ‘æªè‡†åƒå °å½¦ç„‰è¨€è«ºå­¼è˜–ä¿ºå„¼åš´å¥„æŽ©æ·¹å¶ªæ¥­å††äºˆä½™ï¥¿ï¦€ï¦å¦‚ï¦‚ï¿½".split("");
    for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
    D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¦ƒæ­Ÿæ±ï¦„ç’µç¤–ï¦…èˆ‡è‰…èŒ¹è¼¿è½ï¦†é¤˜ï¦‡ï¦ˆï¦‰äº¦ï¦ŠåŸŸå½¹æ˜“ï¦‹ï¦Œç–«ç¹¹è­¯ï¦é€†é©›åš¥å §å§¸å¨Ÿå®´ï¦Žå»¶ï¦ï¦ææŒ»ï¦‘æ¤½æ²‡æ²¿æ¶Žæ¶“æ·µæ¼”ï¦’çƒŸç„¶ç…™ï¦“ç‡ƒç‡•ï¦”ç¡ç¡¯ï¦•ç­µç·£ï¦–ç¸¯ï¦—è¡è»Ÿï¦˜ï¦™ï¦šé‰›ï¦›é³¶ï¦œï¦ï¦žæ‚…æ¶…ï¦Ÿç†±ï¦ ï¦¡é–±åŽ­ï¦¢ï¦£ï¦¤æŸ“ï¦¥ç‚Žç„°ç°è‰¶è‹’ï¿½".split("");
    for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
    D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¦¦é–»é«¥é¹½æ›„ï¦§ç‡è‘‰ï¦¨ï¦©å¡‹ï¦ªï¦«å¶¸å½±ï¦¬æ˜ æšŽæ¥¹æ¦®æ°¸æ³³æ¸¶æ½æ¿šç€›ç€¯ç…ç‡Ÿç°ï¦­ç‘›ï¦®ç“”ç›ˆç©Žçº“ï¦¯ï¦°è‹±è© è¿Žï¦±éˆï¦²éœ™ï¦³ï¦´ä¹‚å€ªï¦µåˆˆå¡æ›³æ±­æ¿ŠçŒŠç¿ç©¢èŠ®è—è˜‚ï¦¶è£”è©£è­½è±«ï¦·éŠ³ï¦¸éœ“é äº”ä¼ä¿‰å‚²åˆå¾å³å—šå¡¢å¢ºå¥§å¨›å¯¤æ‚Ÿï¦¹æ‡Šæ•–æ—¿æ™¤æ¢§æ±šæ¾³ï¿½".split("");
    for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
    D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çƒç†¬ç’ç­½èœˆèª¤é°²é¼‡å±‹æ²ƒç„çŽ‰éˆºæº«ç‘¥ç˜Ÿç©©ç¸•è˜Šå…€å£…æ“ç“®ç”•ç™°ç¿é‚•é›é¥”æ¸¦ç“¦çª©çªªè‡¥è›™è¸è¨›å©‰å®Œå®›æ¢¡æ¤€æµ£çŽ©ç“ç¬ç¢—ç·©ç¿«è„˜è…•èŽžè±Œé˜®é ‘æ›°å¾€æ—ºæž‰æ±ªçŽ‹å€­å¨ƒæ­ªçŸ®å¤–åµ¬å·çŒ¥ç•ï¦ºï¦»åƒ¥å‡¹å ¯å¤­å¦–å§šå¯¥ï¦¼ï¦½å¶¢æ‹—æ–æ’“æ“¾ï¦¾æ›œï¦¿æ©ˆï§€ç‡¿ç‘¤ï§ï¿½".split("");
    for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
    D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çªˆçª¯ç¹‡ç¹žè€€è…°ï§‚èŸ¯è¦è¬ é™ï§ƒé‚€é¥’æ…¾æ¬²æµ´ç¸Ÿè¤¥è¾±ä¿‘å‚­å†—å‹‡åŸ‡å¢‰å®¹åº¸æ…‚æ¦•æ¶Œæ¹§æº¶ç†”ç‘¢ç”¨ç”¬è³èŒ¸è“‰è¸ŠéŽ”éžï§„äºŽä½‘å¶å„ªåˆå‹å³å®‡å¯“å°¤æ„šæ†‚æ—´ç‰›çŽ—ç‘€ç›‚ç¥ç¦‘ç¦¹ç´†ç¾½èŠ‹è—•è™žè¿‚é‡éƒµé‡ªéš…é›¨é›©å‹–å½§æ—­æ˜±æ ¯ç…œç¨¶éƒé Šäº‘ï§…æ©’æ®žæ¾ç†‰è€˜èŠ¸è•“ï¿½".split("");
    for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
    D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é‹éš•é›²éŸ»è”šé¬±äºç†Šé›„å…ƒåŽŸå“¡åœ“åœ’åž£åª›å«„å¯ƒæ€¨æ„¿æ´æ²…æ´¹æ¹²æºçˆ°çŒ¿ç‘—è‹‘è¢è½…é ï§†é™¢é¡˜é´›æœˆè¶Šé‰žä½å‰åƒžå±åœå§”å¨å°‰æ…°æšæ¸­çˆ²ç‘‹ç·¯èƒƒèŽè‘¦è”¿èŸè¡›è¤˜è¬‚é•éŸ‹é­ä¹³ä¾‘å„’å…ªï§‡å”¯å–©å­ºå®¥å¹¼å¹½åº¾æ‚ æƒŸæ„ˆæ„‰æ„æ”¸æœ‰ï§ˆæŸ”æŸšï§‰æ¥¡æ¥¢æ²¹æ´§ï§Šæ¸¸ï§‹ï¿½".split("");
    for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
    D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿¡çŒ¶çŒ·ï§Œç‘œç”±ï§ç™’ï§Žï§ç¶­è‡¾è¸è£•èª˜è«›è«­è¸°è¹‚éŠé€¾éºé…‰é‡‰é®ï§ï§‘å ‰ï§’æ¯“è‚‰è‚²ï§“ï§”å…å¥«å°¹ï§•ï§–æ½¤çŽ§èƒ¤è´‡ï§—éˆ—é–ï§˜ï§™ï§šï§›è¿æˆŽç€œçµ¨èžï§œåž æ©æ…‡æ®·èª¾éŠ€éš±ä¹™åŸæ·«è”­é™°éŸ³é£®æ–æ³£é‚‘å‡æ‡‰è†ºé·¹ä¾å€šå„€å®œæ„æ‡¿æ“¬æ¤…æ¯…ç–‘çŸ£ç¾©è‰¤è–èŸ»è¡£èª¼ï¿½".split("");
    for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
    D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­°é†«äºŒä»¥ä¼Šï§ï§žå¤·å§¨ï§Ÿå·²å¼›å½›æ€¡ï§ ï§¡ï§¢ï§£çˆ¾ç¥ï§¤ç•°ç—ï§¥ç§»ï§¦è€Œè€³è‚„è‹¡è‘ï§§ï§¨è²½è²³é‚‡ï§©ï§ªé£´é¤Œï§«ï§¬ç€·ç›Šç¿Šç¿Œç¿¼è¬šäººä»åˆƒå°ï§­å’½å› å§»å¯…å¼•å¿æ¹®ï§®ï§¯çµªèŒµï§°èš“èªï§±é­é·ï§²ï§³ä¸€ä½šä½¾å£¹æ—¥æº¢é€¸éŽ°é¦¹ä»»å£¬å¦Šå§™æï§´ï§µç¨”ï§¶èè³ƒå…¥å„ï¿½".split("");
    for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
    D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï§·ï§¸ï§¹ä»å‰©å­•èŠ¿ä»”åˆºå’¨å§‰å§¿å­å­—å­œæ£æ…ˆæ»‹ç‚™ç…®çŽ†ç“·ç–µç£ç´«è€…è‡ªèŒ¨è”—è—‰è«®è³‡é›Œä½œå‹ºåš¼æ–«æ˜¨ç¼ç‚¸çˆµç¶½èŠé…Œé›€éµ²å­±æ£§æ®˜æ½ºç›žå²‘æš«æ½›ç®´ç°ªè ¶é›œä¸ˆä»—åŒ å ´å¢»å£¯å¥¬å°‡å¸³åº„å¼µæŽŒæš²æ–æ¨Ÿæª£æ¬Œæ¼¿ç‰†ï§ºçç’‹ç« ç²§è…¸è‡Ÿè‡§èŽŠè‘¬è”£è–”è—è£è´“é†¬é•·ï¿½".split("");
    for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
    D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éšœå†å“‰åœ¨å®°æ‰ææ ½æ¢“æ¸½æ»“ç½ç¸¡è£è²¡è¼‰é½‹é½Žçˆ­ç®è«éŒšä½‡ä½Žå„²å’€å§åº•æŠµæµæ¥®æ¨—æ²®æ¸šç‹™çŒªç–½ç®¸ç´µè‹§è¹è‘—è—·è©›è²¯èº‡é€™é‚¸é›Žé½Ÿå‹£åŠå«¡å¯‚æ‘˜æ•µæ»´ç‹„ï§»çš„ç©ç¬›ç±ç¸¾ç¿Ÿè»è¬«è³Šèµ¤è·¡è¹Ÿè¿ªè¿¹é©é‘ä½ƒä½ºå‚³å…¨å…¸å‰å‰ªå¡¡å¡¼å¥ å°ˆå±•å»›æ‚›æˆ°æ “æ®¿æ°ˆæ¾±ï¿½".split("");
    for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
    D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç…Žç ç”°ç”¸ç•‘ç™²ç­Œç®‹ç®­ç¯†çºè©®è¼¾è½‰éˆ¿éŠ“éŒ¢é«é›»é¡šé¡«é¤žåˆ‡æˆªæŠ˜æµ™ç™¤ç«Šç¯€çµ¶å å²¾åº—æ¼¸ç‚¹ç²˜éœ‘é®Žé»žæŽ¥æ‘ºè¶ä¸äº•äº­åœåµå‘ˆå§ƒå®šå¹€åº­å»·å¾æƒ…æŒºæ”¿æ•´æ—Œæ™¶æ™¸æŸ¾æ¥¨æª‰æ­£æ±€æ·€æ·¨æ¸Ÿæ¹žç€žç‚¡çŽŽç½ç”ºç›ç¢‡ç¦Žç¨‹ç©½ç²¾ç¶Žè‰‡è¨‚è«ªè²žé„­é…Šé‡˜é‰¦é‹ŒéŒ éœ†é–ï¿½".split("");
    for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
    D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éœé ‚é¼Žåˆ¶åŠ‘å•¼å ¤å¸å¼Ÿæ‚Œææ¢¯æ¿Ÿç¥­ç¬¬è‡è–ºè£½è«¸è¹„é†é™¤éš›éœ½é¡Œé½Šä¿Žå…†å‡‹åŠ©å˜²å¼”å½«æŽªæ“æ—©æ™æ›ºæ›¹æœæ¢æ£—æ§½æ¼•æ½®ç…§ç‡¥çˆªç’ªçœºç¥–ç¥šç§Ÿç¨ çª•ç²—ç³Ÿçµ„ç¹°è‚‡è—»èš¤è©”èª¿è¶™èºé€ é­é‡£é˜»é›•é³¥æ—ç°‡è¶³éƒå­˜å°Šå’æ‹™çŒå€§å®—å¾žæ‚°æ…«æ£•æ·™ç®ç¨®çµ‚ç¶œç¸±è…«ï¿½".split("");
    for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
    D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¸ªè¸µé¾é˜ä½åå·¦åº§æŒ«ç½ªä¸»ä½ä¾åšå§èƒ„å‘ªå‘¨å—¾å¥å®™å·žå»šæ™æœ±æŸ±æ ªæ³¨æ´²æ¹Šæ¾ç‚·ç ç–‡ç±Œç´‚ç´¬ç¶¢èˆŸè››è¨»èª…èµ°èºŠè¼³é€±é…Žé…’é‘„é§ç«¹ç²¥ä¿Šå„å‡†åŸˆå¯¯å³»æ™™æ¨½æµšæº–æ¿¬ç„Œç•¯ç«£è ¢é€¡éµé›‹é§¿èŒä¸­ä»²è¡†é‡å½æ«›æ¥«æ±è‘ºå¢žæ†Žæ›¾æ‹¯çƒç”‘ç—‡ç¹’è’¸è­‰è´ˆä¹‹åªï¿½".split("");
    for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
    D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å’«åœ°å€å¿—æŒæŒ‡æ‘¯æ”¯æ—¨æ™ºæžæž³æ­¢æ± æ²šæ¼¬çŸ¥ç ¥ç¥‰ç¥—ç´™è‚¢è„‚è‡³èŠèŠ·èœ˜èªŒï§¼è´„è¶¾é²ç›´ç¨™ç¨·ç¹”è·å”‡å—”å¡µæŒ¯æ¢æ™‰æ™‹æ¡­æ¦›æ®„æ´¥æº±çç‘¨ç’¡ç•›ç–¹ç›¡çœžçž‹ç§¦ç¸‰ç¸è‡»è”¯è¢—è¨ºè³‘è»«è¾°é€²éŽ­é™£é™³éœ‡ä¾„å±å§ªå«‰å¸™æ¡Žç“†ç–¾ç§©çª’è†£è›­è³ªè·Œè¿­æ–Ÿæœ•ï§½åŸ·æ½—ç·è¼¯ï¿½".split("");
    for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
    D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¶é›†å¾µæ‡²æ¾„ä¸”ä¾˜å€Ÿå‰å—Ÿåµ¯å·®æ¬¡æ­¤ç£‹ç®šï§¾è¹‰è»Šé®æ‰æ¾ç€çª„éŒ¯é‘¿é½ªæ’°æ¾¯ç‡¦ç’¨ç“šç«„ç°’çº‚ç²²çº˜è®šè´Šé‘½é¤é¥Œåˆ¹å¯Ÿæ“¦æœ­ç´®åƒ­åƒå¡¹æ…˜æ…™æ‡ºæ–¬ç«™è®’è®–å€‰å€¡å‰µå”±å¨¼å» å½°æ„´æ•žæ˜Œæ˜¶æš¢æ§æ»„æ¼²çŒ–ç˜¡çª“è„¹è‰™è–è’¼å‚µåŸ°å¯€å¯¨å½©æŽ¡ç ¦ç¶µèœè”¡é‡‡é‡µå†ŠæŸµç­–ï¿½".split("");
    for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
    D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è²¬å‡„å¦»æ‚½è™•å€œï§¿å‰”å°ºæ…½æˆšæ‹“æ“²æ–¥æ»Œç˜ è„Šè¹ é™Ÿéš»ä»Ÿåƒå–˜å¤©å·æ“…æ³‰æ·ºçŽ”ç©¿èˆ›è–¦è³¤è¸é·é‡§é—¡é˜¡éŸ†å‡¸å“²å–†å¾¹æ’¤æ¾ˆç¶´è¼Ÿè½éµåƒ‰å°–æ²¾æ·»ç”›çž»ç°½ç±¤è©¹è«‚å žå¦¾å¸–æ·ç‰’ç–Šç«è«œè²¼è¼’å»³æ™´æ·¸è½èè«‹é‘é¯–ï¨€å‰ƒæ›¿æ¶•æ»¯ç· è«¦é€®éžé«”åˆå‰¿å“¨æ†”æŠ„æ‹›æ¢¢ï¿½".split("");
    for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
    D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¤’æ¥šæ¨µç‚’ç„¦ç¡ç¤ç¤Žç§’ç¨è‚–è‰¸è‹•è‰è•‰è²‚è¶…é…¢é†‹é†®ä¿ƒå›‘ç‡­çŸ—èœ€è§¸å¯¸å¿–æ‘é‚¨å¢å¡šå¯µæ‚¤æ†æ‘ ç¸½è°è”¥éŠƒæ’®å‚¬å´”æœ€å¢œæŠ½æŽ¨æ¤Žæ¥¸æ¨žæ¹«çšºç§‹èŠ»è©è«è¶¨è¿½é„’é…‹é†œéŒéŒ˜éŽšé››é¨¶é°ä¸‘ç•œç¥ç«ºç­‘ç¯‰ç¸®è“„è¹™è¹´è»¸é€æ˜¥æ¤¿ç‘ƒå‡ºæœ®é»œå……å¿ æ²–èŸ²è¡è¡·æ‚´è†µèƒï¿½".split("");
    for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
    D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è´…å–å¹å˜´å¨¶å°±ç‚Šç¿ èšè„†è‡­è¶£é†‰é©Ÿé·²å´ä»„åŽ æƒ»æ¸¬å±¤ä¾ˆå€¤å—¤å³™å¹Ÿæ¥æ¢”æ²»æ·„ç†¾ç—”ç—´ç™¡ç¨šç©‰ç·‡ç·»ç½®è‡´èš©è¼œé›‰é¦³é½’å‰‡å‹…é£­è¦ªä¸ƒæŸ’æ¼†ä¾µå¯¢æž•æ²ˆæµ¸ç›ç §é‡é¼èŸ„ç§¤ç¨±å¿«ä»–å’¤å”¾å¢®å¦¥æƒ°æ‰“æ‹–æœ¶æ¥•èˆµé™€é¦±é§å€¬å“å•„å¼ï¨æ‰˜ï¨‚æ“¢æ™«æŸæ¿æ¿¯ç¢ç¸è¨—ï¿½".split("");
    for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
    D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¸å‘‘å˜†å¦å½ˆæ†šæ­Žç˜ç‚­ç¶»èª•å¥ªè„«æŽ¢çœˆè€½è²ªå¡”æ­æ¦»å®•å¸‘æ¹¯ï¨ƒè•©å…Œå°å¤ªæ€ æ…‹æ®†æ±°æ³°ç¬žèƒŽè‹”è·†é‚°é¢±ï¨„æ“‡æ¾¤æ’‘æ”„å…ŽååœŸè¨Žæ…Ÿæ¡¶ï¨…ç—›ç­’çµ±é€šå †æ§Œè…¿è¤ªé€€é ¹å¸å¥—å¦¬æŠ•é€é¬ªæ…ç‰¹é—–å¡å©†å·´æŠŠæ’­æ“ºæ·æ³¢æ´¾çˆ¬ç¶ç ´ç½·èŠ­è·›é —åˆ¤å‚æ¿ç‰ˆç“£è²©è¾¦éˆ‘ï¿½".split("");
    for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
    D[248] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é˜ªå…«å­æŒä½©å”„æ‚–æ•—æ²›æµ¿ç‰Œç‹½ç¨—è¦‡è²å½­æ¾Žçƒ¹è†¨æ„Žä¾¿åæ‰ç‰‡ç¯‡ç·¨ç¿©ééž­é¨™è²¶åªå¹³æž°èè©•å å¬–å¹£å»¢å¼Šæ–ƒè‚ºè”½é–‰é™›ä½ˆåŒ…åŒåŒå’†å“ºåœƒå¸ƒæ€–æŠ›æŠ±æ•ï¨†æ³¡æµ¦ç–±ç ²èƒžè„¯è‹žè‘¡è’²è¢è¤’é€‹é‹ªé£½é®‘å¹…æš´æ›ç€‘çˆ†ï¨‡ä¿µå‰½å½ªæ…“æ“æ¨™æ¼‚ç“¢ç¥¨è¡¨è±¹é£‡é£„é©ƒï¿½".split("");
    for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
    D[249] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å“ç¨Ÿæ¥“è«·è±Šé¢¨é¦®å½¼æŠ«ç–²çš®è¢«é¿é™‚åŒ¹å¼¼å¿…æ³ŒçŒç•¢ç–‹ç­†è‹¾é¦ä¹é€¼ä¸‹ä½•åŽ¦å¤å»ˆæ˜°æ²³ç‘•è·è¦è³€ééœžé°•å£‘å­¸è™è¬”é¶´å¯’æ¨æ‚æ—±æ±—æ¼¢æ¾£ç€šç½•ç¿°é–‘é–’é™éŸ“å‰²è½„å‡½å«å’¸å•£å–Šæª»æ¶µç·˜è‰¦éŠœé™·é¹¹åˆå“ˆç›’è›¤é–¤é—”é™œäº¢ä¼‰å§®å«¦å··æ’æŠ—æ­æ¡æ²†æ¸¯ç¼¸è‚›èˆªï¿½".split("");
    for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
    D[250] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¨ˆï¨‰é …äº¥å•å’³åž“å¥šå­©å®³æ‡ˆæ¥·æµ·ç€£èŸ¹è§£è©²è«§é‚‚é§­éª¸åŠ¾æ ¸å€–å¹¸æè‡è¡Œäº«å‘åš®ç¦é„•éŸ¿é¤‰é¥—é¦™å™“å¢Ÿè™›è¨±æ†²æ«¶ç»è»’æ­‡éšªé©—å¥•çˆ€èµ«é©ä¿”å³´å¼¦æ‡¸æ™›æ³«ç‚«çŽ„çŽ¹ç¾çœ©ççµƒçµ¢ç¸£èˆ·è¡’ï¨Šè³¢é‰‰é¡¯å­‘ç©´è¡€é å«Œä¿ å”å¤¾å³½æŒ¾æµ¹ç‹¹è„…è„‡èŽ¢é‹é °äº¨å…„åˆ‘åž‹ï¿½".split("");
    for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
    D[251] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å½¢æ³‚æ»Žç€…çç‚¯ç†’ç©ç‘©èŠèž¢è¡¡é€ˆé‚¢éŽ£é¦¨å…®å½—æƒ æ…§æš³è•™è¹Šé†¯éž‹ä¹Žäº’å‘¼å£•å£ºå¥½å²µå¼§æˆ¶æ‰ˆæ˜Šæ™§æ¯«æµ©æ·æ¹–æ»¸æ¾”æ¿ æ¿©çç‹ç¥ç‘šç“ çš“ç¥œç³Šç¸žèƒ¡èŠ¦è‘«è’¿è™Žè™Ÿè´è­·è±ªéŽ¬é €é¡¥æƒ‘æˆ–é…·å©šæ˜æ··æ¸¾ç¿é­‚å¿½æƒšç¬å“„å¼˜æ±žæ³“æ´ªçƒ˜ç´…è™¹è¨Œé´»åŒ–å’Œå¬…æ¨ºç«ç•µï¿½".split("");
    for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
    D[252] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦ç¦¾èŠ±è¯è©±è­è²¨é´ï¨‹æ“´æ”«ç¢ºç¢»ç©«ä¸¸å–šå¥å®¦å¹»æ‚£æ›æ­¡æ™¥æ¡“æ¸™ç…¥ç’°ç´ˆé‚„é©©é°¥æ´»æ»‘çŒ¾è±é—Šå‡°å¹Œå¾¨ææƒ¶æ„°æ…Œæ™ƒæ™„æ¦¥æ³æ¹Ÿæ»‰æ½¢ç…Œç’œçš‡ç¯ç°§è’è—é‘éšé»ƒåŒ¯å›žå»»å¾Šæ¢æ‚”æ‡·æ™¦æœƒæªœæ·®æ¾®ç°çªç¹ªè†¾èŒ´è›”èª¨è³„åŠƒç²å®–æ©«é„å“®åš†å­æ•ˆæ–…æ›‰æ¢Ÿæ¶æ·†ï¿½".split("");
    for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
    D[253] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çˆ»è‚´é…µé©ä¾¯å€™åŽšåŽå¼å–‰å—…å¸¿å¾Œæœ½ç…¦çé€…å‹›å‹³å¡¤å£Žç„„ç†ç‡»è–°è¨“æšˆè–¨å–§æš„ç…Šè±å‰å–™æ¯å½™å¾½æ®æš‰ç…‡è«±è¼éº¾ä¼‘æºçƒ‹ç•¦è™§æ¤è­Žé·¸å…‡å‡¶åŒˆæ´¶èƒ¸é»‘æ˜•æ¬£ç‚˜ç—•åƒå±¹ç´‡è¨–æ¬ æ¬½æ­†å¸æ°æ´½ç¿•èˆˆåƒ–å‡žå–œå™«å›å§¬å¬‰å¸Œæ†™æ†˜æˆ±æ™žæ›¦ç†™ç†¹ç†ºçŠ§ç¦§ç¨€ç¾²è©°ï¿½".split("");
    for(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}
    return {"enc": e, "dec": d }; })();
    cptable[950] = (function(){ var d = [], e = {}, D = [], j;
    D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
    D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã€€ï¼Œã€ã€‚ï¼Žâ€§ï¼›ï¼šï¼Ÿï¼ï¸°â€¦â€¥ï¹ï¹‘ï¹’Â·ï¹”ï¹•ï¹–ï¹—ï½œâ€“ï¸±â€”ï¸³â•´ï¸´ï¹ï¼ˆï¼‰ï¸µï¸¶ï½›ï½ï¸·ï¸¸ã€”ã€•ï¸¹ï¸ºã€ã€‘ï¸»ï¸¼ã€Šã€‹ï¸½ï¸¾ã€ˆã€‰ï¸¿ï¹€ã€Œã€ï¹ï¹‚ã€Žã€ï¹ƒï¹„ï¹™ï¹šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¹›ï¹œï¹ï¹žâ€˜â€™â€œâ€ã€ã€žâ€µâ€²ï¼ƒï¼†ï¼Šâ€»Â§ã€ƒâ—‹â—â–³â–²â—Žâ˜†â˜…â—‡â—†â–¡â– â–½â–¼ãŠ£â„…Â¯ï¿£ï¼¿Ëï¹‰ï¹Šï¹ï¹Žï¹‹ï¹Œï¹Ÿï¹ ï¹¡ï¼‹ï¼Ã—Ã·Â±âˆšï¼œï¼žï¼â‰¦â‰§â‰ âˆžâ‰’â‰¡ï¹¢ï¹£ï¹¤ï¹¥ï¹¦ï½žâˆ©âˆªâŠ¥âˆ âˆŸâŠ¿ã’ã‘âˆ«âˆ®âˆµâˆ´â™€â™‚âŠ•âŠ™â†‘â†“â†â†’â†–â†—â†™â†˜âˆ¥âˆ£ï¼ï¿½".split("");
    for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
    D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼¼âˆ•ï¹¨ï¼„ï¿¥ã€’ï¿ ï¿¡ï¼…ï¼ â„ƒâ„‰ï¹©ï¹ªï¹«ã•ãŽœãŽãŽžãŽãŽ¡ãŽŽãŽã„Â°å…™å…›å…žå…å…¡å…£å—§ç“©ç³Žâ–â–‚â–ƒâ–„â–…â–†â–‡â–ˆâ–â–Žâ–â–Œâ–‹â–Šâ–‰â”¼â”´â”¬â”¤â”œâ–”â”€â”‚â–•â”Œâ”â””â”˜â•­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â•®â•°â•¯â•â•žâ•ªâ•¡â—¢â—£â—¥â—¤â•±â•²â•³ï¼ï¼‘ï¼’ï¼“ï¼”ï¼•ï¼–ï¼—ï¼˜ï¼™â… â…¡â…¢â…£â…¤â…¥â…¦â…§â…¨â…©ã€¡ã€¢ã€£ã€¤ã€¥ã€¦ã€§ã€¨ã€©åå„å…ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï½ï½‚ï½ƒï½„ï½…ï½†ï½‡ï½ˆï½‰ï½Šï½‹ï½Œï½ï½Žï½ï½ï½‘ï½’ï½“ï½”ï½•ï½–ï¿½".split("");
    for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
    D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï½—ï½˜ï½™ï½šÎ‘Î’Î“Î”Î•Î–Î—Î˜Î™ÎšÎ›ÎœÎÎžÎŸÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿Ï€ÏÏƒÏ„Ï…Ï†Ï‡ÏˆÏ‰ã„…ã„†ã„‡ã„ˆã„‰ã„Šã„‹ã„Œã„ã„Žã„ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã„ã„‘ã„’ã„“ã„”ã„•ã„–ã„—ã„˜ã„™ã„šã„›ã„œã„ã„žã„Ÿã„ ã„¡ã„¢ã„£ã„¤ã„¥ã„¦ã„§ã„¨ã„©Ë™Ë‰ËŠË‡Ë‹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â‚¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
    D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸€ä¹™ä¸ä¸ƒä¹ƒä¹äº†äºŒäººå„¿å…¥å…«å‡ åˆ€åˆåŠ›åŒ•ååœåˆä¸‰ä¸‹ä¸ˆä¸Šä¸«ä¸¸å‡¡ä¹…ä¹ˆä¹Ÿä¹žäºŽäº¡å…€åˆƒå‹ºåƒå‰å£åœŸå£«å¤•å¤§å¥³å­å­‘å­“å¯¸å°å°¢å°¸å±±å·å·¥å·±å·²å·³å·¾å¹²å»¾å¼‹å¼“æ‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸‘ä¸ä¸ä¸­ä¸°ä¸¹ä¹‹å°¹äºˆäº‘äº•äº’äº”äº¢ä»ä»€ä»ƒä»†ä»‡ä»ä»Šä»‹ä»„å…ƒå…å…§å…­å…®å…¬å†—å‡¶åˆ†åˆ‡åˆˆå‹»å‹¾å‹¿åŒ–åŒ¹åˆå‡å…åžåŽ„å‹åŠåå£¬å¤©å¤«å¤ªå¤­å­”å°‘å°¤å°ºå±¯å·´å¹»å»¿å¼”å¼•å¿ƒæˆˆæˆ¶æ‰‹æ‰Žæ”¯æ–‡æ–—æ–¤æ–¹æ—¥æ›°æœˆæœ¨æ¬ æ­¢æ­¹æ¯‹æ¯”æ¯›æ°æ°´ç«çˆªçˆ¶çˆ»ç‰‡ç‰™ç‰›çŠ¬çŽ‹ä¸™ï¿½".split("");
    for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
    D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸–ä¸•ä¸”ä¸˜ä¸»ä¹ä¹ä¹Žä»¥ä»˜ä»”ä»•ä»–ä»—ä»£ä»¤ä»™ä»žå……å…„å†‰å†Šå†¬å‡¹å‡ºå‡¸åˆŠåŠ åŠŸåŒ…åŒ†åŒ—åŒä»ŸåŠå‰å¡å å¯å®åŽ»å¯å¤å³å¬å®å©å¨å¼å¸åµå«å¦åªå²å±å°å¥å­å»å››å›šå¤–ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¤®å¤±å¥´å¥¶å­•å®ƒå°¼å·¨å·§å·¦å¸‚å¸ƒå¹³å¹¼å¼å¼˜å¼—å¿…æˆŠæ‰“æ‰”æ‰’æ‰‘æ–¥æ—¦æœ®æœ¬æœªæœ«æœ­æ­£æ¯æ°‘æ°æ°¸æ±æ±€æ°¾çŠ¯çŽ„çŽ‰ç“œç“¦ç”˜ç”Ÿç”¨ç”©ç”°ç”±ç”²ç”³ç–‹ç™½çš®çš¿ç›®çŸ›çŸ¢çŸ³ç¤ºç¦¾ç©´ç«‹ä¸žä¸Ÿä¹’ä¹“ä¹©äº™äº¤äº¦äº¥ä»¿ä¼‰ä¼™ä¼Šä¼•ä¼ä¼ä¼‘ä¼ä»²ä»¶ä»»ä»°ä»³ä»½ä¼ä¼‹å…‰å…‡å…†å…ˆå…¨ï¿½".split("");
    for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
    D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å…±å†å†°åˆ—åˆ‘åˆ’åˆŽåˆ–åŠ£åŒˆåŒ¡åŒ å°å±å‰ååŒåŠååå‹å„å‘ååˆåƒåŽå†å’å› å›žå›åœ³åœ°åœ¨åœ­åœ¬åœ¯åœ©å¤™å¤šå¤·å¤¸å¦„å¥¸å¦ƒå¥½å¥¹å¦‚å¦å­—å­˜å®‡å®ˆå®…å®‰å¯ºå°–å±¹å·žå¸†å¹¶å¹´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¼å¼›å¿™å¿–æˆŽæˆŒæˆæˆæ‰£æ‰›æ‰˜æ”¶æ—©æ—¨æ—¬æ—­æ›²æ›³æœ‰æœ½æœ´æœ±æœµæ¬¡æ­¤æ­»æ°–æ±æ±—æ±™æ±Ÿæ± æ±æ±•æ±¡æ±›æ±æ±Žç°ç‰Ÿç‰ç™¾ç«¹ç±³ç³¸ç¼¶ç¾Šç¾½è€è€ƒè€Œè€’è€³è¿è‚‰è‚‹è‚Œè‡£è‡ªè‡³è‡¼èˆŒèˆ›èˆŸè‰®è‰²è‰¾è™«è¡€è¡Œè¡£è¥¿é˜¡ä¸²äº¨ä½ä½ä½‡ä½—ä½žä¼´ä½›ä½•ä¼°ä½ä½‘ä¼½ä¼ºä¼¸ä½ƒä½”ä¼¼ä½†ä½£ï¿½".split("");
    for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
    D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä½œä½ ä¼¯ä½Žä¼¶ä½™ä½ä½ˆä½šå…Œå…‹å…å…µå†¶å†·åˆ¥åˆ¤åˆ©åˆªåˆ¨åŠ«åŠ©åŠªåŠ¬åŒ£å³åµåå­åžå¾å¦å‘Žå§å‘†å‘ƒå³å‘ˆå‘‚å›å©å‘Šå¹å»å¸å®åµå¶å å¼å‘€å±å«åŸå¬å›ªå›°å›¤å›«åŠå‘å€åï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å‡åŽåœ¾åååœ»å£¯å¤¾å¦å¦’å¦¨å¦žå¦£å¦™å¦–å¦å¦¤å¦“å¦Šå¦¥å­å­œå­šå­›å®Œå®‹å®å°¬å±€å±å°¿å°¾å²å²‘å²”å²Œå·«å¸Œåºåº‡åºŠå»·å¼„å¼Ÿå½¤å½¢å½·å½¹å¿˜å¿Œå¿—å¿å¿±å¿«å¿¸å¿ªæˆ’æˆ‘æŠ„æŠ—æŠ–æŠ€æ‰¶æŠ‰æ‰­æŠŠæ‰¼æ‰¾æ‰¹æ‰³æŠ’æ‰¯æŠ˜æ‰®æŠ•æŠ“æŠ‘æŠ†æ”¹æ”»æ”¸æ—±æ›´æŸæŽæææ‘æœæ–æžæ‰æ†æ ï¿½".split("");
    for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
    D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ“æ—æ­¥æ¯æ±‚æ±žæ²™æ²æ²ˆæ²‰æ²…æ²›æ±ªæ±ºæ²æ±°æ²Œæ±¨æ²–æ²’æ±½æ²ƒæ±²æ±¾æ±´æ²†æ±¶æ²æ²”æ²˜æ²‚ç¶ç¼ç½ç¸ç‰¢ç‰¡ç‰ ç‹„ç‹‚çŽ–ç”¬ç”«ç”·ç”¸çš‚ç›¯çŸ£ç§ç§€ç¦¿ç©¶ç³»ç½•è‚–è‚“è‚è‚˜è‚›è‚šè‚²è‰¯èŠ’ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èŠ‹èŠè¦‹è§’è¨€è°·è±†è±•è²èµ¤èµ°è¶³èº«è»Šè¾›è¾°è¿‚è¿†è¿…è¿„å·¡é‚‘é‚¢é‚ªé‚¦é‚£é…‰é‡†é‡Œé˜²é˜®é˜±é˜ªé˜¬ä¸¦ä¹–ä¹³äº‹äº›äºžäº«äº¬ä½¯ä¾ä¾ä½³ä½¿ä½¬ä¾›ä¾‹ä¾†ä¾ƒä½°ä½µä¾ˆä½©ä½»ä¾–ä½¾ä¾ä¾‘ä½ºå…”å…’å…•å…©å…·å…¶å…¸å†½å‡½åˆ»åˆ¸åˆ·åˆºåˆ°åˆ®åˆ¶å‰åŠ¾åŠ»å’å”å“å‘å¦å·å¸å¹å–å”å—å‘³å‘µï¿½".split("");
    for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
    D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å’–å‘¸å’•å’€å‘»å‘·å’„å’’å’†å‘¼å’å‘±å‘¶å’Œå’šå‘¢å‘¨å’‹å‘½å’Žå›ºåžƒå·åªå©å¡å¦å¤å¼å¤œå¥‰å¥‡å¥ˆå¥„å¥”å¦¾å¦»å§”å¦¹å¦®å§‘å§†å§å§å§‹å§“å§Šå¦¯å¦³å§’å§…å­Ÿå­¤å­£å®—å®šå®˜å®œå®™å®›å°šå±ˆå±…ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å±†å²·å²¡å²¸å²©å²«å²±å²³å¸˜å¸šå¸–å¸•å¸›å¸‘å¹¸åºšåº—åºœåº•åº–å»¶å¼¦å¼§å¼©å¾€å¾å½¿å½¼å¿å¿ å¿½å¿µå¿¿æ€æ€”æ€¯æ€µæ€–æ€ªæ€•æ€¡æ€§æ€©æ€«æ€›æˆ–æˆ•æˆ¿æˆ¾æ‰€æ‰¿æ‹‰æ‹Œæ‹„æŠ¿æ‹‚æŠ¹æ‹’æ‹›æŠ«æ‹“æ‹”æ‹‹æ‹ˆæŠ¨æŠ½æŠ¼æ‹æ‹™æ‹‡æ‹æŠµæ‹šæŠ±æ‹˜æ‹–æ‹—æ‹†æŠ¬æ‹Žæ”¾æ–§æ–¼æ—ºæ˜”æ˜“æ˜Œæ˜†æ˜‚æ˜Žæ˜€æ˜æ˜•æ˜Šï¿½".split("");
    for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
    D[170] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ˜‡æœæœ‹æ­æž‹æž•æ±æžœæ³æ·æž‡æžæž—æ¯æ°æ¿æž‰æ¾æžæµæžšæž“æ¼æªæ²æ¬£æ­¦æ­§æ­¿æ°“æ°›æ³£æ³¨æ³³æ²±æ³Œæ³¥æ²³æ²½æ²¾æ²¼æ³¢æ²«æ³•æ³“æ²¸æ³„æ²¹æ³æ²®æ³—æ³…æ³±æ²¿æ²»æ³¡æ³›æ³Šæ²¬æ³¯æ³œæ³–æ³ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç‚•ç‚Žç‚’ç‚Šç‚™çˆ¬çˆ­çˆ¸ç‰ˆç‰§ç‰©ç‹€ç‹Žç‹™ç‹—ç‹çŽ©çŽ¨çŽŸçŽ«çŽ¥ç”½ç–ç–™ç–šçš„ç›‚ç›²ç›´çŸ¥çŸ½ç¤¾ç¥€ç¥ç§‰ç§ˆç©ºç©¹ç«ºç³¾ç½”ç¾Œç¾‹è€…è‚ºè‚¥è‚¢è‚±è‚¡è‚«è‚©è‚´è‚ªè‚¯è‡¥è‡¾èˆèŠ³èŠèŠ™èŠ­èŠ½èŠŸèŠ¹èŠ±èŠ¬èŠ¥èŠ¯èŠ¸èŠ£èŠ°èŠ¾èŠ·è™Žè™±åˆè¡¨è»‹è¿Žè¿”è¿‘é‚µé‚¸é‚±é‚¶é‡‡é‡‘é•·é–€é˜œé™€é˜¿é˜»é™„ï¿½".split("");
    for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
    D[171] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é™‚éš¹é›¨é’éžäºŸäº­äº®ä¿¡ä¾µä¾¯ä¾¿ä¿ ä¿‘ä¿ä¿ä¿ƒä¾¶ä¿˜ä¿Ÿä¿Šä¿—ä¾®ä¿ä¿„ä¿‚ä¿šä¿Žä¿žä¾·å…—å†’å†‘å† å‰Žå‰ƒå‰Šå‰å‰Œå‰‹å‰‡å‹‡å‹‰å‹ƒå‹åŒå—å»åŽšå›å’¬å“€å’¨å“Žå“‰å’¸å’¦å’³å“‡å“‚å’½å’ªå“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å“„å“ˆå’¯å’«å’±å’»å’©å’§å’¿å›¿åž‚åž‹åž åž£åž¢åŸŽåž®åž“å¥•å¥‘å¥å¥Žå¥å§œå§˜å§¿å§£å§¨å¨ƒå§¥å§ªå§šå§¦å¨å§»å­©å®£å®¦å®¤å®¢å®¥å°å±Žå±å±å±‹å³™å³’å··å¸å¸¥å¸Ÿå¹½åº åº¦å»ºå¼ˆå¼­å½¥å¾ˆå¾…å¾Šå¾‹å¾‡å¾Œå¾‰æ€’æ€æ€ æ€¥æ€Žæ€¨ææ°æ¨æ¢æ†æƒæ¬æ«æªæ¤æ‰æ‹œæŒ–æŒ‰æ‹¼æ‹­æŒæ‹®æ‹½æŒ‡æ‹±æ‹·ï¿½".split("");
    for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
    D[172] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ‹¯æ‹¬æ‹¾æ‹´æŒ‘æŒ‚æ”¿æ•…æ–«æ–½æ—¢æ˜¥æ˜­æ˜ æ˜§æ˜¯æ˜Ÿæ˜¨æ˜±æ˜¤æ›·æŸ¿æŸ“æŸ±æŸ”æŸæŸ¬æž¶æž¯æŸµæŸ©æŸ¯æŸ„æŸ‘æž´æŸšæŸ¥æž¸æŸæŸžæŸ³æž°æŸ™æŸ¢æŸæŸ’æ­ªæ®ƒæ®†æ®µæ¯’æ¯—æ°Ÿæ³‰æ´‹æ´²æ´ªæµæ´¥æ´Œæ´±æ´žæ´—ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ´»æ´½æ´¾æ´¶æ´›æ³µæ´¹æ´§æ´¸æ´©æ´®æ´µæ´Žæ´«ç‚«ç‚ºç‚³ç‚¬ç‚¯ç‚­ç‚¸ç‚®ç‚¤çˆ°ç‰²ç‰¯ç‰´ç‹©ç‹ ç‹¡çŽ·çŠçŽ»çŽ²çç€çŽ³ç”šç”­ç•ç•Œç•Žç•‹ç–«ç–¤ç–¥ç–¢ç–£ç™¸çš†çš‡çšˆç›ˆç›†ç›ƒç›…çœç›¹ç›¸çœ‰çœ‹ç›¾ç›¼çœ‡çŸœç ‚ç ”ç Œç ç¥†ç¥‰ç¥ˆç¥‡ç¦¹ç¦ºç§‘ç§’ç§‹ç©¿çªç«¿ç«½ç±½ç´‚ç´…ç´€ç´‰ç´‡ç´„ç´†ç¼¸ç¾Žç¾¿è€„ï¿½".split("");
    for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
    D[173] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è€è€è€‘è€¶èƒ–èƒ¥èƒšèƒƒèƒ„èƒŒèƒ¡èƒ›èƒŽèƒžèƒ¤èƒè‡´èˆ¢è‹§èŒƒèŒ…è‹£è‹›è‹¦èŒ„è‹¥èŒ‚èŒ‰è‹’è‹—è‹±èŒè‹œè‹”è‹‘è‹žè‹“è‹Ÿè‹¯èŒ†è™è™¹è™»è™ºè¡è¡«è¦è§”è¨ˆè¨‚è¨ƒè²žè² èµ´èµ³è¶´è»è»Œè¿°è¿¦è¿¢è¿ªè¿¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¿­è¿«è¿¤è¿¨éƒŠéƒŽéƒéƒƒé…‹é…Šé‡é–‚é™é™‹é™Œé™é¢é©éŸ‹éŸ­éŸ³é é¢¨é£›é£Ÿé¦–é¦™ä¹˜äº³å€Œå€å€£ä¿¯å€¦å€¥ä¿¸å€©å€–å€†å€¼å€Ÿå€šå€’å€‘ä¿ºå€€å€”å€¨ä¿±å€¡å€‹å€™å€˜ä¿³ä¿®å€­å€ªä¿¾å€«å€‰å…¼å†¤å†¥å†¢å‡å‡Œå‡†å‡‹å‰–å‰œå‰”å‰›å‰åŒªå¿åŽŸåŽåŸå“¨å”å”å”·å“¼å“¥å“²å”†å“ºå””å“©å“­å“¡å”‰å“®å“ªï¿½".split("");
    for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
    D[174] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å“¦å”§å”‡å“½å”åœƒåœ„åŸ‚åŸ”åŸ‹åŸƒå ‰å¤å¥—å¥˜å¥šå¨‘å¨˜å¨œå¨Ÿå¨›å¨“å§¬å¨ å¨£å¨©å¨¥å¨Œå¨‰å­«å±˜å®°å®³å®¶å®´å®®å®µå®¹å®¸å°„å±‘å±•å±å³­å³½å³»å³ªå³¨å³°å³¶å´å³´å·®å¸­å¸«åº«åº­åº§å¼±å¾’å¾‘å¾æ™ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ£æ¥ææ•æ­æ©æ¯æ‚„æ‚Ÿæ‚šæ‚æ‚”æ‚Œæ‚…æ‚–æ‰‡æ‹³æŒˆæ‹¿æŽæŒ¾æŒ¯æ•æ‚æ†ææ‰æŒºææŒ½æŒªæŒ«æŒ¨ææŒæ•ˆæ•‰æ–™æ—æ—…æ™‚æ™‰æ™æ™ƒæ™’æ™Œæ™…æ™æ›¸æœ”æœ•æœ—æ ¡æ ¸æ¡ˆæ¡†æ¡“æ ¹æ¡‚æ¡”æ ©æ¢³æ —æ¡Œæ¡‘æ ½æŸ´æ¡æ¡€æ ¼æ¡ƒæ ªæ¡…æ “æ ˜æ¡æ®Šæ®‰æ®·æ°£æ°§æ°¨æ°¦æ°¤æ³°æµªæ¶•æ¶ˆæ¶‡æµ¦æµ¸æµ·æµ™æ¶“ï¿½".split("");
    for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
    D[175] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æµ¬æ¶‰æµ®æµšæµ´æµ©æ¶Œæ¶Šæµ¹æ¶…æµ¥æ¶”çƒŠçƒ˜çƒ¤çƒ™çƒˆçƒçˆ¹ç‰¹ç‹¼ç‹¹ç‹½ç‹¸ç‹·çŽ†ç­ç‰ç®ç çªçžç•”ç•ç•œç•šç•™ç–¾ç—…ç—‡ç–²ç–³ç–½ç–¼ç–¹ç—‚ç–¸çš‹çš°ç›Šç›ç›Žçœ©çœŸçœ çœ¨çŸ©ç °ç §ç ¸ç ç ´ç ·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç ¥ç ­ç  ç Ÿç ²ç¥•ç¥ç¥ ç¥Ÿç¥–ç¥žç¥ç¥—ç¥šç§¤ç§£ç§§ç§Ÿç§¦ç§©ç§˜çª„çªˆç«™ç¬†ç¬‘ç²‰ç´¡ç´—ç´‹ç´Šç´ ç´¢ç´”ç´ç´•ç´šç´œç´ç´™ç´›ç¼ºç½Ÿç¾”ç¿…ç¿è€†è€˜è€•è€™è€—è€½è€¿èƒ±è„‚èƒ°è„…èƒ­èƒ´è„†èƒ¸èƒ³è„ˆèƒ½è„Šèƒ¼èƒ¯è‡­è‡¬èˆ€èˆèˆªèˆ«èˆ¨èˆ¬èŠ»èŒ«è’è”èŠèŒ¸èè‰èŒµèŒ´èèŒ²èŒ¹èŒ¶èŒ—è€èŒ±èŒ¨èƒï¿½".split("");
    for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
    D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è™”èšŠèšªèš“èš¤èš©èšŒèš£èšœè¡°è¡·è¢è¢‚è¡½è¡¹è¨˜è¨è¨Žè¨Œè¨•è¨Šè¨—è¨“è¨–è¨è¨‘è±ˆè±ºè±¹è²¡è²¢èµ·èº¬è»’è»”è»è¾±é€é€†è¿·é€€è¿ºè¿´é€ƒè¿½é€…è¿¸é‚•éƒ¡éƒéƒ¢é…’é…é…Œé‡˜é‡é‡—é‡œé‡™é–ƒé™¢é™£é™¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é™›é™é™¤é™˜é™žéš»é£¢é¦¬éª¨é«˜é¬¥é¬²é¬¼ä¹¾åºå½åœå‡åƒåŒåšå‰å¥å¶åŽå•åµå´å·åå€å¯å­å…œå†•å‡°å‰ªå‰¯å‹’å‹™å‹˜å‹•åŒåŒåŒ™åŒ¿å€åŒ¾åƒæ›¼å•†å•ªå•¦å•„å•žå•¡å•ƒå•Šå”±å•–å•å••å”¯å•¤å”¸å”®å•œå”¬å•£å”³å•å•—åœˆåœ‹åœ‰åŸŸå …å Šå †åŸ åŸ¤åŸºå ‚å µåŸ·åŸ¹å¤ å¥¢å¨¶å©å©‰å©¦å©ªå©€ï¿½".split("");
    for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
    D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¨¼å©¢å©šå©†å©Šå­°å¯‡å¯…å¯„å¯‚å®¿å¯†å°‰å°ˆå°‡å± å±œå±å´‡å´†å´Žå´›å´–å´¢å´‘å´©å´”å´™å´¤å´§å´—å·¢å¸¸å¸¶å¸³å¸·åº·åº¸åº¶åºµåº¾å¼µå¼·å½—å½¬å½©å½«å¾—å¾™å¾žå¾˜å¾¡å¾ å¾œæ¿æ‚£æ‚‰æ‚ æ‚¨æƒ‹æ‚´æƒ¦æ‚½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æƒ…æ‚»æ‚µæƒœæ‚¼æƒ˜æƒ•æƒ†æƒŸæ‚¸æƒšæƒ‡æˆšæˆ›æ‰ˆæŽ æŽ§æ²æŽ–æŽ¢æŽ¥æ·æ§æŽ˜æŽªæ±æŽ©æŽ‰æŽƒæŽ›æ«æŽ¨æŽ„æŽˆæŽ™æŽ¡æŽ¬æŽ’æŽæŽ€æ»æ©æ¨æºæ•æ•–æ•‘æ•™æ•—å•Ÿæ•æ•˜æ••æ•”æ–œæ–›æ–¬æ—æ—‹æ—Œæ—Žæ™æ™šæ™¤æ™¨æ™¦æ™žæ›¹å‹—æœ›æ¢æ¢¯æ¢¢æ¢“æ¢µæ¡¿æ¡¶æ¢±æ¢§æ¢—æ¢°æ¢ƒæ£„æ¢­æ¢†æ¢…æ¢”æ¢æ¢¨æ¢Ÿæ¢¡æ¢‚æ¬²æ®ºï¿½".split("");
    for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
    D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¯«æ¯¬æ°«æ¶Žæ¶¼æ·³æ·™æ¶²æ·¡æ·Œæ·¤æ·»æ·ºæ¸…æ·‡æ·‹æ¶¯æ·‘æ¶®æ·žæ·¹æ¶¸æ··æ·µæ·…æ·’æ¸šæ¶µæ·šæ·«æ·˜æ·ªæ·±æ·®æ·¨æ·†æ·„æ¶ªæ·¬æ¶¿æ·¦çƒ¹ç„‰ç„Šçƒ½çƒ¯çˆ½ç‰½çŠçŒœçŒ›çŒ–çŒ“çŒ™çŽ‡ç…çŠçƒç†ç¾çç“ ç“¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç“·ç”œç”¢ç•¥ç•¦ç•¢ç•°ç–ç—”ç—•ç–µç—Šç—çšŽç›”ç›’ç››çœ·çœ¾çœ¼çœ¶çœ¸çœºç¡«ç¡ƒç¡Žç¥¥ç¥¨ç¥­ç§»çª’çª•ç¬ ç¬¨ç¬›ç¬¬ç¬¦ç¬™ç¬žç¬®ç²’ç²—ç²•çµ†çµƒçµ±ç´®ç´¹ç´¼çµ€ç´°ç´³çµ„ç´¯çµ‚ç´²ç´±ç¼½ç¾žç¾šç¿Œç¿Žç¿’è€œèŠè†è„¯è„–è„£è„«è„©è„°è„¤èˆ‚èˆµèˆ·èˆ¶èˆ¹èŽŽèŽžèŽ˜è¸èŽ¢èŽ–èŽ½èŽ«èŽ’èŽŠèŽ“èŽ‰èŽ è·è»è¼ï¿½".split("");
    for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
    D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èŽ†èŽ§è™•å½ªè›‡è›€èš¶è›„èšµè›†è›‹èš±èš¯è›‰è¡“è¢žè¢ˆè¢«è¢’è¢–è¢è¢‹è¦“è¦è¨ªè¨è¨£è¨¥è¨±è¨­è¨Ÿè¨›è¨¢è±‰è±šè²©è²¬è²«è²¨è²ªè²§èµ§èµ¦è¶¾è¶ºè»›è»Ÿé€™é€é€šé€—é€£é€Ÿé€é€é€•é€žé€ é€é€¢é€–é€›é€”ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éƒ¨éƒ­éƒ½é…—é‡Žé‡µé‡¦é‡£é‡§é‡­é‡©é–‰é™ªé™µé™³é™¸é™°é™´é™¶é™·é™¬é›€é›ªé›©ç« ç«Ÿé ‚é ƒé­šé³¥é¹µé¹¿éº¥éº»å‚¢å‚å‚…å‚™å‚‘å‚€å‚–å‚˜å‚šæœ€å‡±å‰²å‰´å‰µå‰©å‹žå‹å‹›åšåŽ¥å•»å–€å–§å•¼å–Šå–å–˜å–‚å–œå–ªå–”å–‡å–‹å–ƒå–³å–®å–Ÿå”¾å–²å–šå–»å–¬å–±å•¾å–‰å–«å–™åœå ¯å ªå ´å ¤å °å ±å ¡å å  å£¹å£ºå¥ ï¿½".split("");
    for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
    D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å©·åªšå©¿åª’åª›åª§å­³å­±å¯’å¯Œå¯“å¯å°Šå°‹å°±åµŒåµå´´åµ‡å·½å¹…å¸½å¹€å¹ƒå¹¾å»Šå»å»‚å»„å¼¼å½­å¾©å¾ªå¾¨æƒ‘æƒ¡æ‚²æ‚¶æƒ æ„œæ„£æƒºæ„•æƒ°æƒ»æƒ´æ…¨æƒ±æ„Žæƒ¶æ„‰æ„€æ„’æˆŸæ‰‰æŽ£æŽŒææ€æ©æ‰æ†æï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ’æ£ææ¡æ–æ­æ®æ¶æ´æªæ›æ‘’æšæ¹æ•žæ•¦æ•¢æ•£æ–‘æ–æ–¯æ™®æ™°æ™´æ™¶æ™¯æš‘æ™ºæ™¾æ™·æ›¾æ›¿æœŸæœæ£ºæ£•æ£ æ£˜æ£—æ¤…æ£Ÿæ£µæ£®æ£§æ£¹æ£’æ£²æ££æ£‹æ£æ¤æ¤’æ¤Žæ£‰æ£šæ¥®æ£»æ¬¾æ¬ºæ¬½æ®˜æ®–æ®¼æ¯¯æ°®æ°¯æ°¬æ¸¯æ¸¸æ¹”æ¸¡æ¸²æ¹§æ¹Šæ¸ æ¸¥æ¸£æ¸›æ¹›æ¹˜æ¸¤æ¹–æ¹®æ¸­æ¸¦æ¹¯æ¸´æ¹æ¸ºæ¸¬æ¹ƒæ¸æ¸¾æ»‹ï¿½".split("");
    for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
    D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æº‰æ¸™æ¹Žæ¹£æ¹„æ¹²æ¹©æ¹Ÿç„™ç„šç„¦ç„°ç„¡ç„¶ç…®ç„œç‰ŒçŠ„çŠ€çŒ¶çŒ¥çŒ´çŒ©çºçªç³ç¢ç¥çµç¶ç´ç¯ç›ç¦ç¨ç”¥ç”¦ç•«ç•ªç—¢ç—›ç—£ç—™ç—˜ç—žç— ç™»ç™¼çš–çš“çš´ç›œççŸ­ç¡ç¡¬ç¡¯ç¨ç¨ˆç¨‹ç¨…ç¨€çª˜ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çª—çª–ç«¥ç«£ç­‰ç­–ç­†ç­ç­’ç­”ç­ç­‹ç­ç­‘ç²Ÿç²¥çµžçµçµ¨çµ•ç´«çµ®çµ²çµ¡çµ¦çµ¢çµ°çµ³å–„ç¿”ç¿•è€‹è’è‚…è…•è…”è…‹è…‘è…Žè„¹è…†è„¾è…Œè…“è…´èˆ’èˆœè©èƒè¸èè è…è‹èè¯è±è´è‘—èŠè°èŒèŒè½è²èŠè¸èŽè„èœè‡è”èŸè™›è›Ÿè›™è›­è›”è››è›¤è›è›žè¡—è£è£‚è¢±è¦ƒè¦–è¨»è© è©•è©žè¨¼è©ï¿½".split("");
    for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
    D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è©”è©›è©è©†è¨´è¨ºè¨¶è©–è±¡è²‚è²¯è²¼è²³è²½è³è²»è³€è²´è²·è²¶è²¿è²¸è¶Šè¶…è¶è·Žè·è·‹è·šè·‘è·Œè·›è·†è»»è»¸è»¼è¾œé€®é€µé€±é€¸é€²é€¶é„‚éƒµé„‰éƒ¾é…£é…¥é‡éˆ”éˆ•éˆ£éˆ‰éˆžéˆéˆéˆ‡éˆ‘é–”é–é–‹é–‘ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é–“é–’é–ŽéšŠéšŽéš‹é™½éš…éš†éšé™²éš„é›é›…é›„é›†é›‡é›¯é›²éŸŒé …é †é ˆé£§é£ªé£¯é£©é£²é£­é¦®é¦­é»ƒé»é»‘äº‚å‚­å‚µå‚²å‚³åƒ…å‚¾å‚¬å‚·å‚»å‚¯åƒ‡å‰¿å‰·å‰½å‹Ÿå‹¦å‹¤å‹¢å‹£åŒ¯å—Ÿå—¨å—“å—¦å—Žå—œå—‡å—‘å—£å—¤å—¯å—šå—¡å—…å—†å—¥å—‰åœ’åœ“å¡žå¡‘å¡˜å¡—å¡šå¡”å¡«å¡Œå¡­å¡Šå¡¢å¡’å¡‹å¥§å«å«‰å«Œåª¾åª½åª¼ï¿½".split("");
    for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
    D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åª³å«‚åª²åµ©åµ¯å¹Œå¹¹å»‰å»ˆå¼’å½™å¾¬å¾®æ„šæ„æ…ˆæ„Ÿæƒ³æ„›æƒ¹æ„æ„ˆæ…Žæ…Œæ…„æ…æ„¾æ„´æ„§æ„æ„†æ„·æˆ¡æˆ¢æ“æ¾æžæªæ­æ½æ¬ææœæ”ææ¶æ–æ—æ†æ•¬æ–Ÿæ–°æš—æš‰æš‡æšˆæš–æš„æš˜æšæœƒæ¦”æ¥­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¥šæ¥·æ¥ æ¥”æ¥µæ¤°æ¦‚æ¥Šæ¥¨æ¥«æ¥žæ¥“æ¥¹æ¦†æ¥æ¥£æ¥›æ­‡æ­²æ¯€æ®¿æ¯“æ¯½æº¢æº¯æ»“æº¶æ»‚æºæºæ»‡æ»…æº¥æº˜æº¼æººæº«æ»‘æº–æºœæ»„æ»”æºªæº§æº´ç…Žç…™ç…©ç…¤ç…‰ç…§ç…œç…¬ç…¦ç…Œç…¥ç…žç…†ç…¨ç…–çˆºç‰’çŒ·ç…çŒ¿çŒ¾ç‘¯ç‘šç‘•ç‘Ÿç‘žç‘ç¿ç‘™ç‘›ç‘œç•¶ç•¸ç˜€ç—°ç˜ç—²ç—±ç—ºç—¿ç—´ç—³ç›žç›Ÿç›ç«ç¦çžç£ï¿½".split("");
    for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
    D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¹çªç¬çœç¥ç¨ç¢çŸ®ç¢Žç¢°ç¢—ç¢˜ç¢Œç¢‰ç¡¼ç¢‘ç¢“ç¡¿ç¥ºç¥¿ç¦è¬ç¦½ç¨œç¨šç¨ ç¨”ç¨Ÿç¨žçªŸçª ç­·ç¯€ç­ ç­®ç­§ç²±ç²³ç²µç¶“çµ¹ç¶‘ç¶ç¶çµ›ç½®ç½©ç½ªç½²ç¾©ç¾¨ç¾¤è–è˜è‚†è‚„è…±è…°è…¸è…¥è…®è…³è…«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è…¹è…ºè…¦èˆ…è‰‡è’‚è‘·è½è±è‘µè‘¦è‘«è‘‰è‘¬è‘›è¼èµè‘¡è‘£è‘©è‘­è‘†è™žè™œè™Ÿè›¹èœ“èœˆèœ‡èœ€è›¾è›»èœ‚èœƒèœ†èœŠè¡™è£Ÿè£”è£™è£œè£˜è£è£¡è£Šè£•è£’è¦œè§£è©«è©²è©³è©¦è©©è©°èª‡è©¼è©£èª è©±èª…è©­è©¢è©®è©¬è©¹è©»è¨¾è©¨è±¢è²Šè²‰è³Šè³‡è³ˆè³„è²²è³ƒè³‚è³…è·¡è·Ÿè·¨è·¯è·³è·ºè·ªè·¤è·¦èº²è¼ƒè¼‰è»¾è¼Šï¿½".split("");
    for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
    D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾Ÿè¾²é‹éŠé“é‚é”é€¼é•éé‡ééŽéé‘é€¾éé„’é„—é…¬é…ªé…©é‡‰éˆ·é‰—éˆ¸éˆ½é‰€éˆ¾é‰›é‰‹é‰¤é‰‘éˆ´é‰‰é‰é‰…éˆ¹éˆ¿é‰šé–˜éš˜éš”éš•é›é›‹é›‰é›Šé›·é›»é›¹é›¶é–é´é¶é é ‘é “é Šé ’é Œé£¼é£´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é£½é£¾é¦³é¦±é¦´é«¡é³©éº‚é¼Žé¼“é¼ åƒ§åƒ®åƒ¥åƒ–åƒ­åƒšåƒ•åƒåƒ‘åƒ±åƒŽåƒ©å…¢å‡³åŠƒåŠ‚åŒ±åŽ­å—¾å˜€å˜›å˜—å—½å˜”å˜†å˜‰å˜å˜Žå—·å˜–å˜Ÿå˜ˆå˜å—¶åœ˜åœ–å¡µå¡¾å¢ƒå¢“å¢Šå¡¹å¢…å¡½å£½å¤¥å¤¢å¤¤å¥ªå¥©å«¡å«¦å«©å«—å«–å«˜å«£å­µå¯žå¯§å¯¡å¯¥å¯¦å¯¨å¯¢å¯¤å¯Ÿå°å±¢å¶„å¶‡å¹›å¹£å¹•å¹—å¹”å»“å»–å¼Šå½†å½°å¾¹æ…‡ï¿½".split("");
    for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
    D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ„¿æ…‹æ…·æ…¢æ…£æ…Ÿæ…šæ…˜æ…µæˆªæ’‡æ‘˜æ‘”æ’¤æ‘¸æ‘Ÿæ‘ºæ‘‘æ‘§æ´æ‘­æ‘»æ•²æ–¡æ——æ—–æš¢æš¨æšæ¦œæ¦¨æ¦•æ§æ¦®æ§“æ§‹æ¦›æ¦·æ¦»æ¦«æ¦´æ§æ§æ¦­æ§Œæ¦¦æ§ƒæ¦£æ­‰æ­Œæ°³æ¼³æ¼”æ»¾æ¼“æ»´æ¼©æ¼¾æ¼ æ¼¬æ¼æ¼‚æ¼¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ»¿æ»¯æ¼†æ¼±æ¼¸æ¼²æ¼£æ¼•æ¼«æ¼¯æ¾ˆæ¼ªæ»¬æ¼æ»²æ»Œæ»·ç†”ç†™ç…½ç†Šç†„ç†’çˆ¾çŠ’çŠ–ç„çç‘¤ç‘£ç‘ªç‘°ç‘­ç”„ç–‘ç˜§ç˜ç˜‹ç˜‰ç˜“ç›¡ç›£çž„ç½ç¿ç¡ç£ç¢Ÿç¢§ç¢³ç¢©ç¢£ç¦Žç¦ç¦ç¨®ç¨±çªªçª©ç«­ç«¯ç®¡ç®•ç®‹ç­µç®—ç®ç®”ç®ç®¸ç®‡ç®„ç²¹ç²½ç²¾ç¶»ç¶°ç¶œç¶½ç¶¾ç¶ ç·Šç¶´ç¶²ç¶±ç¶ºç¶¢ç¶¿ç¶µç¶¸ç¶­ç·’ç·‡ç¶¬ï¿½".split("");
    for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
    D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç½°ç¿ ç¿¡ç¿Ÿèžèšè‚‡è…è†€è†è†ˆè†Šè…¿è†‚è‡§è‡ºèˆ‡èˆ”èˆžè‰‹è“‰è’¿è“†è“„è’™è’žè’²è’œè“‹è’¸è“€è““è’è’¼è“‘è“Šèœ¿èœœèœ»èœ¢èœ¥èœ´èœ˜è•èœ·èœ©è£³è¤‚è£´è£¹è£¸è£½è£¨è¤šè£¯èª¦èªŒèªžèª£èªèª¡èª“èª¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èªªèª¥èª¨èª˜èª‘èªšèª§è±ªè²è²Œè³“è³‘è³’èµ«è¶™è¶•è·¼è¼”è¼’è¼•è¼“è¾£é é˜éœé£é™éžé¢éé›é„™é„˜é„žé…µé…¸é…·é…´é‰¸éŠ€éŠ…éŠ˜éŠ–é‰»éŠ“éŠœéŠ¨é‰¼éŠ‘é–¡é–¨é–©é–£é–¥é–¤éš™éšœéš›é›Œé›’éœ€é¼éž…éŸ¶é —é ˜é¢¯é¢±é¤ƒé¤…é¤Œé¤‰é§éª¯éª°é«¦é­é­‚é³´é³¶é³³éº¼é¼»é½Šå„„å„€åƒ»åƒµåƒ¹å„‚å„ˆå„‰å„…å‡œï¿½".split("");
    for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
    D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åŠ‡åŠˆåŠ‰åŠåŠŠå‹°åŽ²å˜®å˜»å˜¹å˜²å˜¿å˜´å˜©å™“å™Žå™—å™´å˜¶å˜¯å˜°å¢€å¢Ÿå¢žå¢³å¢œå¢®å¢©å¢¦å¥­å¬‰å«»å¬‹å«µå¬Œå¬ˆå¯®å¯¬å¯©å¯«å±¤å±¥å¶å¶”å¹¢å¹Ÿå¹¡å»¢å»šå»Ÿå»å»£å» å½ˆå½±å¾·å¾µæ…¶æ…§æ…®æ…æ…•æ†‚ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ…¼æ…°æ…«æ…¾æ†§æ†æ†«æ†Žæ†¬æ†šæ†¤æ†”æ†®æˆ®æ‘©æ‘¯æ‘¹æ’žæ’²æ’ˆæ’æ’°æ’¥æ’“æ’•æ’©æ’’æ’®æ’­æ’«æ’šæ’¬æ’™æ’¢æ’³æ•µæ•·æ•¸æš®æš«æš´æš±æ¨£æ¨Ÿæ§¨æ¨æ¨žæ¨™æ§½æ¨¡æ¨“æ¨Šæ§³æ¨‚æ¨…æ§­æ¨‘æ­æ­Žæ®¤æ¯…æ¯†æ¼¿æ½¼æ¾„æ½‘æ½¦æ½”æ¾†æ½­æ½›æ½¸æ½®æ¾Žæ½ºæ½°æ½¤æ¾—æ½˜æ»•æ½¯æ½ æ½Ÿç†Ÿç†¬ç†±ç†¨ç‰–çŠ›çŽç—ç‘©ç’‹ç’ƒï¿½".split("");
    for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
    D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç‘¾ç’€ç•¿ç˜ ç˜©ç˜Ÿç˜¤ç˜¦ç˜¡ç˜¢çššçšºç›¤çžŽçž‡çžŒçž‘çž‹ç£‹ç£…ç¢ºç£Šç¢¾ç£•ç¢¼ç£ç¨¿ç¨¼ç©€ç¨½ç¨·ç¨»çª¯çª®ç®­ç®±ç¯„ç®´ç¯†ç¯‡ç¯ç® ç¯Œç³Šç· ç·´ç·¯ç·»ç·˜ç·¬ç·ç·¨ç·£ç·šç·žç·©ç¶žç·™ç·²ç·¹ç½µç½·ç¾¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¿©è€¦è†›è†œè†è† è†šè†˜è”—è”½è”šè“®è”¬è”­è”“è”‘è”£è”¡è””è“¬è”¥è“¿è”†èž‚è´è¶è è¦è¸è¨è™è—èŒè“è¡›è¡è¤è¤‡è¤’è¤“è¤•è¤Šèª¼è«’è«‡è«„èª•è«‹è«¸èª²è«‰è«‚èª¿èª°è«–è«èª¶èª¹è«›è±Œè±Žè±¬è³ è³žè³¦è³¤è³¬è³­è³¢è³£è³œè³ªè³¡èµ­è¶Ÿè¶£è¸«è¸è¸è¸¢è¸è¸©è¸Ÿè¸¡è¸žèººè¼è¼›è¼Ÿè¼©è¼¦è¼ªè¼œè¼žï¿½".split("");
    for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
    D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¼¥é©é®é¨é­é·é„°é„­é„§é„±é†‡é†‰é†‹é†ƒé‹…éŠ»éŠ·é‹ªéŠ¬é‹¤é‹éŠ³éŠ¼é‹’é‹‡é‹°éŠ²é–­é–±éœ„éœ†éœ‡éœ‰é éžéž‹éžé ¡é «é œé¢³é¤Šé¤“é¤’é¤˜é§é§é§Ÿé§›é§‘é§•é§’é§™éª·é«®é«¯é¬§é­…é­„é­·é­¯é´†é´‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é´ƒéº©éº¾é»Žå¢¨é½’å„’å„˜å„”å„å„•å†€å†ªå‡åŠ‘åŠ“å‹³å™™å™«å™¹å™©å™¤å™¸å™ªå™¨å™¥å™±å™¯å™¬å™¢å™¶å£å¢¾å£‡å£…å¥®å¬å¬´å­¸å¯°å°Žå½Šæ†²æ†‘æ†©æ†Šæ‡æ†¶æ†¾æ‡Šæ‡ˆæˆ°æ“…æ“æ“‹æ’»æ’¼æ“šæ“„æ“‡æ“‚æ“æ’¿æ“’æ“”æ’¾æ•´æ›†æ›‰æš¹æ›„æ›‡æš¸æ¨½æ¨¸æ¨ºæ©™æ©«æ©˜æ¨¹æ©„æ©¢æ©¡æ©‹æ©‡æ¨µæ©Ÿæ©ˆæ­™æ­·æ°…æ¿‚æ¾±æ¾¡ï¿½".split("");
    for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
    D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿ƒæ¾¤æ¿æ¾§æ¾³æ¿€æ¾¹æ¾¶æ¾¦æ¾ æ¾´ç†¾ç‡‰ç‡ç‡’ç‡ˆç‡•ç†¹ç‡Žç‡™ç‡œç‡ƒç‡„ç¨ç’œç’£ç’˜ç’Ÿç’žç“¢ç”Œç”ç˜´ç˜¸ç˜ºç›§ç›¥çž çžžçžŸçž¥ç£¨ç£šç£¬ç£§ç¦¦ç©ç©Žç©†ç©Œç©‹çªºç¯™ç°‘ç¯‰ç¯¤ç¯›ç¯¡ç¯©ç¯¦ç³•ç³–ç¸Šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¸‘ç¸ˆç¸›ç¸£ç¸žç¸ç¸‰ç¸ç½¹ç¾²ç¿°ç¿±ç¿®è€¨è†³è†©è†¨è‡»èˆˆè‰˜è‰™è•Šè•™è•ˆè•¨è•©è•ƒè•‰è•­è•ªè•žèžƒèžŸèžžèž¢èžè¡¡è¤ªè¤²è¤¥è¤«è¤¡è¦ªè¦¦è«¦è«ºè««è«±è¬€è«œè«§è«®è«¾è¬è¬‚è«·è«­è«³è«¶è«¼è±«è±­è²“è³´è¹„è¸±è¸´è¹‚è¸¹è¸µè¼»è¼¯è¼¸è¼³è¾¨è¾¦éµé´é¸é²é¼éºé„´é†’éŒ éŒ¶é‹¸éŒ³éŒ¯éŒ¢é‹¼éŒ«éŒ„éŒšï¿½".split("");
    for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
    D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŒéŒ¦éŒ¡éŒ•éŒ®éŒ™é–»éš§éš¨éšªé›•éœŽéœ‘éœ–éœéœ“éœé›éœé¦éž˜é °é ¸é »é ·é ­é ¹é ¤é¤é¤¨é¤žé¤›é¤¡é¤šé§­é§¢é§±éª¸éª¼é«»é«­é¬¨é®‘é´•é´£é´¦é´¨é´’é´›é»˜é»”é¾é¾œå„ªå„Ÿå„¡å„²å‹µåšŽåš€åšåš…åš‡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åšå£•å£“å£‘å£Žå¬°å¬ªå¬¤å­ºå°·å±¨å¶¼å¶ºå¶½å¶¸å¹«å½Œå¾½æ‡‰æ‡‚æ‡‡æ‡¦æ‡‹æˆ²æˆ´æ“Žæ“Šæ“˜æ“ æ“°æ“¦æ“¬æ“±æ“¢æ“­æ–‚æ–ƒæ›™æ›–æª€æª”æª„æª¢æªœæ«›æª£æ©¾æª—æªæª æ­œæ®®æ¯šæ°ˆæ¿˜æ¿±æ¿Ÿæ¿ æ¿›æ¿¤æ¿«æ¿¯æ¾€æ¿¬æ¿¡æ¿©æ¿•æ¿®æ¿°ç‡§ç‡Ÿç‡®ç‡¦ç‡¥ç‡­ç‡¬ç‡´ç‡ çˆµç‰†ç°ç²ç’©ç’°ç’¦ç’¨ç™†ç™‚ç™Œç›ªçž³çžªçž°çž¬ï¿½".split("");
    for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
    D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çž§çž­çŸ¯ç£·ç£ºç£´ç£¯ç¤ç¦§ç¦ªç©—çª¿ç°‡ç°ç¯¾ç¯·ç°Œç¯ ç³ ç³œç³žç³¢ç³Ÿç³™ç³ç¸®ç¸¾ç¹†ç¸·ç¸²ç¹ƒç¸«ç¸½ç¸±ç¹…ç¹ç¸´ç¸¹ç¹ˆç¸µç¸¿ç¸¯ç½„ç¿³ç¿¼è±è²è°è¯è³è‡†è‡ƒè†ºè‡‚è‡€è†¿è†½è‡‰è†¾è‡¨èˆ‰è‰±è–ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è–„è•¾è–œè–‘è–”è–¯è–›è–‡è–¨è–Šè™§èŸ€èŸ‘èž³èŸ’èŸ†èž«èž»èžºèŸˆèŸ‹è¤»è¤¶è¥„è¤¸è¤½è¦¬è¬Žè¬—è¬™è¬›è¬Šè¬ è¬è¬„è¬è±è°¿è±³è³ºè³½è³¼è³¸è³»è¶¨è¹‰è¹‹è¹ˆè¹Šè½„è¼¾è½‚è½…è¼¿é¿é½é‚„é‚é‚‚é‚€é„¹é†£é†žé†œééŽ‚éŒ¨éµéŠé¥é‹éŒ˜é¾é¬é›é°éšé”é—Šé—‹é—Œé—ˆé—†éš±éš¸é›–éœœéœžéž éŸ“é¡†é¢¶é¤µé¨ï¿½".split("");
    for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
    D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é§¿é®®é®«é®ªé®­é´»é´¿éº‹é»é»žé»œé»é»›é¼¾é½‹å¢åš•åš®å£™å£˜å¬¸å½æ‡£æˆ³æ“´æ“²æ“¾æ”†æ“ºæ“»æ“·æ–·æ›œæœ¦æª³æª¬æ«ƒæª»æª¸æ«‚æª®æª¯æ­Ÿæ­¸æ®¯ç€‰ç€‹æ¿¾ç€†æ¿ºç€‘ç€ç‡»ç‡¼ç‡¾ç‡¸ç·çµç’§ç’¿ç”•ç™–ç™˜ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç™’çž½çž¿çž»çž¼ç¤Žç¦®ç©¡ç©¢ç© ç«„ç«…ç°«ç°§ç°ªç°žç°£ç°¡ç³§ç¹”ç¹•ç¹žç¹šç¹¡ç¹’ç¹™ç½ˆç¿¹ç¿»è·è¶è‡è‡èˆŠè—è–©è—è—è—‰è–°è–ºè–¹è–¦èŸ¯èŸ¬èŸ²èŸ è¦†è¦²è§´è¬¨è¬¹è¬¬è¬«è±è´…è¹™è¹£è¹¦è¹¤è¹Ÿè¹•è»€è½‰è½é‚‡é‚ƒé‚ˆé†«é†¬é‡éŽ”éŽŠéŽ–éŽ¢éŽ³éŽ®éŽ¬éŽ°éŽ˜éŽšéŽ—é—”é—–é—é—•é›¢é›œé›™é››é›žéœ¤éž£éž¦ï¿½".split("");
    for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
    D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éž­éŸ¹é¡é¡é¡Œé¡Žé¡“é¢ºé¤¾é¤¿é¤½é¤®é¦¥é¨Žé«é¬ƒé¬†é­é­Žé­é¯Šé¯‰é¯½é¯ˆé¯€éµ‘éµéµ é» é¼•é¼¬å„³åš¥å£žå£Ÿå£¢å¯µé¾å»¬æ‡²æ‡·æ‡¶æ‡µæ”€æ”æ› æ›æ«¥æ«æ«šæ«“ç€›ç€Ÿç€¨ç€šç€ç€•ç€˜çˆ†çˆç‰˜çŠ¢ç¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çºç’½ç“Šç“£ç–‡ç–†ç™Ÿç™¡çŸ‡ç¤™ç¦±ç©«ç©©ç°¾ç°¿ç°¸ç°½ç°·ç±€ç¹«ç¹­ç¹¹ç¹©ç¹ªç¾…ç¹³ç¾¶ç¾¹ç¾¸è‡˜è—©è—è—ªè—•è—¤è—¥è—·èŸ»è …è èŸ¹èŸ¾è¥ è¥Ÿè¥–è¥žè­è­œè­˜è­‰è­šè­Žè­è­†è­™è´ˆè´Šè¹¼è¹²èº‡è¹¶è¹¬è¹ºè¹´è½”è½Žè¾­é‚Šé‚‹é†±é†®é¡é‘éŸéƒéˆéœéé–é¢éé˜é¤é—é¨é—œéš´é›£éœªéœ§é¡éŸœéŸ»é¡žï¿½".split("");
    for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
    D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡˜é¡›é¢¼é¥…é¥‰é¨–é¨™é¬é¯¨é¯§é¯–é¯›é¶‰éµ¡éµ²éµªéµ¬éº’éº—éº“éº´å‹¸åš¨åš·åš¶åš´åš¼å£¤å­€å­ƒå­½å¯¶å·‰æ‡¸æ‡ºæ”˜æ””æ”™æ›¦æœ§æ«¬ç€¾ç€°ç€²çˆç»ç“ç™¢ç™¥ç¤¦ç¤ªç¤¬ç¤«ç«‡ç«¶ç±Œç±ƒç±ç³¯ç³°è¾®ç¹½ç¹¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çº‚ç½Œè€€è‡šè‰¦è—»è—¹è˜‘è—ºè˜†è˜‹è˜‡è˜Šè ”è •è¥¤è¦ºè§¸è­°è­¬è­¦è­¯è­Ÿè­«è´è´èº‰èºèº…èº‚é†´é‡‹é˜éƒé½é—¡éœ°é£„é¥’é¥‘é¦¨é¨«é¨°é¨·é¨µé°“é°é¹¹éºµé»¨é¼¯é½Ÿé½£é½¡å„·å„¸å›å›€å›‚å¤”å±¬å·æ‡¼æ‡¾æ”æ”œæ–•æ›©æ«»æ¬„æ«ºæ®²çŒçˆ›çŠ§ç“–ç“”ç™©çŸ“ç±çºçºŒç¾¼è˜—è˜­è˜šè £è ¢è ¡è Ÿè¥ªè¥¬è¦½è­´ï¿½".split("");
    for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
    D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­·è­½è´“èºŠèºèº‹è½Ÿè¾¯é†ºé®é³éµéºé¸é²é«é—¢éœ¸éœ¹éœ²éŸ¿é¡§é¡¥é¥—é©…é©ƒé©€é¨¾é«é­”é­‘é°­é°¥é¶¯é¶´é·‚é¶¸éºé»¯é¼™é½œé½¦é½§å„¼å„»å›ˆå›Šå›‰å­¿å·”å·’å½Žæ‡¿æ”¤æ¬Šæ­¡ç‘ç˜çŽ€ç“¤ç–Šç™®ç™¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦³ç± ç±Ÿè¾è½è‡Ÿè¥²è¥¯è§¼è®€è´–è´—èº‘èº“è½¡é…ˆé‘„é‘‘é‘’éœ½éœ¾éŸƒéŸé¡«é¥•é©•é©é«’é¬šé±‰é°±é°¾é°»é·“é·—é¼´é½¬é½ªé¾”å›Œå·–æˆ€æ”£æ”«æ”ªæ›¬æ¬ç“šç«Šç±¤ç±£ç±¥çº“çº–çº”è‡¢è˜¸è˜¿è ±è®Šé‚é‚é‘£é‘ é‘¤é¨é¡¯é¥œé©šé©›é©—é«“é«”é«‘é±”é±—é±–é·¥éºŸé»´å›‘å£©æ”¬çžç™±ç™²çŸ—ç½ç¾ˆè ¶è ¹è¡¢è®“è®’ï¿½".split("");
    for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
    D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è®–è‰·è´›é‡€é‘ªé‚éˆé„éŸ†é¡°é©Ÿé¬¢é­˜é±Ÿé·¹é·ºé¹¼é¹½é¼‡é½·é½²å»³æ¬–ç£ç±¬ç±®è »è§€èº¡é‡é‘²é‘°é¡±é¥žé«–é¬£é»Œç¤çŸšè®šé‘·éŸ‰é©¢é©¥çºœè®œèºªé‡…é‘½é‘¾é‘¼é±·é±¸é»·è±”é‘¿é¸šçˆ¨é©ªé¬±é¸›é¸žç±²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
    D[201] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¹‚ä¹œå‡µåŒšåŽ‚ä¸‡ä¸Œä¹‡äºå›—ï¨Œå±®å½³ä¸å†‡ä¸Žä¸®äº“ä»‚ä»‰ä»ˆå†˜å‹¼å¬åŽ¹åœ å¤ƒå¤¬å°å·¿æ—¡æ®³æ¯Œæ°”çˆ¿ä¸±ä¸¼ä»¨ä»œä»©ä»¡ä»ä»šåˆŒåŒœåŒåœ¢åœ£å¤—å¤¯å®å®„å°’å°»å±´å±³å¸„åº€åº‚å¿‰æˆ‰æ‰æ°•ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ°¶æ±ƒæ°¿æ°»çŠ®çŠ°çŽŠç¦¸è‚Šé˜žä¼Žä¼˜ä¼¬ä»µä¼”ä»±ä¼€ä»·ä¼ˆä¼ä¼‚ä¼…ä¼¢ä¼“ä¼„ä»´ä¼’å†±åˆ“åˆ‰åˆåŠ¦åŒ¢åŒŸååŽŠå‡å›¡å›Ÿåœ®åœªåœ´å¤¼å¦€å¥¼å¦…å¥»å¥¾å¥·å¥¿å­–å°•å°¥å±¼å±ºå±»å±¾å·Ÿå¹µåº„å¼‚å¼šå½´å¿•å¿”å¿æ‰œæ‰žæ‰¤æ‰¡æ‰¦æ‰¢æ‰™æ‰ æ‰šæ‰¥æ—¯æ—®æœ¾æœ¹æœ¸æœ»æœºæœ¿æœ¼æœ³æ°˜æ±†æ±’æ±œæ±æ±Šæ±”æ±‹ï¿½".split("");
    for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
    D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±Œç±ç‰žçŠ´çŠµçŽŽç”ªç™¿ç©µç½‘è‰¸è‰¼èŠ€è‰½è‰¿è™è¥¾é‚™é‚—é‚˜é‚›é‚”é˜¢é˜¤é˜ é˜£ä½–ä¼»ä½¢ä½‰ä½“ä½¤ä¼¾ä½§ä½’ä½Ÿä½ä½˜ä¼­ä¼³ä¼¿ä½¡å†å†¹åˆœåˆžåˆ¡åŠ­åŠ®åŒ‰å£å²åŽŽåŽå°å·åªå‘”å‘…å™åœå¥å˜ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å½å‘å‘å¨å¤å‘‡å›®å›§å›¥åå…åŒå‰å‹å’å¤†å¥€å¦¦å¦˜å¦ å¦—å¦Žå¦¢å¦å¦å¦§å¦¡å®Žå®’å°¨å°ªå²å²å²ˆå²‹å²‰å²’å²Šå²†å²“å²•å· å¸Šå¸Žåº‹åº‰åºŒåºˆåºå¼…å¼å½¸å½¶å¿’å¿‘å¿å¿­å¿¨å¿®å¿³å¿¡å¿¤å¿£å¿ºå¿¯å¿·å¿»æ€€å¿´æˆºæŠƒæŠŒæŠŽæŠæŠ”æŠ‡æ‰±æ‰»æ‰ºæ‰°æŠæŠˆæ‰·æ‰½æ‰²æ‰´æ”·æ—°æ—´æ—³æ—²æ—µæ…æ‡ï¿½".split("");
    for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
    D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ™æ•æŒæˆæææšæ‹æ¯æ°™æ°šæ±¸æ±§æ±«æ²„æ²‹æ²æ±±æ±¯æ±©æ²šæ±­æ²‡æ²•æ²œæ±¦æ±³æ±¥æ±»æ²Žç´çºç‰£çŠ¿çŠ½ç‹ƒç‹†ç‹çŠºç‹…çŽ•çŽ—çŽ“çŽ”çŽ’ç”ºç”¹ç–”ç–•çšç¤½è€´è‚•è‚™è‚è‚’è‚œèŠèŠèŠ…èŠŽèŠ‘èŠ“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èŠŠèŠƒèŠ„è±¸è¿‰è¾¿é‚Ÿé‚¡é‚¥é‚žé‚§é‚ é˜°é˜¨é˜¯é˜­ä¸³ä¾˜ä½¼ä¾…ä½½ä¾€ä¾‡ä½¶ä½´ä¾‰ä¾„ä½·ä½Œä¾—ä½ªä¾šä½¹ä¾ä½¸ä¾ä¾œä¾”ä¾žä¾’ä¾‚ä¾•ä½«ä½®å†žå†¼å†¾åˆµåˆ²åˆ³å‰†åˆ±åŠ¼åŒŠåŒ‹åŒ¼åŽ’åŽ”å’‡å‘¿å’å’‘å’‚å’ˆå‘«å‘ºå‘¾å‘¥å‘¬å‘´å‘¦å’å‘¯å‘¡å‘ å’˜å‘£å‘§å‘¤å›·å›¹å¯å²å­å«å±å°å¶åž€åµå»å³å´å¢ï¿½".split("");
    for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
    D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¨å½å¤Œå¥…å¦µå¦ºå§å§Žå¦²å§Œå§å¦¶å¦¼å§ƒå§–å¦±å¦½å§€å§ˆå¦´å§‡å­¢å­¥å®“å®•å±„å±‡å²®å²¤å² å²µå²¯å²¨å²¬å²Ÿå²£å²­å²¢å²ªå²§å²å²¥å²¶å²°å²¦å¸—å¸”å¸™å¼¨å¼¢å¼£å¼¤å½”å¾‚å½¾å½½å¿žå¿¥æ€­æ€¦æ€™æ€²æ€‹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ€´æ€Šæ€—æ€³æ€šæ€žæ€¬æ€¢æ€æ€æ€®æ€“æ€‘æ€Œæ€‰æ€œæˆ”æˆ½æŠ­æŠ´æ‹‘æŠ¾æŠªæŠ¶æ‹ŠæŠ®æŠ³æŠ¯æŠ»æŠ©æŠ°æŠ¸æ”½æ–¨æ–»æ˜‰æ—¼æ˜„æ˜’æ˜ˆæ—»æ˜ƒæ˜‹æ˜æ˜…æ—½æ˜‘æ˜æ›¶æœŠæž…æ¬æžŽæž’æ¶æ»æž˜æž†æž„æ´æžæžŒæºæžŸæž‘æž™æžƒæ½æžæ¸æ¹æž”æ¬¥æ®€æ­¾æ¯žæ°æ²“æ³¬æ³«æ³®æ³™æ²¶æ³”æ²­æ³§æ²·æ³æ³‚æ²ºæ³ƒæ³†æ³­æ³²ï¿½".split("");
    for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
    D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ³’æ³æ²´æ²Šæ²æ²€æ³žæ³€æ´°æ³æ³‡æ²°æ³¹æ³æ³©æ³‘ç‚”ç‚˜ç‚…ç‚“ç‚†ç‚„ç‚‘ç‚–ç‚‚ç‚šç‚ƒç‰ªç‹–ç‹‹ç‹˜ç‹‰ç‹œç‹’ç‹”ç‹šç‹Œç‹‘çŽ¤çŽ¡çŽ­çŽ¦çŽ¢çŽ çŽ¬çŽç“ç“¨ç”¿ç•€ç”¾ç–Œç–˜çš¯ç›³ç›±ç›°ç›µçŸ¸çŸ¼çŸ¹çŸ»çŸºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çŸ·ç¥‚ç¤¿ç§…ç©¸ç©»ç«»ç±µç³½è€µè‚è‚®è‚£è‚¸è‚µè‚­èˆ èŠ è‹€èŠ«èŠšèŠ˜èŠ›èŠµèŠ§èŠ®èŠ¼èŠžèŠºèŠ´èŠ¨èŠ¡èŠ©è‹‚èŠ¤è‹ƒèŠ¶èŠ¢è™°è™¯è™­è™®è±–è¿’è¿‹è¿“è¿è¿–è¿•è¿—é‚²é‚´é‚¯é‚³é‚°é˜¹é˜½é˜¼é˜ºé™ƒä¿ä¿…ä¿“ä¾²ä¿‰ä¿‹ä¿ä¿”ä¿œä¿™ä¾»ä¾³ä¿›ä¿‡ä¿–ä¾ºä¿€ä¾¹ä¿¬å‰„å‰‰å‹€å‹‚åŒ½å¼åŽ—åŽ–åŽ™åŽ˜å’ºå’¡å’­å’¥å“ï¿½".split("");
    for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
    D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å“ƒèŒå’·å’®å“–å’¶å“…å“†å’ å‘°å’¼å’¢å’¾å‘²å“žå’°åžµåžžåžŸåž¤åžŒåž—åžåž›åž”åž˜åžåž™åž¥åžšåž•å£´å¤å¥“å§¡å§žå§®å¨€å§±å§å§ºå§½å§¼å§¶å§¤å§²å§·å§›å§©å§³å§µå§ å§¾å§´å§­å®¨å±Œå³å³˜å³Œå³—å³‹å³›ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å³žå³šå³‰å³‡å³Šå³–å³“å³”å³å³ˆå³†å³Žå³Ÿå³¸å·¹å¸¡å¸¢å¸£å¸ å¸¤åº°åº¤åº¢åº›åº£åº¥å¼‡å¼®å½–å¾†æ€·æ€¹æ”æ²æžæ…æ“æ‡æ‰æ›æŒæ€æ‚æŸæ€¤æ„æ˜æ¦æ®æ‰‚æ‰ƒæ‹æŒæŒ‹æ‹µæŒŽæŒƒæ‹«æ‹¹æŒæŒŒæ‹¸æ‹¶æŒ€æŒ“æŒ”æ‹ºæŒ•æ‹»æ‹°æ•æ•ƒæ–ªæ–¿æ˜¶æ˜¡æ˜²æ˜µæ˜œæ˜¦æ˜¢æ˜³æ˜«æ˜ºæ˜æ˜´æ˜¹æ˜®æœæœæŸæŸ²æŸˆæžºï¿½".split("");
    for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
    D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æŸœæž»æŸ¸æŸ˜æŸ€æž·æŸ…æŸ«æŸ¤æŸŸæžµæŸæž³æŸ·æŸ¶æŸ®æŸ£æŸ‚æž¹æŸŽæŸ§æŸ°æž²æŸ¼æŸ†æŸ­æŸŒæž®æŸ¦æŸ›æŸºæŸ‰æŸŠæŸƒæŸªæŸ‹æ¬¨æ®‚æ®„æ®¶æ¯–æ¯˜æ¯ æ° æ°¡æ´¨æ´´æ´­æ´Ÿæ´¼æ´¿æ´’æ´Šæ³šæ´³æ´„æ´™æ´ºæ´šæ´‘æ´€æ´æµ‚ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ´æ´˜æ´·æ´ƒæ´æµ€æ´‡æ´ æ´¬æ´ˆæ´¢æ´‰æ´ç‚·ç‚Ÿç‚¾ç‚±ç‚°ç‚¡ç‚´ç‚µç‚©ç‰ç‰‰ç‰Šç‰¬ç‰°ç‰³ç‰®ç‹Šç‹¤ç‹¨ç‹«ç‹Ÿç‹ªç‹¦ç‹£çŽ…çŒç‚çˆç…çŽ¹çŽ¶çŽµçŽ´ç«çŽ¿ç‡çŽ¾çƒç†çŽ¸ç‹ç“¬ç“®ç”®ç•‡ç•ˆç–§ç–ªç™¹ç›„çœˆçœƒçœ„çœ…çœŠç›·ç›»ç›ºçŸ§çŸ¨ç †ç ‘ç ’ç …ç ç ç Žç ‰ç ƒç “ç¥Šç¥Œç¥‹ç¥…ç¥„ç§•ç§ç§ç§–ç§Žçª€ï¿½".split("");
    for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
    D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç©¾ç«‘ç¬€ç¬ç±ºç±¸ç±¹ç±¿ç²€ç²ç´ƒç´ˆç´ç½˜ç¾‘ç¾ç¾¾è€‡è€Žè€è€”è€·èƒ˜èƒ‡èƒ èƒ‘èƒˆèƒ‚èƒèƒ…èƒ£èƒ™èƒœèƒŠèƒ•èƒ‰èƒèƒ—èƒ¦èƒè‡¿èˆ¡èŠ”è‹™è‹¾è‹¹èŒ‡è‹¨èŒ€è‹•èŒºè‹«è‹–è‹´è‹¬è‹¡è‹²è‹µèŒŒè‹»è‹¶è‹°è‹ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‹¤è‹ è‹ºè‹³è‹­è™·è™´è™¼è™³è¡è¡Žè¡§è¡ªè¡©è§“è¨„è¨‡èµ²è¿£è¿¡è¿®è¿ éƒ±é‚½é‚¿éƒ•éƒ…é‚¾éƒ‡éƒ‹éƒˆé‡”é‡“é™”é™é™‘é™“é™Šé™Žå€žå€…å€‡å€“å€¢å€°å€›ä¿µä¿´å€³å€·å€¬ä¿¶ä¿·å€—å€œå€ å€§å€µå€¯å€±å€Žå…šå†”å†“å‡Šå‡„å‡…å‡ˆå‡Žå‰¡å‰šå‰’å‰žå‰Ÿå‰•å‰¢å‹åŒŽåŽžå”¦å“¢å”—å”’å“§å“³å“¤å”šå“¿å”„å”ˆå“«å”‘å”…å“±ï¿½".split("");
    for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
    D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å”Šå“»å“·å“¸å“ å”Žå”ƒå”‹åœåœ‚åŸŒå ²åŸ•åŸ’åžºåŸ†åž½åž¼åž¸åž¶åž¿åŸ‡åŸåž¹åŸå¤Žå¥Šå¨™å¨–å¨­å¨®å¨•å¨å¨—å¨Šå¨žå¨³å­¬å®§å®­å®¬å°ƒå±–å±”å³¬å³¿å³®å³±å³·å´€å³¹å¸©å¸¨åº¨åº®åºªåº¬å¼³å¼°å½§ææšæ§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ‚¢æ‚ˆæ‚€æ‚’æ‚æ‚æ‚ƒæ‚•æ‚›æ‚—æ‚‡æ‚œæ‚Žæˆ™æ‰†æ‹²æŒæ–æŒ¬æ„æ…æŒ¶æƒæ¤æŒ¹æ‹æŠæŒ¼æŒ©ææŒ´æ˜æ”æ™æŒ­æ‡æŒ³æšæ‘æŒ¸æ—æ€æˆæ•Šæ•†æ—†æ—ƒæ—„æ—‚æ™Šæ™Ÿæ™‡æ™‘æœ’æœ“æ Ÿæ šæ¡‰æ ²æ ³æ »æ¡‹æ¡æ –æ ±æ œæ µæ «æ ­æ ¯æ¡Žæ¡„æ ´æ æ ’æ ”æ ¦æ ¨æ ®æ¡æ ºæ ¥æ  æ¬¬æ¬¯æ¬­æ¬±æ¬´æ­­è‚‚æ®ˆæ¯¦æ¯¤ï¿½".split("");
    for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
    D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¯¨æ¯£æ¯¢æ¯§æ°¥æµºæµ£æµ¤æµ¶æ´æµ¡æ¶’æµ˜æµ¢æµ­æµ¯æ¶‘æ¶æ·¯æµ¿æ¶†æµžæµ§æµ æ¶—æµ°æµ¼æµŸæ¶‚æ¶˜æ´¯æµ¨æ¶‹æµ¾æ¶€æ¶„æ´–æ¶ƒæµ»æµ½æµµæ¶çƒœçƒ“çƒ‘çƒçƒ‹ç¼¹çƒ¢çƒ—çƒ’çƒžçƒ çƒ”çƒçƒ…çƒ†çƒ‡çƒšçƒŽçƒ¡ç‰‚ç‰¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç‰·ç‰¶çŒ€ç‹ºç‹´ç‹¾ç‹¶ç‹³ç‹»çŒç“ç™ç¥ç–çŽ¼ç§ç£ç©çœç’ç›ç”ççšç—ç˜ç¨ç“žç“Ÿç“´ç“µç”¡ç•›ç•Ÿç–°ç—ç–»ç—„ç—€ç–¿ç–¶ç–ºçšŠç›‰çœçœ›çœçœ“çœ’çœ£çœ‘çœ•çœ™çœšçœ¢çœ§ç £ç ¬ç ¢ç µç ¯ç ¨ç ®ç «ç ¡ç ©ç ³ç ªç ±ç¥”ç¥›ç¥ç¥œç¥“ç¥’ç¥‘ç§«ç§¬ç§ ç§®ç§­ç§ªç§œç§žç§çª†çª‰çª…çª‹çªŒçªŠçª‡ç«˜ç¬ï¿½".split("");
    for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
    D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¬„ç¬“ç¬…ç¬ç¬ˆç¬Šç¬Žç¬‰ç¬’ç²„ç²‘ç²Šç²Œç²ˆç²ç²…ç´žç´ç´‘ç´Žç´˜ç´–ç´“ç´Ÿç´’ç´ç´Œç½œç½¡ç½žç½ ç½ç½›ç¾–ç¾’ç¿ƒç¿‚ç¿€è€–è€¾è€¹èƒºèƒ²èƒ¹èƒµè„èƒ»è„€èˆèˆ¯èˆ¥èŒ³èŒ­è„èŒ™è‘èŒ¥è–èŒ¿èèŒ¦èŒœèŒ¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‚èŽèŒ›èŒªèŒˆèŒ¼èèŒ–èŒ¤èŒ èŒ·èŒ¯èŒ©è‡è…èŒè“èŒžèŒ¬è‹èŒ§èˆè™“è™’èš¢èš¨èš–èšèš‘èšžèš‡èš—èš†èš‹èššèš…èš¥èš™èš¡èš§èš•èš˜èšŽèšèšèš”è¡ƒè¡„è¡­è¡µè¡¶è¡²è¢€è¡±è¡¿è¡¯è¢ƒè¡¾è¡´è¡¼è¨’è±‡è±—è±»è²¤è²£èµ¶èµ¸è¶µè¶·è¶¶è»‘è»“è¿¾è¿µé€‚è¿¿è¿»é€„è¿¼è¿¶éƒ–éƒ éƒ™éƒšéƒ£éƒŸéƒ¥éƒ˜éƒ›éƒ—éƒœéƒ¤é…ï¿½".split("");
    for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
    D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é…Žé…é‡•é‡¢é‡šé™œé™Ÿéš¼é££é«Ÿé¬¯ä¹¿å°åªå¡åžå å“å‹åå²åˆååå›åŠå¢å€•å…åŸå©å«å£å¤å†å€å®å³å—å‘å‡å‰«å‰­å‰¬å‰®å‹–å‹“åŒ­åŽœå•µå•¶å”¼å•å•å”´å”ªå•‘å•¢å”¶å”µå”°å•’å•…ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å”Œå”²å•¥å•Žå”¹å•ˆå”­å”»å•€å•‹åœŠåœ‡åŸ»å ”åŸ¢åŸ¶åŸœåŸ´å €åŸ­åŸ½å ˆåŸ¸å ‹åŸ³åŸå ‡åŸ®åŸ£åŸ²åŸ¥åŸ¬åŸ¡å ŽåŸ¼å åŸ§å å ŒåŸ±åŸ©åŸ°å å „å¥œå© å©˜å©•å©§å©žå¨¸å¨µå©­å©å©Ÿå©¥å©¬å©“å©¤å©—å©ƒå©å©’å©„å©›å©ˆåªŽå¨¾å©å¨¹å©Œå©°å©©å©‡å©‘å©–å©‚å©œå­²å­®å¯å¯€å±™å´žå´‹å´å´šå´ å´Œå´¨å´å´¦å´¥å´ï¿½".split("");
    for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
    D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å´°å´’å´£å´Ÿå´®å¸¾å¸´åº±åº´åº¹åº²åº³å¼¶å¼¸å¾›å¾–å¾Ÿæ‚Šæ‚æ‚†æ‚¾æ‚°æ‚ºæƒ“æƒ”æƒæƒ¤æƒ™æƒæƒˆæ‚±æƒ›æ‚·æƒŠæ‚¿æƒƒæƒæƒ€æŒ²æ¥æŽŠæŽ‚æ½æŽ½æŽžæŽ­æŽæŽ—æŽ«æŽŽæ¯æŽ‡æŽæ®æŽ¯æµæŽœæ­æŽ®æ¼æŽ¤æŒ»æŽŸï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¸æŽ…æŽæŽ‘æŽæ°æ•“æ—æ™¥æ™¡æ™›æ™™æ™œæ™¢æœ˜æ¡¹æ¢‡æ¢æ¢œæ¡­æ¡®æ¢®æ¢«æ¥–æ¡¯æ¢£æ¢¬æ¢©æ¡µæ¡´æ¢²æ¢æ¡·æ¢’æ¡¼æ¡«æ¡²æ¢ªæ¢€æ¡±æ¡¾æ¢›æ¢–æ¢‹æ¢ æ¢‰æ¢¤æ¡¸æ¡»æ¢‘æ¢Œæ¢Šæ¡½æ¬¶æ¬³æ¬·æ¬¸æ®‘æ®æ®æ®Žæ®Œæ°ªæ·€æ¶«æ¶´æ¶³æ¹´æ¶¬æ·©æ·¢æ¶·æ·¶æ·”æ¸€æ·ˆæ· æ·Ÿæ·–æ¶¾æ·¥æ·œæ·æ·›æ·´æ·Šæ¶½æ·­æ·°æ¶ºæ·•æ·‚æ·æ·‰ï¿½".split("");
    for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
    D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ·æ·²æ·“æ·½æ·—æ·æ·£æ¶»çƒºç„çƒ·ç„—çƒ´ç„Œçƒ°ç„„çƒ³ç„çƒ¼çƒ¿ç„†ç„“ç„€çƒ¸çƒ¶ç„‹ç„‚ç„Žç‰¾ç‰»ç‰¼ç‰¿çŒçŒ—çŒ‡çŒ‘çŒ˜çŒŠçŒˆç‹¿çŒçŒžçŽˆç¶ç¸çµç„çç½ç‡ç€çºç¼ç¿çŒç‹ç´çˆç•¤ç•£ç—Žç—’ç—ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç—‹ç—Œç—‘ç—çšçš‰ç›“çœ¹çœ¯çœ­çœ±çœ²çœ´çœ³çœ½çœ¥çœ»çœµç¡ˆç¡’ç¡‰ç¡ç¡Šç¡Œç ¦ç¡…ç¡ç¥¤ç¥§ç¥©ç¥ªç¥£ç¥«ç¥¡ç¦»ç§ºç§¸ç§¶ç§·çªçª”çªç¬µç­‡ç¬´ç¬¥ç¬°ç¬¢ç¬¤ç¬³ç¬˜ç¬ªç¬ç¬±ç¬«ç¬­ç¬¯ç¬²ç¬¸ç¬šç¬£ç²”ç²˜ç²–ç²£ç´µç´½ç´¸ç´¶ç´ºçµ…ç´¬ç´©çµçµ‡ç´¾ç´¿çµŠç´»ç´¨ç½£ç¾•ç¾œç¾ç¾›ç¿Šç¿‹ç¿ç¿ç¿‘ç¿‡ç¿ç¿‰è€Ÿï¿½".split("");
    for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
    D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è€žè€›è‡èƒèˆè„˜è„¥è„™è„›è„­è„Ÿè„¬è„žè„¡è„•è„§è„è„¢èˆ‘èˆ¸èˆ³èˆºèˆ´èˆ²è‰´èŽèŽ£èŽ¨èŽèºè³èŽ¤è´èŽèŽèŽ•èŽ™èµèŽ”èŽ©è½èŽƒèŽŒèŽèŽ›èŽªèŽ‹è¾èŽ¥èŽ¯èŽˆèŽ—èŽ°è¿èŽ¦èŽ‡èŽ®è¶èŽšè™™è™–èš¿èš·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è›‚è›è›…èšºèš°è›ˆèš¹èš³èš¸è›Œèš´èš»èš¼è›ƒèš½èš¾è¡’è¢‰è¢•è¢¨è¢¢è¢ªè¢šè¢‘è¢¡è¢Ÿè¢˜è¢§è¢™è¢›è¢—è¢¤è¢¬è¢Œè¢“è¢Žè¦‚è§–è§™è§•è¨°è¨§è¨¬è¨žè°¹è°»è±œè±è±½è²¥èµ½èµ»èµ¹è¶¼è·‚è¶¹è¶¿è·è»˜è»žè»è»œè»—è» è»¡é€¤é€‹é€‘é€œé€Œé€¡éƒ¯éƒªéƒ°éƒ´éƒ²éƒ³éƒ”éƒ«éƒ¬éƒ©é…–é…˜é…šé…“é…•é‡¬é‡´é‡±é‡³é‡¸é‡¤é‡¹é‡ªï¿½".split("");
    for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
    D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é‡«é‡·é‡¨é‡®é•ºé–†é–ˆé™¼é™­é™«é™±é™¯éš¿éªé „é£¥é¦—å‚›å‚•å‚”å‚žå‚‹å‚£å‚ƒå‚Œå‚Žå‚å¨å‚œå‚’å‚‚å‚‡å…Ÿå‡”åŒ’åŒ‘åŽ¤åŽ§å–‘å–¨å–¥å–­å•·å™…å–¢å–“å–ˆå–å–µå–å–£å–’å–¤å•½å–Œå–¦å•¿å–•å–¡å–ŽåœŒå ©å ·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å ™å žå §å £å ¨åŸµå¡ˆå ¥å œå ›å ³å ¿å ¶å ®å ¹å ¸å ­å ¬å »å¥¡åª¯åª”åªŸå©ºåª¢åªžå©¸åª¦å©¼åª¥åª¬åª•åª®å¨·åª„åªŠåª—åªƒåª‹åª©å©»å©½åªŒåªœåªåª“åªå¯ªå¯å¯‹å¯”å¯‘å¯Šå¯Žå°Œå°°å´·åµƒåµ«åµåµ‹å´¿å´µåµ‘åµŽåµ•å´³å´ºåµ’å´½å´±åµ™åµ‚å´¹åµ‰å´¸å´¼å´²å´¶åµ€åµ…å¹„å¹å½˜å¾¦å¾¥å¾«æƒ‰æ‚¹æƒŒæƒ¢æƒŽæƒ„æ„”ï¿½".split("");
    for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
    D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æƒ²æ„Šæ„–æ„…æƒµæ„“æƒ¸æƒ¼æƒ¾æƒæ„ƒæ„˜æ„æ„æƒ¿æ„„æ„‹æ‰ŠæŽ”æŽ±æŽ°æŽæ¥æ¨æ¯æƒæ’æ³æŠæ æ¶æ•æ²æµæ‘¡æŸæŽ¾ææœæ„æ˜æ“æ‚æ‡æŒæ‹æˆæ°æ—æ™æ”²æ•§æ•ªæ•¤æ•œæ•¨æ•¥æ–Œæ–æ–žæ–®æ—æ—’ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ™¼æ™¬æ™»æš€æ™±æ™¹æ™ªæ™²æœæ¤Œæ£“æ¤„æ£œæ¤ªæ£¬æ£ªæ£±æ¤æ£–æ£·æ£«æ£¤æ£¶æ¤“æ¤æ£³æ£¡æ¤‡æ£Œæ¤ˆæ¥°æ¢´æ¤‘æ£¯æ£†æ¤”æ£¸æ£æ£½æ£¼æ£¨æ¤‹æ¤Šæ¤—æ£Žæ£ˆæ£æ£žæ£¦æ£´æ£‘æ¤†æ£”æ£©æ¤•æ¤¥æ£‡æ¬¹æ¬»æ¬¿æ¬¼æ®”æ®—æ®™æ®•æ®½æ¯°æ¯²æ¯³æ°°æ·¼æ¹†æ¹‡æ¸Ÿæ¹‰æºˆæ¸¼æ¸½æ¹…æ¹¢æ¸«æ¸¿æ¹æ¹æ¹³æ¸œæ¸³æ¹‹æ¹€æ¹‘æ¸»æ¸ƒæ¸®æ¹žï¿½".split("");
    for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
    D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¹¨æ¹œæ¹¡æ¸±æ¸¨æ¹ æ¹±æ¹«æ¸¹æ¸¢æ¸°æ¹“æ¹¥æ¸§æ¹¸æ¹¤æ¹·æ¹•æ¹¹æ¹’æ¹¦æ¸µæ¸¶æ¹šç„ ç„žç„¯çƒ»ç„®ç„±ç„£ç„¥ç„¢ç„²ç„Ÿç„¨ç„ºç„›ç‰‹ç‰šçŠˆçŠ‰çŠ†çŠ…çŠ‹çŒ’çŒ‹çŒ°çŒ¢çŒ±çŒ³çŒ§çŒ²çŒ­çŒ¦çŒ£çŒµçŒŒç®ç¬ç°ç«ç–ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çšç¡ç­ç±ç¤ç£çç©ç ç²ç“»ç”¯ç•¯ç•¬ç—§ç—šç—¡ç—¦ç—ç—Ÿç—¤ç——çš•çš’ç›šç†ç‡ç„çç…çŠçŽç‹çŒçŸžçŸ¬ç¡ ç¡¤ç¡¥ç¡œç¡­ç¡±ç¡ªç¡®ç¡°ç¡©ç¡¨ç¡žç¡¢ç¥´ç¥³ç¥²ç¥°ç¨‚ç¨Šç¨ƒç¨Œç¨„çª™ç«¦ç«¤ç­Šç¬»ç­„ç­ˆç­Œç­Žç­€ç­˜ç­…ç²¢ç²žç²¨ç²¡çµ˜çµ¯çµ£çµ“çµ–çµ§çµªçµçµ­çµœçµ«çµ’çµ”çµ©çµ‘çµŸçµŽç¼¾ç¼¿ç½¥ï¿½".split("");
    for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
    D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç½¦ç¾¢ç¾ ç¾¡ç¿—è‘èèèƒ¾èƒ”è…ƒè…Šè…’è…è…‡è„½è…è„ºè‡¦è‡®è‡·è‡¸è‡¹èˆ„èˆ¼èˆ½èˆ¿è‰µèŒ»èè¹è£è€è¨è’è§è¤è¼è¶èè†èˆè«è£èŽ¿èèè¥è˜è¿è¡è‹èŽè–èµè‰è‰èèžè‘è†è‚è³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è•èºè‡è‘èªè“èƒè¬è®è„è»è—è¢è›è›è¾è›˜è›¢è›¦è›“è›£è›šè›ªè›è›«è›œè›¬è›©è›—è›¨è›‘è¡ˆè¡–è¡•è¢ºè£—è¢¹è¢¸è£€è¢¾è¢¶è¢¼è¢·è¢½è¢²è¤è£‰è¦•è¦˜è¦—è§è§šè§›è©Žè©è¨¹è©™è©€è©—è©˜è©„è©…è©’è©ˆè©‘è©Šè©Œè©è±Ÿè²è²€è²ºè²¾è²°è²¹è²µè¶„è¶€è¶‰è·˜è·“è·è·‡è·–è·œè·è·•è·™è·ˆè·—è·…è»¯è»·è»ºï¿½".split("");
    for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
    D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è»¹è»¦è»®è»¥è»µè»§è»¨è»¶è»«è»±è»¬è»´è»©é€­é€´é€¯é„†é„¬é„„éƒ¿éƒ¼é„ˆéƒ¹éƒ»é„é„€é„‡é„…é„ƒé…¡é…¤é…Ÿé…¢é… éˆéˆŠéˆ¥éˆƒéˆšéˆ¦éˆéˆŒéˆ€éˆ’é‡¿é‡½éˆ†éˆ„éˆ§éˆ‚éˆœéˆ¤éˆ™éˆ—éˆ…éˆ–é•»é–é–Œé–éš‡é™¾éšˆï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éš‰éšƒéš€é›‚é›ˆé›ƒé›±é›°é¬é°é®é ‡é¢©é£«é³¦é»¹äºƒäº„äº¶å‚½å‚¿åƒ†å‚®åƒ„åƒŠå‚´åƒˆåƒ‚å‚°åƒå‚ºå‚±åƒ‹åƒ‰å‚¶å‚¸å‡—å‰ºå‰¸å‰»å‰¼å—ƒå—›å—Œå—å—‹å—Šå—å—€å—”å—„å—©å–¿å—’å–å—å—•å—¢å—–å—ˆå—²å—å—™å—‚åœ”å¡“å¡¨å¡¤å¡å¡å¡‰å¡¯å¡•å¡Žå¡å¡™å¡¥å¡›å ½å¡£å¡±å£¼å«‡å«„å«‹åªºåª¸åª±åªµåª°åª¿å«ˆåª»å«†ï¿½".split("");
    for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
    D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åª·å«€å«Šåª´åª¶å«åª¹åªå¯–å¯˜å¯™å°Ÿå°³åµ±åµ£åµŠåµ¥åµ²åµ¬åµžåµ¨åµ§åµ¢å·°å¹å¹Žå¹Šå¹å¹‹å»…å»Œå»†å»‹å»‡å½€å¾¯å¾­æƒ·æ…‰æ…Šæ„«æ……æ„¶æ„²æ„®æ…†æ„¯æ…æ„©æ…€æˆ é…¨æˆ£æˆ¥æˆ¤æ…æ±æ«ææ’æ‰æ æ¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ³æ‘ƒæŸæ•æ˜æ¹æ·æ¢æ£æŒæ¦æ°æ¨æ‘æµæ¯æŠæšæ‘€æ¥æ§æ‹æ§æ›æ®æ¡æŽæ•¯æ–’æ—“æš†æšŒæš•æšæš‹æšŠæš™æš”æ™¸æœ æ¥¦æ¥Ÿæ¤¸æ¥Žæ¥¢æ¥±æ¤¿æ¥…æ¥ªæ¤¹æ¥‚æ¥—æ¥™æ¥ºæ¥ˆæ¥‰æ¤µæ¥¬æ¤³æ¤½æ¥¥æ£°æ¥¸æ¤´æ¥©æ¥€æ¥¯æ¥„æ¥¶æ¥˜æ¥æ¥´æ¥Œæ¤»æ¥‹æ¤·æ¥œæ¥æ¥‘æ¤²æ¥’æ¤¯æ¥»æ¤¼æ­†æ­…æ­ƒæ­‚æ­ˆæ­æ®›ï¨æ¯»æ¯¼ï¿½".split("");
    for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
    D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¯¹æ¯·æ¯¸æº›æ»–æ»ˆæºæ»€æºŸæº“æº”æº æº±æº¹æ»†æ»’æº½æ»æºžæ»‰æº·æº°æ»æº¦æ»æº²æº¾æ»ƒæ»œæ»˜æº™æº’æºŽæºæº¤æº¡æº¿æº³æ»æ»Šæº—æº®æº£ç…‡ç…”ç…’ç…£ç… ç…ç…ç…¢ç…²ç…¸ç…ªç…¡ç…‚ç…˜ç…ƒç…‹ç…°ç…Ÿç…ç…“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç…„ç…ç…šç‰çŠçŠŒçŠ‘çŠçŠŽçŒ¼ç‚çŒ»çŒºç€çŠç‰ç‘„ç‘Šç‘‹ç‘’ç‘‘ç‘—ç‘€ç‘ç‘ç‘Žç‘‚ç‘†ç‘ç‘”ç“¡ç“¿ç“¾ç“½ç”ç•¹ç•·æ¦ƒç—¯ç˜ç˜ƒç—·ç—¾ç—¼ç—¹ç—¸ç˜ç—»ç—¶ç—­ç—µç—½çš™çšµç›ç•çŸç ç’ç–çšç©ç§ç”ç™ç­çŸ ç¢‡ç¢šç¢”ç¢ç¢„ç¢•ç¢…ç¢†ç¢¡ç¢ƒç¡¹ç¢™ç¢€ç¢–ç¡»ç¥¼ç¦‚ç¥½ç¥¹ç¨‘ç¨˜ç¨™ç¨’ç¨—ç¨•ç¨¢ç¨“ï¿½".split("");
    for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
    D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨›ç¨çª£çª¢çªžç««ç­¦ç­¤ç­­ç­´ç­©ç­²ç­¥ç­³ç­±ç­°ç­¡ç­¸ç­¶ç­£ç²²ç²´ç²¯ç¶ˆç¶†ç¶€ç¶çµ¿ç¶…çµºç¶Žçµ»ç¶ƒçµ¼ç¶Œç¶”ç¶„çµ½ç¶’ç½­ç½«ç½§ç½¨ç½¬ç¾¦ç¾¥ç¾§ç¿›ç¿œè€¡è…¤è… è…·è…œè…©è…›è…¢è…²æœ¡è…žè…¶è…§è…¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è…„è…¡èˆè‰‰è‰„è‰€è‰‚è‰…è“±è¿è‘–è‘¶è‘¹è’è’è‘¥è‘‘è‘€è’†è‘§è°è‘è‘½è‘šè‘™è‘´è‘³è‘è”‡è‘žè·èºè´è‘ºè‘ƒè‘¸è²è‘…è©è™è‘‹è¯è‘‚è­è‘Ÿè‘°è¹è‘Žè‘Œè‘’è‘¯è“…è’Žè»è‘‡è¶è³è‘¨è‘¾è‘„è«è‘ è‘”è‘®è‘èœ‹èœ„è›·èœŒè›ºè›–è›µèè›¸èœŽèœ‰èœè›¶èœèœ…è£–è£‹è£è£Žè£žè£›è£šè£Œè£è¦…è¦›è§Ÿè§¥è§¤ï¿½".split("");
    for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
    D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è§¡è§ è§¢è§œè§¦è©¶èª†è©¿è©¡è¨¿è©·èª‚èª„è©µèªƒèªè©´è©ºè°¼è±‹è±Šè±¥è±¤è±¦è²†è²„è²…è³Œèµ¨èµ©è¶‘è¶Œè¶Žè¶è¶è¶“è¶”è¶è¶’è·°è· è·¬è·±è·®è·è·©è·£è·¢è·§è·²è·«è·´è¼†è»¿è¼è¼€è¼…è¼‡è¼ˆè¼‚è¼‹é’é€¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é„é‰é€½é„é„é„é„‘é„–é„”é„‹é„Žé…®é…¯é‰ˆé‰’éˆ°éˆºé‰¦éˆ³é‰¥é‰žéŠƒéˆ®é‰Šé‰†é‰­é‰¬é‰é‰ é‰§é‰¯éˆ¶é‰¡é‰°éˆ±é‰”é‰£é‰é‰²é‰Žé‰“é‰Œé‰–éˆ²é–Ÿé–œé–žé–›éš’éš“éš‘éš—é›Žé›ºé›½é›¸é›µé³é·é¸é²é é é Žé¢¬é£¶é£¹é¦¯é¦²é¦°é¦µéª­éª«é­›é³ªé³­é³§éº€é»½åƒ¦åƒ”åƒ—åƒ¨åƒ³åƒ›åƒªåƒåƒ¤åƒ“åƒ¬åƒ°åƒ¯åƒ£åƒ ï¿½".split("");
    for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
    D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å‡˜åŠ€åŠå‹©å‹«åŒ°åŽ¬å˜§å˜•å˜Œå˜’å—¼å˜å˜œå˜å˜“å˜‚å—ºå˜å˜„å—¿å—¹å¢‰å¡¼å¢å¢˜å¢†å¢å¡¿å¡´å¢‹å¡ºå¢‡å¢‘å¢Žå¡¶å¢‚å¢ˆå¡»å¢”å¢å£¾å¥«å«œå«®å«¥å«•å«ªå«šå«­å««å«³å«¢å« å«›å«¬å«žå«å«™å«¨å«Ÿå­·å¯ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¯£å±£å¶‚å¶€åµ½å¶†åµºå¶åµ·å¶Šå¶‰å¶ˆåµ¾åµ¼å¶åµ¹åµ¿å¹˜å¹™å¹“å»˜å»‘å»—å»Žå»œå»•å»™å»’å»”å½„å½ƒå½¯å¾¶æ„¬æ„¨æ…æ…žæ…±æ…³æ…’æ…“æ…²æ…¬æ†€æ…´æ…”æ…ºæ…›æ…¥æ„»æ…ªæ…¡æ…–æˆ©æˆ§æˆ«æ«æ‘æ‘›æ‘æ‘´æ‘¶æ‘²æ‘³æ‘½æ‘µæ‘¦æ’¦æ‘Žæ’‚æ‘žæ‘œæ‘‹æ‘“æ‘ æ‘æ‘¿æ¿æ‘¬æ‘«æ‘™æ‘¥æ‘·æ•³æ– æš¡æš æšŸæœ…æœ„æœ¢æ¦±æ¦¶æ§‰ï¿½".split("");
    for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
    D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¦ æ§Žæ¦–æ¦°æ¦¬æ¦¼æ¦‘æ¦™æ¦Žæ¦§æ¦æ¦©æ¦¾æ¦¯æ¦¿æ§„æ¦½æ¦¤æ§”æ¦¹æ§Šæ¦šæ§æ¦³æ¦“æ¦ªæ¦¡æ¦žæ§™æ¦—æ¦æ§‚æ¦µæ¦¥æ§†æ­Šæ­æ­‹æ®žæ®Ÿæ® æ¯ƒæ¯„æ¯¾æ»Žæ»µæ»±æ¼ƒæ¼¥æ»¸æ¼·æ»»æ¼®æ¼‰æ½Žæ¼™æ¼šæ¼§æ¼˜æ¼»æ¼’æ»­æ¼Šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¼¶æ½³æ»¹æ»®æ¼­æ½€æ¼°æ¼¼æ¼µæ»«æ¼‡æ¼Žæ½ƒæ¼…æ»½æ»¶æ¼¹æ¼œæ»¼æ¼ºæ¼Ÿæ¼æ¼žæ¼ˆæ¼¡ç†‡ç†ç†‰ç†€ç†…ç†‚ç†ç…»ç††ç†ç†—ç‰„ç‰“çŠ—çŠ•çŠ“çƒçç‘çŒç‘¢ç‘³ç‘±ç‘µç‘²ç‘§ç‘®ç”€ç”‚ç”ƒç•½ç–ç˜–ç˜ˆç˜Œç˜•ç˜‘ç˜Šç˜”çš¸çžç¼çž…çž‚ç®çž€ç¯ç¾çžƒç¢²ç¢ªç¢´ç¢­ç¢¨ç¡¾ç¢«ç¢žç¢¥ç¢ ç¢¬ç¢¢ç¢¤ç¦˜ç¦Šç¦‹ç¦–ç¦•ç¦”ç¦“ï¿½".split("");
    for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
    D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦—ç¦ˆç¦’ç¦ç¨«ç©Šç¨°ç¨¯ç¨¨ç¨¦çª¨çª«çª¬ç«®ç®ˆç®œç®Šç®‘ç®ç®–ç®ç®Œç®›ç®Žç®…ç®˜åŠ„ç®™ç®¤ç®‚ç²»ç²¿ç²¼ç²ºç¶§ç¶·ç·‚ç¶£ç¶ªç·ç·€ç·…ç¶ç·Žç·„ç·†ç·‹ç·Œç¶¯ç¶¹ç¶–ç¶¼ç¶Ÿç¶¦ç¶®ç¶©ç¶¡ç·‰ç½³ç¿¢ç¿£ç¿¥ç¿žï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è€¤èèœè†‰è††è†ƒè†‡è†è†Œè†‹èˆ•è’—è’¤è’¡è’Ÿè’ºè“Žè“‚è’¬è’®è’«è’¹è’´è“è“è’ªè’šè’±è“è’è’§è’»è’¢è’”è“‡è“Œè’›è’©è’¯è’¨è“–è’˜è’¶è“è’ è“—è“”è“’è“›è’°è’‘è™¡èœ³èœ£èœ¨è«è€èœ®èœžèœ¡èœ™èœ›èƒèœ¬èèœ¾è†èœ èœ²èœªèœ­èœ¼èœ’èœºèœ±èœµè‚èœ¦èœ§èœ¸èœ¤èœšèœ°èœ‘è£·è£§è£±è£²è£ºè£¾è£®è£¼è£¶è£»ï¿½".split("");
    for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
    D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è£°è£¬è£«è¦è¦¡è¦Ÿè¦žè§©è§«è§¨èª«èª™èª‹èª’èªèª–è°½è±¨è±©è³•è³è³—è¶–è¸‰è¸‚è·¿è¸è·½è¸Šè¸ƒè¸‡è¸†è¸…è·¾è¸€è¸„è¼è¼‘è¼Žè¼é„£é„œé„ é„¢é„Ÿé„é„šé„¤é„¡é„›é…ºé…²é…¹é…³éŠ¥éŠ¤é‰¶éŠ›é‰ºéŠ éŠ”éŠªéŠï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŠ¦éŠšéŠ«é‰¹éŠ—é‰¿éŠ£é‹®éŠŽéŠ‚éŠ•éŠ¢é‰½éŠˆéŠ¡éŠŠéŠ†éŠŒéŠ™éŠ§é‰¾éŠ‡éŠ©éŠéŠ‹éˆ­éšžéš¡é›¿é˜é½éºé¾éžƒéž€éž‚é»éž„éžé¿éŸŽéŸé –é¢­é¢®é¤‚é¤€é¤‡é¦é¦œé§ƒé¦¹é¦»é¦ºé§‚é¦½é§‡éª±é«£é«§é¬¾é¬¿é­ é­¡é­Ÿé³±é³²é³µéº§åƒ¿å„ƒå„°åƒ¸å„†å„‡åƒ¶åƒ¾å„‹å„Œåƒ½å„ŠåŠ‹åŠŒå‹±å‹¯å™ˆå™‚å™Œå˜µå™å™Šå™‰å™†å™˜ï¿½".split("");
    for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
    D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å™šå™€å˜³å˜½å˜¬å˜¾å˜¸å˜ªå˜ºåœšå¢«å¢å¢±å¢ å¢£å¢¯å¢¬å¢¥å¢¡å£¿å«¿å«´å«½å«·å«¶å¬ƒå«¸å¬‚å«¹å¬å¬‡å¬…å¬å±§å¶™å¶—å¶Ÿå¶’å¶¢å¶“å¶•å¶ å¶œå¶¡å¶šå¶žå¹©å¹å¹ å¹œç·³å»›å»žå»¡å½‰å¾²æ†‹æ†ƒæ…¹æ†±æ†°æ†¢æ†‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ†›æ†“æ†¯æ†­æ†Ÿæ†’æ†ªæ†¡æ†æ…¦æ†³æˆ­æ‘®æ‘°æ’–æ’ æ’…æ’—æ’œæ’æ’‹æ’Šæ’Œæ’£æ’Ÿæ‘¨æ’±æ’˜æ•¶æ•ºæ•¹æ•»æ–²æ–³æšµæš°æš©æš²æš·æšªæš¯æ¨€æ¨†æ¨—æ§¥æ§¸æ¨•æ§±æ§¤æ¨ æ§¿æ§¬æ§¢æ¨›æ¨æ§¾æ¨§æ§²æ§®æ¨”æ§·æ§§æ©€æ¨ˆæ§¦æ§»æ¨æ§¼æ§«æ¨‰æ¨„æ¨˜æ¨¥æ¨æ§¶æ¨¦æ¨‡æ§´æ¨–æ­‘æ®¥æ®£æ®¢æ®¦æ°æ°€æ¯¿æ°‚æ½æ¼¦æ½¾æ¾‡æ¿†æ¾’ï¿½".split("");
    for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
    D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¾æ¾‰æ¾Œæ½¢æ½æ¾…æ½šæ¾–æ½¶æ½¬æ¾‚æ½•æ½²æ½’æ½æ½—æ¾”æ¾“æ½æ¼€æ½¡æ½«æ½½æ½§æ¾æ½“æ¾‹æ½©æ½¿æ¾•æ½£æ½·æ½ªæ½»ç†²ç†¯ç†›ç†°ç† ç†šç†©ç†µç†ç†¥ç†žç†¤ç†¡ç†ªç†œç†§ç†³çŠ˜çŠšç˜ç’çžçŸç çç›ç¡çšç™ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢ç’‡ç’‰ç’Šç’†ç’ç‘½ç’…ç’ˆç‘¼ç‘¹ç”ˆç”‡ç•¾ç˜¥ç˜žç˜™ç˜ç˜œç˜£ç˜šç˜¨ç˜›çšœçšçšžçš›çžçžçž‰çžˆç£ç¢»ç£ç£Œç£‘ç£Žç£”ç£ˆç£ƒç£„ç£‰ç¦šç¦¡ç¦ ç¦œç¦¢ç¦›æ­¶ç¨¹çª²çª´çª³ç®·ç¯‹ç®¾ç®¬ç¯Žç®¯ç®¹ç¯Šç®µç³…ç³ˆç³Œç³‹ç··ç·›ç·ªç·§ç·—ç·¡ç¸ƒç·ºç·¦ç·¶ç·±ç·°ç·®ç·Ÿç½¶ç¾¬ç¾°ç¾­ç¿­ç¿«ç¿ªç¿¬ç¿¦ç¿¨è¤è§è†£è†Ÿï¿½".split("");
    for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
    D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è†žè†•è†¢è†™è†—èˆ–è‰è‰“è‰’è‰è‰Žè‰‘è”¤è”»è”è”€è”©è”Žè”‰è”è”Ÿè”Šè”§è”œè“»è”«è“ºè”ˆè”Œè“´è”ªè“²è”•è“·è“«è“³è“¼è”’è“ªè“©è”–è“¾è”¨è”è”®è”‚è“½è”žè“¶è”±è”¦è“§è“¨è“°è“¯è“¹è”˜è” è”°è”‹è”™è”¯è™¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è–è£è¤è·èŸ¡è³è˜è”è›è’è¡èšè‘èžè­èªèèŽèŸèè¯è¬èºè®èœè¥èè»èµè¢è§è©è¡šè¤…è¤Œè¤”è¤‹è¤—è¤˜è¤™è¤†è¤–è¤‘è¤Žè¤‰è¦¢è¦¤è¦£è§­è§°è§¬è«è«†èª¸è«“è«‘è«”è«•èª»è«—èª¾è«€è«…è«˜è«ƒèªºèª½è«™è°¾è±è²è³¥è³Ÿè³™è³¨è³šè³è³§è¶ è¶œè¶¡è¶›è¸ è¸£è¸¥è¸¤è¸®è¸•è¸›è¸–è¸‘è¸™è¸¦è¸§ï¿½".split("");
    for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
    D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¸”è¸’è¸˜è¸“è¸œè¸—è¸šè¼¬è¼¤è¼˜è¼šè¼ è¼£è¼–è¼—é³é°é¯é§é«é„¯é„«é„©é„ªé„²é„¦é„®é†…é††é†Šé†é†‚é†„é†€é‹é‹ƒé‹„é‹€é‹™éŠ¶é‹é‹±é‹Ÿé‹˜é‹©é‹—é‹é‹Œé‹¯é‹‚é‹¨é‹Šé‹ˆé‹Žé‹¦é‹é‹•é‹‰é‹ é‹žé‹§é‹‘é‹“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŠµé‹¡é‹†éŠ´é•¼é–¬é–«é–®é–°éš¤éš¢é›“éœ…éœˆéœ‚éšéžŠéžŽéžˆéŸéŸé žé é ¦é ©é ¨é  é ›é §é¢²é¤ˆé£ºé¤‘é¤”é¤–é¤—é¤•é§œé§é§é§“é§”é§Žé§‰é§–é§˜é§‹é§—é§Œéª³é«¬é««é«³é«²é«±é­†é­ƒé­§é­´é­±é­¦é­¶é­µé­°é­¨é­¤é­¬é³¼é³ºé³½é³¿é³·é´‡é´€é³¹é³»é´ˆé´…é´„éºƒé»“é¼é¼å„œå„“å„—å„šå„‘å‡žåŒ´å¡å™°å™ å™®ï¿½".split("");
    for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
    D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å™³å™¦å™£å™­å™²å™žå™·åœœåœ›å£ˆå¢½å£‰å¢¿å¢ºå£‚å¢¼å£†å¬—å¬™å¬›å¬¡å¬”å¬“å¬å¬–å¬¨å¬šå¬ å¬žå¯¯å¶¬å¶±å¶©å¶§å¶µå¶°å¶®å¶ªå¶¨å¶²å¶­å¶¯å¶´å¹§å¹¨å¹¦å¹¯å»©å»§å»¦å»¨å»¥å½‹å¾¼æ†æ†¨æ†–æ‡…æ†´æ‡†æ‡æ‡Œæ†ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ†¿æ†¸æ†Œæ“—æ“–æ“æ“æ“‰æ’½æ’‰æ“ƒæ“›æ“³æ“™æ”³æ•¿æ•¼æ–¢æ›ˆæš¾æ›€æ›Šæ›‹æ›æš½æš»æšºæ›Œæœ£æ¨´æ©¦æ©‰æ©§æ¨²æ©¨æ¨¾æ©æ©­æ©¶æ©›æ©‘æ¨¨æ©šæ¨»æ¨¿æ©æ©ªæ©¤æ©æ©æ©”æ©¯æ©©æ© æ¨¼æ©žæ©–æ©•æ©æ©Žæ©†æ­•æ­”æ­–æ®§æ®ªæ®«æ¯ˆæ¯‡æ°„æ°ƒæ°†æ¾­æ¿‹æ¾£æ¿‡æ¾¼æ¿Žæ¿ˆæ½žæ¿„æ¾½æ¾žæ¿Šæ¾¨ç€„æ¾¥æ¾®æ¾ºæ¾¬æ¾ªæ¿æ¾¿æ¾¸ï¿½".split("");
    for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
    D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¾¢æ¿‰æ¾«æ¿æ¾¯æ¾²æ¾°ç‡…ç‡‚ç†¿ç†¸ç‡–ç‡€ç‡ç‡‹ç‡”ç‡Šç‡‡ç‡ç†½ç‡˜ç†¼ç‡†ç‡šç‡›çŠçŠžç©ç¦ç§ç¬ç¥ç«çªç‘¿ç’šç’ ç’”ç’’ç’•ç’¡ç”‹ç–€ç˜¯ç˜­ç˜±ç˜½ç˜³ç˜¼ç˜µç˜²ç˜°çš»ç›¦çžšçžçž¡çžœçž›çž¢çž£çž•çž™ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çž—ç£ç£©ç£¥ç£ªç£žç££ç£›ç£¡ç£¢ç£­ç£Ÿç£ ç¦¤ç©„ç©ˆç©‡çª¶çª¸çªµçª±çª·ç¯žç¯£ç¯§ç¯ç¯•ç¯¥ç¯šç¯¨ç¯¹ç¯”ç¯ªç¯¢ç¯œç¯«ç¯˜ç¯Ÿç³’ç³”ç³—ç³ç³‘ç¸’ç¸¡ç¸—ç¸Œç¸Ÿç¸ ç¸“ç¸Žç¸œç¸•ç¸šç¸¢ç¸‹ç¸ç¸–ç¸ç¸”ç¸¥ç¸¤ç½ƒç½»ç½¼ç½ºç¾±ç¿¯è€ªè€©è¬è†±è†¦è†®è†¹è†µè†«è†°è†¬è†´è†²è†·è†§è‡²è‰•è‰–è‰—è•–è•…è•«è•è•“è•¡è•˜ï¿½".split("");
    for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
    D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è•€è•†è•¤è•è•¢è•„è•‘è•‡è•£è”¾è•›è•±è•Žè•®è•µè••è•§è• è–Œè•¦è•è•”è•¥è•¬è™£è™¥è™¤èž›èžèž—èž“èž’èžˆèžèž–èž˜è¹èž‡èž£èž…èžèž‘èžèž„èž”èžœèžšèž‰è¤žè¤¦è¤°è¤­è¤®è¤§è¤±è¤¢è¤©è¤£è¤¯è¤¬è¤Ÿè§±è« ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è«¢è«²è«´è«µè«è¬”è«¤è«Ÿè«°è«ˆè«žè«¡è«¨è«¿è«¯è«»è²‘è²’è²è³µè³®è³±è³°è³³èµ¬èµ®è¶¥è¶§è¸³è¸¾è¸¸è¹€è¹…è¸¶è¸¼è¸½è¹è¸°è¸¿èº½è¼¶è¼®è¼µè¼²è¼¹è¼·è¼´é¶é¹é»é‚†éƒºé„³é„µé„¶é†“é†é†‘é†é†éŒ§éŒžéŒˆéŒŸéŒ†éŒéºéŒ¸éŒ¼éŒ›éŒ£éŒ’éŒé†éŒ­éŒŽéŒé‹‹éŒé‹ºéŒ¥éŒ“é‹¹é‹·éŒ´éŒ‚éŒ¤é‹¿éŒ©éŒ¹éŒµéŒªéŒ”éŒŒï¿½".split("");
    for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
    D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éŒ‹é‹¾éŒ‰éŒ€é‹»éŒ–é–¼é—é–¾é–¹é–ºé–¶é–¿é–µé–½éš©é›”éœ‹éœ’éœéž™éž—éž”éŸ°éŸ¸é µé ¯é ²é¤¤é¤Ÿé¤§é¤©é¦žé§®é§¬é§¥é§¤é§°é§£é§ªé§©é§§éª¹éª¿éª´éª»é«¶é«ºé«¹é«·é¬³é®€é®…é®‡é­¼é­¾é­»é®‚é®“é®’é®é­ºé®•ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é­½é®ˆé´¥é´—é´ é´žé´”é´©é´é´˜é´¢é´é´™é´Ÿéºˆéº†éº‡éº®éº­é»•é»–é»ºé¼’é¼½å„¦å„¥å„¢å„¤å„ å„©å‹´åš“åšŒåšåš†åš„åšƒå™¾åš‚å™¿åšå£–å£”å£å£’å¬­å¬¥å¬²å¬£å¬¬å¬§å¬¦å¬¯å¬®å­»å¯±å¯²å¶·å¹¬å¹ªå¾¾å¾»æ‡ƒæ†µæ†¼æ‡§æ‡ æ‡¥æ‡¤æ‡¨æ‡žæ“¯æ“©æ“£æ“«æ“¤æ“¨æ–æ–€æ–¶æ—šæ›’æªæª–æªæª¥æª‰æªŸæª›æª¡æªžæª‡æª“æªŽï¿½".split("");
    for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
    D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æª•æªƒæª¨æª¤æª‘æ©¿æª¦æªšæª…æªŒæª’æ­›æ®­æ°‰æ¿Œæ¾©æ¿´æ¿”æ¿£æ¿œæ¿­æ¿§æ¿¦æ¿žæ¿²æ¿æ¿¢æ¿¨ç‡¡ç‡±ç‡¨ç‡²ç‡¤ç‡°ç‡¢ç³ç®ç¯ç’—ç’²ç’«ç’ç’ªç’­ç’±ç’¥ç’¯ç”ç”‘ç”’ç”ç–„ç™ƒç™ˆç™‰ç™‡çš¤ç›©çžµçž«çž²çž·çž¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çž´çž±çž¨çŸ°ç£³ç£½ç¤‚ç£»ç£¼ç£²ç¤…ç£¹ç£¾ç¤„ç¦«ç¦¨ç©œç©›ç©–ç©˜ç©”ç©šçª¾ç«€ç«ç°…ç°ç¯²ç°€ç¯¿ç¯»ç°Žç¯´ç°‹ç¯³ç°‚ç°‰ç°ƒç°ç¯¸ç¯½ç°†ç¯°ç¯±ç°ç°Šç³¨ç¸­ç¸¼ç¹‚ç¸³é¡ˆç¸¸ç¸ªç¹‰ç¹€ç¹‡ç¸©ç¹Œç¸°ç¸»ç¸¶ç¹„ç¸ºç½…ç½¿ç½¾ç½½ç¿´ç¿²è€¬è†»è‡„è‡Œè‡Šè‡…è‡‡è†¼è‡©è‰›è‰šè‰œè–ƒè–€è–è–§è–•è– è–‹è–£è•»è–¤è–šè–žï¿½".split("");
    for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
    D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è•·è•¼è–‰è–¡è•ºè•¸è•—è–Žè––è–†è–è–™è–è–è–¢è–‚è–ˆè–…è•¹è•¶è–˜è–è–Ÿè™¨èž¾èžªèž­èŸ…èž°èž¬èž¹èžµèž¼èž®èŸ‰èŸƒèŸ‚èŸŒèž·èž¯èŸ„èŸŠèž´èž¶èž¿èž¸èž½èŸžèž²è¤µè¤³è¤¼è¤¾è¥è¥’è¤·è¥‚è¦­è¦¯è¦®è§²è§³è¬žï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¬˜è¬–è¬‘è¬…è¬‹è¬¢è¬è¬’è¬•è¬‡è¬è¬ˆè¬†è¬œè¬“è¬šè±è±°è±²è±±è±¯è²•è²”è³¹èµ¯è¹Žè¹è¹“è¹è¹Œè¹‡è½ƒè½€é‚…é¾é„¸é†šé†¢é†›é†™é†Ÿé†¡é†é† éŽ¡éŽƒéŽ¯é¤é–é‡é¼é˜éœé¶é‰éé‘é é­éŽéŒéªé¹é—é•é’éé±é·é»é¡éžé£é§éŽ€éŽé™é—‡é—€é—‰é—ƒé—…é–·éš®éš°éš¬éœ éœŸéœ˜éœéœ™éžšéž¡éžœï¿½".split("");
    for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
    D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éžžéžéŸ•éŸ”éŸ±é¡é¡„é¡Šé¡‰é¡…é¡ƒé¤¥é¤«é¤¬é¤ªé¤³é¤²é¤¯é¤­é¤±é¤°é¦˜é¦£é¦¡é¨‚é§ºé§´é§·é§¹é§¸é§¶é§»é§½é§¾é§¼é¨ƒéª¾é«¾é«½é¬é«¼é­ˆé®šé®¨é®žé®›é®¦é®¡é®¥é®¤é®†é®¢é® é®¯é´³éµéµ§é´¶é´®é´¯é´±é´¸é´°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éµ…éµ‚éµƒé´¾é´·éµ€é´½ç¿µé´­éºŠéº‰éºéº°é»ˆé»šé»»é»¿é¼¤é¼£é¼¢é½”é¾ å„±å„­å„®åš˜åšœåš—åššåšåš™å¥°å¬¼å±©å±ªå·€å¹­å¹®æ‡˜æ‡Ÿæ‡­æ‡®æ‡±æ‡ªæ‡°æ‡«æ‡–æ‡©æ“¿æ”„æ“½æ“¸æ”æ”ƒæ“¼æ–”æ—›æ›šæ››æ›˜æ«…æª¹æª½æ«¡æ«†æªºæª¶æª·æ«‡æª´æª­æ­žæ¯‰æ°‹ç€‡ç€Œç€ç€ç€…ç€”ç€Žæ¿¿ç€€æ¿»ç€¦æ¿¼æ¿·ç€Šçˆç‡¿ç‡¹çˆƒç‡½ç¶ï¿½".split("");
    for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
    D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç’¸ç“€ç’µç“ç’¾ç’¶ç’»ç“‚ç””ç”“ç™œç™¤ç™™ç™ç™“ç™—ç™šçš¦çš½ç›¬çŸ‚çžºç£¿ç¤Œç¤“ç¤”ç¤‰ç¤ç¤’ç¤‘ç¦­ç¦¬ç©Ÿç°œç°©ç°™ç° ç°Ÿç°­ç°ç°¦ç°¨ç°¢ç°¥ç°°ç¹œç¹ç¹–ç¹£ç¹˜ç¹¢ç¹Ÿç¹‘ç¹ ç¹—ç¹“ç¾µç¾³ç¿·ç¿¸èµè‡‘è‡’ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‡è‰Ÿè‰žè–´è—†è—€è—ƒè—‚è–³è–µè–½è—‡è—„è–¿è—‹è—Žè—ˆè—…è–±è–¶è—’è˜¤è–¸è–·è–¾è™©èŸ§èŸ¦èŸ¢èŸ›èŸ«èŸªèŸ¥èŸŸèŸ³èŸ¤èŸ”èŸœèŸ“èŸ­èŸ˜èŸ£èž¤èŸ—èŸ™è èŸ´èŸ¨èŸè¥“è¥‹è¥è¥Œè¥†è¥è¥‘è¥‰è¬ªè¬§è¬£è¬³è¬°è¬µè­‡è¬¯è¬¼è¬¾è¬±è¬¥è¬·è¬¦è¬¶è¬®è¬¤è¬»è¬½è¬ºè±‚è±µè²™è²˜è²—è³¾è´„è´‚è´€è¹œè¹¢è¹ è¹—è¹–è¹žè¹¥è¹§ï¿½".split("");
    for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
    D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹›è¹šè¹¡è¹è¹©è¹”è½†è½‡è½ˆè½‹é„¨é„ºé„»é„¾é†¨é†¥é†§é†¯é†ªéŽµéŽŒéŽ’éŽ·éŽ›éŽéŽ‰éŽ§éŽŽéŽªéŽžéŽ¦éŽ•éŽˆéŽ™éŽŸéŽéŽ±éŽ‘éŽ²éŽ¤éŽ¨éŽ´éŽ£éŽ¥é—’é—“é—‘éš³é›—é›šå·‚é›Ÿé›˜é›éœ£éœ¢éœ¥éž¬éž®éž¨éž«éž¤éžªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éž¢éž¥éŸ—éŸ™éŸ–éŸ˜éŸºé¡é¡‘é¡’é¢¸é¥é¤¼é¤ºé¨é¨‹é¨‰é¨é¨„é¨‘é¨Šé¨…é¨‡é¨†é«€é«œé¬ˆé¬„é¬…é¬©é¬µé­Šé­Œé­‹é¯‡é¯†é¯ƒé®¿é¯é®µé®¸é¯“é®¶é¯„é®¹é®½éµœéµ“éµéµŠéµ›éµ‹éµ™éµ–éµŒéµ—éµ’éµ”éµŸéµ˜éµšéºŽéºŒé»Ÿé¼é¼€é¼–é¼¥é¼«é¼ªé¼©é¼¨é½Œé½•å„´å„µåŠ–å‹·åŽ´åš«åš­åš¦åš§åšªåš¬å£šå£å£›å¤’å¬½å¬¾å¬¿å·ƒå¹°ï¿½".split("");
    for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
    D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¾¿æ‡»æ”‡æ”æ”æ”‰æ”Œæ”Žæ–„æ—žæ—æ›žæ«§æ« æ«Œæ«‘æ«™æ«‹æ«Ÿæ«œæ«æ««æ«æ«æ«žæ­ æ®°æ°Œç€™ç€§ç€ ç€–ç€«ç€¡ç€¢ç€£ç€©ç€—ç€¤ç€œç€ªçˆŒçˆŠçˆ‡çˆ‚çˆ…çŠ¥çŠ¦çŠ¤çŠ£çŠ¡ç“‹ç“…ç’·ç“ƒç”–ç™ çŸ‰çŸŠçŸ„çŸ±ç¤ç¤›ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¤¡ç¤œç¤—ç¤žç¦°ç©§ç©¨ç°³ç°¼ç°¹ç°¬ç°»ç³¬ç³ªç¹¶ç¹µç¹¸ç¹°ç¹·ç¹¯ç¹ºç¹²ç¹´ç¹¨ç½‹ç½Šç¾ƒç¾†ç¾·ç¿½ç¿¾è¸è‡—è‡•è‰¤è‰¡è‰£è—«è—±è—­è—™è—¡è—¨è—šè——è—¬è—²è—¸è—˜è—Ÿè—£è—œè—‘è—°è—¦è—¯è—žè—¢è €èŸºè ƒèŸ¶èŸ·è ‰è Œè ‹è †èŸ¼è ˆèŸ¿è Šè ‚è¥¢è¥šè¥›è¥—è¥¡è¥œè¥˜è¥è¥™è¦ˆè¦·è¦¶è§¶è­è­ˆè­Šè­€è­“è­–è­”è­‹è­•ï¿½".split("");
    for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
    D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­‘è­‚è­’è­—è±ƒè±·è±¶è²šè´†è´‡è´‰è¶¬è¶ªè¶­è¶«è¹­è¹¸è¹³è¹ªè¹¯è¹»è»‚è½’è½‘è½è½è½“è¾´é…€é„¿é†°é†­éžé‡éé‚éšéé¹é¬éŒé™éŽ©é¦éŠé”é®é£é•é„éŽé€é’é§é•½é—šé—›é›¡éœ©éœ«éœ¬éœ¨éœ¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éž³éž·éž¶éŸéŸžéŸŸé¡œé¡™é¡é¡—é¢¿é¢½é¢»é¢¾é¥ˆé¥‡é¥ƒé¦¦é¦§é¨šé¨•é¨¥é¨é¨¤é¨›é¨¢é¨ é¨§é¨£é¨žé¨œé¨”é«‚é¬‹é¬Šé¬Žé¬Œé¬·é¯ªé¯«é¯ é¯žé¯¤é¯¦é¯¢é¯°é¯”é¯—é¯¬é¯œé¯™é¯¥é¯•é¯¡é¯šéµ·é¶é¶Šé¶„é¶ˆéµ±é¶€éµ¸é¶†é¶‹é¶Œéµ½éµ«éµ´éµµéµ°éµ©é¶…éµ³éµ»é¶‚éµ¯éµ¹éµ¿é¶‡éµ¨éº”éº‘é»€é»¼é¼­é½€é½é½é½–é½—é½˜åŒ·åš²ï¿½".split("");
    for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
    D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åšµåš³å££å­…å·†å·‡å»®å»¯å¿€å¿æ‡¹æ”—æ”–æ”•æ”“æ—Ÿæ›¨æ›£æ›¤æ«³æ«°æ«ªæ«¨æ«¹æ«±æ«®æ«¯ç€¼ç€µç€¯ç€·ç€´ç€±ç‚ç€¸ç€¿ç€ºç€¹ç€ç€»ç€³ççˆ“çˆ”çŠ¨ç½ç¼ç’ºçš«çšªçš¾ç›­çŸŒçŸŽçŸçŸçŸ²ç¤¥ç¤£ç¤§ç¤¨ç¤¤ç¤©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦²ç©®ç©¬ç©­ç«·ç±‰ç±ˆç±Šç±‡ç±…ç³®ç¹»ç¹¾çºçº€ç¾ºç¿¿è¹è‡›è‡™èˆ‹è‰¨è‰©è˜¢è—¿è˜è—¾è˜›è˜€è—¶è˜„è˜‰è˜…è˜Œè—½è ™è è ‘è —è “è –è¥£è¥¦è¦¹è§·è­ è­ªè­è­¨è­£è­¥è­§è­­è¶®èº†èºˆèº„è½™è½–è½—è½•è½˜è½šé‚é…ƒé…é†·é†µé†²é†³é‹é“é»é éé”é¾é•éé¨é™ééµé€é·é‡éŽé–é’éºé‰é¸éŠé¿ï¿½".split("");
    for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
    D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼éŒé¶é‘é†é—žé— é—Ÿéœ®éœ¯éž¹éž»éŸ½éŸ¾é¡ é¡¢é¡£é¡Ÿé£é£‚é¥é¥Žé¥™é¥Œé¥‹é¥“é¨²é¨´é¨±é¨¬é¨ªé¨¶é¨©é¨®é¨¸é¨­é«‡é«Šé«†é¬é¬’é¬‘é°‹é°ˆé¯·é°…é°’é¯¸é±€é°‡é°Žé°†é°—é°”é°‰é¶Ÿé¶™é¶¤é¶é¶’é¶˜é¶é¶›ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¶ é¶”é¶œé¶ªé¶—é¶¡é¶šé¶¢é¶¨é¶žé¶£é¶¿é¶©é¶–é¶¦é¶§éº™éº›éºšé»¥é»¤é»§é»¦é¼°é¼®é½›é½ é½žé½é½™é¾‘å„ºå„¹åŠ˜åŠ—å›ƒåš½åš¾å­ˆå­‡å·‹å·å»±æ‡½æ”›æ¬‚æ«¼æ¬ƒæ«¸æ¬€çƒç„çŠçˆç‰ç…ç†çˆçˆšçˆ™ç¾ç”—ç™ªçŸç¤­ç¤±ç¤¯ç±”ç±“ç³²çºŠçº‡çºˆçº‹çº†çºç½ç¾»è€°è‡è˜˜è˜ªè˜¦è˜Ÿè˜£è˜œè˜™è˜§è˜®è˜¡è˜ è˜©è˜žè˜¥ï¿½".split("");
    for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
    D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è ©è è ›è  è ¤è œè «è¡Šè¥­è¥©è¥®è¥«è§ºè­¹è­¸è­…è­ºè­»è´è´”è¶¯èºŽèºŒè½žè½›è½é…†é…„é……é†¹é¿é»é¶é©é½é¼é°é¹éªé·é¬é‘€é±é—¥é—¤é—£éœµéœºéž¿éŸ¡é¡¤é£‰é£†é£€é¥˜é¥–é¨¹é¨½é©†é©„é©‚é©é¨ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¨¿é«é¬•é¬—é¬˜é¬–é¬ºé­’é°«é°é°œé°¬é°£é°¨é°©é°¤é°¡é¶·é¶¶é¶¼é·é·‡é·Šé·é¶¾é·…é·ƒé¶»é¶µé·Žé¶¹é¶ºé¶¬é·ˆé¶±é¶­é·Œé¶³é·é¶²é¹ºéºœé»«é»®é»­é¼›é¼˜é¼šé¼±é½Žé½¥é½¤é¾’äº¹å›†å›…å›‹å¥±å­‹å­Œå·•å·‘å»²æ”¡æ” æ”¦æ”¢æ¬‹æ¬ˆæ¬‰æ°ç•ç–ç—ç’çˆžçˆŸçŠ©ç¿ç“˜ç“•ç“™ç“—ç™­çš­ç¤µç¦´ç©°ç©±ç±—ç±œç±™ç±›ç±šï¿½".split("");
    for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
    D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç³´ç³±çº‘ç½ç¾‡è‡žè‰«è˜´è˜µè˜³è˜¬è˜²è˜¶è ¬è ¨è ¦è ªè ¥è¥±è¦¿è¦¾è§»è­¾è®„è®‚è®†è®…è­¿è´•èº•èº”èºšèº’èºèº–èº—è½ è½¢é…‡é‘Œé‘é‘Šé‘‹é‘é‘‡é‘…é‘ˆé‘‰é‘†éœ¿éŸ£é¡ªé¡©é£‹é¥”é¥›é©Žé©“é©”é©Œé©é©ˆé©Šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é©‰é©’é©é«é¬™é¬«é¬»é­–é­•é±†é±ˆé°¿é±„é°¹é°³é±é°¼é°·é°´é°²é°½é°¶é·›é·’é·žé·šé·‹é·é·œé·‘é·Ÿé·©é·™é·˜é·–é·µé·•é·éº¶é»°é¼µé¼³é¼²é½‚é½«é¾•é¾¢å„½åŠ™å£¨å£§å¥²å­å·˜è ¯å½æˆæˆƒæˆ„æ”©æ”¥æ––æ›«æ¬‘æ¬’æ¬æ¯Šç›çšçˆ¢çŽ‚çŽçŽƒç™°çŸ”ç±§ç±¦çº•è‰¬è˜ºè™€è˜¹è˜¼è˜±è˜»è˜¾è °è ²è ®è ³è¥¶è¥´è¥³è§¾ï¿½".split("");
    for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
    D[248] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è®Œè®Žè®‹è®ˆè±…è´™èº˜è½¤è½£é†¼é‘¢é‘•é‘é‘—é‘žéŸ„éŸ…é €é©–é©™é¬žé¬Ÿé¬ é±’é±˜é±é±Šé±é±‹é±•é±™é±Œé±Žé·»é··é·¯é·£é·«é·¸é·¤é·¶é·¡é·®é·¦é·²é·°é·¢é·¬é·´é·³é·¨é·­é»‚é»é»²é»³é¼†é¼œé¼¸é¼·é¼¶é½ƒé½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é½±é½°é½®é½¯å›“å›å­Žå±­æ”­æ›­æ›®æ¬“çŸç¡çç çˆ£ç“›ç“¥çŸ•ç¤¸ç¦·ç¦¶ç±ªçº—ç¾‰è‰­è™ƒè ¸è ·è µè¡‹è®”è®•èºžèºŸèº èºé†¾é†½é‡‚é‘«é‘¨é‘©é›¥é†éƒé‡éŸ‡éŸ¥é©žé«•é­™é±£é±§é±¦é±¢é±žé± é¸‚é·¾é¸‡é¸ƒé¸†é¸…é¸€é¸é¸‰é·¿é·½é¸„éº é¼žé½†é½´é½µé½¶å›”æ”®æ–¸æ¬˜æ¬™æ¬—æ¬šç¢çˆ¦çŠªçŸ˜çŸ™ç¤¹ç±©ç±«ç³¶çºšï¿½".split("");
    for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
    D[249] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çº˜çº›çº™è‡ è‡¡è™†è™‡è™ˆè¥¹è¥ºè¥¼è¥»è§¿è®˜è®™èº¥èº¤èº£é‘®é‘­é‘¯é‘±é‘³é‰é¡²é¥Ÿé±¨é±®é±­é¸‹é¸é¸é¸é¸’é¸‘éº¡é»µé¼‰é½‡é½¸é½»é½ºé½¹åœžç¦ç±¯è ¼è¶²èº¦é‡ƒé‘´é‘¸é‘¶é‘µé© é±´é±³é±±é±µé¸”é¸“é»¶é¼Šï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¾¤ç¨ç¥ç³·è™ªè ¾è ½è ¿è®žè²œèº©è»‰é‹é¡³é¡´é£Œé¥¡é¦«é©¤é©¦é©§é¬¤é¸•é¸—é½ˆæˆ‡æ¬žçˆ§è™Œèº¨é’‚é’€é’é©©é©¨é¬®é¸™çˆ©è™‹è®Ÿé’ƒé±¹éº·ç™µé©«é±ºé¸ç©çªéº¤é½¾é½‰é¾˜ç¢éŠ¹è£å¢»æ’ç²§å«ºâ•”â•¦â•—â• â•¬â•£â•šâ•©â•â•’â•¤â••â•žâ•ªâ•¡â•˜â•§â•›â•“â•¥â•–â•Ÿâ•«â•¢â•™â•¨â•œâ•‘â•â•­â•®â•°â•¯â–“ï¿½".split("");
    for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
    return {"enc": e, "dec": d }; })();
    cptable[1250] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½â€šï¿½â€žâ€¦â€ â€¡ï¿½â€°Å â€¹ÅšÅ¤Å½Å¹ï¿½â€˜â€™â€œâ€â€¢â€“â€”ï¿½â„¢Å¡â€ºÅ›Å¥Å¾ÅºÂ Ë‡Ë˜ÅÂ¤Ä„Â¦Â§Â¨Â©ÅžÂ«Â¬Â­Â®Å»Â°Â±Ë›Å‚Â´ÂµÂ¶Â·Â¸Ä…ÅŸÂ»Ä½ËÄ¾Å¼Å”ÃÃ‚Ä‚Ã„Ä¹Ä†Ã‡ÄŒÃ‰Ä˜Ã‹ÄšÃÃŽÄŽÄÅƒÅ‡Ã“Ã”ÅÃ–Ã—Å˜Å®ÃšÅ°ÃœÃÅ¢ÃŸÅ•Ã¡Ã¢ÄƒÃ¤ÄºÄ‡Ã§ÄÃ©Ä™Ã«Ä›Ã­Ã®ÄÄ‘Å„ÅˆÃ³Ã´Å‘Ã¶Ã·Å™Å¯ÃºÅ±Ã¼Ã½Å£Ë™", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1251] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ð‚Ðƒâ€šÑ“â€žâ€¦â€ â€¡â‚¬â€°Ð‰â€¹ÐŠÐŒÐ‹ÐÑ’â€˜â€™â€œâ€â€¢â€“â€”ï¿½â„¢Ñ™â€ºÑšÑœÑ›ÑŸÂ ÐŽÑžÐˆÂ¤ÒÂ¦Â§ÐÂ©Ð„Â«Â¬Â­Â®Ð‡Â°Â±Ð†Ñ–Ò‘ÂµÂ¶Â·Ñ‘â„–Ñ”Â»Ñ˜Ð…Ñ•Ñ—ÐÐ‘Ð’Ð“Ð”Ð•Ð–Ð—Ð˜Ð™ÐšÐ›ÐœÐÐžÐŸÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿Ñ€ÑÑ‚ÑƒÑ„Ñ…Ñ†Ñ‡ÑˆÑ‰ÑŠÑ‹ÑŒÑÑŽÑ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1252] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½â€šÆ’â€žâ€¦â€ â€¡Ë†â€°Å â€¹Å’ï¿½Å½ï¿½ï¿½â€˜â€™â€œâ€â€¢â€“â€”Ëœâ„¢Å¡â€ºÅ“ï¿½Å¾Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿Ã€ÃÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃÃŽÃÃÃ‘Ã’Ã“Ã”Ã•Ã–Ã—Ã˜Ã™ÃšÃ›ÃœÃÃžÃŸÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1253] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½â€šÆ’â€žâ€¦â€ â€¡ï¿½â€°ï¿½â€¹ï¿½ï¿½ï¿½ï¿½ï¿½â€˜â€™â€œâ€â€¢â€“â€”ï¿½â„¢ï¿½â€ºï¿½ï¿½ï¿½ï¿½Â Î…Î†Â£Â¤Â¥Â¦Â§Â¨Â©ï¿½Â«Â¬Â­Â®â€•Â°Â±Â²Â³Î„ÂµÂ¶Â·ÎˆÎ‰ÎŠÂ»ÎŒÂ½ÎŽÎÎÎ‘Î’Î“Î”Î•Î–Î—Î˜Î™ÎšÎ›ÎœÎÎžÎŸÎ Î¡ï¿½Î£Î¤Î¥Î¦Î§Î¨Î©ÎªÎ«Î¬Î­Î®Î¯Î°Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿Ï€ÏÏ‚ÏƒÏ„Ï…Ï†Ï‡ÏˆÏ‰ÏŠÏ‹ÏŒÏÏŽï¿½", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1254] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½â€šÆ’â€žâ€¦â€ â€¡Ë†â€°Å â€¹Å’ï¿½ï¿½ï¿½ï¿½â€˜â€™â€œâ€â€¢â€“â€”Ëœâ„¢Å¡â€ºÅ“ï¿½ï¿½Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿Ã€ÃÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃÃŽÃÄžÃ‘Ã’Ã“Ã”Ã•Ã–Ã—Ã˜Ã™ÃšÃ›ÃœÄ°ÅžÃŸÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄŸÃ±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ä±ÅŸÃ¿", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1255] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½â€šÆ’â€žâ€¦â€ â€¡Ë†â€°ï¿½â€¹ï¿½ï¿½ï¿½ï¿½ï¿½â€˜â€™â€œâ€â€¢â€“â€”Ëœâ„¢ï¿½â€ºï¿½ï¿½ï¿½ï¿½Â Â¡Â¢Â£â‚ªÂ¥Â¦Â§Â¨Â©Ã—Â«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹Ã·Â»Â¼Â½Â¾Â¿Ö°Ö±Ö²Ö³Ö´ÖµÖ¶Ö·Ö¸Ö¹ï¿½Ö»Ö¼Ö½Ö¾Ö¿×€××‚×ƒ×°×±×²×³×´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½××‘×’×“×”×•×–×—×˜×™×š×›×œ××ž×Ÿ× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿½ï¿½â€Žâ€ï¿½", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1256] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬Ù¾â€šÆ’â€žâ€¦â€ â€¡Ë†â€°Ù¹â€¹Å’Ú†Ú˜ÚˆÚ¯â€˜â€™â€œâ€â€¢â€“â€”Ú©â„¢Ú‘â€ºÅ“â€Œâ€ÚºÂ ØŒÂ¢Â£Â¤Â¥Â¦Â§Â¨Â©Ú¾Â«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹Ø›Â»Â¼Â½Â¾ØŸÛØ¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ã—Ø·Ø¸Ø¹ØºÙ€ÙÙ‚ÙƒÃ Ù„Ã¢Ù…Ù†Ù‡ÙˆÃ§Ã¨Ã©ÃªÃ«Ù‰ÙŠÃ®Ã¯Ù‹ÙŒÙÙŽÃ´ÙÙÃ·Ù‘Ã¹Ù’Ã»Ã¼â€Žâ€Û’", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1257] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½â€šï¿½â€žâ€¦â€ â€¡ï¿½â€°ï¿½â€¹ï¿½Â¨Ë‡Â¸ï¿½â€˜â€™â€œâ€â€¢â€“â€”ï¿½â„¢ï¿½â€ºï¿½Â¯Ë›ï¿½Â ï¿½Â¢Â£Â¤ï¿½Â¦Â§Ã˜Â©Å–Â«Â¬Â­Â®Ã†Â°Â±Â²Â³Â´ÂµÂ¶Â·Ã¸Â¹Å—Â»Â¼Â½Â¾Ã¦Ä„Ä®Ä€Ä†Ã„Ã…Ä˜Ä’ÄŒÃ‰Å¹Ä–Ä¢Ä¶ÄªÄ»Å ÅƒÅ…Ã“ÅŒÃ•Ã–Ã—Å²ÅÅšÅªÃœÅ»Å½ÃŸÄ…Ä¯ÄÄ‡Ã¤Ã¥Ä™Ä“ÄÃ©ÅºÄ—Ä£Ä·Ä«Ä¼Å¡Å„Å†Ã³ÅÃµÃ¶Ã·Å³Å‚Å›Å«Ã¼Å¼Å¾Ë™", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[1258] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â‚¬ï¿½â€šÆ’â€žâ€¦â€ â€¡Ë†â€°ï¿½â€¹Å’ï¿½ï¿½ï¿½ï¿½â€˜â€™â€œâ€â€¢â€“â€”Ëœâ„¢ï¿½â€ºÅ“ï¿½ï¿½Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿Ã€ÃÃ‚Ä‚Ã„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹Ì€ÃÃŽÃÄÃ‘Ì‰Ã“Ã”Æ Ã–Ã—Ã˜Ã™ÃšÃ›ÃœÆ¯ÌƒÃŸÃ Ã¡Ã¢ÄƒÃ¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«ÌÃ­Ã®Ã¯Ä‘Ã±Ì£Ã³Ã´Æ¡Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Æ°â‚«Ã¿", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[10000] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã„Ã…Ã‡Ã‰Ã‘Ã–ÃœÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â€ Â°Â¢Â£Â§â€¢Â¶ÃŸÂ®Â©â„¢Â´Â¨â‰ Ã†Ã˜âˆžÂ±â‰¤â‰¥Â¥Âµâˆ‚âˆ‘âˆÏ€âˆ«ÂªÂºâ„¦Ã¦Ã¸Â¿Â¡Â¬âˆšÆ’â‰ˆâˆ†Â«Â»â€¦Â Ã€ÃƒÃ•Å’Å“â€“â€”â€œâ€â€˜â€™Ã·â—ŠÃ¿Å¸â„Â¤â€¹â€ºï¬ï¬‚â€¡Â·â€šâ€žâ€°Ã‚ÃŠÃÃ‹ÃˆÃÃŽÃÃŒÃ“Ã”ï¿½Ã’ÃšÃ›Ã™Ä±Ë†ËœÂ¯Ë˜Ë™ËšÂ¸ËË›Ë‡", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[10006] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã„Â¹Â²Ã‰Â³Ã–ÃœÎ…Ã Ã¢Ã¤Î„Â¨Ã§Ã©Ã¨ÃªÃ«Â£â„¢Ã®Ã¯â€¢Â½â€°Ã´Ã¶Â¦Â­Ã¹Ã»Ã¼â€ Î“Î”Î˜Î›ÎžÎ ÃŸÂ®Â©Î£ÎªÂ§â‰ Â°Î‡Î‘Â±â‰¤â‰¥Â¥Î’Î•Î–Î—Î™ÎšÎœÎ¦Î«Î¨Î©Î¬ÎÂ¬ÎŸÎ¡â‰ˆÎ¤Â«Â»â€¦Â Î¥Î§Î†ÎˆÅ“â€“â€•â€œâ€â€˜â€™Ã·Î‰ÎŠÎŒÎŽÎ­Î®Î¯ÏŒÎÏÎ±Î²ÏˆÎ´ÎµÏ†Î³Î·Î¹Î¾ÎºÎ»Î¼Î½Î¿Ï€ÏŽÏÏƒÏ„Î¸Ï‰Ï‚Ï‡Ï…Î¶ÏŠÏ‹ÎÎ°ï¿½", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[10007] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐ‘Ð’Ð“Ð”Ð•Ð–Ð—Ð˜Ð™ÐšÐ›ÐœÐÐžÐŸÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯â€ Â°Â¢Â£Â§â€¢Â¶Ð†Â®Â©â„¢Ð‚Ñ’â‰ ÐƒÑ“âˆžÂ±â‰¤â‰¥Ñ–Âµâˆ‚ÐˆÐ„Ñ”Ð‡Ñ—Ð‰Ñ™ÐŠÑšÑ˜Ð…Â¬âˆšÆ’â‰ˆâˆ†Â«Â»â€¦Â Ð‹Ñ›ÐŒÑœÑ•â€“â€”â€œâ€â€˜â€™Ã·â€žÐŽÑžÐÑŸâ„–ÐÑ‘ÑÐ°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿Ñ€ÑÑ‚ÑƒÑ„Ñ…Ñ†Ñ‡ÑˆÑ‰ÑŠÑ‹ÑŒÑÑŽÂ¤", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[10008] = (function(){ var d = [], e = {}, D = [], j;
    D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Â€ï£˜ï£™ï£šï£›ï£œï£ï£žï£Ÿï£ ï£¡ï£¢ï££ï£¤ï£¥ï£¦ï£§ï£¨ï£©ï£ªï£«ï£¬ï£­ï£®ï£¯ï£°ï£±ï£²ï£³ï£´ï£µï£¶ï£·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï£¸ï£¹ï£ºï£»ï£¼ï£½ï£¾ï£¿".split("");
    for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
    D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã€€ã€ã€‚ãƒ»Ë‰Ë‡Â¨ã€ƒã€…â€•ï½žï¿½â€¦â€˜â€™â€œâ€ã€”ã€•ã€ˆã€‰ã€Šã€‹ã€Œã€ã€Žã€ã€–ã€—ã€ã€‘Â±Ã—Ã·âˆ¶âˆ§âˆ¨âˆ‘âˆâˆªâˆ©âˆˆâˆ·âˆšâŠ¥âˆ¥âˆ âŒ’âŠ™âˆ«âˆ®â‰¡â‰Œâ‰ˆâˆ½âˆâ‰ â‰®â‰¯â‰¤â‰¥âˆžâˆµâˆ´â™‚â™€Â°â€²â€³â„ƒï¼„Â¤ï¿ ï¿¡â€°Â§â„–â˜†â˜…â—‹â—â—Žâ—‡â—†â–¡â– â–³â–²â€»â†’â†â†‘â†“ã€“ï¿½".split("");
    for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
    D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â’ˆâ’‰â’Šâ’‹â’Œâ’â’Žâ’â’â’‘â’’â’“â’”â’•â’–â’—â’˜â’™â’šâ’›â‘´â‘µâ‘¶â‘·â‘¸â‘¹â‘ºâ‘»â‘¼â‘½â‘¾â‘¿â’€â’â’‚â’ƒâ’„â’…â’†â’‡â‘ â‘¡â‘¢â‘£â‘¤â‘¥â‘¦â‘§â‘¨â‘©ï¿½ï¿½ãˆ ãˆ¡ãˆ¢ãˆ£ãˆ¤ãˆ¥ãˆ¦ãˆ§ãˆ¨ãˆ©ï¿½ï¿½â… â…¡â…¢â…£â…¤â…¥â…¦â…§â…¨â…©â…ªâ…«ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
    D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼ï¼‚ï¼ƒï¿¥ï¼…ï¼†ï¼‡ï¼ˆï¼‰ï¼Šï¼‹ï¼Œï¼ï¼Žï¼ï¼ï¼‘ï¼’ï¼“ï¼”ï¼•ï¼–ï¼—ï¼˜ï¼™ï¼šï¼›ï¼œï¼ï¼žï¼Ÿï¼ ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¼»ï¼¼ï¼½ï¼¾ï¼¿ï½€ï½ï½‚ï½ƒï½„ï½…ï½†ï½‡ï½ˆï½‰ï½Šï½‹ï½Œï½ï½Žï½ï½ï½‘ï½’ï½“ï½”ï½•ï½–ï½—ï½˜ï½™ï½šï½›ï½œï½ï¿£ï¿½".split("");
    for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
    D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãã‚ãƒã„ã…ã†ã‡ãˆã‰ãŠã‹ãŒããŽããã‘ã’ã“ã”ã•ã–ã—ã˜ã™ãšã›ãœããžãŸã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ã‚€ã‚ã‚‚ã‚ƒã‚„ã‚…ã‚†ã‚‡ã‚ˆã‚‰ã‚Šã‚‹ã‚Œã‚ã‚Žã‚ã‚ã‚‘ã‚’ã‚“ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
    D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã‚¡ã‚¢ã‚£ã‚¤ã‚¥ã‚¦ã‚§ã‚¨ã‚©ã‚ªã‚«ã‚¬ã‚­ã‚®ã‚¯ã‚°ã‚±ã‚²ã‚³ã‚´ã‚µã‚¶ã‚·ã‚¸ã‚¹ã‚ºã‚»ã‚¼ã‚½ã‚¾ã‚¿ãƒ€ãƒãƒ‚ãƒƒãƒ„ãƒ…ãƒ†ãƒ‡ãƒˆãƒ‰ãƒŠãƒ‹ãƒŒãƒãƒŽãƒãƒãƒ‘ãƒ’ãƒ“ãƒ”ãƒ•ãƒ–ãƒ—ãƒ˜ãƒ™ãƒšãƒ›ãƒœãƒãƒžãƒŸãƒ ãƒ¡ãƒ¢ãƒ£ãƒ¤ãƒ¥ãƒ¦ãƒ§ãƒ¨ãƒ©ãƒªãƒ«ãƒ¬ãƒ­ãƒ®ãƒ¯ãƒ°ãƒ±ãƒ²ãƒ³ãƒ´ãƒµãƒ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
    D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î‘Î’Î“Î”Î•Î–Î—Î˜Î™ÎšÎ›ÎœÎÎžÎŸÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿Ï€ÏÏƒÏ„Ï…Ï†Ï‡ÏˆÏ‰ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
    D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÐÐ‘Ð’Ð“Ð”Ð•ÐÐ–Ð—Ð˜Ð™ÐšÐ›ÐœÐÐžÐŸÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑ‘Ð¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿Ñ€ÑÑ‚ÑƒÑ„Ñ…Ñ†Ñ‡ÑˆÑ‰ÑŠÑ‹ÑŒÑÑŽÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
    D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÄÃ¡ÇŽÃ Ä“Ã©Ä›Ã¨Ä«Ã­ÇÃ¬ÅÃ³Ç’Ã²Å«ÃºÇ”Ã¹Ç–Ç˜ÇšÇœÃ¼Ãªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã„…ã„†ã„‡ã„ˆã„‰ã„Šã„‹ã„Œã„ã„Žã„ã„ã„‘ã„’ã„“ã„”ã„•ã„–ã„—ã„˜ã„™ã„šã„›ã„œã„ã„žã„Ÿã„ ã„¡ã„¢ã„£ã„¤ã„¥ã„¦ã„§ã„¨ã„©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
    D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â”€â”â”‚â”ƒâ”„â”…â”†â”‡â”ˆâ”‰â”Šâ”‹â”Œâ”â”Žâ”â”â”‘â”’â”“â””â”•â”–â”—â”˜â”™â”šâ”›â”œâ”â”žâ”Ÿâ” â”¡â”¢â”£â”¤â”¥â”¦â”§â”¨â”©â”ªâ”«â”¬â”­â”®â”¯â”°â”±â”²â”³â”´â”µâ”¶â”·â”¸â”¹â”ºâ”»â”¼â”½â”¾â”¿â•€â•â•‚â•ƒâ•„â•…â•†â•‡â•ˆâ•‰â•Šâ•‹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
    D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å•Šé˜¿åŸƒæŒ¨å“Žå”‰å“€çš‘ç™Œè”¼çŸ®è‰¾ç¢çˆ±éš˜éžæ°¨å®‰ä¿ºæŒ‰æš—å²¸èƒºæ¡ˆè‚®æ˜‚ç›Žå‡¹æ•–ç†¬ç¿±è¢„å‚²å¥¥æ‡Šæ¾³èŠ­æŒæ‰’å­å§ç¬†å…«ç–¤å·´æ‹”è·‹é¶æŠŠè€™åéœ¸ç½¢çˆ¸ç™½æŸç™¾æ‘†ä½°è´¥æ‹œç¨—æ–‘ç­æ¬æ‰³èˆ¬é¢æ¿ç‰ˆæ‰®æ‹Œä¼´ç“£åŠåŠžç»Šé‚¦å¸®æ¢†æ¦œè†€ç»‘æ£’ç£…èšŒé•‘å‚è°¤è‹žèƒžåŒ…è¤’å‰¥ï¿½".split("");
    for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
    D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è–„é›¹ä¿å ¡é¥±å®æŠ±æŠ¥æš´è±¹é²çˆ†æ¯ç¢‘æ‚²å‘åŒ—è¾ˆèƒŒè´é’¡å€ç‹ˆå¤‡æƒ«ç„™è¢«å¥”è‹¯æœ¬ç¬¨å´©ç»·ç”­æ³µè¹¦è¿¸é€¼é¼»æ¯”é„™ç¬”å½¼ç¢§è“–è”½æ¯•æ¯™æ¯–å¸åº‡ç—¹é—­æ•å¼Šå¿…è¾Ÿå£è‡‚é¿é™›éž­è¾¹ç¼–è´¬æ‰ä¾¿å˜åžè¾¨è¾©è¾«éæ ‡å½ªè†˜è¡¨é³–æ†‹åˆ«ç˜ªå½¬æ–Œæ¿’æ»¨å®¾æ‘ˆå…µå†°æŸ„ä¸™ç§‰é¥¼ç‚³ï¿½".split("");
    for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
    D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç—…å¹¶çŽ»è æ’­æ‹¨é’µæ³¢åšå‹ƒæé“‚ç®”ä¼¯å¸›èˆ¶è„–è†Šæ¸¤æ³Šé©³æ•åœå“ºè¡¥åŸ ä¸å¸ƒæ­¥ç°¿éƒ¨æ€–æ“¦çŒœè£ææ‰è´¢ç¬è¸©é‡‡å½©èœè”¡é¤å‚èš•æ®‹æƒ­æƒ¨ç¿è‹èˆ±ä»“æ²§è—æ“ç³™æ§½æ›¹è‰åŽ•ç­–ä¾§å†Œæµ‹å±‚è¹­æ’å‰èŒ¬èŒ¶æŸ¥ç¢´æ½å¯Ÿå²”å·®è¯§æ‹†æŸ´è±ºæ€æŽºè‰é¦‹è°—ç¼ é“²äº§é˜é¢¤æ˜ŒçŒ–ï¿½".split("");
    for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
    D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åœºå°å¸¸é•¿å¿è‚ åŽ‚æ•žç•…å”±å€¡è¶…æŠ„é’žæœå˜²æ½®å·¢åµç‚’è½¦æ‰¯æ’¤æŽ£å½»æ¾ˆéƒ´è‡£è¾°å°˜æ™¨å¿±æ²‰é™ˆè¶è¡¬æ’‘ç§°åŸŽæ©™æˆå‘ˆä¹˜ç¨‹æƒ©æ¾„è¯šæ‰¿é€žéª‹ç§¤åƒç—´æŒåŒ™æ± è¿Ÿå¼›é©°è€»é½¿ä¾ˆå°ºèµ¤ç¿…æ–¥ç‚½å……å†²è™«å´‡å® æŠ½é…¬ç•´è¸Œç¨ æ„ç­¹ä»‡ç»¸çž…ä¸‘è‡­åˆå‡ºæ©±åŽ¨èº‡é”„é›æ»é™¤æ¥šï¿½".split("");
    for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
    D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¡€å‚¨çŸ—æè§¦å¤„æ£å·ç©¿æ¤½ä¼ èˆ¹å–˜ä¸²ç–®çª—å¹¢åºŠé—¯åˆ›å¹ç‚Šæ¶é”¤åž‚æ˜¥æ¤¿é†‡å”‡æ·³çº¯è ¢æˆ³ç»°ç–µèŒ¨ç£é›Œè¾žæ…ˆç“·è¯æ­¤åˆºèµæ¬¡èªè‘±å›±åŒ†ä»Žä¸›å‡‘ç²—é†‹ç°‡ä¿ƒè¹¿ç¯¡çªœæ‘§å´”å‚¬è„†ç˜ç²¹æ·¬ç¿ æ‘å­˜å¯¸ç£‹æ’®æ“æŽªæŒ«é”™æ­è¾¾ç­”ç˜©æ‰“å¤§å‘†æ­¹å‚£æˆ´å¸¦æ®†ä»£è´·è¢‹å¾…é€®ï¿½".split("");
    for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
    D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ€ è€½æ‹…ä¸¹å•éƒ¸æŽ¸èƒ†æ—¦æ°®ä½†æƒ®æ·¡è¯žå¼¹è›‹å½“æŒ¡å…šè¡æ¡£åˆ€æ£è¹ˆå€’å²›ç¥·å¯¼åˆ°ç¨»æ‚¼é“ç›—å¾·å¾—çš„è¹¬ç¯ç™»ç­‰çžªå‡³é‚“å ¤ä½Žæ»´è¿ªæ•Œç¬›ç‹„æ¶¤ç¿Ÿå«¡æŠµåº•åœ°è’‚ç¬¬å¸å¼Ÿé€’ç¼”é¢ æŽ‚æ»‡ç¢˜ç‚¹å…¸é›åž«ç”µä½ƒç”¸åº—æƒ¦å¥ æ·€æ®¿ç¢‰å¼é›•å‡‹åˆæŽ‰åŠé’“è°ƒè·Œçˆ¹ç¢Ÿè¶è¿­è°å ï¿½".split("");
    for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
    D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸ç›¯å®é’‰é¡¶é¼Žé”­å®šè®¢ä¸¢ä¸œå†¬è‘£æ‡‚åŠ¨æ ‹ä¾—æ«å†»æ´žå…œæŠ–æ–—é™¡è±†é€—ç—˜éƒ½ç£æ¯’çŠŠç‹¬è¯»å µç¹èµŒæœé•€è‚šåº¦æ¸¡å¦’ç«¯çŸ­é”»æ®µæ–­ç¼Žå †å…‘é˜Ÿå¯¹å¢©å¨è¹²æ•¦é¡¿å›¤é’ç›¾éæŽ‡å“†å¤šå¤ºåž›èº²æœµè·ºèˆµå‰æƒ°å •è›¾å³¨é¹…ä¿„é¢è®¹å¨¥æ¶åŽ„æ‰¼éé„‚é¥¿æ©è€Œå„¿è€³å°”é¥µæ´±äºŒï¿½".split("");
    for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
    D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è´°å‘ç½šç­ä¼ä¹é˜€æ³•çè—©å¸†ç•ªç¿»æ¨ŠçŸ¾é’’ç¹å‡¡çƒ¦åè¿”èŒƒè´©çŠ¯é¥­æ³›åŠèŠ³æ–¹è‚ªæˆ¿é˜²å¦¨ä»¿è®¿çººæ”¾è²éžå•¡é£žè‚¥åŒªè¯½å è‚ºåºŸæ²¸è´¹èŠ¬é…šå©æ°›åˆ†çº·åŸç„šæ±¾ç²‰å¥‹ä»½å¿¿æ„¤ç²ªä¸°å°æž«èœ‚å³°é”‹é£Žç–¯çƒ½é€¢å†¯ç¼è®½å¥‰å‡¤ä½›å¦å¤«æ•·è‚¤å­µæ‰¶æ‹‚è¾å¹…æ°Ÿç¬¦ä¼ä¿˜æœï¿½".split("");
    for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
    D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æµ®æ¶ªç¦è¢±å¼—ç”«æŠšè¾…ä¿¯é‡œæ–§è„¯è…‘åºœè…èµ´å‰¯è¦†èµ‹å¤å‚…ä»˜é˜œçˆ¶è…¹è´Ÿå¯Œè®£é™„å¦‡ç¼šå’å™¶å˜Žè¯¥æ”¹æ¦‚é’™ç›–æº‰å¹²ç”˜æ†æŸ‘ç«¿è‚èµ¶æ„Ÿç§†æ•¢èµ£å†ˆåˆšé’¢ç¼¸è‚›çº²å²—æ¸¯æ ç¯™çš‹é«˜è†ç¾”ç³•æžé•ç¨¿å‘Šå“¥æ­Œææˆˆé¸½èƒ³ç–™å‰²é©è‘›æ ¼è›¤é˜éš”é“¬ä¸ªå„ç»™æ ¹è·Ÿè€•æ›´åºšç¾¹ï¿½".split("");
    for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
    D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åŸ‚è€¿æ¢—å·¥æ”»åŠŸæ­é¾šä¾›èº¬å…¬å®«å¼“å·©æ±žæ‹±è´¡å…±é’©å‹¾æ²Ÿè‹Ÿç‹—åž¢æž„è´­å¤Ÿè¾œè‡å’•ç®ä¼°æ²½å­¤å§‘é¼“å¤è›Šéª¨è°·è‚¡æ•…é¡¾å›ºé›‡åˆ®ç“œå‰å¯¡æŒ‚è¤‚ä¹–æ‹æ€ªæ£ºå…³å®˜å† è§‚ç®¡é¦†ç½æƒ¯çŒè´¯å…‰å¹¿é€›ç‘°è§„åœ­ç¡…å½’é¾Ÿé—ºè½¨é¬¼è¯¡ç™¸æ¡‚æŸœè·ªè´µåˆ½è¾Šæ»šæ£é”…éƒ­å›½æžœè£¹è¿‡å“ˆï¿½".split("");
    for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
    D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éª¸å­©æµ·æ°¦äº¥å®³éª‡é…£æ†¨é‚¯éŸ©å«æ¶µå¯’å‡½å–Šç½•ç¿°æ’¼ææ—±æ†¾æ‚ç„Šæ±—æ±‰å¤¯æ­èˆªå£•åšŽè±ªæ¯«éƒå¥½è€—å·æµ©å‘µå–è·èæ ¸ç¦¾å’Œä½•åˆç›’è²‰é˜‚æ²³æ¶¸èµ«è¤é¹¤è´ºå˜¿é»‘ç—•å¾ˆç‹ æ¨å“¼äº¨æ¨ªè¡¡æ’è½°å“„çƒ˜è™¹é¸¿æ´ªå®å¼˜çº¢å–‰ä¾¯çŒ´å¼åŽšå€™åŽå‘¼ä¹Žå¿½ç‘šå£¶è‘«èƒ¡è´ç‹ç³Šæ¹–ï¿½".split("");
    for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
    D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¼§è™Žå”¬æŠ¤äº’æ²ªæˆ·èŠ±å“—åŽçŒ¾æ»‘ç”»åˆ’åŒ–è¯æ§å¾Šæ€€æ·®åæ¬¢çŽ¯æ¡“è¿˜ç¼“æ¢æ‚£å”¤ç—ªè±¢ç„•æ¶£å®¦å¹»è’æ…Œé»„ç£ºè—ç°§çš‡å‡°æƒ¶ç…Œæ™ƒå¹Œæè°Žç°æŒ¥è¾‰å¾½æ¢è›”å›žæ¯æ‚”æ…§å‰æƒ æ™¦è´¿ç§½ä¼šçƒ©æ±‡è®³è¯²ç»˜è¤æ˜å©šé­‚æµ‘æ··è±æ´»ä¼™ç«èŽ·æˆ–æƒ‘éœè´§ç¥¸å‡»åœ¾åŸºæœºç•¸ç¨½ç§¯ç®•ï¿½".split("");
    for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
    D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‚Œé¥¥è¿¹æ¿€è®¥é¸¡å§¬ç»©ç¼‰å‰æžæ£˜è¾‘ç±é›†åŠæ€¥ç–¾æ±²å³å«‰çº§æŒ¤å‡ è„Šå·±è“ŸæŠ€å†€å­£ä¼Žç¥­å‰‚æ‚¸æµŽå¯„å¯‚è®¡è®°æ—¢å¿Œé™…å¦“ç»§çºªå˜‰æž·å¤¹ä½³å®¶åŠ èšé¢Šè´¾ç”²é’¾å‡ç¨¼ä»·æž¶é©¾å«æ­¼ç›‘åšå°–ç¬ºé—´ç…Žå…¼è‚©è‰°å¥¸ç¼„èŒ§æ£€æŸ¬ç¢±ç¡·æ‹£æ¡ç®€ä¿­å‰ªå‡èæ§›é‰´è·µè´±è§é”®ç®­ä»¶ï¿½".split("");
    for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
    D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¥èˆ°å‰‘é¥¯æ¸æº…æ¶§å»ºåƒµå§œå°†æµ†æ±Ÿç–†è’‹æ¡¨å¥–è®²åŒ é…±é™è•‰æ¤’ç¤ç„¦èƒ¶äº¤éƒŠæµ‡éª„å¨‡åš¼æ…é“°çŸ«ä¾¥è„šç‹¡è§’é¥ºç¼´ç»žå‰¿æ•™é…µè½¿è¾ƒå«çª–æ­æŽ¥çš†ç§¸è¡—é˜¶æˆªåŠ«èŠ‚æ¡”æ°æ·ç«ç«­æ´ç»“è§£å§æˆ’è—‰èŠ¥ç•Œå€Ÿä»‹ç–¥è¯«å±Šå·¾ç­‹æ–¤é‡‘ä»Šæ´¥è¥Ÿç´§é”¦ä»…è°¨è¿›é³æ™‹ç¦è¿‘çƒ¬æµ¸ï¿½".split("");
    for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
    D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å°½åŠ²è†å…¢èŒŽç›æ™¶é²¸äº¬æƒŠç²¾ç²³ç»äº•è­¦æ™¯é¢ˆé™å¢ƒæ•¬é•œå¾„ç—‰é–ç«Ÿç«žå‡€ç‚¯çª˜æªç©¶çº çŽ–éŸ­ä¹…ç¸ä¹é…’åŽ©æ•‘æ—§è‡¼èˆ…å’Žå°±ç–šéž æ‹˜ç‹™ç–½å±…é©¹èŠå±€å’€çŸ©ä¸¾æ²®èšæ‹’æ®å·¨å…·è·è¸žé”¯ä¿±å¥æƒ§ç‚¬å‰§æé¹ƒå¨Ÿå€¦çœ·å·ç»¢æ’…æ”«æŠ‰æŽ˜å€”çˆµè§‰å†³è¯€ç»å‡èŒé’§å†›å›å³»ï¿½".split("");
    for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
    D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¿Šç«£æµšéƒ¡éªå–€å’–å¡å’¯å¼€æ©æ¥·å‡¯æ…¨åˆŠå ªå‹˜åŽç çœ‹åº·æ…·ç³ æ‰›æŠ—äº¢ç‚•è€ƒæ‹·çƒ¤é å·è‹›æŸ¯æ£µç£•é¢—ç§‘å£³å’³å¯æ¸´å…‹åˆ»å®¢è¯¾è‚¯å•ƒåž¦æ³å‘å­ç©ºæå­”æŽ§æŠ å£æ‰£å¯‡æž¯å“­çªŸè‹¦é…·åº“è£¤å¤¸åž®æŒŽè·¨èƒ¯å—ç­·ä¾©å¿«å®½æ¬¾åŒ¡ç­ç‹‚æ¡†çŸ¿çœ¶æ—·å†µäºç›”å²¿çª¥è‘µå¥Žé­å‚€ï¿½".split("");
    for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
    D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¦ˆæ„§æºƒå¤æ˜†æ†å›°æ‹¬æ‰©å»“é˜”åžƒæ‹‰å–‡èœ¡è…Šè¾£å•¦èŽ±æ¥èµ–è“å©ªæ æ‹¦ç¯®é˜‘å…°æ¾œè°°æ½è§ˆæ‡’ç¼†çƒ‚æ»¥ç…æ¦”ç‹¼å»ŠéƒŽæœ—æµªæžåŠ³ç‰¢è€ä½¬å§¥é…ªçƒ™æ¶å‹’ä¹é›·é•­è•¾ç£Šç´¯å„¡åž’æ“‚è‚‹ç±»æ³ªæ£±æ¥žå†·åŽ˜æ¢¨çŠé»Žç¯±ç‹¸ç¦»æ¼“ç†æŽé‡Œé²¤ç¤¼èŽ‰è”åæ —ä¸½åŽ‰åŠ±ç ¾åŽ†åˆ©å‚ˆä¾‹ä¿ï¿½".split("");
    for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
    D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç—¢ç«‹ç²’æ²¥éš¶åŠ›ç’ƒå“©ä¿©è”èŽ²è¿žé•°å»‰æ€œæ¶Ÿå¸˜æ•›è„¸é“¾æ‹ç‚¼ç»ƒç²®å‡‰æ¢ç²±è‰¯ä¸¤è¾†é‡æ™¾äº®è°…æ’©èŠåƒšç–—ç‡Žå¯¥è¾½æ½¦äº†æ’‚é•£å»–æ–™åˆ—è£‚çƒˆåŠ£çŒŽç³æž—ç£·éœ–ä¸´é‚»é³žæ·‹å‡›èµåæ‹ŽçŽ²è±é›¶é¾„é“ƒä¼¶ç¾šå‡Œçµé™µå²­é¢†å¦ä»¤æºœç‰æ¦´ç¡«é¦ç•™åˆ˜ç˜¤æµæŸ³å…­é¾™è‹å’™ç¬¼çª¿ï¿½".split("");
    for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
    D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éš†åž„æ‹¢é™‡æ¥¼å¨„æ‚ç¯“æ¼é™‹èŠ¦å¢é¢…åºç‚‰æŽ³å¤è™é²éº“ç¢Œéœ²è·¯èµ‚é¹¿æ½žç¦„å½•é™†æˆ®é©´å•é“ä¾£æ—…å±¥å±¡ç¼•è™‘æ°¯å¾‹çŽ‡æ»¤ç»¿å³¦æŒ›å­ªæ»¦åµä¹±æŽ ç•¥æŠ¡è½®ä¼¦ä»‘æ²¦çº¶è®ºèèžºç½—é€»é”£ç®©éª¡è£¸è½æ´›éª†ç»œå¦ˆéº»çŽ›ç èš‚é©¬éª‚å˜›å—åŸ‹ä¹°éº¦å–è¿ˆè„‰çž’é¦’è›®æ»¡è”“æ›¼æ…¢æ¼«ï¿½".split("");
    for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
    D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è°©èŠ’èŒ«ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚å†’å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰åª’é•æ¯ç¾Žæ˜§å¯å¦¹åªšé—¨é—·ä»¬èŒè’™æª¬ç›Ÿé”°çŒ›æ¢¦å­Ÿçœ¯é†šé¡ç³œè¿·è°œå¼¥ç±³ç§˜è§…æ³Œèœœå¯†å¹‚æ£‰çœ ç»µå†•å…å‹‰å¨©ç¼…é¢è‹—æçž„è—ç§’æ¸ºåº™å¦™è”‘ç­æ°‘æŠ¿çš¿æ•æ‚¯é—½æ˜ŽèžŸé¸£é“­åå‘½è°¬æ‘¸ï¿½".split("");
    for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
    D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ‘¹è˜‘æ¨¡è†œç£¨æ‘©é­”æŠ¹æœ«èŽ«å¢¨é»˜æ²«æ¼ å¯žé™Œè°‹ç‰ŸæŸæ‹‡ç‰¡äº©å§†æ¯å¢“æš®å¹•å‹Ÿæ…•æœ¨ç›®ç¦ç‰§ç©†æ‹¿å“ªå‘é’ é‚£å¨œçº³æ°–ä¹ƒå¥¶è€å¥ˆå—ç”·éš¾å›ŠæŒ è„‘æ¼é—¹æ·–å‘¢é¦å†…å«©èƒ½å¦®éœ“å€ªæ³¥å°¼æ‹Ÿä½ åŒ¿è…»é€†æººè”«æ‹ˆå¹´ç¢¾æ’µæ»å¿µå¨˜é…¿é¸Ÿå°¿æè‚å­½å•®é•Šé•æ¶…æ‚¨æŸ ç‹žå‡å®ï¿½".split("");
    for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
    D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ‹§æ³žç‰›æ‰­é’®çº½è„“æµ“å†œå¼„å¥´åŠªæ€’å¥³æš–è™ç–ŸæŒªæ‡¦ç³¯è¯ºå“¦æ¬§é¸¥æ®´è—•å‘•å¶æ²¤å•ªè¶´çˆ¬å¸•æ€•ç¶æ‹æŽ’ç‰Œå¾˜æ¹ƒæ´¾æ”€æ½˜ç›˜ç£ç›¼ç•”åˆ¤å›ä¹“åºžæ—è€ªèƒ–æŠ›å’†åˆ¨ç‚®è¢è·‘æ³¡å‘¸èƒšåŸ¹è£´èµ”é™ªé…ä½©æ²›å–·ç›†ç °æŠ¨çƒ¹æ¾Žå½­è“¬æ£šç¡¼ç¯·è†¨æœ‹é¹æ§ç¢°å¯ç ’éœ¹æ‰¹æŠ«åŠˆçµæ¯—ï¿½".split("");
    for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
    D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å•¤è„¾ç–²çš®åŒ¹ç—žåƒ»å±è­¬ç¯‡åç‰‡éª—é£˜æ¼‚ç“¢ç¥¨æ’‡çž¥æ‹¼é¢‘è´«å“è˜ä¹’åªè‹¹èå¹³å‡­ç“¶è¯„å±å¡æ³¼é¢‡å©†ç ´é­„è¿«ç²•å‰–æ‰‘é“ºä»†èŽ†è‘¡è©è’²åŸ”æœ´åœƒæ™®æµ¦è°±æ›ç€‘æœŸæ¬ºæ –æˆšå¦»ä¸ƒå‡„æ¼†æŸ’æ²å…¶æ£‹å¥‡æ­§ç•¦å´Žè„é½æ——ç¥ˆç¥éª‘èµ·å²‚ä¹žä¼å¯å¥‘ç Œå™¨æ°”è¿„å¼ƒæ±½æ³£è®«æŽï¿½".split("");
    for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
    D[199] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ°æ´½ç‰µæ‰¦é’Žé“…åƒè¿ç­¾ä»Ÿè°¦ä¹¾é»”é’±é’³å‰æ½œé£æµ…è°´å ‘åµŒæ¬ æ­‰æžªå‘›è…”ç¾Œå¢™è”·å¼ºæŠ¢æ©‡é”¹æ•²æ‚„æ¡¥çž§ä¹”ä¾¨å·§éž˜æ’¬ç¿˜å³­ä¿çªåˆ‡èŒ„ä¸”æ€¯çªƒé’¦ä¾µäº²ç§¦ç´å‹¤èŠ¹æ“’ç¦½å¯æ²é’è½»æ°¢å€¾å¿æ¸…æ“Žæ™´æ°°æƒ…é¡·è¯·åº†ç¼ç©·ç§‹ä¸˜é‚±çƒæ±‚å›šé…‹æ³…è¶‹åŒºè›†æ›²èº¯å±ˆé©±æ¸ ï¿½".split("");
    for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
    D[200] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å–å¨¶é¾‹è¶£åŽ»åœˆé¢§æƒé†›æ³‰å…¨ç—Šæ‹³çŠ¬åˆ¸åŠç¼ºç‚”ç˜¸å´é¹Šæ¦·ç¡®é›€è£™ç¾¤ç„¶ç‡ƒå†‰æŸ“ç“¤å£¤æ”˜åš·è®©é¥¶æ‰°ç»•æƒ¹çƒ­å£¬ä»äººå¿éŸ§ä»»è®¤åˆƒå¦Šçº«æ‰”ä»æ—¥æˆŽèŒ¸è“‰è£èžç†”æº¶å®¹ç»’å†—æ‰æŸ”è‚‰èŒ¹è •å„’å­ºå¦‚è¾±ä¹³æ±å…¥è¤¥è½¯é˜®è•Šç‘žé”é—°æ¶¦è‹¥å¼±æ’’æ´’è¨è…®é³ƒå¡žèµ›ä¸‰åï¿½".split("");
    for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
    D[201] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¼žæ•£æ¡‘å—“ä¸§æ”éªšæ‰«å«‚ç‘Ÿè‰²æ¶©æ£®åƒ§èŽŽç ‚æ€åˆ¹æ²™çº±å‚»å•¥ç…žç­›æ™’çŠè‹«æ‰å±±åˆ ç…½è¡«é—ªé™•æ“…èµ¡è†³å–„æ±•æ‰‡ç¼®å¢’ä¼¤å•†èµæ™Œä¸Šå°šè£³æ¢¢æŽç¨çƒ§èŠå‹ºéŸ¶å°‘å“¨é‚µç»å¥¢èµŠè›‡èˆŒèˆèµ¦æ‘„å°„æ…‘æ¶‰ç¤¾è®¾ç ·ç”³å‘»ä¼¸èº«æ·±å¨ ç»…ç¥žæ²ˆå®¡å©¶ç”šè‚¾æ…Žæ¸—å£°ç”Ÿç”¥ç‰²å‡ç»³ï¿½".split("");
    for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
    D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çœç››å‰©èƒœåœ£å¸ˆå¤±ç‹®æ–½æ¹¿è¯—å°¸è™±åçŸ³æ‹¾æ—¶ä»€é£Ÿèš€å®žè¯†å²çŸ¢ä½¿å±Žé©¶å§‹å¼ç¤ºå£«ä¸–æŸ¿äº‹æ‹­èª“é€åŠ¿æ˜¯å—œå™¬é€‚ä»•ä¾é‡Šé¥°æ°å¸‚æƒå®¤è§†è¯•æ”¶æ‰‹é¦–å®ˆå¯¿æŽˆå”®å—ç˜¦å…½è”¬æž¢æ¢³æ®ŠæŠ’è¾“å”èˆ’æ·‘ç–ä¹¦èµŽå­°ç†Ÿè–¯æš‘æ›™ç½²èœ€é»é¼ å±žæœ¯è¿°æ ‘æŸæˆç«–å¢…åº¶æ•°æ¼±ï¿½".split("");
    for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
    D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ•åˆ·è€æ‘”è¡°ç”©å¸…æ “æ‹´éœœåŒçˆ½è°æ°´ç¡ç¨Žå®çž¬é¡ºèˆœè¯´ç¡•æœ”çƒæ–¯æ’•å˜¶æ€ç§å¸ä¸æ­»è‚†å¯ºå—£å››ä¼ºä¼¼é¥²å·³æ¾è€¸æ€‚é¢‚é€å®‹è®¼è¯µæœè‰˜æ“žå—½è‹é…¥ä¿—ç´ é€Ÿç²Ÿåƒ³å¡‘æº¯å®¿è¯‰è‚ƒé…¸è’œç®—è™½éš‹éšç»¥é«“ç¢Žå²ç©—é‚éš§ç¥Ÿå­™æŸç¬‹è“‘æ¢­å”†ç¼©çç´¢é”æ‰€å¡Œä»–å®ƒå¥¹å¡”ï¿½".split("");
    for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
    D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç­æŒžè¹‹è¸èƒŽè‹”æŠ¬å°æ³°é…žå¤ªæ€æ±°åæ‘Šè´ªç˜«æ»©å›æª€ç—°æ½­è°­è°ˆå¦æ¯¯è¢’ç¢³æŽ¢å¹ç‚­æ±¤å¡˜æªå ‚æ£ è†›å”ç³–å€˜èººæ·Œè¶Ÿçƒ«æŽæ¶›æ»”ç»¦è„æ¡ƒé€ƒæ·˜é™¶è®¨å¥—ç‰¹è—¤è…¾ç–¼èªŠæ¢¯å‰”è¸¢é”‘æé¢˜è¹„å•¼ä½“æ›¿åšæƒ•æ¶•å‰ƒå±‰å¤©æ·»å¡«ç”°ç”œæ¬èˆ”è…†æŒ‘æ¡è¿¢çœºè·³è´´é“å¸–åŽ…å¬çƒƒï¿½".split("");
    for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
    D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±€å»·åœäº­åº­æŒºè‰‡é€šæ¡é…®çž³åŒé“œå½¤ç«¥æ¡¶æ…ç­’ç»Ÿç—›å·æŠ•å¤´é€å‡¸ç§ƒçªå›¾å¾’é€”æ¶‚å± åœŸåå…”æ¹å›¢æŽ¨é¢“è…¿èœ•è¤ªé€€åžå±¯è‡€æ‹–æ‰˜è„±é¸µé™€é©®é©¼æ¤­å¦¥æ‹“å”¾æŒ–å“‡è›™æ´¼å¨ƒç“¦è¢œæ­ªå¤–è±Œå¼¯æ¹¾çŽ©é¡½ä¸¸çƒ·å®Œç¢—æŒ½æ™šçš–æƒ‹å®›å©‰ä¸‡è…•æ±ªçŽ‹äº¡æž‰ç½‘å¾€æ—ºæœ›å¿˜å¦„å¨ï¿½".split("");
    for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
    D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å·å¾®å±éŸ¦è¿æ¡…å›´å”¯æƒŸä¸ºæ½ç»´è‹‡èŽå§”ä¼Ÿä¼ªå°¾çº¬æœªè”šå‘³ç•èƒƒå–‚é­ä½æ¸­è°“å°‰æ…°å«ç˜Ÿæ¸©èšŠæ–‡é—»çº¹å»ç¨³ç´Šé—®å—¡ç¿ç“®æŒèœ—æ¶¡çªæˆ‘æ–¡å§æ¡æ²ƒå·«å‘œé’¨ä¹Œæ±¡è¯¬å±‹æ— èŠœæ¢§å¾å´æ¯‹æ­¦äº”æ‚åˆèˆžä¼ä¾®åžæˆŠé›¾æ™¤ç‰©å‹¿åŠ¡æ‚Ÿè¯¯æ˜”ç†™æžè¥¿ç¡’çŸ½æ™°å˜»å¸é”¡ç‰ºï¿½".split("");
    for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
    D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨€æ¯å¸Œæ‚‰è†å¤•æƒœç†„çƒ¯æºªæ±çŠ€æª„è¢­å¸­ä¹ åª³å–œé“£æ´—ç³»éš™æˆç»†çžŽè™¾åŒ£éœžè¾–æš‡å³¡ä¾ ç‹­ä¸‹åŽ¦å¤å“æŽ€é”¨å…ˆä»™é²œçº¤å’¸è´¤è¡”èˆ·é—²æ¶Žå¼¦å«Œæ˜¾é™©çŽ°çŒ®åŽ¿è…ºé¦…ç¾¡å®ªé™·é™çº¿ç›¸åŽ¢é•¶é¦™ç®±è¥„æ¹˜ä¹¡ç¿”ç¥¥è¯¦æƒ³å“äº«é¡¹å··æ©¡åƒå‘è±¡è§ç¡éœ„å‰Šå“®åš£é”€æ¶ˆå®µæ·†æ™“ï¿½".split("");
    for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
    D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œæ¬£è¾›æ–°å¿»å¿ƒä¿¡è¡…æ˜Ÿè…¥çŒ©æƒºå…´åˆ‘åž‹å½¢é‚¢è¡Œé†’å¹¸ææ€§å§“å…„å‡¶èƒ¸åŒˆæ±¹é›„ç†Šä¼‘ä¿®ç¾žæœ½å—…é”ˆç§€è¢–ç»£å¢ŸæˆŒéœ€è™šå˜˜é¡»å¾è®¸è“„é…—å™æ—­åºç•œæ¤çµ®å©¿ç»ªç»­è½©å–§å®£æ‚¬æ—‹çŽ„ï¿½".split("");
    for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
    D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é€‰ç™£çœ©ç»šé´è–›å­¦ç©´é›ªè¡€å‹‹ç†å¾ªæ—¬è¯¢å¯»é©¯å·¡æ®‰æ±›è®­è®¯é€Šè¿…åŽ‹æŠ¼é¸¦é¸­å‘€ä¸«èŠ½ç‰™èšœå´–è¡™æ¶¯é›…å“‘äºšè®¶ç„‰å’½é˜‰çƒŸæ·¹ç›ä¸¥ç ”èœ’å²©å»¶è¨€é¢œé˜Žç‚Žæ²¿å¥„æŽ©çœ¼è¡æ¼”è‰³å °ç‡•åŽŒç šé›å”å½¦ç„°å®´è°šéªŒæ®ƒå¤®é¸¯ç§§æ¨æ‰¬ä½¯ç–¡ç¾Šæ´‹é˜³æ°§ä»°ç—’å…»æ ·æ¼¾é‚€è…°å¦–ç‘¶ï¿½".split("");
    for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
    D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ‘‡å°§é¥çª‘è°£å§šå’¬èˆ€è¯è¦è€€æ¤°å™Žè€¶çˆ·é‡Žå†¶ä¹Ÿé¡µæŽ–ä¸šå¶æ›³è…‹å¤œæ¶²ä¸€å£¹åŒ»æ–é“±ä¾ä¼Šè¡£é¢å¤·é—ç§»ä»ªèƒ°ç–‘æ²‚å®œå§¨å½æ¤…èšå€šå·²ä¹™çŸ£ä»¥è‰ºæŠ‘æ˜“é‚‘å±¹äº¿å½¹è‡†é€¸è‚„ç–«äº¦è£”æ„æ¯…å¿†ä¹‰ç›Šæº¢è¯£è®®è°Šè¯‘å¼‚ç¿¼ç¿Œç»ŽèŒµè«å› æ®·éŸ³é˜´å§»åŸé“¶æ·«å¯…é¥®å°¹å¼•éšï¿½".split("");
    for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
    D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å°è‹±æ¨±å©´é¹°åº”ç¼¨èŽ¹è¤è¥è§è‡è¿Žèµ¢ç›ˆå½±é¢–ç¡¬æ˜ å“Ÿæ‹¥ä½£è‡ƒç—ˆåº¸é›è¸Šè›¹å’æ³³æ¶Œæ°¸æ¿å‹‡ç”¨å¹½ä¼˜æ‚ å¿§å°¤ç”±é‚®é“€çŠ¹æ²¹æ¸¸é…‰æœ‰å‹å³ä½‘é‡‰è¯±åˆå¹¼è¿‚æ·¤äºŽç›‚æ¦†è™žæ„šèˆ†ä½™ä¿žé€¾é±¼æ„‰æ¸æ¸”éš…äºˆå¨±é›¨ä¸Žå±¿ç¦¹å®‡è¯­ç¾½çŽ‰åŸŸèŠ‹éƒåé‡å–»å³ªå¾¡æ„ˆæ¬²ç‹±è‚²èª‰ï¿½".split("");
    for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
    D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æµ´å¯“è£•é¢„è±«é©­é¸³æ¸Šå†¤å…ƒåž£è¢åŽŸæ´è¾•å›­å‘˜åœ†çŒ¿æºç¼˜è¿œè‹‘æ„¿æ€¨é™¢æ›°çº¦è¶Šè·ƒé’¥å²³ç²¤æœˆæ‚¦é˜…è€˜äº‘éƒ§åŒ€é™¨å…è¿è•´é…æ™•éŸµå­•åŒç ¸æ‚æ ½å“‰ç¾å®°è½½å†åœ¨å’±æ”’æš‚èµžèµƒè„è‘¬é­ç³Ÿå‡¿è—»æž£æ—©æ¾¡èš¤èºå™ªé€ çš‚ç¶ç‡¥è´£æ‹©åˆ™æ³½è´¼æ€Žå¢žæ†Žæ›¾èµ æ‰Žå–³æ¸£æœ­è½§ï¿½".split("");
    for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
    D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é“¡é—¸çœ¨æ …æ¦¨å’‹ä¹ç‚¸è¯ˆæ‘˜æ–‹å®…çª„å€ºå¯¨çž»æ¯¡è©¹ç²˜æ²¾ç›æ–©è¾—å´­å±•è˜¸æ ˆå æˆ˜ç«™æ¹›ç»½æ¨Ÿç« å½°æ¼³å¼ æŽŒæ¶¨æ–ä¸ˆå¸è´¦ä»—èƒ€ç˜´éšœæ‹›æ˜­æ‰¾æ²¼èµµç…§ç½©å…†è‚‡å¬é®æŠ˜å“²è›°è¾™è€…é”—è”—è¿™æµ™çæ–ŸçœŸç”„ç §è‡»è´žé’ˆä¾¦æž•ç–¹è¯Šéœ‡æŒ¯é•‡é˜µè’¸æŒ£çå¾ç‹°äº‰æ€”æ•´æ‹¯æ­£æ”¿ï¿½".split("");
    for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
    D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¸§ç—‡éƒ‘è¯èŠæžæ”¯å±èœ˜çŸ¥è‚¢è„‚æ±ä¹‹ç»‡èŒç›´æ¤æ®–æ‰§å€¼ä¾„å€æŒ‡æ­¢è¶¾åªæ—¨çº¸å¿—æŒšæŽ·è‡³è‡´ç½®å¸œå³™åˆ¶æ™ºç§©ç¨šè´¨ç‚™ç—”æ»žæ²»çª’ä¸­ç›…å¿ é’Ÿè¡·ç»ˆç§è‚¿é‡ä»²ä¼—èˆŸå‘¨å·žæ´²è¯Œç²¥è½´è‚˜å¸šå’’çš±å®™æ˜¼éª¤ç æ ªè››æœ±çŒªè¯¸è¯›é€ç«¹çƒ›ç…®æ‹„çž©å˜±ä¸»è‘—æŸ±åŠ©è›€è´®é“¸ç­‘ï¿½".split("");
    for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
    D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä½æ³¨ç¥é©»æŠ“çˆªæ‹½ä¸“ç –è½¬æ’°èµšç¯†æ¡©åº„è£…å¦†æ’žå£®çŠ¶æ¤Žé”¥è¿½èµ˜å ç¼€è°†å‡†æ‰æ‹™å“æ¡Œç¢èŒé…Œå•„ç€ç¼æµŠå…¹å’¨èµ„å§¿æ»‹æ·„å­œç´«ä»”ç±½æ»“å­è‡ªæ¸å­—é¬ƒæ£•è¸ªå®—ç»¼æ€»çºµé‚¹èµ°å¥æç§Ÿè¶³å’æ—ç¥–è¯…é˜»ç»„é’»çº‚å˜´é†‰æœ€ç½ªå°Šéµæ˜¨å·¦ä½æŸžåšä½œååº§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");
    for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
    D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½äºä¸Œå…€ä¸å»¿å…ä¸•äº˜ä¸žé¬²å­¬å™©ä¸¨ç¦ºä¸¿åŒ•ä¹‡å¤­çˆ»å®æ°å›Ÿèƒ¤é¦—æ¯“ç¾é¼—ä¸¶äºŸé¼ä¹œä¹©äº“èŠˆå­›å•¬å˜ä»„åŽåŽåŽ£åŽ¥åŽ®é¥èµåŒšåµåŒ¦åŒ®åŒ¾èµœå¦å£åˆ‚åˆˆåˆŽåˆ­åˆ³åˆ¿å‰€å‰Œå‰žå‰¡å‰œè’¯å‰½åŠ‚åŠåŠåŠ“å†‚ç½”äº»ä»ƒä»‰ä»‚ä»¨ä»¡ä»«ä»žä¼›ä»³ä¼¢ä½¤ä»µä¼¥ä¼§ä¼‰ä¼«ä½žä½§æ”¸ä½šä½ï¿½".split("");
    for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
    D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä½Ÿä½—ä¼²ä¼½ä½¶ä½´ä¾‘ä¾‰ä¾ƒä¾ä½¾ä½»ä¾ªä½¼ä¾¬ä¾”ä¿¦ä¿¨ä¿ªä¿…ä¿šä¿£ä¿œä¿‘ä¿Ÿä¿¸å€©åŒä¿³å€¬å€å€®å€­ä¿¾å€œå€Œå€¥å€¨å¾åƒå•åˆåŽå¬å»å‚¥å‚§å‚©å‚ºåƒ–å„†åƒ­åƒ¬åƒ¦åƒ®å„‡å„‹ä»æ°½ä½˜ä½¥ä¿Žé¾ æ±†ç±´å…®å·½é»‰é¦˜å†å¤”å‹¹åŒè¨‡åŒå‡«å¤™å…•äº å…–äº³è¡®è¢¤äºµè„”è£’ç¦€å¬´è ƒç¾¸å†«å†±å†½å†¼ï¿½".split("");
    for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
    D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å‡‡å†–å†¢å†¥è® è®¦è®§è®ªè®´è®µè®·è¯‚è¯ƒè¯‹è¯è¯Žè¯’è¯“è¯”è¯–è¯˜è¯™è¯œè¯Ÿè¯ è¯¤è¯¨è¯©è¯®è¯°è¯³è¯¶è¯¹è¯¼è¯¿è°€è°‚è°„è°‡è°Œè°è°‘è°’è°”è°•è°–è°™è°›è°˜è°è°Ÿè° è°¡è°¥è°§è°ªè°«è°®è°¯è°²è°³è°µè°¶å©åºé˜é˜¢é˜¡é˜±é˜ªé˜½é˜¼é™‚é™‰é™”é™Ÿé™§é™¬é™²é™´éšˆéšéš—éš°é‚—é‚›é‚é‚™é‚¬é‚¡é‚´é‚³é‚¶é‚ºï¿½".split("");
    for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
    D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é‚¸é‚°éƒéƒ…é‚¾éƒéƒ„éƒ‡éƒ“éƒ¦éƒ¢éƒœéƒ—éƒ›éƒ«éƒ¯éƒ¾é„„é„¢é„žé„£é„±é„¯é„¹é…ƒé…†åˆå¥‚åŠ¢åŠ¬åŠ­åŠ¾å“¿å‹å‹–å‹°åŸç‡®çŸå»´å‡µå‡¼é¬¯åŽ¶å¼ç•šå·¯åŒåž©åž¡å¡¾å¢¼å£…å£‘åœ©åœ¬åœªåœ³åœ¹åœ®åœ¯åœåœ»å‚å©åž…å«åž†å¼å»å¨å­å¶å³åž­åž¤åžŒåž²åŸåž§åž´åž“åž åŸ•åŸ˜åŸšåŸ™åŸ’åž¸åŸ´åŸ¯åŸ¸åŸ¤åŸï¿½".split("");
    for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
    D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å ‹å åŸ½åŸ­å €å žå ™å¡„å  å¡¥å¡¬å¢å¢‰å¢šå¢€é¦¨é¼™æ‡¿è‰¹è‰½è‰¿èŠèŠŠèŠ¨èŠ„èŠŽèŠ‘èŠ—èŠ™èŠ«èŠ¸èŠ¾èŠ°è‹ˆè‹Šè‹£èŠ˜èŠ·èŠ®è‹‹è‹Œè‹èŠ©èŠ´èŠ¡èŠªèŠŸè‹„è‹ŽèŠ¤è‹¡èŒ‰è‹·è‹¤èŒèŒ‡è‹œè‹´è‹’è‹˜èŒŒè‹»è‹“èŒ‘èŒšèŒ†èŒ”èŒ•è‹ è‹•èŒœè‘è›èœèŒˆèŽ’èŒ¼èŒ´èŒ±èŽ›èžèŒ¯èè‡èƒèŸè€èŒ—è èŒ­èŒºèŒ³è¦è¥ï¿½".split("");
    for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
    D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¨èŒ›è©è¬èªè­è®èŽ°è¸èŽ³èŽ´èŽ èŽªèŽ“èŽœèŽ…è¼èŽ¶èŽ©è½èŽ¸è»èŽ˜èŽžèŽ¨èŽºèŽ¼èèè¥è˜å ‡è˜è‹èè½è–èœè¸è‘è†è”èŸèèƒè¸è¹èªè…è€è¦è°è¡è‘œè‘‘è‘šè‘™è‘³è’‡è’ˆè‘ºè’‰è‘¸è¼è‘†è‘©è‘¶è’Œè’Žè±è‘­è“è“è“è“¦è’½è““è“Šè’¿è’ºè“ è’¡è’¹è’´è’—è“¥è“£è”Œç”è”¸è“°è”¹è”Ÿè”ºï¿½".split("");
    for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
    D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è•–è”»è“¿è“¼è•™è•ˆè•¨è•¤è•žè•ºçž¢è•ƒè•²è•»è–¤è–¨è–‡è–è•¹è–®è–œè–…è–¹è–·è–°è—“è—è—œè—¿è˜§è˜…è˜©è˜–è˜¼å»¾å¼ˆå¤¼å¥è€·å¥•å¥šå¥˜åŒå°¢å°¥å°¬å°´æ‰Œæ‰ªæŠŸæŠ»æ‹Šæ‹šæ‹—æ‹®æŒ¢æ‹¶æŒ¹æ‹æƒæŽ­æ¶æ±æºæŽŽæŽ´æ­æŽ¬æŽŠæ©æŽ®æŽ¼æ²æ¸æ æ¿æ„æžæŽæ‘’æ†æŽ¾æ‘…æ‘æ‹æ›æ æŒæ¦æ¡æ‘žæ’„æ‘­æ’–ï¿½".split("");
    for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
    D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ‘ºæ’·æ’¸æ’™æ’ºæ“€æ“æ“—æ“¤æ“¢æ”‰æ”¥æ”®å¼‹å¿’ç”™å¼‘åŸå±å½å©å¨å»å’å–å†å‘‹å‘’å‘“å‘”å‘–å‘ƒå¡å‘—å‘™å£å²å’‚å’”å‘·å‘±å‘¤å’šå’›å’„å‘¶å‘¦å’å“å’­å“‚å’´å“’å’§å’¦å““å“”å‘²å’£å“•å’»å’¿å“Œå“™å“šå“œå’©å’ªå’¤å“å“å“žå”›å“§å” å“½å””å“³å”¢å”£å”å”‘å”§å”ªå•§å–å–µå•‰å•­å•å••å”¿å•å”¼ï¿½".split("");
    for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
    D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å”·å•–å•µå•¶å•·å”³å”°å•œå–‹å—’å–ƒå–±å–¹å–ˆå–å–Ÿå•¾å—–å–‘å•»å—Ÿå–½å–¾å–”å–™å—ªå—·å—‰å˜Ÿå—‘å—«å—¬å—”å—¦å—å—„å—¯å—¥å—²å—³å—Œå—å—¨å—µå—¤è¾”å˜žå˜ˆå˜Œå˜å˜¤å˜£å—¾å˜€å˜§å˜­å™˜å˜¹å™—å˜¬å™å™¢å™™å™œå™Œå™”åš†å™¤å™±å™«å™»å™¼åš…åš“åš¯å›”å›—å›å›¡å›µå›«å›¹å›¿åœ„åœŠåœ‰åœœå¸å¸™å¸”å¸‘å¸±å¸»å¸¼ï¿½".split("");
    for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
    D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¸·å¹„å¹”å¹›å¹žå¹¡å²Œå±ºå²å²å²–å²ˆå²˜å²™å²‘å²šå²œå²µå²¢å²½å²¬å²«å²±å²£å³å²·å³„å³’å³¤å³‹å³¥å´‚å´ƒå´§å´¦å´®å´¤å´žå´†å´›åµ˜å´¾å´´å´½åµ¬åµ›åµ¯åµåµ«åµ‹åµŠåµ©åµ´å¶‚å¶™å¶è±³å¶·å·…å½³å½·å¾‚å¾‡å¾‰å¾Œå¾•å¾™å¾œå¾¨å¾­å¾µå¾¼è¡¢å½¡çŠ­çŠ°çŠ´çŠ·çŠ¸ç‹ƒç‹ç‹Žç‹ç‹’ç‹¨ç‹¯ç‹©ç‹²ç‹´ç‹·çŒç‹³çŒƒç‹ºï¿½".split("");
    for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
    D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç‹»çŒ—çŒ“çŒ¡çŒŠçŒžçŒçŒ•çŒ¢çŒ¹çŒ¥çŒ¬çŒ¸çŒ±ççç—ç ç¬ç¯ç¾èˆ›å¤¥é£§å¤¤å¤‚é¥£é¥§é¥¨é¥©é¥ªé¥«é¥¬é¥´é¥·é¥½é¦€é¦„é¦‡é¦Šé¦é¦é¦‘é¦“é¦”é¦•åº€åº‘åº‹åº–åº¥åº åº¹åºµåº¾åº³èµ“å»’å»‘å»›å»¨å»ªè†ºå¿„å¿‰å¿–å¿æ€ƒå¿®æ€„å¿¡å¿¤å¿¾æ€…æ€†å¿ªå¿­å¿¸æ€™æ€µæ€¦æ€›æ€æ€æ€©æ€«æ€Šæ€¿æ€¡æ¸æ¹æ»æºæ‚ï¿½".split("");
    for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
    D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æªæ½æ‚–æ‚šæ‚­æ‚æ‚ƒæ‚’æ‚Œæ‚›æƒ¬æ‚»æ‚±æƒæƒ˜æƒ†æƒšæ‚´æ„ æ„¦æ„•æ„£æƒ´æ„€æ„Žæ„«æ…Šæ…µæ†¬æ†”æ†§æ†·æ‡”æ‡µå¿éš³é—©é—«é—±é—³é—µé—¶é—¼é—¾é˜ƒé˜„é˜†é˜ˆé˜Šé˜‹é˜Œé˜é˜é˜’é˜•é˜–é˜—é˜™é˜šä¸¬çˆ¿æˆ•æ°µæ±”æ±œæ±Šæ²£æ²…æ²æ²”æ²Œæ±¨æ±©æ±´æ±¶æ²†æ²©æ³æ³”æ²­æ³·æ³¸æ³±æ³—æ²²æ³ æ³–æ³ºæ³«æ³®æ²±æ³“æ³¯æ³¾ï¿½".split("");
    for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
    D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ´¹æ´§æ´Œæµƒæµˆæ´‡æ´„æ´™æ´Žæ´«æµæ´®æ´µæ´šæµæµ’æµ”æ´³æ¶‘æµ¯æ¶žæ¶ æµžæ¶“æ¶”æµœæµ æµ¼æµ£æ¸šæ·‡æ·…æ·žæ¸Žæ¶¿æ· æ¸‘æ·¦æ·æ·™æ¸–æ¶«æ¸Œæ¶®æ¸«æ¹®æ¹Žæ¹«æº²æ¹Ÿæº†æ¹“æ¹”æ¸²æ¸¥æ¹„æ»Ÿæº±æº˜æ» æ¼­æ»¢æº¥æº§æº½æº»æº·æ»—æº´æ»æºæ»‚æºŸæ½¢æ½†æ½‡æ¼¤æ¼•æ»¹æ¼¯æ¼¶æ½‹æ½´æ¼ªæ¼‰æ¼©æ¾‰æ¾æ¾Œæ½¸æ½²æ½¼æ½ºæ¿‘ï¿½".split("");
    for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
    D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿‰æ¾§æ¾¹æ¾¶æ¿‚æ¿¡æ¿®æ¿žæ¿ æ¿¯ç€šç€£ç€›ç€¹ç€µççžå®€å®„å®•å®“å®¥å®¸ç”¯éªžæ´å¯¤å¯®è¤°å¯°è¹‡è¬‡è¾¶è¿“è¿•è¿¥è¿®è¿¤è¿©è¿¦è¿³è¿¨é€…é€„é€‹é€¦é€‘é€é€–é€¡é€µé€¶é€­é€¯é„é‘é’éé¨é˜é¢é›æš¹é´é½é‚‚é‚ˆé‚ƒé‚‹å½å½—å½–å½˜å°»å’«å±å±™å­±å±£å±¦ç¾¼å¼ªå¼©å¼­è‰´å¼¼é¬»å±®å¦å¦ƒå¦å¦©å¦ªå¦£ï¿½".split("");
    for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
    D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¦—å§Šå¦«å¦žå¦¤å§’å¦²å¦¯å§—å¦¾å¨…å¨†å§å¨ˆå§£å§˜å§¹å¨Œå¨‰å¨²å¨´å¨‘å¨£å¨“å©€å©§å©Šå©•å¨¼å©¢å©µèƒ¬åªªåª›å©·å©ºåª¾å««åª²å«’å«”åª¸å« å«£å«±å«–å«¦å«˜å«œå¬‰å¬—å¬–å¬²å¬·å­€å°•å°œå­šå­¥å­³å­‘å­“å­¢é©µé©·é©¸é©ºé©¿é©½éª€éªéª…éªˆéªŠéªéª’éª“éª–éª˜éª›éªœéªéªŸéª éª¢éª£éª¥éª§çºŸçº¡çº£çº¥çº¨çº©ï¿½".split("");
    for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
    D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çº­çº°çº¾ç»€ç»ç»‚ç»‰ç»‹ç»Œç»ç»”ç»—ç»›ç» ç»¡ç»¨ç»«ç»®ç»¯ç»±ç»²ç¼ç»¶ç»ºç»»ç»¾ç¼ç¼‚ç¼ƒç¼‡ç¼ˆç¼‹ç¼Œç¼ç¼‘ç¼’ç¼—ç¼™ç¼œç¼›ç¼Ÿç¼¡ç¼¢ç¼£ç¼¤ç¼¥ç¼¦ç¼§ç¼ªç¼«ç¼¬ç¼­ç¼¯ç¼°ç¼±ç¼²ç¼³ç¼µå¹ºç•¿å·›ç”¾é‚•çŽŽçŽ‘çŽ®çŽ¢çŽŸçç‚ç‘çŽ·çŽ³ç€ç‰çˆç¥ç™é¡¼çŠç©ç§çžçŽºç²ççªç‘›ç¦ç¥ç¨ç°ç®ç¬ï¿½".split("");
    for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
    D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç›çšç‘ç‘œç‘—ç‘•ç‘™ç‘·ç‘­ç‘¾ç’œç’Žç’€ç’ç’‡ç’‹ç’žç’¨ç’©ç’ç’§ç“’ç’ºéŸªéŸ«éŸ¬æŒæ“æžæˆæ©æž¥æž‡æªæ³æž˜æž§æµæž¨æžžæž­æž‹æ·æ¼æŸ°æ ‰æŸ˜æ ŠæŸ©æž°æ ŒæŸ™æžµæŸšæž³æŸæ €æŸƒæž¸æŸ¢æ ŽæŸæŸ½æ ²æ ³æ¡ æ¡¡æ¡Žæ¡¢æ¡„æ¡¤æ¢ƒæ æ¡•æ¡¦æ¡æ¡§æ¡€æ ¾æ¡Šæ¡‰æ ©æ¢µæ¢æ¡´æ¡·æ¢“æ¡«æ£‚æ¥®æ£¼æ¤Ÿæ¤ æ£¹ï¿½".split("");
    for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
    D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¤¤æ£°æ¤‹æ¤æ¥—æ££æ¤æ¥±æ¤¹æ¥ æ¥‚æ¥æ¦„æ¥«æ¦€æ¦˜æ¥¸æ¤´æ§Œæ¦‡æ¦ˆæ§Žæ¦‰æ¥¦æ¥£æ¥¹æ¦›æ¦§æ¦»æ¦«æ¦­æ§”æ¦±æ§æ§Šæ§Ÿæ¦•æ§ æ¦æ§¿æ¨¯æ§­æ¨—æ¨˜æ©¥æ§²æ©„æ¨¾æª æ©æ©›æ¨µæªŽæ©¹æ¨½æ¨¨æ©˜æ©¼æª‘æªæª©æª—æª«çŒ·ç’æ®æ®‚æ®‡æ®„æ®’æ®“æ®æ®šæ®›æ®¡æ®ªè½«è½­è½±è½²è½³è½µè½¶è½¸è½·è½¹è½ºè½¼è½¾è¾è¾‚è¾„è¾‡è¾‹ï¿½".split("");
    for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
    D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾è¾Žè¾è¾˜è¾šè»Žæˆ‹æˆ—æˆ›æˆŸæˆ¢æˆ¡æˆ¥æˆ¤æˆ¬è‡§ç“¯ç“´ç“¿ç”ç”‘ç”“æ”´æ—®æ—¯æ—°æ˜Šæ˜™æ²æ˜ƒæ˜•æ˜€ç‚…æ›·æ˜æ˜´æ˜±æ˜¶æ˜µè€†æ™Ÿæ™”æ™æ™æ™–æ™¡æ™—æ™·æš„æšŒæš§æšæš¾æ››æ›œæ›¦æ›©è´²è´³è´¶è´»è´½èµ€èµ…èµ†èµˆèµ‰èµ‡èµèµ•èµ™è§‡è§Šè§‹è§Œè§Žè§è§è§‘ç‰®çŠŸç‰ç‰¦ç‰¯ç‰¾ç‰¿çŠ„çŠ‹çŠçŠçŠ’æŒˆæŒ²æŽ°ï¿½".split("");
    for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
    D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿æ“˜è€„æ¯ªæ¯³æ¯½æ¯µæ¯¹æ°…æ°‡æ°†æ°æ°•æ°˜æ°™æ°šæ°¡æ°©æ°¤æ°ªæ°²æ”µæ••æ•«ç‰ç‰’ç‰–çˆ°è™¢åˆ–è‚Ÿè‚œè‚“è‚¼æœŠè‚½è‚±è‚«è‚­è‚´è‚·èƒ§èƒ¨èƒ©èƒªèƒ›èƒ‚èƒ„èƒ™èƒèƒ—æœèƒèƒ«èƒ±èƒ´èƒ­è„è„Žèƒ²èƒ¼æœ•è„’è±šè„¶è„žè„¬è„˜è„²è…ˆè…Œè…“è…´è…™è…šè…±è… è…©è…¼è…½è…­è…§å¡åªµè†ˆè†‚è†‘æ»•è†£è†ªè‡Œæœ¦è‡Šè†»ï¿½".split("");
    for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
    D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è‡è†¦æ¬¤æ¬·æ¬¹æ­ƒæ­†æ­™é£‘é£’é£“é£•é£™é£šæ®³å½€æ¯‚è§³æ–é½‘æ–“æ–¼æ—†æ—„æ—ƒæ—Œæ—Žæ—’æ—–ç‚€ç‚œç‚–ç‚ç‚»çƒ€ç‚·ç‚«ç‚±çƒ¨çƒŠç„ç„“ç„–ç„¯ç„±ç…³ç…œç…¨ç……ç…²ç…Šç…¸ç…ºç†˜ç†³ç†µç†¨ç† ç‡ ç‡”ç‡§ç‡¹çˆçˆ¨ç¬ç„˜ç…¦ç†¹æˆ¾æˆ½æ‰ƒæ‰ˆæ‰‰ç¤»ç¥€ç¥†ç¥‰ç¥›ç¥œç¥“ç¥šç¥¢ç¥—ç¥ ç¥¯ç¥§ç¥ºç¦…ç¦Šç¦šç¦§ç¦³å¿‘å¿ï¿½".split("");
    for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
    D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ€¼ææšæ§ææ™æ£æ‚«æ„†æ„æ…æ†©æ†æ‡‹æ‡‘æˆ†è‚€è¿æ²“æ³¶æ·¼çŸ¶çŸ¸ç €ç ‰ç —ç ˜ç ‘æ–«ç ­ç œç ç ¹ç ºç »ç Ÿç ¼ç ¥ç ¬ç £ç ©ç¡Žç¡­ç¡–ç¡—ç ¦ç¡ç¡‡ç¡Œç¡ªç¢›ç¢“ç¢šç¢‡ç¢œç¢¡ç¢£ç¢²ç¢¹ç¢¥ç£”ç£™ç£‰ç£¬ç£²ç¤…ç£´ç¤“ç¤¤ç¤žç¤´é¾›é»¹é»»é»¼ç›±çœ„çœç›¹çœ‡çœˆçœšçœ¢çœ™çœ­çœ¦çœµçœ¸çç‘ç‡çƒçšç¨ï¿½".split("");
    for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
    D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢ç¥ç¿çžç½çž€çžŒçž‘çžŸçž çž°çžµçž½ç”ºç•€ç•Žç•‹ç•ˆç•›ç•²ç•¹ç–ƒç½˜ç½¡ç½Ÿè©ˆç½¨ç½´ç½±ç½¹ç¾ç½¾ç›ç›¥è ²é’…é’†é’‡é’‹é’Šé’Œé’é’é’é’”é’—é’•é’šé’›é’œé’£é’¤é’«é’ªé’­é’¬é’¯é’°é’²é’´é’¶é’·é’¸é’¹é’ºé’¼é’½é’¿é“„é“ˆé“‰é“Šé“‹é“Œé“é“Žé“é“‘é“’é“•é“–é“—é“™é“˜é“›é“žé“Ÿé“ é“¢é“¤é“¥é“§é“¨é“ªï¿½".split("");
    for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
    D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é“©é“«é“®é“¯é“³é“´é“µé“·é“¹é“¼é“½é“¿é”ƒé”‚é”†é”‡é”‰é”Šé”é”Žé”é”’é”“é””é”•é”–é”˜é”›é”é”žé”Ÿé”¢é”ªé”«é”©é”¬é”±é”²é”´é”¶é”·é”¸é”¼é”¾é”¿é•‚é”µé•„é•…é•†é•‰é•Œé•Žé•é•’é•“é•”é•–é•—é•˜é•™é•›é•žé•Ÿé•é•¡é•¢é•¤é•¥é•¦é•§é•¨é•©é•ªé•«é•¬é•¯é•±é•²é•³é”ºçŸ§çŸ¬é›‰ç§•ç§­ç§£ç§«ç¨†åµ‡ç¨ƒç¨‚ç¨žç¨”ï¿½".split("");
    for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
    D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨¹ç¨·ç©‘é»é¦¥ç©°çšˆçšŽçš“çš™çš¤ç“žç“ ç”¬é¸ é¸¢é¸¨é¸©é¸ªé¸«é¸¬é¸²é¸±é¸¶é¸¸é¸·é¸¹é¸ºé¸¾é¹é¹‚é¹„é¹†é¹‡é¹ˆé¹‰é¹‹é¹Œé¹Žé¹‘é¹•é¹—é¹šé¹›é¹œé¹žé¹£é¹¦é¹§é¹¨é¹©é¹ªé¹«é¹¬é¹±é¹­é¹³ç–’ç–”ç––ç– ç–ç–¬ç–£ç–³ç–´ç–¸ç—„ç–±ç–°ç—ƒç—‚ç—–ç—ç—£ç—¨ç—¦ç—¤ç—«ç—§ç˜ƒç—±ç—¼ç—¿ç˜ç˜€ç˜…ç˜Œç˜—ç˜Šç˜¥ç˜˜ç˜•ç˜™ï¿½".split("");
    for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
    D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç˜›ç˜¼ç˜¢ç˜ ç™€ç˜­ç˜°ç˜¿ç˜µç™ƒç˜¾ç˜³ç™ç™žç™”ç™œç™–ç™«ç™¯ç¿Šç«¦ç©¸ç©¹çª€çª†çªˆçª•çª¦çª çª¬çª¨çª­çª³è¡¤è¡©è¡²è¡½è¡¿è¢‚è¢¢è£†è¢·è¢¼è£‰è£¢è£Žè££è£¥è£±è¤šè£¼è£¨è£¾è£°è¤¡è¤™è¤“è¤›è¤Šè¤´è¤«è¤¶è¥è¥¦è¥»ç–‹èƒ¥çš²çš´çŸœè€’è€”è€–è€œè€ è€¢è€¥è€¦è€§è€©è€¨è€±è€‹è€µèƒè†èè’è©è±è¦ƒé¡¸é¢€é¢ƒï¿½".split("");
    for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
    D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¢‰é¢Œé¢é¢é¢”é¢šé¢›é¢žé¢Ÿé¢¡é¢¢é¢¥é¢¦è™è™”è™¬è™®è™¿è™ºè™¼è™»èš¨èšèš‹èš¬èšèš§èš£èšªèš“èš©èš¶è›„èšµè›Žèš°èšºèš±èš¯è›‰è›èš´è›©è›±è›²è›­è›³è›èœ“è›žè›´è›Ÿè›˜è›‘èœƒèœ‡è›¸èœˆèœŠèœèœ‰èœ£èœ»èœžèœ¥èœ®èœšèœ¾èˆèœ´èœ±èœ©èœ·èœ¿èž‚èœ¢è½è¾è»è è°èŒè®èž‹è“è£è¼è¤è™è¥èž“èž¯èž¨èŸ’ï¿½".split("");
    for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
    D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èŸ†èžˆèž…èž­èž—èžƒèž«èŸ¥èž¬èžµèž³èŸ‹èŸ“èž½èŸ‘èŸ€èŸŠèŸ›èŸªèŸ èŸ®è –è “èŸ¾è Šè ›è ¡è ¹è ¼ç¼¶ç½‚ç½„ç½…èˆç«ºç«½ç¬ˆç¬ƒç¬„ç¬•ç¬Šç¬«ç¬ç­‡ç¬¸ç¬ªç¬™ç¬®ç¬±ç¬ ç¬¥ç¬¤ç¬³ç¬¾ç¬žç­˜ç­šç­…ç­µç­Œç­ç­ ç­®ç­»ç­¢ç­²ç­±ç®ç®¦ç®§ç®¸ç®¬ç®ç®¨ç®…ç®ªç®œç®¢ç®«ç®´ç¯‘ç¯ç¯Œç¯ç¯šç¯¥ç¯¦ç¯ªç°Œç¯¾ç¯¼ç°ç°–ç°‹ï¿½".split("");
    for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
    D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç°Ÿç°ªç°¦ç°¸ç±ç±€è‡¾èˆèˆ‚èˆ„è‡¬è¡„èˆ¡èˆ¢èˆ£èˆ­èˆ¯èˆ¨èˆ«èˆ¸èˆ»èˆ³èˆ´èˆ¾è‰„è‰‰è‰‹è‰è‰šè‰Ÿè‰¨è¡¾è¢…è¢ˆè£˜è£Ÿè¥žç¾ç¾Ÿç¾§ç¾¯ç¾°ç¾²ç±¼æ•‰ç²‘ç²ç²œç²žç²¢ç²²ç²¼ç²½ç³ç³‡ç³Œç³ç³ˆç³…ç³—ç³¨è‰®æš¨ç¾¿ç¿Žç¿•ç¿¥ç¿¡ç¿¦ç¿©ç¿®ç¿³ç³¸çµ·ç¶¦ç¶®ç¹‡çº›éº¸éº´èµ³è¶„è¶”è¶‘è¶±èµ§èµ­è±‡è±‰é…Šé…é…Žé…é…¤ï¿½".split("");
    for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
    D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é…¢é…¡é…°é…©é…¯é…½é…¾é…²é…´é…¹é†Œé†…é†é†é†‘é†¢é†£é†ªé†­é†®é†¯é†µé†´é†ºè±•é¹¾è¶¸è·«è¸…è¹™è¹©è¶µè¶¿è¶¼è¶ºè·„è·–è·—è·šè·žè·Žè·è·›è·†è·¬è··è·¸è·£è·¹è·»è·¤è¸‰è·½è¸”è¸è¸Ÿè¸¬è¸®è¸£è¸¯è¸ºè¹€è¸¹è¸µè¸½è¸±è¹‰è¹è¹‚è¹‘è¹’è¹Šè¹°è¹¶è¹¼è¹¯è¹´èº…èºèº”èºèºœèºžè±¸è²‚è²Šè²…è²˜è²”æ–›è§–è§žè§šè§œï¿½".split("");
    for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
    D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è§¥è§«è§¯è¨¾è¬¦é“é›©é›³é›¯éœ†éœéœˆéœéœŽéœªéœ­éœ°éœ¾é¾€é¾ƒé¾…é¾†é¾‡é¾ˆé¾‰é¾Šé¾Œé»¾é¼‹é¼éš¹éš¼éš½é›Žé›’çž¿é› éŠŽéŠ®é‹ˆéŒ¾éªéŠéŽé¾é‘«é±¿é²‚é²…é²†é²‡é²ˆç¨£é²‹é²Žé²é²‘é²’é²”é²•é²šé²›é²žé²Ÿé² é²¡é²¢é²£é²¥é²¦é²§é²¨é²©é²«é²­é²®é²°é²±é²²é²³é²´é²µé²¶é²·é²ºé²»é²¼é²½é³„é³…é³†é³‡é³Šé³‹ï¿½".split("");
    for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
    D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é³Œé³é³Žé³é³é³“é³”é³•é³—é³˜é³™é³œé³é³Ÿé³¢é¼éž…éž‘éž’éž”éž¯éž«éž£éž²éž´éª±éª°éª·é¹˜éª¶éªºéª¼é«é«€é«…é«‚é«‹é«Œé«‘é­…é­ƒé­‡é­‰é­ˆé­é­‘é£¨é¤é¤®é¥•é¥”é«Ÿé«¡é«¦é«¯é««é«»é«­é«¹é¬ˆé¬é¬“é¬Ÿé¬£éº½éº¾ç¸»éº‚éº‡éºˆéº‹éº’é–éºéºŸé»›é»œé»é» é»Ÿé»¢é»©é»§é»¥é»ªé»¯é¼¢é¼¬é¼¯é¼¹é¼·é¼½é¼¾é½„ï¿½".split("");
    for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
    return {"enc": e, "dec": d }; })();
    cptable[10029] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã„Ä€ÄÃ‰Ä„Ã–ÃœÃ¡Ä…ÄŒÃ¤ÄÄ†Ä‡Ã©Å¹ÅºÄŽÃ­ÄÄ’Ä“Ä–Ã³Ä—Ã´Ã¶ÃµÃºÄšÄ›Ã¼â€ Â°Ä˜Â£Â§â€¢Â¶ÃŸÂ®Â©â„¢Ä™Â¨â‰ Ä£Ä®Ä¯Äªâ‰¤â‰¥Ä«Ä¶âˆ‚âˆ‘Å‚Ä»Ä¼Ä½Ä¾Ä¹ÄºÅ…Å†ÅƒÂ¬âˆšÅ„Å‡âˆ†Â«Â»â€¦Â ÅˆÅÃ•Å‘ÅŒâ€“â€”â€œâ€â€˜â€™Ã·â—ŠÅÅ”Å•Å˜â€¹â€ºÅ™Å–Å—Å â€šâ€žÅ¡ÅšÅ›ÃÅ¤Å¥ÃÅ½Å¾ÅªÃ“Ã”Å«Å®ÃšÅ¯Å°Å±Å²Å³ÃÃ½Ä·Å»ÅÅ¼Ä¢Ë‡", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[10079] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã„Ã…Ã‡Ã‰Ã‘Ã–ÃœÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼ÃÂ°Â¢Â£Â§â€¢Â¶ÃŸÂ®Â©â„¢Â´Â¨â‰ Ã†Ã˜âˆžÂ±â‰¤â‰¥Â¥Âµâˆ‚âˆ‘âˆÏ€âˆ«ÂªÂºâ„¦Ã¦Ã¸Â¿Â¡Â¬âˆšÆ’â‰ˆâˆ†Â«Â»â€¦Â Ã€ÃƒÃ•Å’Å“â€“â€”â€œâ€â€˜â€™Ã·â—ŠÃ¿Å¸â„Â¤ÃÃ°ÃžÃ¾Ã½Â·â€šâ€žâ€°Ã‚ÃŠÃÃ‹ÃˆÃÃŽÃÃŒÃ“Ã”ï¿½Ã’ÃšÃ›Ã™Ä±Ë†ËœÂ¯Ë˜Ë™ËšÂ¸ËË›Ë‡", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    cptable[10081] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ã„Ã…Ã‡Ã‰Ã‘Ã–ÃœÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â€ Â°Â¢Â£Â§â€¢Â¶ÃŸÂ®Â©â„¢Â´Â¨â‰ Ã†Ã˜âˆžÂ±â‰¤â‰¥Â¥Âµâˆ‚âˆ‘âˆÏ€âˆ«ÂªÂºâ„¦Ã¦Ã¸Â¿Â¡Â¬âˆšÆ’â‰ˆâˆ†Â«Â»â€¦Â Ã€ÃƒÃ•Å’Å“â€“â€”â€œâ€â€˜â€™Ã·â—ŠÃ¿Å¸ÄžÄŸÄ°Ä±ÅžÅŸâ€¡Â·â€šâ€žâ€°Ã‚ÃŠÃÃ‹ÃˆÃÃŽÃÃŒÃ“Ã”ï¿½Ã’ÃšÃ›Ã™ï¿½Ë†ËœÂ¯Ë˜Ë™ËšÂ¸ËË›Ë‡", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
    if (typeof module !== 'undefined' && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = cptable;
    /* cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /* vim: set ft=javascript: */
    /*jshint newcap: false */
    (function(root, factory) {
      "use strict";
      if(typeof cptable === "undefined") {
        if(typeof require !== "undefined"){
          var cpt = cptable;
          if (typeof module !== 'undefined' && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = factory(cpt);
          else root.cptable = factory(cpt);
        } else throw new Error("cptable not found");
      } else cptable = factory(cptable);
    }(this, function(cpt){
      "use strict";
      var magic = {
        "1200":"utf16le",
        "1201":"utf16be",
        "12000":"utf32le",
        "12001":"utf32be",
        "16969":"utf64le",
        "20127":"ascii",
        "65000":"utf7",
        "65001":"utf8"
      };
    
      var sbcs_cache = [874,1250,1251,1252,1253,1254,1255,1256,10000];
      var dbcs_cache = [932,936,949,950];
      var magic_cache = [65001];
      var magic_decode = {};
      var magic_encode = {};
      var cpdcache = {};
      var cpecache = {};
    
      var sfcc = function sfcc(x) { return String.fromCharCode(x); };
      var cca = function cca(x) { return x.charCodeAt(0); };
    
      var has_buf = (typeof Buffer !== 'undefined');
      if(has_buf) {
        var mdl = 1024, mdb = new Buffer(mdl);
        var make_EE = function make_EE(E){
          var EE = new Buffer(65536);
          for(var i = 0; i < 65536;++i) EE[i] = 0;
          var keys = Object.keys(E), len = keys.length;
          for(var ee = 0, e = keys[ee]; ee < len; ++ee) {
            if(!(e = keys[ee])) continue;
            EE[e.charCodeAt(0)] = E[e];
          }
          return EE;
        };
        var sbcs_encode = function make_sbcs_encode(cp) {
          var EE = make_EE(cpt[cp].enc);
          return function sbcs_e(data, ofmt) {
            var len = data.length;
            var out, i=0, j=0, D=0, w=0;
            if(typeof data === 'string') {
              out = new Buffer(len);
              for(i = 0; i < len; ++i) out[i] = EE[data.charCodeAt(i)];
            } else if(Buffer.isBuffer(data)) {
              out = new Buffer(2*len);
              j = 0;
              for(i = 0; i < len; ++i) {
                D = data[i];
                if(D < 128) out[j++] = EE[D];
                else if(D < 224) { out[j++] = EE[((D&31)<<6)+(data[i+1]&63)]; ++i; }
                else if(D < 240) { out[j++] = EE[((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63)]; i+=2; }
                else {
                  w = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3;
                  if(w < 65536) out[j++] = EE[w];
                  else { w -= 65536; out[j++] = EE[0xD800 + ((w>>10)&1023)]; out[j++] = EE[0xDC00 + (w&1023)]; }
                }
              }
              out = out.slice(0,j);
            } else {
              out = new Buffer(len);
              for(i = 0; i < len; ++i) out[i] = EE[data[i].charCodeAt(0)];
            }
            if(!ofmt || ofmt === 'buf') return out;
            if(ofmt !== 'arr') return out.toString('binary');
            return [].slice.call(out);
          };
        };
        var sbcs_decode = function make_sbcs_decode(cp) {
          var D = cpt[cp].dec;
          var DD = new Buffer(131072), d=0, c="";
          for(d=0;d<D.length;++d) {
            if(!(c=D[d])) continue;
            var w = c.charCodeAt(0);
            DD[2*d] = w&255; DD[2*d+1] = w>>8;
          }
          return function sbcs_d(data) {
            var len = data.length, i=0, j=0;
            if(2 * len > mdl) { mdl = 2 * len; mdb = new Buffer(mdl); }
            if(Buffer.isBuffer(data)) {
              for(i = 0; i < len; i++) {
                j = 2*data[i];
                mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
              }
            } else if(typeof data === "string") {
              for(i = 0; i < len; i++) {
                j = 2*data.charCodeAt(i);
                mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
              }
            } else {
              for(i = 0; i < len; i++) {
                j = 2*data[i];
                mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
              }
            }
            return mdb.slice(0, 2 * len).toString('ucs2');
          };
        };
        var dbcs_encode = function make_dbcs_encode(cp) {
          var E = cpt[cp].enc;
          var EE = new Buffer(131072);
          for(var i = 0; i < 131072; ++i) EE[i] = 0;
          var keys = Object.keys(E);
          for(var ee = 0, e = keys[ee]; ee < keys.length; ++ee) {
            if(!(e = keys[ee])) continue;
            var f = e.charCodeAt(0);
            EE[2*f] = E[e] & 255; EE[2*f+1] = E[e]>>8;
          }
          return function dbcs_e(data, ofmt) {
            var len = data.length, out = new Buffer(2*len), i=0, j=0, jj=0, k=0, D=0;
            if(typeof data === 'string') {
              for(i = k = 0; i < len; ++i) {
                j = data.charCodeAt(i)*2;
                out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
              }
              out = out.slice(0,k);
            } else if(Buffer.isBuffer(data)) {
              for(i = k = 0; i < len; ++i) {
                D = data[i];
                if(D < 128) j = D;
                else if(D < 224) { j = ((D&31)<<6)+(data[i+1]&63); ++i; }
                else if(D < 240) { j = ((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63); i+=2; }
                else { j = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3; }
                if(j<65536) { j*=2; out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j]; }
                else { jj = j-65536;
                  j=2*(0xD800 + ((jj>>10)&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
                  j=2*(0xDC00 + (jj&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
                }
              }
              out = out.slice(0,k);
            } else {
              for(i = k = 0; i < len; i++) {
                j = data[i].charCodeAt(0)*2;
                out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
              }
            }
            if(!ofmt || ofmt === 'buf') return out;
            if(ofmt !== 'arr') return out.toString('binary');
            return [].slice.call(out);
          };
        };
        var dbcs_decode = function make_dbcs_decode(cp) {
          var D = cpt[cp].dec;
          var DD = new Buffer(131072), d=0, c, w=0, j=0, i=0;
          for(i = 0; i < 65536; ++i) { DD[2*i] = 0xFF; DD[2*i+1] = 0xFD;}
          for(d = 0; d < D.length; ++d) {
            if(!(c=D[d])) continue;
            w = c.charCodeAt(0);
            j = 2*d;
            DD[j] = w&255; DD[j+1] = w>>8;
          }
          return function dbcs_d(data) {
            var len = data.length, out = new Buffer(2*len), i=0, j=0, k=0;
            if(Buffer.isBuffer(data)) {
              for(i = 0; i < len; i++) {
                j = 2*data[i];
                if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }
                out[k++] = DD[j]; out[k++] = DD[j+1];
              }
            } else if(typeof data === "string") {
              for(i = 0; i < len; i++) {
                j = 2*data.charCodeAt(i);
                if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data.charCodeAt(i)<<8)+data.charCodeAt(i+1)); ++i; }
                out[k++] = DD[j]; out[k++] = DD[j+1];
              }
            } else {
              for(i = 0; i < len; i++) {
                j = 2*data[i];
                if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }
                out[k++] = DD[j]; out[k++] = DD[j+1];
              }
            }
            return out.slice(0,k).toString('ucs2');
          };
        };
        magic_decode[65001] = function utf8_d(data) {
          if(typeof data === "string") return utf8_d(data.split("").map(cca));
          var len = data.length, w = 0, ww = 0;
          if(4 * len > mdl) { mdl = 4 * len; mdb = new Buffer(mdl); }
          var i = 0;
          if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;
          for(var j = 1, k = 0, D = 0; i < len; i+=j) {
            j = 1; D = data[i];
            if(D < 128) w = D;
            else if(D < 224) { w=(D&31)*64+(data[i+1]&63); j=2; }
            else if(D < 240) { w=((D&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }
            else { w=(D&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }
            if(w < 65536) { mdb[k++] = w&255; mdb[k++] = w>>8; }
            else {
              w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);
              mdb[k++] = ww&255; mdb[k++] = ww>>>8; mdb[k++] = w&255; mdb[k++] = (w>>>8)&255;
            }
          }
          return mdb.slice(0,k).toString('ucs2');
        };
        magic_encode[65001] = function utf8_e(data, ofmt) {
          if(has_buf && Buffer.isBuffer(data)) {
            if(!ofmt || ofmt === 'buf') return data;
            if(ofmt !== 'arr') return data.toString('binary');
            return [].slice.call(data);
          }
          var len = data.length, w = 0, ww = 0, j = 0;
          var direct = typeof data === "string";
          if(4 * len > mdl) { mdl = 4 * len; mdb = new Buffer(mdl); }
          for(var i = 0; i < len; ++i) {
            w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);
            if(w <= 0x007F) mdb[j++] = w;
            else if(w <= 0x07FF) {
              mdb[j++] = 192 + (w >> 6);
              mdb[j++] = 128 + (w&63);
            } else if(w >= 0xD800 && w <= 0xDFFF) {
              w -= 0xD800; ++i;
              ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 0xDC00 + (w << 10);
              mdb[j++] = 240 + ((ww>>>18) & 0x07);
              mdb[j++] = 144 + ((ww>>>12) & 0x3F);
              mdb[j++] = 128 + ((ww>>>6) & 0x3F);
              mdb[j++] = 128 + (ww & 0x3F);
            } else {
              mdb[j++] = 224 + (w >> 12);
              mdb[j++] = 128 + ((w >> 6)&63);
              mdb[j++] = 128 + (w&63);
            }
          }
          if(!ofmt || ofmt === 'buf') return mdb.slice(0,j);
          if(ofmt !== 'arr') return mdb.slice(0,j).toString('binary');
          return [].slice.call(mdb, 0, j);
        };
      }
    
      var encache = function encache() {
        if(has_buf) {
          if(cpdcache[sbcs_cache[0]]) return;
          var i=0, s=0;
          for(i = 0; i < sbcs_cache.length; ++i) {
            s = sbcs_cache[i];
            if(cpt[s]) {
              cpdcache[s] = sbcs_decode(s);
              cpecache[s] = sbcs_encode(s);
            }
          }
          for(i = 0; i < dbcs_cache.length; ++i) {
            s = dbcs_cache[i];
            if(cpt[s]) {
              cpdcache[s] = dbcs_decode(s);
              cpecache[s] = dbcs_encode(s);
            }
          }
          for(i = 0; i < magic_cache.length; ++i) {
            s = magic_cache[i];
            if(magic_decode[s]) cpdcache[s] = magic_decode[s];
            if(magic_encode[s]) cpecache[s] = magic_encode[s];
          }
        }
      };
      var null_enc = function(data, ofmt) { return ""; };
      var cp_decache = function cp_decache(cp) { delete cpdcache[cp]; delete cpecache[cp]; };
      var decache = function decache() {
        if(has_buf) {
          if(!cpdcache[sbcs_cache[0]]) return;
          sbcs_cache.forEach(cp_decache);
          dbcs_cache.forEach(cp_decache);
          magic_cache.forEach(cp_decache);
        }
        last_enc = null_enc; last_cp = 0;
      };
      var cache = {
        encache: encache,
        decache: decache,
        sbcs: sbcs_cache,
        dbcs: dbcs_cache
      };
    
      encache();
    
      var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
      var last_enc = null_enc, last_cp = 0;
      var encode = function encode(cp, data, ofmt) {
        if(cp === last_cp && last_enc) { return last_enc(data, ofmt); }
        if(cpecache[cp]) { last_enc = cpecache[last_cp=cp]; return last_enc(data, ofmt); }
        if(has_buf && Buffer.isBuffer(data)) data = data.toString('utf8');
        var len = data.length;
        var out = has_buf ? new Buffer(4*len) : [], w=0, i=0, j = 0, ww=0;
        var C = cpt[cp], E, M = "";
        var isstr = typeof data === 'string';
        if(C && (E=C.enc)) for(i = 0; i < len; ++i, ++j) {
          w = E[isstr? data.charAt(i) : data[i]];
          if(w > 255) {
            out[j] = w>>8;
            out[++j] = w&255;
          } else out[j] = w&255;
        }
        else if((M=magic[cp])) switch(M) {
          case "utf8":
            if(has_buf && isstr) { out = new Buffer(data, M); j = out.length; break; }
            for(i = 0; i < len; ++i, ++j) {
              w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
              if(w <= 0x007F) out[j] = w;
              else if(w <= 0x07FF) {
                out[j]   = 192 + (w >> 6);
                out[++j] = 128 + (w&63);
              } else if(w >= 0xD800 && w <= 0xDFFF) {
                w -= 0xD800;
                ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 0xDC00 + (w << 10);
                out[j]   = 240 + ((ww>>>18) & 0x07);
                out[++j] = 144 + ((ww>>>12) & 0x3F);
                out[++j] = 128 + ((ww>>>6) & 0x3F);
                out[++j] = 128 + (ww & 0x3F);
              } else {
                out[j]   = 224 + (w >> 12);
                out[++j] = 128 + ((w >> 6)&63);
                out[++j] = 128 + (w&63);
              }
            }
            break;
          case "ascii":
            if(has_buf && typeof data === "string") { out = new Buffer(data, M); j = out.length; break; }
            for(i = 0; i < len; ++i, ++j) {
              w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
              if(w <= 0x007F) out[j] = w;
              else throw new Error("bad ascii " + w);
            }
            break;
          case "utf16le":
            if(has_buf && typeof data === "string") { out = new Buffer(data, M); j = out.length; break; }
            for(i = 0; i < len; ++i) {
              w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
              out[j++] = w&255;
              out[j++] = w>>8;
            }
            break;
          case "utf16be":
            for(i = 0; i < len; ++i) {
              w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
              out[j++] = w>>8;
              out[j++] = w&255;
            }
            break;
          case "utf32le":
            for(i = 0; i < len; ++i) {
              w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
              if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);
              out[j++] = w&255; w >>= 8;
              out[j++] = w&255; w >>= 8;
              out[j++] = w&255; w >>= 8;
              out[j++] = w&255;
            }
            break;
          case "utf32be":
            for(i = 0; i < len; ++i) {
              w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
              if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);
              out[j+3] = w&255; w >>= 8;
              out[j+2] = w&255; w >>= 8;
              out[j+1] = w&255; w >>= 8;
              out[j] = w&255;
              j+=4;
            }
            break;
          case "utf7":
            for(i = 0; i < len; i++) {
              var c = isstr ? data.charAt(i) : data[i].charAt(0);
              if(c === "+") { out[j++] = 0x2b; out[j++] = 0x2d; continue; }
              if(SetD.indexOf(c) > -1) { out[j++] = c.charCodeAt(0); continue; }
              var tt = encode(1201, c);
              out[j++] = 0x2b;
              out[j++] = BM.charCodeAt(tt[0]>>2);
              out[j++] = BM.charCodeAt(((tt[0]&0x03)<<4) + ((tt[1]||0)>>4));
              out[j++] = BM.charCodeAt(((tt[1]&0x0F)<<2) + ((tt[2]||0)>>6));
              out[j++] = 0x2d;
            }
            break;
          default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
        }
        else throw new Error("Unrecognized CP: " + cp);
        out = out.slice(0,j);
        if(!has_buf) return (ofmt == 'str') ? (out).map(sfcc).join("") : out;
        if(!ofmt || ofmt === 'buf') return out;
        if(ofmt !== 'arr') return out.toString('binary');
        return [].slice.call(out);
      };
      var decode = function decode(cp, data) {
        var F; if((F=cpdcache[cp])) return F(data);
        if(typeof data === "string") return decode(cp, data.split("").map(cca));
        var len = data.length, out = new Array(len), s="", w=0, i=0, j=1, k=0, ww=0;
        var C = cpt[cp], D, M="";
        if(C && (D=C.dec)) {
          for(i = 0; i < len; i+=j) {
            j = 2;
            s = D[(data[i]<<8)+ data[i+1]];
            if(!s) {
              j = 1;
              s = D[data[i]];
            }
            if(!s) throw new Error('Unrecognized code: ' + data[i] + ' ' + data[i+j-1] + ' ' + i + ' ' + j + ' ' + D[data[i]]);
            out[k++] = s;
          }
        }
        else if((M=magic[cp])) switch(M) {
          case "utf8":
            if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;
            for(; i < len; i+=j) {
              j = 1;
              if(data[i] < 128) w = data[i];
              else if(data[i] < 224) { w=(data[i]&31)*64+(data[i+1]&63); j=2; }
              else if(data[i] < 240) { w=((data[i]&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }
              else { w=(data[i]&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }
              if(w < 65536) { out[k++] = String.fromCharCode(w); }
              else {
                w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);
                out[k++] = String.fromCharCode(ww); out[k++] = String.fromCharCode(w);
              }
            }
            break;
          case "ascii":
            if(has_buf && Buffer.isBuffer(data)) return data.toString(M);
            for(i = 0; i < len; i++) out[i] = String.fromCharCode(data[i]);
            k = len; break;
          case "utf16le":
            if(len >= 2 && data[0] == 0xFF) if(data[1] == 0xFE) i = 2;
            if(has_buf && Buffer.isBuffer(data)) return data.toString(M);
            j = 2;
            for(; i+1 < len; i+=j) {
              out[k++] = String.fromCharCode((data[i+1]<<8) + data[i]);
            }
            break;
          case "utf16be":
            if(len >= 2 && data[0] == 0xFE) if(data[1] == 0xFF) i = 2;
            j = 2;
            for(; i+1 < len; i+=j) {
              out[k++] = String.fromCharCode((data[i]<<8) + data[i+1]);
            }
            break;
          case "utf32le":
            if(len >= 4 && data[0] == 0xFF) if(data[1] == 0xFE && data[2] === 0 && data[3] === 0) i = 4;
            j = 4;
            for(; i < len; i+=j) {
              w = (data[i+3]<<24) + (data[i+2]<<16) + (data[i+1]<<8) + (data[i]);
              if(w > 0xFFFF) {
                w -= 0x10000;
                out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));
                out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
              }
              else out[k++] = String.fromCharCode(w);
            }
            break;
          case "utf32be":
            if(len >= 4 && data[3] == 0xFF) if(data[2] == 0xFE && data[1] === 0 && data[0] === 0) i = 4;
            j = 4;
            for(; i < len; i+=j) {
              w = (data[i]<<24) + (data[i+1]<<16) + (data[i+2]<<8) + (data[i+3]);
              if(w > 0xFFFF) {
                w -= 0x10000;
                out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));
                out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
              }
              else out[k++] = String.fromCharCode(w);
            }
            break;
          case "utf7":
            if(len >= 4 && data[0] == 0x2B && data[1] == 0x2F && data[2] == 0x76) {
              if(len >= 5 && data[3] == 0x38 && data[4] == 0x2D) i = 5;
              else if(data[3] == 0x38 || data[3] == 0x39 || data[3] == 0x2B || data[3] == 0x2F) i = 4;
            }
            for(; i < len; i+=j) {
              if(data[i] !== 0x2b) { j=1; out[k++] = String.fromCharCode(data[i]); continue; }
              j=1;
              if(data[i+1] === 0x2d) { j = 2; out[k++] = "+"; continue; }
              while(String.fromCharCode(data[i+j]).match(/[A-Za-z0-9+\/]/)) j++;
              var dash = 0;
              if(data[i+j] === 0x2d) { ++j; dash=1; }
              var tt = [];
              var o64 = "";
              var c1=0, c2=0, c3=0;
              var e1=0, e2=0, e3=0, e4=0;
              for(var l = 1; l < j - dash;) {
                e1 = BM.indexOf(String.fromCharCode(data[i+l++]));
                e2 = BM.indexOf(String.fromCharCode(data[i+l++]));
                c1 = e1 << 2 | e2 >> 4;
                tt.push(c1);
                e3 = BM.indexOf(String.fromCharCode(data[i+l++]));
                if(e3 === -1) break;
                c2 = (e2 & 15) << 4 | e3 >> 2;
                tt.push(c2);
                e4 = BM.indexOf(String.fromCharCode(data[i+l++]));
                if(e4 === -1) break;
                c3 = (e3 & 3) << 6 | e4;
                if(e4 < 64) tt.push(c3);
              }
              o64 = decode(1201, tt);
              for(l = 0; l < o64.length; ++l) out[k++] = o64.charAt(l);
            }
            break;
          default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
        }
        else throw new Error("Unrecognized CP: " + cp);
        return out.slice(0,k).join("");
      };
      var hascp = function hascp(cp) { return !!(cpt[cp] || magic[cp]); };
      cpt.utils = { decode: decode, encode: encode, hascp: hascp, magic: magic, cache:cache };
      return cpt;
    }));
    
    }).call(this,require("buffer").Buffer)
    },{"buffer":72}],62:[function(require,module,exports){
    (function (global,Buffer){
    /*!
    
    JSZip - A Javascript class for generating and reading zip files
    <http://stuartk.com/jszip>
    
    (c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
    Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.
    
    JSZip uses the library pako released under the MIT license :
    https://github.com/nodeca/pako/blob/master/LICENSE
    */
    (function(e){
        if("object"==typeof exports&&"undefined"!=typeof module&&"undefined"==typeof DO_NOT_EXPORT_JSZIP)module.exports=e();
        else if("function"==typeof define&&define.amd){JSZip=e();define([],e);}
        else{
            var f;
            "undefined"!=typeof window?f=window:
            "undefined"!=typeof global?f=global:
            "undefined"!=typeof $ && $.global?f=$.global:
            "undefined"!=typeof self&&(f=self),f.JSZip=e()
        }
    }(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
    'use strict';
    // private property
    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    
    
    // public method for encoding
    exports.encode = function(input, utf8) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
    
        while (i < input.length) {
    
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
    
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
    
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
    
            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
    
        }
    
        return output;
    };
    
    // public method for decoding
    exports.decode = function(input, utf8) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
    
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    
        while (i < input.length) {
    
            enc1 = _keyStr.indexOf(input.charAt(i++));
            enc2 = _keyStr.indexOf(input.charAt(i++));
            enc3 = _keyStr.indexOf(input.charAt(i++));
            enc4 = _keyStr.indexOf(input.charAt(i++));
    
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
    
            output = output + String.fromCharCode(chr1);
    
            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
    
        }
    
        return output;
    
    };
    
    },{}],2:[function(_dereq_,module,exports){
    'use strict';
    function CompressedObject() {
        this.compressedSize = 0;
        this.uncompressedSize = 0;
        this.crc32 = 0;
        this.compressionMethod = null;
        this.compressedContent = null;
    }
    
    CompressedObject.prototype = {
        /**
         * Return the decompressed content in an unspecified format.
         * The format will depend on the decompressor.
         * @return {Object} the decompressed content.
         */
        getContent: function() {
            return null; // see implementation
        },
        /**
         * Return the compressed content in an unspecified format.
         * The format will depend on the compressed conten source.
         * @return {Object} the compressed content.
         */
        getCompressedContent: function() {
            return null; // see implementation
        }
    };
    module.exports = CompressedObject;
    
    },{}],3:[function(_dereq_,module,exports){
    'use strict';
    exports.STORE = {
        magic: "\x00\x00",
        compress: function(content) {
            return content; // no compression
        },
        uncompress: function(content) {
            return content; // no compression
        },
        compressInputType: null,
        uncompressInputType: null
    };
    exports.DEFLATE = _dereq_('./flate');
    
    },{"./flate":8}],4:[function(_dereq_,module,exports){
    'use strict';
    
    var utils = _dereq_('./utils');
    
    var table = [
        0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
        0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
        0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
        0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
        0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
        0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
        0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
        0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
        0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
        0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
        0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
        0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
        0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
        0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
        0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
        0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
        0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
        0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
        0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
        0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
        0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
        0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
        0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
        0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
        0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
        0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
        0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
        0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
        0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
        0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
        0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
        0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
        0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
        0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
        0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
        0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
        0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
        0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
        0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
        0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
        0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
        0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
        0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
        0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
        0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
        0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
        0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
        0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
        0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
        0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
        0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
        0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
        0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
        0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
        0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
        0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
        0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
        0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
        0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
        0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
        0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
        0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
        0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
        0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
    ];
    
    /**
     *
     *  Javascript crc32
     *  http://www.webtoolkit.info/
     *
     */
    module.exports = function crc32(input, crc) {
        if (typeof input === "undefined" || !input.length) {
            return 0;
        }
    
        var isArray = utils.getTypeOf(input) !== "string";
    
        if (typeof(crc) == "undefined") {
            crc = 0;
        }
        var x = 0;
        var y = 0;
        var b = 0;
    
        crc = crc ^ (-1);
        for (var i = 0, iTop = input.length; i < iTop; i++) {
            b = isArray ? input[i] : input.charCodeAt(i);
            y = (crc ^ b) & 0xFF;
            x = table[y];
            crc = (crc >>> 8) ^ x;
        }
    
        return crc ^ (-1);
    };
    // vim: set shiftwidth=4 softtabstop=4:
    
    },{"./utils":21}],5:[function(_dereq_,module,exports){
    'use strict';
    var utils = _dereq_('./utils');
    
    function DataReader(data) {
        this.data = null; // type : see implementation
        this.length = 0;
        this.index = 0;
    }
    DataReader.prototype = {
        /**
         * Check that the offset will not go too far.
         * @param {string} offset the additional offset to check.
         * @throws {Error} an Error if the offset is out of bounds.
         */
        checkOffset: function(offset) {
            this.checkIndex(this.index + offset);
        },
        /**
         * Check that the specifed index will not be too far.
         * @param {string} newIndex the index to check.
         * @throws {Error} an Error if the index is out of bounds.
         */
        checkIndex: function(newIndex) {
            if (this.length < newIndex || newIndex < 0) {
                throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
            }
        },
        /**
         * Change the index.
         * @param {number} newIndex The new index.
         * @throws {Error} if the new index is out of the data.
         */
        setIndex: function(newIndex) {
            this.checkIndex(newIndex);
            this.index = newIndex;
        },
        /**
         * Skip the next n bytes.
         * @param {number} n the number of bytes to skip.
         * @throws {Error} if the new index is out of the data.
         */
        skip: function(n) {
            this.setIndex(this.index + n);
        },
        /**
         * Get the byte at the specified index.
         * @param {number} i the index to use.
         * @return {number} a byte.
         */
        byteAt: function(i) {
            // see implementations
        },
        /**
         * Get the next number with a given byte size.
         * @param {number} size the number of bytes to read.
         * @return {number} the corresponding number.
         */
        readInt: function(size) {
            var result = 0,
                i;
            this.checkOffset(size);
            for (i = this.index + size - 1; i >= this.index; i--) {
                result = (result << 8) + this.byteAt(i);
            }
            this.index += size;
            return result;
        },
        /**
         * Get the next string with a given byte size.
         * @param {number} size the number of bytes to read.
         * @return {string} the corresponding string.
         */
        readString: function(size) {
            return utils.transformTo("string", this.readData(size));
        },
        /**
         * Get raw data without conversion, <size> bytes.
         * @param {number} size the number of bytes to read.
         * @return {Object} the raw data, implementation specific.
         */
        readData: function(size) {
            // see implementations
        },
        /**
         * Find the last occurence of a zip signature (4 bytes).
         * @param {string} sig the signature to find.
         * @return {number} the index of the last occurence, -1 if not found.
         */
        lastIndexOfSignature: function(sig) {
            // see implementations
        },
        /**
         * Get the next date.
         * @return {Date} the date.
         */
        readDate: function() {
            var dostime = this.readInt(4);
            return new Date(
            ((dostime >> 25) & 0x7f) + 1980, // year
            ((dostime >> 21) & 0x0f) - 1, // month
            (dostime >> 16) & 0x1f, // day
            (dostime >> 11) & 0x1f, // hour
            (dostime >> 5) & 0x3f, // minute
            (dostime & 0x1f) << 1); // second
        }
    };
    module.exports = DataReader;
    
    },{"./utils":21}],6:[function(_dereq_,module,exports){
    'use strict';
    exports.base64 = false;
    exports.binary = false;
    exports.dir = false;
    exports.createFolders = false;
    exports.date = null;
    exports.compression = null;
    exports.comment = null;
    
    },{}],7:[function(_dereq_,module,exports){
    'use strict';
    var utils = _dereq_('./utils');
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.string2binary = function(str) {
        return utils.string2binary(str);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.string2Uint8Array = function(str) {
        return utils.transformTo("uint8array", str);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.uint8Array2String = function(array) {
        return utils.transformTo("string", array);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.string2Blob = function(str) {
        var buffer = utils.transformTo("arraybuffer", str);
        return utils.arrayBuffer2Blob(buffer);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.arrayBuffer2Blob = function(buffer) {
        return utils.arrayBuffer2Blob(buffer);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.transformTo = function(outputType, input) {
        return utils.transformTo(outputType, input);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.getTypeOf = function(input) {
        return utils.getTypeOf(input);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.checkSupport = function(type) {
        return utils.checkSupport(type);
    };
    
    /**
     * @deprecated
     * This value will be removed in a future version without replacement.
     */
    exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;
    
    /**
     * @deprecated
     * This value will be removed in a future version without replacement.
     */
    exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;
    
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.pretty = function(str) {
        return utils.pretty(str);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.findCompression = function(compressionMethod) {
        return utils.findCompression(compressionMethod);
    };
    
    /**
     * @deprecated
     * This function will be removed in a future version without replacement.
     */
    exports.isRegExp = function (object) {
        return utils.isRegExp(object);
    };
    
    
    },{"./utils":21}],8:[function(_dereq_,module,exports){
    'use strict';
    var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');
    
    var pako = _dereq_("pako");
    exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
    exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
    
    exports.magic = "\x08\x00";
    exports.compress = function(input) {
        return pako.deflateRaw(input);
    };
    exports.uncompress =  function(input) {
        return pako.inflateRaw(input);
    };
    
    },{"pako":24}],9:[function(_dereq_,module,exports){
    'use strict';
    
    var base64 = _dereq_('./base64');
    
    /**
    Usage:
       zip = new JSZip();
       zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
       zip.folder("images").file("smile.gif", base64Data, {base64: true});
       zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
       zip.remove("tempfile");
    
       base64zip = zip.generate();
    
    **/
    
    /**
     * Representation a of zip file in js
     * @constructor
     * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
     * @param {Object=} options the options for creating this objects (optional).
     */
    function JSZip(data, options) {
        // if this constructor isÂ used withoutÂ `new`, itÂ adds `new` beforeÂ itself:
        if(!(this instanceof JSZip)) return new JSZip(data, options);
    
        // object containing the files :
        // {
        //   "folder/" : {...},
        //   "folder/data.txt" : {...}
        // }
        this.files = {};
    
        this.comment = null;
    
        // Where we are in the hierarchy
        this.root = "";
        if (data) {
            this.load(data, options);
        }
        this.clone = function() {
            var newObj = new JSZip();
            for (var i in this) {
                if (typeof this[i] !== "function") {
                    newObj[i] = this[i];
                }
            }
            return newObj;
        };
    }
    JSZip.prototype = _dereq_('./object');
    JSZip.prototype.load = _dereq_('./load');
    JSZip.support = _dereq_('./support');
    JSZip.defaults = _dereq_('./defaults');
    
    /**
     * @deprecated
     * This namespace will be removed in a future version without replacement.
     */
    JSZip.utils = _dereq_('./deprecatedPublicUtils');
    
    JSZip.base64 = {
        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        encode : function(input) {
            return base64.encode(input);
        },
        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        decode : function(input) {
            return base64.decode(input);
        }
    };
    JSZip.compressions = _dereq_('./compressions');
    module.exports = JSZip;
    
    },{"./base64":1,"./compressions":3,"./defaults":6,"./deprecatedPublicUtils":7,"./load":10,"./object":13,"./support":17}],10:[function(_dereq_,module,exports){
    'use strict';
    var base64 = _dereq_('./base64');
    var ZipEntries = _dereq_('./zipEntries');
    module.exports = function(data, options) {
        var files, zipEntries, i, input;
        options = options || {};
        if (options.base64) {
            data = base64.decode(data);
        }
    
        zipEntries = new ZipEntries(data, options);
        files = zipEntries.files;
        for (i = 0; i < files.length; i++) {
            input = files[i];
            this.file(input.fileName, input.decompressed, {
                binary: true,
                optimizedBinaryString: true,
                date: input.date,
                dir: input.dir,
                comment : input.fileComment.length ? input.fileComment : null,
                createFolders: options.createFolders
            });
        }
        if (zipEntries.zipComment.length) {
            this.comment = zipEntries.zipComment;
        }
    
        return this;
    };
    
    },{"./base64":1,"./zipEntries":22}],11:[function(_dereq_,module,exports){
    (function (Buffer){
    'use strict';
    module.exports = function(data, encoding){
        return new Buffer(data, encoding);
    };
    module.exports.test = function(b){
        return Buffer.isBuffer(b);
    };
    }).call(this,(typeof Buffer !== "undefined" ? Buffer : undefined))
    },{}],12:[function(_dereq_,module,exports){
    'use strict';
    var Uint8ArrayReader = _dereq_('./uint8ArrayReader');
    
    function NodeBufferReader(data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
    }
    NodeBufferReader.prototype = new Uint8ArrayReader();
    
    /**
     * @see DataReader.readData
     */
    NodeBufferReader.prototype.readData = function(size) {
        this.checkOffset(size);
        var result = this.data.slice(this.index, this.index + size);
        this.index += size;
        return result;
    };
    module.exports = NodeBufferReader;
    
    },{"./uint8ArrayReader":18}],13:[function(_dereq_,module,exports){
    'use strict';
    var support = _dereq_('./support');
    var utils = _dereq_('./utils');
    var crc32 = _dereq_('./crc32');
    var signature = _dereq_('./signature');
    var defaults = _dereq_('./defaults');
    var base64 = _dereq_('./base64');
    var compressions = _dereq_('./compressions');
    var CompressedObject = _dereq_('./compressedObject');
    var nodeBuffer = _dereq_('./nodeBuffer');
    var utf8 = _dereq_('./utf8');
    var StringWriter = _dereq_('./stringWriter');
    var Uint8ArrayWriter = _dereq_('./uint8ArrayWriter');
    
    /**
     * Returns the raw data of a ZipObject, decompress the content if necessary.
     * @param {ZipObject} file the file to use.
     * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
     */
    var getRawData = function(file) {
        if (file._data instanceof CompressedObject) {
            file._data = file._data.getContent();
            file.options.binary = true;
            file.options.base64 = false;
    
            if (utils.getTypeOf(file._data) === "uint8array") {
                var copy = file._data;
                // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
                // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
                file._data = new Uint8Array(copy.length);
                // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
                if (copy.length !== 0) {
                    file._data.set(copy, 0);
                }
            }
        }
        return file._data;
    };
    
    /**
     * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
     * @param {ZipObject} file the file to use.
     * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
     */
    var getBinaryData = function(file) {
        var result = getRawData(file),
            type = utils.getTypeOf(result);
        if (type === "string") {
            if (!file.options.binary) {
                // unicode text !
                // unicode string => binary string is a painful process, check if we can avoid it.
                if (support.nodebuffer) {
                    return nodeBuffer(result, "utf-8");
                }
            }
            return file.asBinary();
        }
        return result;
    };
    
    /**
     * Transform this._data into a string.
     * @param {function} filter a function String -> String, applied if not null on the result.
     * @return {String} the string representing this._data.
     */
    var dataToString = function(asUTF8) {
        var result = getRawData(this);
        if (result === null || typeof result === "undefined") {
            return "";
        }
        // if the data is a base64 string, we decode it before checking the encoding !
        if (this.options.base64) {
            result = base64.decode(result);
        }
        if (asUTF8 && this.options.binary) {
            // JSZip.prototype.utf8decode supports arrays as input
            // skip to array => string step, utf8decode will do it.
            result = out.utf8decode(result);
        }
        else {
            // no utf8 transformation, do the array => string step.
            result = utils.transformTo("string", result);
        }
    
        if (!asUTF8 && !this.options.binary) {
            result = utils.transformTo("string", out.utf8encode(result));
        }
        return result;
    };
    /**
     * A simple object representing a file in the zip file.
     * @constructor
     * @param {string} name the name of the file
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
     * @param {Object} options the options of the file
     */
    var ZipObject = function(name, data, options) {
        this.name = name;
        this.dir = options.dir;
        this.date = options.date;
        this.comment = options.comment;
    
        this._data = data;
        this.options = options;
    
        /*
         * This object contains initial values for dir and date.
         * With them, we can check if the user changed the deprecated metadata in
         * `ZipObject#options` or not.
         */
        this._initialMetadata = {
          dir : options.dir,
          date : options.date
        };
    };
    
    ZipObject.prototype = {
        /**
         * Return the content as UTF8 string.
         * @return {string} the UTF8 string.
         */
        asText: function() {
            return dataToString.call(this, true);
        },
        /**
         * Returns the binary content.
         * @return {string} the content as binary.
         */
        asBinary: function() {
            return dataToString.call(this, false);
        },
        /**
         * Returns the content as a nodejs Buffer.
         * @return {Buffer} the content as a Buffer.
         */
        asNodeBuffer: function() {
            var result = getBinaryData(this);
            return utils.transformTo("nodebuffer", result);
        },
        /**
         * Returns the content as an Uint8Array.
         * @return {Uint8Array} the content as an Uint8Array.
         */
        asUint8Array: function() {
            var result = getBinaryData(this);
            return utils.transformTo("uint8array", result);
        },
        /**
         * Returns the content as an ArrayBuffer.
         * @return {ArrayBuffer} the content as an ArrayBufer.
         */
        asArrayBuffer: function() {
            return this.asUint8Array().buffer;
        }
    };
    
    /**
     * Transform an integer into a string in hexadecimal.
     * @private
     * @param {number} dec the number to convert.
     * @param {number} bytes the number of bytes to generate.
     * @returns {string} the result.
     */
    var decToHex = function(dec, bytes) {
        var hex = "",
            i;
        for (i = 0; i < bytes; i++) {
            hex += String.fromCharCode(dec & 0xff);
            dec = dec >>> 8;
        }
        return hex;
    };
    
    /**
     * Merge the objects passed as parameters into a new one.
     * @private
     * @param {...Object} var_args All objects to merge.
     * @return {Object} a new object with the data of the others.
     */
    var extend = function() {
        var result = {}, i, attr;
        for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
            for (attr in arguments[i]) {
                if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                    result[attr] = arguments[i][attr];
                }
            }
        }
        return result;
    };
    
    /**
     * Transforms the (incomplete) options from the user into the complete
     * set of options to create a file.
     * @private
     * @param {Object} o the options from the user.
     * @return {Object} the complete set of options.
     */
    var prepareFileAttrs = function(o) {
        o = o || {};
        if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
            o.binary = true;
        }
        o = extend(o, defaults);
        o.date = o.date || new Date();
        if (o.compression !== null) o.compression = o.compression.toUpperCase();
    
        return o;
    };
    
    /**
     * Add a file in the current folder.
     * @private
     * @param {string} name the name of the file
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
     * @param {Object} o the options of the file
     * @return {Object} the new file.
     */
    var fileAdd = function(name, data, o) {
        // be sure sub folders exist
        var dataType = utils.getTypeOf(data),
            parent;
    
        o = prepareFileAttrs(o);
    
        if (o.createFolders && (parent = parentFolder(name))) {
            folderAdd.call(this, parent, true);
        }
    
        if (o.dir || data === null || typeof data === "undefined") {
            o.base64 = false;
            o.binary = false;
            data = null;
        }
        else if (dataType === "string") {
            if (o.binary && !o.base64) {
                // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
                if (o.optimizedBinaryString !== true) {
                    // this is a string, not in a base64 format.
                    // Be sure that this is a correct "binary string"
                    data = utils.string2binary(data);
                }
            }
        }
        else { // arraybuffer, uint8array, ...
            o.base64 = false;
            o.binary = true;
    
            if (!dataType && !(data instanceof CompressedObject)) {
                throw new Error("The data of '" + name + "' is in an unsupported format !");
            }
    
            // special case : it's way easier to work with Uint8Array than with ArrayBuffer
            if (dataType === "arraybuffer") {
                data = utils.transformTo("uint8array", data);
            }
        }
    
        var object = new ZipObject(name, data, o);
        this.files[name] = object;
        return object;
    };
    
    /**
     * Find the parent folder of the path.
     * @private
     * @param {string} path the path to use
     * @return {string} the parent folder, or ""
     */
    var parentFolder = function (path) {
        if (path.slice(-1) == '/') {
            path = path.substring(0, path.length - 1);
        }
        var lastSlash = path.lastIndexOf('/');
        return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
    };
    
    /**
     * Add a (sub) folder in the current folder.
     * @private
     * @param {string} name the folder's name
     * @param {boolean=} [createFolders] If true, automatically create sub
     *  folders. Defaults to false.
     * @return {Object} the new folder.
     */
    var folderAdd = function(name, createFolders) {
        // Check the name ends with a /
        if (name.slice(-1) != "/") {
            name += "/"; // IE doesn't like substr(-1)
        }
    
        createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;
    
        // Does this folder already exist?
        if (!this.files[name]) {
            fileAdd.call(this, name, null, {
                dir: true,
                createFolders: createFolders
            });
        }
        return this.files[name];
    };
    
    /**
     * Generate a JSZip.CompressedObject for a given zipOject.
     * @param {ZipObject} file the object to read.
     * @param {JSZip.compression} compression the compression to use.
     * @return {JSZip.CompressedObject} the compressed result.
     */
    var generateCompressedObjectFrom = function(file, compression) {
        var result = new CompressedObject(),
            content;
    
        // the data has not been decompressed, we might reuse things !
        if (file._data instanceof CompressedObject) {
            result.uncompressedSize = file._data.uncompressedSize;
            result.crc32 = file._data.crc32;
    
            if (result.uncompressedSize === 0 || file.dir) {
                compression = compressions['STORE'];
                result.compressedContent = "";
                result.crc32 = 0;
            }
            else if (file._data.compressionMethod === compression.magic) {
                result.compressedContent = file._data.getCompressedContent();
            }
            else {
                content = file._data.getContent();
                // need to decompress / recompress
                result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
            }
        }
        else {
            // have uncompressed data
            content = getBinaryData(file);
            if (!content || content.length === 0 || file.dir) {
                compression = compressions['STORE'];
                content = "";
            }
            result.uncompressedSize = content.length;
            result.crc32 = crc32(content);
            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
        }
    
        result.compressedSize = result.compressedContent.length;
        result.compressionMethod = compression.magic;
    
        return result;
    };
    
    /**
     * Generate the various parts used in the construction of the final zip file.
     * @param {string} name the file name.
     * @param {ZipObject} file the file content.
     * @param {JSZip.CompressedObject} compressedObject the compressed object.
     * @param {number} offset the current offset from the start of the zip file.
     * @return {object} the zip parts.
     */
    var generateZipParts = function(name, file, compressedObject, offset) {
        var data = compressedObject.compressedContent,
            utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
            comment = file.comment || "",
            utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
            useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
            useUTF8ForComment = utfEncodedComment.length !== comment.length,
            o = file.options,
            dosTime,
            dosDate,
            extraFields = "",
            unicodePathExtraField = "",
            unicodeCommentExtraField = "",
            dir, date;
    
    
        // handle the deprecated options.dir
        if (file._initialMetadata.dir !== file.dir) {
            dir = file.dir;
        } else {
            dir = o.dir;
        }
    
        // handle the deprecated options.date
        if(file._initialMetadata.date !== file.date) {
            date = file.date;
        } else {
            date = o.date;
        }
    
    
        dosTime = date.getHours();
        dosTime = dosTime << 6;
        dosTime = dosTime | date.getMinutes();
        dosTime = dosTime << 5;
        dosTime = dosTime | date.getSeconds() / 2;
    
        dosDate = date.getFullYear() - 1980;
        dosDate = dosDate << 4;
        dosDate = dosDate | (date.getMonth() + 1);
        dosDate = dosDate << 5;
        dosDate = dosDate | date.getDate();
    
        if (useUTF8ForFileName) {
            // set the unicode path extra field. unzip needs at least one extra
            // field to correctly handle unicode path, so using the path is as good
            // as any other information. This could improve the situation with
            // other archive managers too.
            // This field is usually used without the utf8 flag, with a non
            // unicode path in the header (winrar, winzip). This helps (a bit)
            // with the messy Windows' default compressed folders feature but
            // breaks on p7zip which doesn't seek the unicode path extra field.
            // So for now, UTF-8 everywhere !
            unicodePathExtraField =
                // Version
                decToHex(1, 1) +
                // NameCRC32
                decToHex(crc32(utfEncodedFileName), 4) +
                // UnicodeName
                utfEncodedFileName;
    
            extraFields +=
                // Info-ZIP Unicode Path Extra Field
                "\x75\x70" +
                // size
                decToHex(unicodePathExtraField.length, 2) +
                // content
                unicodePathExtraField;
        }
    
        if(useUTF8ForComment) {
    
            unicodeCommentExtraField =
                // Version
                decToHex(1, 1) +
                // CommentCRC32
                decToHex(this.crc32(utfEncodedComment), 4) +
                // UnicodeName
                utfEncodedComment;
    
            extraFields +=
                // Info-ZIP Unicode Path Extra Field
                "\x75\x63" +
                // size
                decToHex(unicodeCommentExtraField.length, 2) +
                // content
                unicodeCommentExtraField;
        }
    
        var header = "";
    
        // version needed to extract
        header += "\x0A\x00";
        // general purpose bit flag
        // set bit 11 if utf8
        header += (useUTF8ForFileName || useUTF8ForComment) ? "\x00\x08" : "\x00\x00";
        // compression method
        header += compressedObject.compressionMethod;
        // last mod file time
        header += decToHex(dosTime, 2);
        // last mod file date
        header += decToHex(dosDate, 2);
        // crc-32
        header += decToHex(compressedObject.crc32, 4);
        // compressed size
        header += decToHex(compressedObject.compressedSize, 4);
        // uncompressed size
        header += decToHex(compressedObject.uncompressedSize, 4);
        // file name length
        header += decToHex(utfEncodedFileName.length, 2);
        // extra field length
        header += decToHex(extraFields.length, 2);
    
    
        var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;
    
        var dirRecord = signature.CENTRAL_FILE_HEADER +
        // version made by (00: DOS)
        "\x14\x00" +
        // file header (common to file and central directory)
        header +
        // file comment length
        decToHex(utfEncodedComment.length, 2) +
        // disk number start
        "\x00\x00" +
        // internal file attributes TODO
        "\x00\x00" +
        // external file attributes
        (dir === true ? "\x10\x00\x00\x00" : "\x00\x00\x00\x00") +
        // relative offset of local header
        decToHex(offset, 4) +
        // file name
        utfEncodedFileName +
        // extra field
        extraFields +
        // file comment
        utfEncodedComment;
    
        return {
            fileRecord: fileRecord,
            dirRecord: dirRecord,
            compressedObject: compressedObject
        };
    };
    
    
    // return the actual prototype of JSZip
    var out = {
        /**
         * Read an existing zip and merge the data in the current JSZip object.
         * The implementation is in jszip-load.js, don't forget to include it.
         * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
         * @param {Object} options Options for loading the stream.
         *  options.base64 : is the stream in base64 ? default : false
         * @return {JSZip} the current JSZip object
         */
        load: function(stream, options) {
            throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
        },
    
        /**
         * Filter nested files/folders with the specified function.
         * @param {Function} search the predicate to use :
         * function (relativePath, file) {...}
         * It takes 2 arguments : the relative path and the file.
         * @return {Array} An array of matching elements.
         */
        filter: function(search) {
            var result = [],
                filename, relativePath, file, fileClone;
            for (filename in this.files) {
                if (!this.files.hasOwnProperty(filename)) {
                    continue;
                }
                file = this.files[filename];
                // return a new object, don't let the user mess with our internal objects :)
                fileClone = new ZipObject(file.name, file._data, extend(file.options));
                relativePath = filename.slice(this.root.length, filename.length);
                if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
                search(relativePath, fileClone)) { // and the file matches the function
                    result.push(fileClone);
                }
            }
            return result;
        },
    
        /**
         * Add a file to the zip file, or search a file.
         * @param   {string|RegExp} name The name of the file to add (if data is defined),
         * the name of the file to find (if no data) or a regex to match files.
         * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
         * @param   {Object} o     File options
         * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
         * a file (when searching by string) or an array of files (when searching by regex).
         */
        file: function(name, data, o) {
            if (arguments.length === 1) {
                if (utils.isRegExp(name)) {
                    var regexp = name;
                    return this.filter(function(relativePath, file) {
                        return !file.dir && regexp.test(relativePath);
                    });
                }
                else { // text
                    return this.filter(function(relativePath, file) {
                        return !file.dir && relativePath === name;
                    })[0] || null;
                }
            }
            else { // more than one argument : we have data !
                name = this.root + name;
                fileAdd.call(this, name, data, o);
            }
            return this;
        },
    
        /**
         * Add a directory to the zip file, or search.
         * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
         * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
         */
        folder: function(arg) {
            if (!arg) {
                return this;
            }
    
            if (utils.isRegExp(arg)) {
                return this.filter(function(relativePath, file) {
                    return file.dir && arg.test(relativePath);
                });
            }
    
            // else, name is a new folder
            var name = this.root + arg;
            var newFolder = folderAdd.call(this, name);
    
            // Allow chaining by returning a new object with this folder as the root
            var ret = this.clone();
            ret.root = newFolder.name;
            return ret;
        },
    
        /**
         * Delete a file, or a directory and all sub-files, from the zip
         * @param {string} name the name of the file to delete
         * @return {JSZip} this JSZip object
         */
        remove: function(name) {
            name = this.root + name;
            var file = this.files[name];
            if (!file) {
                // Look for any folders
                if (name.slice(-1) != "/") {
                    name += "/";
                }
                file = this.files[name];
            }
    
            if (file && !file.dir) {
                // file
                delete this.files[name];
            } else {
                // maybe a folder, delete recursively
                var kids = this.filter(function(relativePath, file) {
                    return file.name.slice(0, name.length) === name;
                });
                for (var i = 0; i < kids.length; i++) {
                    delete this.files[kids[i].name];
                }
            }
    
            return this;
        },
    
        /**
         * Generate the complete zip file
         * @param {Object} options the options to generate the zip file :
         * - base64, (deprecated, use type instead) true to generate base64.
         * - compression, "STORE" by default.
         * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
         * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
         */
        generate: function(options) {
            options = extend(options || {}, {
                base64: true,
                compression: "STORE",
                type: "base64",
                comment: null
            });
    
            utils.checkSupport(options.type);
    
            var zipData = [],
                localDirLength = 0,
                centralDirLength = 0,
                writer, i,
                utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));
    
            // first, generate all the zip parts.
            for (var name in this.files) {
                if (!this.files.hasOwnProperty(name)) {
                    continue;
                }
                var file = this.files[name];
    
                var compressionName = file.options.compression || options.compression.toUpperCase();
                var compression = compressions[compressionName];
                if (!compression) {
                    throw new Error(compressionName + " is not a valid compression method !");
                }
    
                var compressedObject = generateCompressedObjectFrom.call(this, file, compression);
    
                var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);
                localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
                centralDirLength += zipPart.dirRecord.length;
                zipData.push(zipPart);
            }
    
            var dirEnd = "";
    
            // end of central dir signature
            dirEnd = signature.CENTRAL_DIRECTORY_END +
            // number of this disk
            "\x00\x00" +
            // number of the disk with the start of the central directory
            "\x00\x00" +
            // total number of entries in the central directory on this disk
            decToHex(zipData.length, 2) +
            // total number of entries in the central directory
            decToHex(zipData.length, 2) +
            // size of the central directory   4 bytes
            decToHex(centralDirLength, 4) +
            // offset of start of central directory with respect to the starting disk number
            decToHex(localDirLength, 4) +
            // .ZIP file comment length
            decToHex(utfEncodedComment.length, 2) +
            // .ZIP file comment
            utfEncodedComment;
    
    
            // we have all the parts (and the total length)
            // time to create a writer !
            var typeName = options.type.toLowerCase();
            if(typeName==="uint8array"||typeName==="arraybuffer"||typeName==="blob"||typeName==="nodebuffer") {
                writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
            }else{
                writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
            }
    
            for (i = 0; i < zipData.length; i++) {
                writer.append(zipData[i].fileRecord);
                writer.append(zipData[i].compressedObject.compressedContent);
            }
            for (i = 0; i < zipData.length; i++) {
                writer.append(zipData[i].dirRecord);
            }
    
            writer.append(dirEnd);
    
            var zip = writer.finalize();
    
    
    
            switch(options.type.toLowerCase()) {
                // case "zip is an Uint8Array"
                case "uint8array" :
                case "arraybuffer" :
                case "nodebuffer" :
                   return utils.transformTo(options.type.toLowerCase(), zip);
                case "blob" :
                   return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip));
                // case "zip is a string"
                case "base64" :
                   return (options.base64) ? base64.encode(zip) : zip;
                default : // case "string" :
                   return zip;
             }
    
        },
    
        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        crc32: function (input, crc) {
            return crc32(input, crc);
        },
    
        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        utf8encode: function (string) {
            return utils.transformTo("string", utf8.utf8encode(string));
        },
    
        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        utf8decode: function (input) {
            return utf8.utf8decode(input);
        }
    };
    module.exports = out;
    
    },{"./base64":1,"./compressedObject":2,"./compressions":3,"./crc32":4,"./defaults":6,"./nodeBuffer":11,"./signature":14,"./stringWriter":16,"./support":17,"./uint8ArrayWriter":19,"./utf8":20,"./utils":21}],14:[function(_dereq_,module,exports){
    'use strict';
    exports.LOCAL_FILE_HEADER = "PK\x03\x04";
    exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
    exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
    exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
    exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
    exports.DATA_DESCRIPTOR = "PK\x07\x08";
    
    },{}],15:[function(_dereq_,module,exports){
    'use strict';
    var DataReader = _dereq_('./dataReader');
    var utils = _dereq_('./utils');
    
    function StringReader(data, optimizedBinaryString) {
        this.data = data;
        if (!optimizedBinaryString) {
            this.data = utils.string2binary(this.data);
        }
        this.length = this.data.length;
        this.index = 0;
    }
    StringReader.prototype = new DataReader();
    /**
     * @see DataReader.byteAt
     */
    StringReader.prototype.byteAt = function(i) {
        return this.data.charCodeAt(i);
    };
    /**
     * @see DataReader.lastIndexOfSignature
     */
    StringReader.prototype.lastIndexOfSignature = function(sig) {
        return this.data.lastIndexOf(sig);
    };
    /**
     * @see DataReader.readData
     */
    StringReader.prototype.readData = function(size) {
        this.checkOffset(size);
        // this will work because the constructor applied the "& 0xff" mask.
        var result = this.data.slice(this.index, this.index + size);
        this.index += size;
        return result;
    };
    module.exports = StringReader;
    
    },{"./dataReader":5,"./utils":21}],16:[function(_dereq_,module,exports){
    'use strict';
    
    var utils = _dereq_('./utils');
    
    /**
     * An object to write any content to a string.
     * @constructor
     */
    var StringWriter = function() {
        this.data = [];
    };
    StringWriter.prototype = {
        /**
         * Append any content to the current string.
         * @param {Object} input the content to add.
         */
        append: function(input) {
            input = utils.transformTo("string", input);
            this.data.push(input);
        },
        /**
         * Finalize the construction an return the result.
         * @return {string} the generated string.
         */
        finalize: function() {
            return this.data.join("");
        }
    };
    
    module.exports = StringWriter;
    
    },{"./utils":21}],17:[function(_dereq_,module,exports){
    (function (Buffer){
    'use strict';
    exports.base64 = true;
    exports.array = true;
    exports.string = true;
    exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
    // contains true if JSZip can read/generate nodejs Buffer, false otherwise.
    // Browserify will provide a Buffer implementation for browsers, which is
    // an augmented Uint8Array (i.e., can be used as either Buffer or U8).
    exports.nodebuffer = typeof Buffer !== "undefined";
    // contains true if JSZip can read/generate Uint8Array, false otherwise.
    exports.uint8array = typeof Uint8Array !== "undefined";
    
    if (typeof ArrayBuffer === "undefined") {
        exports.blob = false;
    }
    else {
        var buffer = new ArrayBuffer(0);
        try {
            exports.blob = new Blob([buffer], {
                type: "application/zip"
            }).size === 0;
        }
        catch (e) {
            try {
                var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                var builder = new Builder();
                builder.append(buffer);
                exports.blob = builder.getBlob('application/zip').size === 0;
            }
            catch (e) {
                exports.blob = false;
            }
        }
    }
    
    }).call(this,(typeof Buffer !== "undefined" ? Buffer : undefined))
    },{}],18:[function(_dereq_,module,exports){
    'use strict';
    var DataReader = _dereq_('./dataReader');
    
    function Uint8ArrayReader(data) {
        if (data) {
            this.data = data;
            this.length = this.data.length;
            this.index = 0;
        }
    }
    Uint8ArrayReader.prototype = new DataReader();
    /**
     * @see DataReader.byteAt
     */
    Uint8ArrayReader.prototype.byteAt = function(i) {
        return this.data[i];
    };
    /**
     * @see DataReader.lastIndexOfSignature
     */
    Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
        var sig0 = sig.charCodeAt(0),
            sig1 = sig.charCodeAt(1),
            sig2 = sig.charCodeAt(2),
            sig3 = sig.charCodeAt(3);
        for (var i = this.length - 4; i >= 0; --i) {
            if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
                return i;
            }
        }
    
        return -1;
    };
    /**
     * @see DataReader.readData
     */
    Uint8ArrayReader.prototype.readData = function(size) {
        this.checkOffset(size);
        if(size === 0) {
            // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
            return new Uint8Array(0);
        }
        var result = this.data.subarray(this.index, this.index + size);
        this.index += size;
        return result;
    };
    module.exports = Uint8ArrayReader;
    
    },{"./dataReader":5}],19:[function(_dereq_,module,exports){
    'use strict';
    
    var utils = _dereq_('./utils');
    
    /**
     * An object to write any content to an Uint8Array.
     * @constructor
     * @param {number} length The length of the array.
     */
    var Uint8ArrayWriter = function(length) {
        this.data = new Uint8Array(length);
        this.index = 0;
    };
    Uint8ArrayWriter.prototype = {
        /**
         * Append any content to the current array.
         * @param {Object} input the content to add.
         */
        append: function(input) {
            if (input.length !== 0) {
                // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
                input = utils.transformTo("uint8array", input);
                this.data.set(input, this.index);
                this.index += input.length;
            }
        },
        /**
         * Finalize the construction an return the result.
         * @return {Uint8Array} the generated array.
         */
        finalize: function() {
            return this.data;
        }
    };
    
    module.exports = Uint8ArrayWriter;
    
    },{"./utils":21}],20:[function(_dereq_,module,exports){
    'use strict';
    
    var utils = _dereq_('./utils');
    var support = _dereq_('./support');
    var nodeBuffer = _dereq_('./nodeBuffer');
    
    /**
     * The following functions come from pako, from pako/lib/utils/strings
     * released under the MIT license, see pako https://github.com/nodeca/pako/
     */
    
    // Table with utf8 lengths (calculated by first byte of sequence)
    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
    // because max possible codepoint is 0x10ffff
    var _utf8len = new Array(256);
    for (var i=0; i<256; i++) {
      _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
    }
    _utf8len[254]=_utf8len[254]=1; // Invalid sequence start
    
    // convert string to array (typed, when possible)
    var string2buf = function (str) {
        var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
    
        // count binary size
        for (m_pos = 0; m_pos < str_len; m_pos++) {
            c = str.charCodeAt(m_pos);
            if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
                c2 = str.charCodeAt(m_pos+1);
                if ((c2 & 0xfc00) === 0xdc00) {
                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                    m_pos++;
                }
            }
            buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
        }
    
        // allocate buffer
        if (support.uint8array) {
            buf = new Uint8Array(buf_len);
        } else {
            buf = new Array(buf_len);
        }
    
        // convert
        for (i=0, m_pos = 0; i < buf_len; m_pos++) {
            c = str.charCodeAt(m_pos);
            if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
                c2 = str.charCodeAt(m_pos+1);
                if ((c2 & 0xfc00) === 0xdc00) {
                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                    m_pos++;
                }
            }
            if (c < 0x80) {
                /* one byte */
                buf[i++] = c;
            } else if (c < 0x800) {
                /* two bytes */
                buf[i++] = 0xC0 | (c >>> 6);
                buf[i++] = 0x80 | (c & 0x3f);
            } else if (c < 0x10000) {
                /* three bytes */
                buf[i++] = 0xE0 | (c >>> 12);
                buf[i++] = 0x80 | (c >>> 6 & 0x3f);
                buf[i++] = 0x80 | (c & 0x3f);
            } else {
                /* four bytes */
                buf[i++] = 0xf0 | (c >>> 18);
                buf[i++] = 0x80 | (c >>> 12 & 0x3f);
                buf[i++] = 0x80 | (c >>> 6 & 0x3f);
                buf[i++] = 0x80 | (c & 0x3f);
            }
        }
    
        return buf;
    };
    
    // Calculate max possible position in utf8 buffer,
    // that will not break sequence. If that's not possible
    // - (very small limits) return max size as is.
    //
    // buf[] - utf8 bytes array
    // max   - length limit (mandatory);
    var utf8border = function(buf, max) {
        var pos;
    
        max = max || buf.length;
        if (max > buf.length) { max = buf.length; }
    
        // go back from last position, until start of sequence found
        pos = max-1;
        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
    
        // Fuckup - very small and broken sequence,
        // return max, because we should return something anyway.
        if (pos < 0) { return max; }
    
        // If we came to start of buffer - that means vuffer is too small,
        // return max too.
        if (pos === 0) { return max; }
    
        return (pos + _utf8len[buf[pos]] > max) ? pos : max;
    };
    
    // convert array to string
    var buf2string = function (buf) {
        var str, i, out, c, c_len;
        var len = buf.length;
    
        // Reserve max possible length (2 words per char)
        // NB: by unknown reasons, Array is significantly faster for
        //     String.fromCharCode.apply than Uint16Array.
        var utf16buf = new Array(len*2);
    
        for (out=0, i=0; i<len;) {
            c = buf[i++];
            // quick process ascii
            if (c < 0x80) { utf16buf[out++] = c; continue; }
    
            c_len = _utf8len[c];
            // skip 5 & 6 byte codes
            if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }
    
            // apply mask on first byte
            c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
            // join the rest
            while (c_len > 1 && i < len) {
                c = (c << 6) | (buf[i++] & 0x3f);
                c_len--;
            }
    
            // terminated by end of string?
            if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
    
            if (c < 0x10000) {
                utf16buf[out++] = c;
            } else {
                c -= 0x10000;
                utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
                utf16buf[out++] = 0xdc00 | (c & 0x3ff);
            }
        }
    
        // shrinkBuf(utf16buf, out)
        if (utf16buf.length !== out) {
            if(utf16buf.subarray) {
                utf16buf = utf16buf.subarray(0, out);
            } else {
                utf16buf.length = out;
            }
        }
    
        // return String.fromCharCode.apply(null, utf16buf);
        return utils.applyFromCharCode(utf16buf);
    };
    
    
    // That's all for the pako functions.
    
    
    /**
     * Transform a javascript string into an array (typed if possible) of bytes,
     * UTF-8 encoded.
     * @param {String} str the string to encode
     * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
     */
    exports.utf8encode = function utf8encode(str) {
        if (support.nodebuffer) {
            return nodeBuffer(str, "utf-8");
        }
    
        return string2buf(str);
    };
    
    
    /**
     * Transform a bytes array (or a representation) representing an UTF-8 encoded
     * string into a javascript string.
     * @param {Array|Uint8Array|Buffer} buf the data de decode
     * @return {String} the decoded string.
     */
    exports.utf8decode = function utf8decode(buf) {
        if (support.nodebuffer) {
            return utils.transformTo("nodebuffer", buf).toString("utf-8");
        }
    
        buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);
    
        // return buf2string(buf);
        // Chrome prefers to work with "small" chunks of data
        // for the method buf2string.
        // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.
        var result = [], k = 0, len = buf.length, chunk = 65536;
        while (k < len) {
            var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
            if (support.uint8array) {
                result.push(buf2string(buf.subarray(k, nextBoundary)));
            } else {
                result.push(buf2string(buf.slice(k, nextBoundary)));
            }
            k = nextBoundary;
        }
        return result.join("");
    
    };
    // vim: set shiftwidth=4 softtabstop=4:
    
    },{"./nodeBuffer":11,"./support":17,"./utils":21}],21:[function(_dereq_,module,exports){
    'use strict';
    var support = _dereq_('./support');
    var compressions = _dereq_('./compressions');
    var nodeBuffer = _dereq_('./nodeBuffer');
    /**
     * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
     * @param {string} str the string to transform.
     * @return {String} the binary string.
     */
    exports.string2binary = function(str) {
        var result = "";
        for (var i = 0; i < str.length; i++) {
            result += String.fromCharCode(str.charCodeAt(i) & 0xff);
        }
        return result;
    };
    exports.arrayBuffer2Blob = function(buffer) {
        exports.checkSupport("blob");
    
        try {
            // Blob constructor
            return new Blob([buffer], {
                type: "application/zip"
            });
        }
        catch (e) {
    
            try {
                // deprecated, browser only, old way
                var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                var builder = new Builder();
                builder.append(buffer);
                return builder.getBlob('application/zip');
            }
            catch (e) {
    
                // well, fuck ?!
                throw new Error("Bug : can't construct the Blob.");
            }
        }
    
    
    };
    /**
     * The identity function.
     * @param {Object} input the input.
     * @return {Object} the same input.
     */
    function identity(input) {
        return input;
    }
    
    /**
     * Fill in an array with a string.
     * @param {String} str the string to use.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
     * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
     */
    function stringToArrayLike(str, array) {
        for (var i = 0; i < str.length; ++i) {
            array[i] = str.charCodeAt(i) & 0xFF;
        }
        return array;
    }
    
    /**
     * Transform an array-like object to a string.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
     * @return {String} the result.
     */
    function arrayLikeToString(array) {
        // Performances notes :
        // --------------------
        // String.fromCharCode.apply(null, array) is the fastest, see
        // see http://jsperf.com/converting-a-uint8array-to-a-string/2
        // but the stack is limited (and we can get huge arrays !).
        //
        // result += String.fromCharCode(array[i]); generate too many strings !
        //
        // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
        var chunk = 65536;
        var result = [],
            len = array.length,
            type = exports.getTypeOf(array),
            k = 0,
            canUseApply = true;
          try {
             switch(type) {
                case "uint8array":
                   String.fromCharCode.apply(null, new Uint8Array(0));
                   break;
                case "nodebuffer":
                   String.fromCharCode.apply(null, nodeBuffer(0));
                   break;
             }
          } catch(e) {
             canUseApply = false;
          }
    
          // no apply : slow and painful algorithm
          // default browser on android 4.*
          if (!canUseApply) {
             var resultStr = "";
             for(var i = 0; i < array.length;i++) {
                resultStr += String.fromCharCode(array[i]);
             }
        return resultStr;
        }
        while (k < len && chunk > 1) {
            try {
                if (type === "array" || type === "nodebuffer") {
                    result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
                }
                else {
                    result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
                }
                k += chunk;
            }
            catch (e) {
                chunk = Math.floor(chunk / 2);
            }
        }
        return result.join("");
    }
    
    exports.applyFromCharCode = arrayLikeToString;
    
    
    /**
     * Copy the data from an array-like to an other array-like.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
     * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
     */
    function arrayLikeToArrayLike(arrayFrom, arrayTo) {
        for (var i = 0; i < arrayFrom.length; i++) {
            arrayTo[i] = arrayFrom[i];
        }
        return arrayTo;
    }
    
    // a matrix containing functions to transform everything into everything.
    var transform = {};
    
    // string to ?
    transform["string"] = {
        "string": identity,
        "array": function(input) {
            return stringToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function(input) {
            return transform["string"]["uint8array"](input).buffer;
        },
        "uint8array": function(input) {
            return stringToArrayLike(input, new Uint8Array(input.length));
        },
        "nodebuffer": function(input) {
            return stringToArrayLike(input, nodeBuffer(input.length));
        }
    };
    
    // array to ?
    transform["array"] = {
        "string": arrayLikeToString,
        "array": identity,
        "arraybuffer": function(input) {
            return (new Uint8Array(input)).buffer;
        },
        "uint8array": function(input) {
            return new Uint8Array(input);
        },
        "nodebuffer": function(input) {
            return nodeBuffer(input);
        }
    };
    
    // arraybuffer to ?
    transform["arraybuffer"] = {
        "string": function(input) {
            return arrayLikeToString(new Uint8Array(input));
        },
        "array": function(input) {
            return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
        },
        "arraybuffer": identity,
        "uint8array": function(input) {
            return new Uint8Array(input);
        },
        "nodebuffer": function(input) {
            return nodeBuffer(new Uint8Array(input));
        }
    };
    
    // uint8array to ?
    transform["uint8array"] = {
        "string": arrayLikeToString,
        "array": function(input) {
            return arrayLikeToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function(input) {
            return input.buffer;
        },
        "uint8array": identity,
        "nodebuffer": function(input) {
            return nodeBuffer(input);
        }
    };
    
    // nodebuffer to ?
    transform["nodebuffer"] = {
        "string": arrayLikeToString,
        "array": function(input) {
            return arrayLikeToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function(input) {
            return transform["nodebuffer"]["uint8array"](input).buffer;
        },
        "uint8array": function(input) {
            return arrayLikeToArrayLike(input, new Uint8Array(input.length));
        },
        "nodebuffer": identity
    };
    
    /**
     * Transform an input into any type.
     * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
     * If no output type is specified, the unmodified input will be returned.
     * @param {String} outputType the output type.
     * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
     * @throws {Error} an Error if the browser doesn't support the requested output type.
     */
    exports.transformTo = function(outputType, input) {
        if (!input) {
            // undefined, null, etc
            // an empty string won't harm.
            input = "";
        }
        if (!outputType) {
            return input;
        }
        exports.checkSupport(outputType);
        var inputType = exports.getTypeOf(input);
        var result = transform[inputType][outputType](input);
        return result;
    };
    
    /**
     * Return the type of the input.
     * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
     * @param {Object} input the input to identify.
     * @return {String} the (lowercase) type of the input.
     */
    exports.getTypeOf = function(input) {
        if (typeof input === "string") {
            return "string";
        }
        if (Object.prototype.toString.call(input) === "[object Array]") {
            return "array";
        }
        if (support.nodebuffer && nodeBuffer.test(input)) {
            return "nodebuffer";
        }
        if (support.uint8array && input instanceof Uint8Array) {
            return "uint8array";
        }
        if (support.arraybuffer && input instanceof ArrayBuffer) {
            return "arraybuffer";
        }
    };
    
    /**
     * Throw an exception if the type is not supported.
     * @param {String} type the type to check.
     * @throws {Error} an Error if the browser doesn't support the requested type.
     */
    exports.checkSupport = function(type) {
        var supported = support[type.toLowerCase()];
        if (!supported) {
            throw new Error(type + " is not supported by this browser");
        }
    };
    exports.MAX_VALUE_16BITS = 65535;
    exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1
    
    /**
     * Prettify a string read as binary.
     * @param {string} str the string to prettify.
     * @return {string} a pretty string.
     */
    exports.pretty = function(str) {
        var res = '',
            code, i;
        for (i = 0; i < (str || "").length; i++) {
            code = str.charCodeAt(i);
            res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
        }
        return res;
    };
    
    /**
     * Find a compression registered in JSZip.
     * @param {string} compressionMethod the method magic to find.
     * @return {Object|null} the JSZip compression object, null if none found.
     */
    exports.findCompression = function(compressionMethod) {
        for (var method in compressions) {
            if (!compressions.hasOwnProperty(method)) {
                continue;
            }
            if (compressions[method].magic === compressionMethod) {
                return compressions[method];
            }
        }
        return null;
    };
    /**
    * Cross-window, cross-Node-context regular expression detection
    * @param  {Object}  object Anything
    * @return {Boolean}        true if the object is a regular expression,
    * false otherwise
    */
    exports.isRegExp = function (object) {
        return Object.prototype.toString.call(object) === "[object RegExp]";
    };
    
    
    },{"./compressions":3,"./nodeBuffer":11,"./support":17}],22:[function(_dereq_,module,exports){
    'use strict';
    var StringReader = _dereq_('./stringReader');
    var NodeBufferReader = _dereq_('./nodeBufferReader');
    var Uint8ArrayReader = _dereq_('./uint8ArrayReader');
    var utils = _dereq_('./utils');
    var sig = _dereq_('./signature');
    var ZipEntry = _dereq_('./zipEntry');
    var support = _dereq_('./support');
    var jszipProto = _dereq_('./object');
    //  class ZipEntries {{{
    /**
     * All the entries in the zip file.
     * @constructor
     * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
     * @param {Object} loadOptions Options for loading the stream.
     */
    function ZipEntries(data, loadOptions) {
        this.files = [];
        this.loadOptions = loadOptions;
        if (data) {
            this.load(data);
        }
    }
    ZipEntries.prototype = {
        /**
         * Check that the reader is on the speficied signature.
         * @param {string} expectedSignature the expected signature.
         * @throws {Error} if it is an other signature.
         */
        checkSignature: function(expectedSignature) {
            var signature = this.reader.readString(4);
            if (signature !== expectedSignature) {
                throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
            }
        },
        /**
         * Read the end of the central directory.
         */
        readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2);
            this.diskWithCentralDirStart = this.reader.readInt(2);
            this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
            this.centralDirRecords = this.reader.readInt(2);
            this.centralDirSize = this.reader.readInt(4);
            this.centralDirOffset = this.reader.readInt(4);
    
            this.zipCommentLength = this.reader.readInt(2);
            // warning : the encoding depends of the system locale
            // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
            // On a windows machine, this field is encoded with the localized windows code page.
            this.zipComment = this.reader.readString(this.zipCommentLength);
            // To get consistent behavior with the generation part, we will assume that
            // this is utf8 encoded.
            this.zipComment = jszipProto.utf8decode(this.zipComment);
        },
        /**
         * Read the end of the Zip 64 central directory.
         * Not merged with the method readEndOfCentral :
         * The end of central can coexist with its Zip64 brother,
         * I don't want to read the wrong number of bytes !
         */
        readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8);
            this.versionMadeBy = this.reader.readString(2);
            this.versionNeeded = this.reader.readInt(2);
            this.diskNumber = this.reader.readInt(4);
            this.diskWithCentralDirStart = this.reader.readInt(4);
            this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
            this.centralDirRecords = this.reader.readInt(8);
            this.centralDirSize = this.reader.readInt(8);
            this.centralDirOffset = this.reader.readInt(8);
    
            this.zip64ExtensibleData = {};
            var extraDataSize = this.zip64EndOfCentralSize - 44,
                index = 0,
                extraFieldId,
                extraFieldLength,
                extraFieldValue;
            while (index < extraDataSize) {
                extraFieldId = this.reader.readInt(2);
                extraFieldLength = this.reader.readInt(4);
                extraFieldValue = this.reader.readString(extraFieldLength);
                this.zip64ExtensibleData[extraFieldId] = {
                    id: extraFieldId,
                    length: extraFieldLength,
                    value: extraFieldValue
                };
            }
        },
        /**
         * Read the end of the Zip 64 central directory locator.
         */
        readBlockZip64EndOfCentralLocator: function() {
            this.diskWithZip64CentralDirStart = this.reader.readInt(4);
            this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
            this.disksCount = this.reader.readInt(4);
            if (this.disksCount > 1) {
                throw new Error("Multi-volumes zip are not supported");
            }
        },
        /**
         * Read the local files, based on the offset read in the central part.
         */
        readLocalFiles: function() {
            var i, file;
            for (i = 0; i < this.files.length; i++) {
                file = this.files[i];
                this.reader.setIndex(file.localHeaderOffset);
                this.checkSignature(sig.LOCAL_FILE_HEADER);
                file.readLocalPart(this.reader);
                file.handleUTF8();
            }
        },
        /**
         * Read the central directory.
         */
        readCentralDir: function() {
            var file;
    
            this.reader.setIndex(this.centralDirOffset);
            while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
                file = new ZipEntry({
                    zip64: this.zip64
                }, this.loadOptions);
                file.readCentralPart(this.reader);
                this.files.push(file);
            }
        },
        /**
         * Read the end of central directory.
         */
        readEndOfCentral: function() {
            var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
            if (offset === -1) {
                throw new Error("Corrupted zip : can't find end of central directory");
            }
            this.reader.setIndex(offset);
            this.checkSignature(sig.CENTRAL_DIRECTORY_END);
            this.readBlockEndOfCentral();
    
    
            /* extract from the zip spec :
                4)  If one of the fields in the end of central directory
                    record is too small to hold required data, the field
                    should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                    ZIP64 format record should be created.
                5)  The end of central directory record and the
                    Zip64 end of central directory locator record must
                    reside on the same disk when splitting or spanning
                    an archive.
             */
            if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
                this.zip64 = true;
    
                /*
                Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
                the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
                all numbers as 64-bit double precision IEEE 754 floating point numbers.
                So, we have 53bits for integers and bitwise operations treat everything as 32bits.
                see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
                and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
                */
    
                // should look for a zip64 EOCD locator
                offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                if (offset === -1) {
                    throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
                }
                this.reader.setIndex(offset);
                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                this.readBlockZip64EndOfCentralLocator();
    
                // now the zip64 EOCD record
                this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
                this.readBlockZip64EndOfCentral();
            }
        },
        prepareReader: function(data) {
            var type = utils.getTypeOf(data);
            if (type === "string" && !support.uint8array) {
                this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
            }
            else if (type === "nodebuffer") {
                this.reader = new NodeBufferReader(data);
            }
            else {
                this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
            }
        },
        /**
         * Read a zip file and create ZipEntries.
         * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
         */
        load: function(data) {
            this.prepareReader(data);
            this.readEndOfCentral();
            this.readCentralDir();
            this.readLocalFiles();
        }
    };
    // }}} end of ZipEntries
    module.exports = ZipEntries;
    
    },{"./nodeBufferReader":12,"./object":13,"./signature":14,"./stringReader":15,"./support":17,"./uint8ArrayReader":18,"./utils":21,"./zipEntry":23}],23:[function(_dereq_,module,exports){
    'use strict';
    var StringReader = _dereq_('./stringReader');
    var utils = _dereq_('./utils');
    var CompressedObject = _dereq_('./compressedObject');
    var jszipProto = _dereq_('./object');
    // class ZipEntry {{{
    /**
     * An entry in the zip file.
     * @constructor
     * @param {Object} options Options of the current file.
     * @param {Object} loadOptions Options for loading the stream.
     */
    function ZipEntry(options, loadOptions) {
        this.options = options;
        this.loadOptions = loadOptions;
    }
    ZipEntry.prototype = {
        /**
         * say if the file is encrypted.
         * @return {boolean} true if the file is encrypted, false otherwise.
         */
        isEncrypted: function() {
            // bit 1 is set
            return (this.bitFlag & 0x0001) === 0x0001;
        },
        /**
         * say if the file has utf-8 filename/comment.
         * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
         */
        useUTF8: function() {
            // bit 11 is set
            return (this.bitFlag & 0x0800) === 0x0800;
        },
        /**
         * Prepare the function used to generate the compressed content from this ZipFile.
         * @param {DataReader} reader the reader to use.
         * @param {number} from the offset from where we should read the data.
         * @param {number} length the length of the data to read.
         * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
         */
        prepareCompressedContent: function(reader, from, length) {
            return function() {
                var previousIndex = reader.index;
                reader.setIndex(from);
                var compressedFileData = reader.readData(length);
                reader.setIndex(previousIndex);
    
                return compressedFileData;
            };
        },
        /**
         * Prepare the function used to generate the uncompressed content from this ZipFile.
         * @param {DataReader} reader the reader to use.
         * @param {number} from the offset from where we should read the data.
         * @param {number} length the length of the data to read.
         * @param {JSZip.compression} compression the compression used on this file.
         * @param {number} uncompressedSize the uncompressed size to expect.
         * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
         */
        prepareContent: function(reader, from, length, compression, uncompressedSize) {
            return function() {
    
                var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
                var uncompressedFileData = compression.uncompress(compressedFileData);
    
                if (uncompressedFileData.length !== uncompressedSize) {
                    throw new Error("Bug : uncompressed data size mismatch");
                }
    
                return uncompressedFileData;
            };
        },
        /**
         * Read the local part of a zip file and add the info in this object.
         * @param {DataReader} reader the reader to use.
         */
        readLocalPart: function(reader) {
            var compression, localExtraFieldsLength;
    
            // we already know everything from the central dir !
            // If the central dir data are false, we are doomed.
            // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
            // The less data we get here, the more reliable this should be.
            // Let's skip the whole header and dash to the data !
            reader.skip(22);
            // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
            // Strangely, the filename here is OK.
            // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
            // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
            // Search "unzip mismatching "local" filename continuing with "central" filename version" on
            // the internet.
            //
            // I think I see the logic here : the central directory is used to display
            // content and the local directory is used to extract the files. Mixing / and \
            // may be used to display \ to windows users and use / when extracting the files.
            // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
            this.fileNameLength = reader.readInt(2);
            localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
            this.fileName = reader.readString(this.fileNameLength);
            reader.skip(localExtraFieldsLength);
    
            if (this.compressedSize == -1 || this.uncompressedSize == -1) {
                throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
            }
    
            compression = utils.findCompression(this.compressionMethod);
            if (compression === null) { // no compression found
                throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
            }
            this.decompressed = new CompressedObject();
            this.decompressed.compressedSize = this.compressedSize;
            this.decompressed.uncompressedSize = this.uncompressedSize;
            this.decompressed.crc32 = this.crc32;
            this.decompressed.compressionMethod = this.compressionMethod;
            this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
            this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);
    
            // we need to compute the crc32...
            if (this.loadOptions.checkCRC32) {
                this.decompressed = utils.transformTo("string", this.decompressed.getContent());
                if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                    throw new Error("Corrupted zip : CRC32 mismatch");
                }
            }
        },
    
        /**
         * Read the central part of a zip file and add the info in this object.
         * @param {DataReader} reader the reader to use.
         */
        readCentralPart: function(reader) {
            this.versionMadeBy = reader.readString(2);
            this.versionNeeded = reader.readInt(2);
            this.bitFlag = reader.readInt(2);
            this.compressionMethod = reader.readString(2);
            this.date = reader.readDate();
            this.crc32 = reader.readInt(4);
            this.compressedSize = reader.readInt(4);
            this.uncompressedSize = reader.readInt(4);
            this.fileNameLength = reader.readInt(2);
            this.extraFieldsLength = reader.readInt(2);
            this.fileCommentLength = reader.readInt(2);
            this.diskNumberStart = reader.readInt(2);
            this.internalFileAttributes = reader.readInt(2);
            this.externalFileAttributes = reader.readInt(4);
            this.localHeaderOffset = reader.readInt(4);
    
            if (this.isEncrypted()) {
                throw new Error("Encrypted zip are not supported");
            }
    
            this.fileName = reader.readString(this.fileNameLength);
            this.readExtraFields(reader);
            this.parseZIP64ExtraField(reader);
            this.fileComment = reader.readString(this.fileCommentLength);
    
            // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)
            this.dir = this.externalFileAttributes & 0x00000010 ? true : false;
        },
        /**
         * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
         * @param {DataReader} reader the reader to use.
         */
        parseZIP64ExtraField: function(reader) {
    
            if (!this.extraFields[0x0001]) {
                return;
            }
    
            // should be something, preparing the extra reader
            var extraReader = new StringReader(this.extraFields[0x0001].value);
    
            // I really hope that these 64bits integer can fit in 32 bits integer, because js
            // won't let us have more.
            if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
                this.uncompressedSize = extraReader.readInt(8);
            }
            if (this.compressedSize === utils.MAX_VALUE_32BITS) {
                this.compressedSize = extraReader.readInt(8);
            }
            if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
                this.localHeaderOffset = extraReader.readInt(8);
            }
            if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
                this.diskNumberStart = extraReader.readInt(4);
            }
        },
        /**
         * Read the central part of a zip file and add the info in this object.
         * @param {DataReader} reader the reader to use.
         */
        readExtraFields: function(reader) {
            var start = reader.index,
                extraFieldId,
                extraFieldLength,
                extraFieldValue;
    
            this.extraFields = this.extraFields || {};
    
            while (reader.index < start + this.extraFieldsLength) {
                extraFieldId = reader.readInt(2);
                extraFieldLength = reader.readInt(2);
                extraFieldValue = reader.readString(extraFieldLength);
    
                this.extraFields[extraFieldId] = {
                    id: extraFieldId,
                    length: extraFieldLength,
                    value: extraFieldValue
                };
            }
        },
        /**
         * Apply an UTF8 transformation if needed.
         */
        handleUTF8: function() {
            if (this.useUTF8()) {
                this.fileName = jszipProto.utf8decode(this.fileName);
                this.fileComment = jszipProto.utf8decode(this.fileComment);
            } else {
                var upath = this.findExtraFieldUnicodePath();
                if (upath !== null) {
                    this.fileName = upath;
                }
                var ucomment = this.findExtraFieldUnicodeComment();
                if (ucomment !== null) {
                    this.fileComment = ucomment;
                }
            }
        },
    
        /**
         * Find the unicode path declared in the extra field, if any.
         * @return {String} the unicode path, null otherwise.
         */
        findExtraFieldUnicodePath: function() {
            var upathField = this.extraFields[0x7075];
            if (upathField) {
                var extraReader = new StringReader(upathField.value);
    
                // wrong version
                if (extraReader.readInt(1) !== 1) {
                    return null;
                }
    
                // the crc of the filename changed, this field is out of date.
                if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                    return null;
                }
    
                return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
            }
            return null;
        },
    
        /**
         * Find the unicode comment declared in the extra field, if any.
         * @return {String} the unicode comment, null otherwise.
         */
        findExtraFieldUnicodeComment: function() {
            var ucommentField = this.extraFields[0x6375];
            if (ucommentField) {
                var extraReader = new StringReader(ucommentField.value);
    
                // wrong version
                if (extraReader.readInt(1) !== 1) {
                    return null;
                }
    
                // the crc of the comment changed, this field is out of date.
                if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                    return null;
                }
    
                return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
            }
            return null;
        }
    };
    module.exports = ZipEntry;
    
    },{"./compressedObject":2,"./object":13,"./stringReader":15,"./utils":21}],24:[function(_dereq_,module,exports){
    // Top level file is just a mixin of submodules & constants
    'use strict';
    
    var assign    = _dereq_('./lib/utils/common').assign;
    
    var deflate   = _dereq_('./lib/deflate');
    var inflate   = _dereq_('./lib/inflate');
    var constants = _dereq_('./lib/zlib/constants');
    
    var pako = {};
    
    assign(pako, deflate, inflate, constants);
    
    module.exports = pako;
    },{"./lib/deflate":25,"./lib/inflate":26,"./lib/utils/common":27,"./lib/zlib/constants":30}],25:[function(_dereq_,module,exports){
    'use strict';
    
    
    var zlib_deflate = _dereq_('./zlib/deflate.js');
    var utils = _dereq_('./utils/common');
    var strings = _dereq_('./utils/strings');
    var msg = _dereq_('./zlib/messages');
    var zstream = _dereq_('./zlib/zstream');
    
    
    /* Public constants ==========================================================*/
    /* ===========================================================================*/
    
    var Z_NO_FLUSH      = 0;
    var Z_FINISH        = 4;
    
    var Z_OK            = 0;
    var Z_STREAM_END    = 1;
    
    var Z_DEFAULT_COMPRESSION = -1;
    
    var Z_DEFAULT_STRATEGY    = 0;
    
    var Z_DEFLATED  = 8;
    
    /* ===========================================================================*/
    
    
    /**
     * class Deflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[deflate]],
     * [[deflateRaw]] and [[gzip]].
     **/
    
    /* internal
     * Deflate.chunks -> Array
     *
     * Chunks of output data, if [[Deflate#onData]] not overriden.
     **/
    
    /**
     * Deflate.result -> Uint8Array|Array
     *
     * Compressed result, generated by default [[Deflate#onData]]
     * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
     **/
    
    /**
     * Deflate.err -> Number
     *
     * Error code after deflate finished. 0 (Z_OK) on success.
     * You will not need it in real life, because deflate errors
     * are possible only on wrong options or bad `onData` / `onEnd`
     * custom handlers.
     **/
    
    /**
     * Deflate.msg -> String
     *
     * Error message, if [[Deflate.err]] != 0
     **/
    
    
    /**
     * new Deflate(options)
     * - options (Object): zlib deflate options.
     *
     * Creates new deflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `level`
     * - `windowBits`
     * - `memLevel`
     * - `strategy`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw deflate
     * - `gzip` (Boolean) - create gzip wrapper
     * - `to` (String) - if equal to 'string', then result will be "binary string"
     *    (each char code [0..255])
     * - `header` (Object) - custom header for gzip
     *   - `text` (Boolean) - true if compressed data believed to be text
     *   - `time` (Number) - modification time, unix timestamp
     *   - `os` (Number) - operation system code
     *   - `extra` (Array) - array of bytes with extra data (max 65536)
     *   - `name` (String) - file name (binary string)
     *   - `comment` (String) - comment (binary string)
     *   - `hcrc` (Boolean) - true if header crc should be added
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * var deflate = new pako.Deflate({ level: 3});
     *
     * deflate.push(chunk1, false);
     * deflate.push(chunk2, true);  // true -> last chunk
     *
     * if (deflate.err) { throw new Error(deflate.err); }
     *
     * console.log(deflate.result);
     * ```
     **/
    var Deflate = function(options) {
    
      this.options = utils.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY,
        to: ''
      }, options || {});
    
      var opt = this.options;
    
      if (opt.raw && (opt.windowBits > 0)) {
        opt.windowBits = -opt.windowBits;
      }
    
      else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
        opt.windowBits += 16;
      }
    
      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data
    
      this.strm = new zstream();
      this.strm.avail_out = 0;
    
      var status = zlib_deflate.deflateInit2(
        this.strm,
        opt.level,
        opt.method,
        opt.windowBits,
        opt.memLevel,
        opt.strategy
      );
    
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
    
      if (opt.header) {
        zlib_deflate.deflateSetHeader(this.strm, opt.header);
      }
    };
    
    /**
     * Deflate#push(data[, mode]) -> Boolean
     * - data (Uint8Array|Array|String): input data. Strings will be converted to
     *   utf8 byte sequence.
     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
     *
     * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
     * new compressed chunks. Returns `true` on success. The last data block must have
     * mode Z_FINISH (or `true`). That flush internal pending buffers and call
     * [[Deflate#onEnd]].
     *
     * On fail call [[Deflate#onEnd]] with error code and return false.
     *
     * We strongly recommend to use `Uint8Array` on input for best speed (output
     * array format is detected automatically). Also, don't skip last param and always
     * use the same type in your code (boolean or number). That will improve JS speed.
     *
     * For regular `Array`-s make sure all elements are [0..255].
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Deflate.prototype.push = function(data, mode) {
      var strm = this.strm;
      var chunkSize = this.options.chunkSize;
      var status, _mode;
    
      if (this.ended) { return false; }
    
      _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);
    
      // Convert data if needed
      if (typeof data === 'string') {
        // If we need to compress text, change encoding to utf8.
        strm.input = strings.string2buf(data);
      } else {
        strm.input = data;
      }
    
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
    
      do {
        if (strm.avail_out === 0) {
          strm.output = new utils.Buf8(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */
    
        if (status !== Z_STREAM_END && status !== Z_OK) {
          this.onEnd(status);
          this.ended = true;
          return false;
        }
        if (strm.avail_out === 0 || (strm.avail_in === 0 && _mode === Z_FINISH)) {
          if (this.options.to === 'string') {
            this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
          } else {
            this.onData(utils.shrinkBuf(strm.output, strm.next_out));
          }
        }
      } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);
    
      // Finalize on the last chunk.
      if (_mode === Z_FINISH) {
        status = zlib_deflate.deflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === Z_OK;
      }
    
      return true;
    };
    
    
    /**
     * Deflate#onData(chunk) -> Void
     * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
     *   on js engine support. When string output requested, each chunk
     *   will be string.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Deflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    
    
    /**
     * Deflate#onEnd(status) -> Void
     * - status (Number): deflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called once after you tell deflate that input stream complete
     * or error happenned. By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Deflate.prototype.onEnd = function(status) {
      // On success - join
      if (status === Z_OK) {
        if (this.options.to === 'string') {
          this.result = this.chunks.join('');
        } else {
          this.result = utils.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    
    
    /**
     * deflate(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * Compress `data` with deflate alrorythm and `options`.
     *
     * Supported options are:
     *
     * - level
     * - windowBits
     * - memLevel
     * - strategy
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     * - `to` (String) - if equal to 'string', then result will be "binary string"
     *    (each char code [0..255])
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
     *
     * console.log(pako.deflate(data));
     * ```
     **/
    function deflate(input, options) {
      var deflator = new Deflate(options);
    
      deflator.push(input, true);
    
      // That will never happens, if you don't cheat with options :)
      if (deflator.err) { throw deflator.msg; }
    
      return deflator.result;
    }
    
    
    /**
     * deflateRaw(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function deflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return deflate(input, options);
    }
    
    
    /**
     * gzip(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but create gzip wrapper instead of
     * deflate one.
     **/
    function gzip(input, options) {
      options = options || {};
      options.gzip = true;
      return deflate(input, options);
    }
    
    
    exports.Deflate = Deflate;
    exports.deflate = deflate;
    exports.deflateRaw = deflateRaw;
    exports.gzip = gzip;
    },{"./utils/common":27,"./utils/strings":28,"./zlib/deflate.js":32,"./zlib/messages":37,"./zlib/zstream":39}],26:[function(_dereq_,module,exports){
    'use strict';
    
    
    var zlib_inflate = _dereq_('./zlib/inflate.js');
    var utils = _dereq_('./utils/common');
    var strings = _dereq_('./utils/strings');
    var c = _dereq_('./zlib/constants');
    var msg = _dereq_('./zlib/messages');
    var zstream = _dereq_('./zlib/zstream');
    var gzheader = _dereq_('./zlib/gzheader');
    
    
    /**
     * class Inflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[inflate]]
     * and [[inflateRaw]].
     **/
    
    /* internal
     * inflate.chunks -> Array
     *
     * Chunks of output data, if [[Inflate#onData]] not overriden.
     **/
    
    /**
     * Inflate.result -> Uint8Array|Array|String
     *
     * Uncompressed result, generated by default [[Inflate#onData]]
     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
     **/
    
    /**
     * Inflate.err -> Number
     *
     * Error code after inflate finished. 0 (Z_OK) on success.
     * Should be checked if broken data possible.
     **/
    
    /**
     * Inflate.msg -> String
     *
     * Error message, if [[Inflate.err]] != 0
     **/
    
    
    /**
     * new Inflate(options)
     * - options (Object): zlib inflate options.
     *
     * Creates new inflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `windowBits`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw inflate
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     * By default, when no options set, autodetect deflate/gzip data format via
     * wrapper header.
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * var inflate = new pako.Inflate({ level: 3});
     *
     * inflate.push(chunk1, false);
     * inflate.push(chunk2, true);  // true -> last chunk
     *
     * if (inflate.err) { throw new Error(inflate.err); }
     *
     * console.log(inflate.result);
     * ```
     **/
    var Inflate = function(options) {
    
      this.options = utils.assign({
        chunkSize: 16384,
        windowBits: 0,
        to: ''
      }, options || {});
    
      var opt = this.options;
    
      // Force window size for `raw` data, if not set directly,
      // because we have no header for autodetect.
      if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) { opt.windowBits = -15; }
      }
    
      // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
      if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
          !(options && options.windowBits)) {
        opt.windowBits += 32;
      }
    
      // Gzip header has no info about windows size, we can do autodetect only
      // for deflate. So, if window size not set, force it to max when gzip possible
      if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
        // bit 3 (16) -> gzipped data
        // bit 4 (32) -> autodetect gzip/deflate
        if ((opt.windowBits & 15) === 0) {
          opt.windowBits |= 15;
        }
      }
    
      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data
    
      this.strm   = new zstream();
      this.strm.avail_out = 0;
    
      var status  = zlib_inflate.inflateInit2(
        this.strm,
        opt.windowBits
      );
    
      if (status !== c.Z_OK) {
        throw new Error(msg[status]);
      }
    
      this.header = new gzheader();
    
      zlib_inflate.inflateGetHeader(this.strm, this.header);
    };
    
    /**
     * Inflate#push(data[, mode]) -> Boolean
     * - data (Uint8Array|Array|String): input data
     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
     *
     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
     * new output chunks. Returns `true` on success. The last data block must have
     * mode Z_FINISH (or `true`). That flush internal pending buffers and call
     * [[Inflate#onEnd]].
     *
     * On fail call [[Inflate#onEnd]] with error code and return false.
     *
     * We strongly recommend to use `Uint8Array` on input for best speed (output
     * format is detected automatically). Also, don't skip last param and always
     * use the same type in your code (boolean or number). That will improve JS speed.
     *
     * For regular `Array`-s make sure all elements are [0..255].
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Inflate.prototype.push = function(data, mode) {
      var strm = this.strm;
      var chunkSize = this.options.chunkSize;
      var status, _mode;
      var next_out_utf8, tail, utf8str;
    
      if (this.ended) { return false; }
      _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);
    
      // Convert data if needed
      if (typeof data === 'string') {
        // Only binary strings can be decompressed on practice
        strm.input = strings.binstring2buf(data);
      } else {
        strm.input = data;
      }
    
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
    
      do {
        if (strm.avail_out === 0) {
          strm.output = new utils.Buf8(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
    
        status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */
    
        if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
          this.onEnd(status);
          this.ended = true;
          return false;
        }
    
        if (strm.next_out) {
          if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && _mode === c.Z_FINISH)) {
    
            if (this.options.to === 'string') {
    
              next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
    
              tail = strm.next_out - next_out_utf8;
              utf8str = strings.buf2string(strm.output, next_out_utf8);
    
              // move tail
              strm.next_out = tail;
              strm.avail_out = chunkSize - tail;
              if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }
    
              this.onData(utf8str);
    
            } else {
              this.onData(utils.shrinkBuf(strm.output, strm.next_out));
            }
          }
        }
      } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);
    
      if (status === c.Z_STREAM_END) {
        _mode = c.Z_FINISH;
      }
      // Finalize on the last chunk.
      if (_mode === c.Z_FINISH) {
        status = zlib_inflate.inflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === c.Z_OK;
      }
    
      return true;
    };
    
    
    /**
     * Inflate#onData(chunk) -> Void
     * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
     *   on js engine support. When string output requested, each chunk
     *   will be string.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Inflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    
    
    /**
     * Inflate#onEnd(status) -> Void
     * - status (Number): inflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called once after you tell inflate that input stream complete
     * or error happenned. By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Inflate.prototype.onEnd = function(status) {
      // On success - join
      if (status === c.Z_OK) {
        if (this.options.to === 'string') {
          // Glue & convert here, until we teach pako to send
          // utf8 alligned strings to onData
          this.result = this.chunks.join('');
        } else {
          this.result = utils.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    
    
    /**
     * inflate(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Decompress `data` with inflate/ungzip and `options`. Autodetect
     * format via wrapper header by default. That's why we don't provide
     * separate `ungzip` method.
     *
     * Supported options are:
     *
     * - windowBits
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
     *   , output;
     *
     * try {
     *   output = pako.inflate(input);
     * } catch (err)
     *   console.log(err);
     * }
     * ```
     **/
    function inflate(input, options) {
      var inflator = new Inflate(options);
    
      inflator.push(input, true);
    
      // That will never happens, if you don't cheat with options :)
      if (inflator.err) { throw inflator.msg; }
    
      return inflator.result;
    }
    
    
    /**
     * inflateRaw(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * The same as [[inflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function inflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return inflate(input, options);
    }
    
    
    /**
     * ungzip(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Just shortcut to [[inflate]], because it autodetects format
     * by header.content. Done for convenience.
     **/
    
    
    exports.Inflate = Inflate;
    exports.inflate = inflate;
    exports.inflateRaw = inflateRaw;
    exports.ungzip  = inflate;
    
    },{"./utils/common":27,"./utils/strings":28,"./zlib/constants":30,"./zlib/gzheader":33,"./zlib/inflate.js":35,"./zlib/messages":37,"./zlib/zstream":39}],27:[function(_dereq_,module,exports){
    'use strict';
    
    
    var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                    (typeof Uint16Array !== 'undefined') &&
                    (typeof Int32Array !== 'undefined');
    
    
    exports.assign = function (obj /*from1, from2, from3, ...*/) {
      var sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        var source = sources.shift();
        if (!source) { continue; }
    
        if (typeof(source) !== 'object') {
          throw new TypeError(source + 'must be non-object');
        }
    
        for (var p in source) {
          if (source.hasOwnProperty(p)) {
            obj[p] = source[p];
          }
        }
      }
    
      return obj;
    };
    
    
    // reduce buffer size, avoiding mem copy
    exports.shrinkBuf = function (buf, size) {
      if (buf.length === size) { return buf; }
      if (buf.subarray) { return buf.subarray(0, size); }
      buf.length = size;
      return buf;
    };
    
    
    var fnTyped = {
      arraySet: function (dest, src, src_offs, len, dest_offs) {
        if (src.subarray && dest.subarray) {
          dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
          return;
        }
        // Fallback to ordinary array
        for(var i=0; i<len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      },
      // Join array of chunks to single array.
      flattenChunks: function(chunks) {
        var i, l, len, pos, chunk, result;
    
        // calculate data length
        len = 0;
        for (i=0, l=chunks.length; i<l; i++) {
          len += chunks[i].length;
        }
    
        // join chunks
        result = new Uint8Array(len);
        pos = 0;
        for (i=0, l=chunks.length; i<l; i++) {
          chunk = chunks[i];
          result.set(chunk, pos);
          pos += chunk.length;
        }
    
        return result;
      }
    };
    
    var fnUntyped = {
      arraySet: function (dest, src, src_offs, len, dest_offs) {
        for(var i=0; i<len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      },
      // Join array of chunks to single array.
      flattenChunks: function(chunks) {
        return [].concat.apply([], chunks);
      }
    };
    
    
    // Enable/Disable typed arrays use, for testing
    //
    exports.setTyped = function (on) {
      if (on) {
        exports.Buf8  = Uint8Array;
        exports.Buf16 = Uint16Array;
        exports.Buf32 = Int32Array;
        exports.assign(exports, fnTyped);
      } else {
        exports.Buf8  = Array;
        exports.Buf16 = Array;
        exports.Buf32 = Array;
        exports.assign(exports, fnUntyped);
      }
    };
    
    exports.setTyped(TYPED_OK);
    },{}],28:[function(_dereq_,module,exports){
    // String encode/decode helpers
    'use strict';
    
    
    var utils = _dereq_('./common');
    
    
    // Quick check if we can use fast array to bin string conversion
    //
    // - apply(Array) can fail on Android 2.2
    // - apply(Uint8Array) can fail on iOS 5.1 Safary
    //
    var STR_APPLY_OK = true;
    var STR_APPLY_UIA_OK = true;
    
    try { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }
    try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }
    
    
    // Table with utf8 lengths (calculated by first byte of sequence)
    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
    // because max possible codepoint is 0x10ffff
    var _utf8len = new utils.Buf8(256);
    for (var i=0; i<256; i++) {
      _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
    }
    _utf8len[254]=_utf8len[254]=1; // Invalid sequence start
    
    
    // convert string to array (typed, when possible)
    exports.string2buf = function (str) {
      var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
    
      // count binary size
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
          c2 = str.charCodeAt(m_pos+1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
      }
    
      // allocate buffer
      buf = new utils.Buf8(buf_len);
    
      // convert
      for (i=0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
          c2 = str.charCodeAt(m_pos+1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        if (c < 0x80) {
          /* one byte */
          buf[i++] = c;
        } else if (c < 0x800) {
          /* two bytes */
          buf[i++] = 0xC0 | (c >>> 6);
          buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
          /* three bytes */
          buf[i++] = 0xE0 | (c >>> 12);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        } else {
          /* four bytes */
          buf[i++] = 0xf0 | (c >>> 18);
          buf[i++] = 0x80 | (c >>> 12 & 0x3f);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        }
      }
    
      return buf;
    };
    
    // Helper (used in 2 places)
    function buf2binstring(buf, len) {
      // use fallback for big arrays to avoid stack overflow
      if (len < 65537) {
        if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
          return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
        }
      }
    
      var result = '';
      for(var i=0; i < len; i++) {
        result += String.fromCharCode(buf[i]);
      }
      return result;
    }
    
    
    // Convert byte array to binary string
    exports.buf2binstring = function(buf) {
      return buf2binstring(buf, buf.length);
    };
    
    
    // Convert binary string (typed, when possible)
    exports.binstring2buf = function(str) {
      var buf = new utils.Buf8(str.length);
      for(var i=0, len=buf.length; i < len; i++) {
        buf[i] = str.charCodeAt(i);
      }
      return buf;
    };
    
    
    // convert array to string
    exports.buf2string = function (buf, max) {
      var i, out, c, c_len;
      var len = max || buf.length;
    
      // Reserve max possible length (2 words per char)
      // NB: by unknown reasons, Array is significantly faster for
      //     String.fromCharCode.apply than Uint16Array.
      var utf16buf = new Array(len*2);
    
      for (out=0, i=0; i<len;) {
        c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }
    
        c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }
    
        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
          c = (c << 6) | (buf[i++] & 0x3f);
          c_len--;
        }
    
        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
    
        if (c < 0x10000) {
          utf16buf[out++] = c;
        } else {
          c -= 0x10000;
          utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
          utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
      }
    
      return buf2binstring(utf16buf, out);
    };
    
    
    // Calculate max possible position in utf8 buffer,
    // that will not break sequence. If that's not possible
    // - (very small limits) return max size as is.
    //
    // buf[] - utf8 bytes array
    // max   - length limit (mandatory);
    exports.utf8border = function(buf, max) {
      var pos;
    
      max = max || buf.length;
      if (max > buf.length) { max = buf.length; }
    
      // go back from last position, until start of sequence found
      pos = max-1;
      while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
    
      // Fuckup - very small and broken sequence,
      // return max, because we should return something anyway.
      if (pos < 0) { return max; }
    
      // If we came to start of buffer - that means vuffer is too small,
      // return max too.
      if (pos === 0) { return max; }
    
      return (pos + _utf8len[buf[pos]] > max) ? pos : max;
    };
    
    },{"./common":27}],29:[function(_dereq_,module,exports){
    'use strict';
    
    // Note: adler32 takes 12% for level 0 and 2% for level 6.
    // It doesn't worth to make additional optimizationa as in original.
    // Small size is preferable.
    
    function adler32(adler, buf, len, pos) {
      var s1 = (adler & 0xffff) |0
        , s2 = ((adler >>> 16) & 0xffff) |0
        , n = 0;
    
      while (len !== 0) {
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;
    
        do {
          s1 = (s1 + buf[pos++]) |0;
          s2 = (s2 + s1) |0;
        } while (--n);
    
        s1 %= 65521;
        s2 %= 65521;
      }
    
      return (s1 | (s2 << 16)) |0;
    }
    
    
    module.exports = adler32;
    },{}],30:[function(_dereq_,module,exports){
    module.exports = {
    
      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH:         0,
      Z_PARTIAL_FLUSH:    1,
      Z_SYNC_FLUSH:       2,
      Z_FULL_FLUSH:       3,
      Z_FINISH:           4,
      Z_BLOCK:            5,
      Z_TREES:            6,
    
      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK:               0,
      Z_STREAM_END:       1,
      Z_NEED_DICT:        2,
      Z_ERRNO:           -1,
      Z_STREAM_ERROR:    -2,
      Z_DATA_ERROR:      -3,
      //Z_MEM_ERROR:     -4,
      Z_BUF_ERROR:       -5,
      //Z_VERSION_ERROR: -6,
    
      /* compression levels */
      Z_NO_COMPRESSION:         0,
      Z_BEST_SPEED:             1,
      Z_BEST_COMPRESSION:       9,
      Z_DEFAULT_COMPRESSION:   -1,
    
    
      Z_FILTERED:               1,
      Z_HUFFMAN_ONLY:           2,
      Z_RLE:                    3,
      Z_FIXED:                  4,
      Z_DEFAULT_STRATEGY:       0,
    
      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY:                 0,
      Z_TEXT:                   1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN:                2,
    
      /* The deflate compression method */
      Z_DEFLATED:               8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };
    },{}],31:[function(_dereq_,module,exports){
    'use strict';
    
    // Note: we can't get significant speed boost here.
    // So write code to minimize size - no pregenerated tables
    // and array tools dependencies.
    
    
    // Use ordinary array, since untyped makes no boost here
    function makeTable() {
      var c, table = [];
    
      for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
          c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
      }
    
      return table;
    }
    
    // Create table on load. Just 255 signed longs. Not a problem.
    var crcTable = makeTable();
    
    
    function crc32(crc, buf, len, pos) {
      var t = crcTable
        , end = pos + len;
    
      crc = crc ^ (-1);
    
      for (var i = pos; i < end; i++ ) {
        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
      }
    
      return (crc ^ (-1)); // >>> 0;
    }
    
    
    module.exports = crc32;
    },{}],32:[function(_dereq_,module,exports){
    'use strict';
    
    var utils   = _dereq_('../utils/common');
    var trees   = _dereq_('./trees');
    var adler32 = _dereq_('./adler32');
    var crc32   = _dereq_('./crc32');
    var msg   = _dereq_('./messages');
    
    /* Public constants ==========================================================*/
    /* ===========================================================================*/
    
    
    /* Allowed flush values; see deflate() and inflate() below for details */
    var Z_NO_FLUSH      = 0;
    var Z_PARTIAL_FLUSH = 1;
    //var Z_SYNC_FLUSH    = 2;
    var Z_FULL_FLUSH    = 3;
    var Z_FINISH        = 4;
    var Z_BLOCK         = 5;
    //var Z_TREES         = 6;
    
    
    /* Return codes for the compression/decompression functions. Negative values
     * are errors, positive values are used for special but normal events.
     */
    var Z_OK            = 0;
    var Z_STREAM_END    = 1;
    //var Z_NEED_DICT     = 2;
    //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR  = -2;
    var Z_DATA_ERROR    = -3;
    //var Z_MEM_ERROR     = -4;
    var Z_BUF_ERROR     = -5;
    //var Z_VERSION_ERROR = -6;
    
    
    /* compression levels */
    //var Z_NO_COMPRESSION      = 0;
    //var Z_BEST_SPEED          = 1;
    //var Z_BEST_COMPRESSION    = 9;
    var Z_DEFAULT_COMPRESSION = -1;
    
    
    var Z_FILTERED            = 1;
    var Z_HUFFMAN_ONLY        = 2;
    var Z_RLE                 = 3;
    var Z_FIXED               = 4;
    var Z_DEFAULT_STRATEGY    = 0;
    
    /* Possible values of the data_type field (though see inflate()) */
    //var Z_BINARY              = 0;
    //var Z_TEXT                = 1;
    //var Z_ASCII               = 1; // = Z_TEXT
    var Z_UNKNOWN             = 2;
    
    
    /* The deflate compression method */
    var Z_DEFLATED  = 8;
    
    /*============================================================================*/
    
    
    var MAX_MEM_LEVEL = 9;
    /* Maximum value for memLevel in deflateInit2 */
    var MAX_WBITS = 15;
    /* 32K LZ77 window */
    var DEF_MEM_LEVEL = 8;
    
    
    var LENGTH_CODES  = 29;
    /* number of length codes, not counting the special END_BLOCK code */
    var LITERALS      = 256;
    /* number of literal bytes 0..255 */
    var L_CODES       = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */
    var D_CODES       = 30;
    /* number of distance codes */
    var BL_CODES      = 19;
    /* number of codes used to transfer the bit lengths */
    var HEAP_SIZE     = 2*L_CODES + 1;
    /* maximum heap size */
    var MAX_BITS  = 15;
    /* All codes must not exceed MAX_BITS bits */
    
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);
    
    var PRESET_DICT = 0x20;
    
    var INIT_STATE = 42;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;
    
    var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
    var BS_BLOCK_DONE     = 2; /* block flush performed */
    var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
    var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */
    
    var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
    
    function err(strm, errorCode) {
      strm.msg = msg[errorCode];
      return errorCode;
    }
    
    function rank(f) {
      return ((f) << 1) - ((f) > 4 ? 9 : 0);
    }
    
    function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
    
    
    /* =========================================================================
     * Flush as much pending output as possible. All deflate() output goes
     * through this function so some applications may wish to modify it
     * to avoid allocating a large strm->output buffer and copying into it.
     * (See also read_buf()).
     */
    function flush_pending(strm) {
      var s = strm.state;
    
      //_tr_flush_bits(s);
      var len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) { return; }
    
      utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    }
    
    
    function flush_block_only (s, last) {
      trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    }
    
    
    function put_byte(s, b) {
      s.pending_buf[s.pending++] = b;
    }
    
    
    /* =========================================================================
     * Put a short in the pending buffer. The 16-bit value is put in MSB order.
     * IN assertion: the stream state is correct and there is enough room in
     * pending_buf.
     */
    function putShortMSB(s, b) {
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
      s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
      s.pending_buf[s.pending++] = b & 0xff;
    }
    
    
    /* ===========================================================================
     * Read a new buffer from the current input stream, update the adler32
     * and total number of bytes read.  All deflate() input goes through
     * this function so some applications may wish to modify it to avoid
     * allocating a large strm->input buffer and copying from it.
     * (See also flush_pending()).
     */
    function read_buf(strm, buf, start, size) {
      var len = strm.avail_in;
    
      if (len > size) { len = size; }
      if (len === 0) { return 0; }
    
      strm.avail_in -= len;
    
      utils.arraySet(buf, strm.input, strm.next_in, len, start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len, start);
      }
    
      else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len, start);
      }
    
      strm.next_in += len;
      strm.total_in += len;
    
      return len;
    }
    
    
    /* ===========================================================================
     * Set match_start to the longest match starting at the given string and
     * return its length. Matches shorter or equal to prev_length are discarded,
     * in which case the result is equal to prev_length and match_start is
     * garbage.
     * IN assertions: cur_match is the head of the hash chain for the current
     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
     * OUT assertion: the match length is not greater than s->lookahead.
     */
    function longest_match(s, cur_match) {
      var chain_length = s.max_chain_length;      /* max hash chain length */
      var scan = s.strstart; /* current string */
      var match;                       /* matched string */
      var len;                           /* length of current match */
      var best_len = s.prev_length;              /* best match length so far */
      var nice_match = s.nice_match;             /* stop if match long enough */
      var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
          s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;
    
      var _win = s.window; // shortcut
    
      var wmask = s.w_mask;
      var prev  = s.prev;
    
      /* Stop when cur_match becomes <= limit. To simplify the code,
       * we prevent matches with the string of window index 0.
       */
    
      var strend = s.strstart + MAX_MATCH;
      var scan_end1  = _win[scan + best_len - 1];
      var scan_end   = _win[scan + best_len];
    
      /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
       * It is easy to get rid of this optimization if necessary.
       */
      // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
    
      /* Do not waste too much time if we already have a good match: */
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      /* Do not look for matches beyond the end of the input. This is necessary
       * to make deflate deterministic.
       */
      if (nice_match > s.lookahead) { nice_match = s.lookahead; }
    
      // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
    
      do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;
    
        /* Skip to next match if the match length cannot increase
         * or if the match length is less than 2.  Note that the checks below
         * for insufficient lookahead only occur occasionally for performance
         * reasons.  Therefore uninitialized memory will be accessed, and
         * conditional jumps will be made that depend on those values.
         * However the length of the match is limited to the lookahead, so
         * the output of deflate is not affected by the uninitialized values.
         */
    
        if (_win[match + best_len]     !== scan_end  ||
            _win[match + best_len - 1] !== scan_end1 ||
            _win[match]                !== _win[scan] ||
            _win[++match]              !== _win[scan + 1]) {
          continue;
        }
    
        /* The check at best_len-1 can be removed because it will be made
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");
    
        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
          /*jshint noempty:false*/
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 scan < strend);
    
        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
    
        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;
    
        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1  = _win[scan + best_len - 1];
          scan_end   = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
    
      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    }
    
    
    /* ===========================================================================
     * Fill the window when the lookahead becomes insufficient.
     * Updates strstart and lookahead.
     *
     * IN assertion: lookahead < MIN_LOOKAHEAD
     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
     *    At least one byte has been read, or avail_in == 0; reads are
     *    performed for at least two bytes (required for the zip translate_eol
     *    option -- not supported here).
     */
    function fill_window(s) {
      var _w_size = s.w_size;
      var p, n, m, more, str;
    
      //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
    
      do {
        more = s.window_size - s.lookahead - s.strstart;
    
        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */
        //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}
    
    
        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
    
          utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          /* we now have strstart >= MAX_DIST */
          s.block_start -= _w_size;
    
          /* Slide the hash table (could be avoided with 32 bit values
           at the expense of memory usage). We slide even when level == 0
           to keep the hash table consistent if we switch back to level > 0
           later. (Using level 0 permanently is not an optimal usage of
           zlib, so we don't care about this pathological case.)
           */
    
          n = s.hash_size;
          p = n;
          do {
            m = s.head[--p];
            s.head[p] = (m >= _w_size ? m - _w_size : 0);
          } while (--n);
    
          n = _w_size;
          p = n;
          do {
            m = s.prev[--p];
            s.prev[p] = (m >= _w_size ? m - _w_size : 0);
            /* If n is not on any hash chain, prev[n] is garbage but
             * its value will never be used.
             */
          } while (--n);
    
          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }
    
        /* If there was no sliding:
         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
         *    more == window_size - lookahead - strstart
         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
         * => more >= window_size - 2*WSIZE + 2
         * In the BIG_MEM or MMAP case (not yet supported),
         *   window_size == input_size + MIN_LOOKAHEAD  &&
         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
    
        /* Initialize the hash value now that we have some input: */
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];
    
          /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
    //#if MIN_MATCH != 3
    //        Call update_hash() MIN_MATCH-3 more times
    //#endif
          while (s.insert) {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;
    
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */
    
      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
    
      /* If the WIN_INIT bytes after the end of the current data have never been
       * written, then zero those bytes in order to avoid memory check reports of
       * the use of uninitialized (or uninitialised as Julian writes) bytes by
       * the longest match routines.  Update the high water mark for the next
       * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
       * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
       */
    //  if (s.high_water < s.window_size) {
    //    var curr = s.strstart + s.lookahead;
    //    var init = 0;
    //
    //    if (s.high_water < curr) {
    //      /* Previous high water mark below current data -- zero WIN_INIT
    //       * bytes or up to end of window, whichever is less.
    //       */
    //      init = s.window_size - curr;
    //      if (init > WIN_INIT)
    //        init = WIN_INIT;
    //      zmemzero(s->window + curr, (unsigned)init);
    //      s->high_water = curr + init;
    //    }
    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
    //      /* High water mark at or above current data, but below current data
    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
    //       * to end of window, whichever is less.
    //       */
    //      init = (ulg)curr + WIN_INIT - s->high_water;
    //      if (init > s->window_size - s->high_water)
    //        init = s->window_size - s->high_water;
    //      zmemzero(s->window + s->high_water, (unsigned)init);
    //      s->high_water += init;
    //    }
    //  }
    //
    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
    //    "not enough room for search");
    }
    
    /* ===========================================================================
     * Copy without compression as much as possible from the input stream, return
     * the current block state.
     * This function does not insert new strings in the dictionary since
     * uncompressible data is probably not useful. This function is used
     * only for the level=0 compression option.
     * NOTE: this function should be optimized to avoid extra copying from
     * window to pending_buf.
     */
    function deflate_stored(s, flush) {
      /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
       * to pending_buf_size, and each stored block has a 5 byte header:
       */
      var max_block_size = 0xffff;
    
      if (max_block_size > s.pending_buf_size - 5) {
        max_block_size = s.pending_buf_size - 5;
      }
    
      /* Copy as much as possible from input to output: */
      for (;;) {
        /* Fill the window as much as possible: */
        if (s.lookahead <= 1) {
    
          //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
          //  s->block_start >= (long)s->w_size, "slide too late");
    //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
    //        s.block_start >= s.w_size)) {
    //        throw  new Error("slide too late");
    //      }
    
          fill_window(s);
          if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
    
          if (s.lookahead === 0) {
            break;
          }
          /* flush the current block */
        }
        //Assert(s->block_start >= 0L, "block gone");
    //    if (s.block_start < 0) throw new Error("block gone");
    
        s.strstart += s.lookahead;
        s.lookahead = 0;
    
        /* Emit a stored block if pending_buf will be full: */
        var max_start = s.block_start + max_block_size;
    
        if (s.strstart === 0 || s.strstart >= max_start) {
          /* strstart == 0 is possible when wraparound on 16-bit machine */
          s.lookahead = s.strstart - max_start;
          s.strstart = max_start;
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
    
    
        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
    
      s.insert = 0;
    
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
    
      if (s.strstart > s.block_start) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    
      return BS_NEED_MORE;
    }
    
    /* ===========================================================================
     * Compress as much as possible from the input stream, return the current
     * block state.
     * This function does not perform lazy evaluation of matches and inserts
     * new strings in the dictionary only for unmatched strings or for short
     * matches. It is used only for the fast compression options.
     */
    function deflate_fast(s, flush) {
      var hash_head;        /* head of the hash chain */
      var bflush;           /* set if current block must be flushed */
    
      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break; /* flush the current block */
          }
        }
    
        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
    
        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */
        }
        if (s.match_length >= MIN_MATCH) {
          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
    
          /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
          bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
    
          s.lookahead -= s.match_length;
    
          /* Insert new strings in the hash table only if the match length
           * is not too large. This saves time but degrades compression.
           */
          if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
            s.match_length--; /* string at strstart already in table */
            do {
              s.strstart++;
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
              /* strstart never exceeds WSIZE-MAX_MATCH, so there are
               * always MIN_MATCH bytes ahead.
               */
            } while (--s.match_length !== 0);
            s.strstart++;
          } else
          {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;
    
    //#if MIN_MATCH != 3
    //                Call UPDATE_HASH() MIN_MATCH-3 more times
    //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
             * matter since it will be recomputed at next deflate call.
             */
          }
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s.window[s.strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }
    
    /* ===========================================================================
     * Same as above, but achieves better compression. We use a lazy
     * evaluation for matches: a match is finally adopted only if there is
     * no better match at the next window position.
     */
    function deflate_slow(s, flush) {
      var hash_head;          /* head of hash chain */
      var bflush;              /* set if current block must be flushed */
    
      var max_insert;
    
      /* Process the input block. */
      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }
    
        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
    
        /* Find the longest match, discarding those <= prev_length.
         */
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH-1;
    
        if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
            s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */
    
          if (s.match_length <= 5 &&
             (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {
    
            /* If prev_match is also MIN_MATCH, match_start is garbage
             * but we will ignore the current match anyway.
             */
            s.match_length = MIN_MATCH-1;
          }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          /* Do not insert strings in hash table beyond this. */
    
          //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
    
          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
          bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
          /* Insert in hash table all strings up to the end of the match.
           * strstart-1 and strstart are already inserted. If there is not
           * enough lookahead, the last two strings are not inserted in
           * the hash table.
           */
          s.lookahead -= s.prev_length-1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH-1;
          s.strstart++;
    
          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/
          }
    
        } else if (s.match_available) {
          /* If there was no match at the previous position, output a
           * single literal. If there was a match but the current match
           * is longer, truncate the previous match to a single literal.
           */
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));
          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);
    
          if (bflush) {
            /*** FLUSH_BLOCK_ONLY(s, 0) ***/
            flush_block_only(s, false);
            /***/
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          /* There is no previous match to compare with, wait for
           * the next step to decide.
           */
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      //Assert (flush != Z_NO_FLUSH, "no flush?");
      if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);
    
        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    
      return BS_BLOCK_DONE;
    }
    
    
    /* ===========================================================================
     * For Z_RLE, simply look for runs of bytes, generate matches only of distance
     * one.  Do not maintain a hash table.  (It will be regenerated if this run of
     * deflate switches away from Z_RLE.)
     */
    function deflate_rle(s, flush) {
      var bflush;            /* set if current block must be flushed */
      var prev;              /* byte at distance one to match */
      var scan, strend;      /* scan goes up to strend for length of run */
    
      var _win = s.window;
    
      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the longest run, plus one for the unrolled loop.
         */
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }
    
        /* See how many times the previous byte repeats */
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
              /*jshint noempty:false*/
            } while (prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
          //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }
    
        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
        if (s.match_length >= MIN_MATCH) {
          //check_match(s, s.strstart, s.strstart - 1, s.match_length);
    
          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
          bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
    
          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s->window[s->strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }
    
    /* ===========================================================================
     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
     * (It will be regenerated if this run of deflate switches away from Huffman.)
     */
    function deflate_huff(s, flush) {
      var bflush;             /* set if current block must be flushed */
    
      for (;;) {
        /* Make sure that we have a literal to write. */
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }
            break;      /* flush the current block */
          }
        }
    
        /* Output a literal byte */
        s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }
    
    /* Values for max_lazy_match, good_match and max_chain_length, depending on
     * the desired pack level (0..9). The values given below have been tuned to
     * exclude worst case performance for pathological files. Better values may be
     * found for specific files.
     */
    var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    };
    
    var configuration_table;
    
    configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),          /* 3 */
    
      new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
    ];
    
    
    /* ===========================================================================
     * Initialize the "longest match" routines for a new zlib stream
     */
    function lm_init(s) {
      s.window_size = 2 * s.w_size;
    
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
    
      /* Set the default configuration parameters:
       */
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;
    
      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    }
    
    
    function DeflateState() {
      this.strm = null;            /* pointer back to this zlib stream */
      this.status = 0;            /* as the name implies */
      this.pending_buf = null;      /* output still pending */
      this.pending_buf_size = 0;  /* size of pending_buf */
      this.pending_out = 0;       /* next pending byte to output to the stream */
      this.pending = 0;           /* nb of bytes in the pending buffer */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.gzhead = null;         /* gzip header information to write */
      this.gzindex = 0;           /* where in extra, name, or comment */
      this.method = Z_DEFLATED; /* can only be DEFLATED */
      this.last_flush = -1;   /* value of flush param for previous deflate call */
    
      this.w_size = 0;  /* LZ77 window size (32K by default) */
      this.w_bits = 0;  /* log2(w_size)  (8..16) */
      this.w_mask = 0;  /* w_size - 1 */
    
      this.window = null;
      /* Sliding window. Input bytes are read into the second half of the window,
       * and move to the first half later to keep a dictionary of at least wSize
       * bytes. With this organization, matches are limited to a distance of
       * wSize-MAX_MATCH bytes, but this ensures that IO is always
       * performed with a length multiple of the block size.
       */
    
      this.window_size = 0;
      /* Actual size of window: 2*wSize, except when the user input buffer
       * is directly used as sliding window.
       */
    
      this.prev = null;
      /* Link to older string with same hash index. To limit the size of this
       * array to 64K, this link is maintained only for the last 32K strings.
       * An index in this array is thus a window index modulo 32K.
       */
    
      this.head = null;   /* Heads of the hash chains or NIL. */
    
      this.ins_h = 0;       /* hash index of string to be inserted */
      this.hash_size = 0;   /* number of elements in hash table */
      this.hash_bits = 0;   /* log2(hash_size) */
      this.hash_mask = 0;   /* hash_size-1 */
    
      this.hash_shift = 0;
      /* Number of bits by which ins_h must be shifted at each input
       * step. It must be such that after MIN_MATCH steps, the oldest
       * byte no longer takes part in the hash key, that is:
       *   hash_shift * MIN_MATCH >= hash_bits
       */
    
      this.block_start = 0;
      /* Window position at the beginning of the current output block. Gets
       * negative when the window is moved backwards.
       */
    
      this.match_length = 0;      /* length of best match */
      this.prev_match = 0;        /* previous match */
      this.match_available = 0;   /* set if previous match exists */
      this.strstart = 0;          /* start of string to insert */
      this.match_start = 0;       /* start of matching string */
      this.lookahead = 0;         /* number of valid bytes ahead in window */
    
      this.prev_length = 0;
      /* Length of the best match at previous step. Matches not greater than this
       * are discarded. This is used in the lazy match evaluation.
       */
    
      this.max_chain_length = 0;
      /* To speed up deflation, hash chains are never searched beyond this
       * length.  A higher limit improves compression ratio but degrades the
       * speed.
       */
    
      this.max_lazy_match = 0;
      /* Attempt to find a better match only when the current match is strictly
       * smaller than this value. This mechanism is used only for compression
       * levels >= 4.
       */
      // That's alias to max_lazy_match, don't use directly
      //this.max_insert_length = 0;
      /* Insert new strings in the hash table only if the match length is not
       * greater than this length. This saves time but degrades compression.
       * max_insert_length is used only for compression levels <= 3.
       */
    
      this.level = 0;     /* compression level (1..9) */
      this.strategy = 0;  /* favor or force Huffman coding*/
    
      this.good_match = 0;
      /* Use a faster search when the previous match is longer than this */
    
      this.nice_match = 0; /* Stop searching when current match exceeds this */
    
                  /* used by trees.c: */
    
      /* Didn't use ct_data typedef below to suppress compiler warning */
    
      // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
    
      // Use flat array of DOUBLE size, with interleaved fata,
      // because JS does not support effective
      this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
      this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
      this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);
    
      this.l_desc   = null;         /* desc. for literal tree */
      this.d_desc   = null;         /* desc. for distance tree */
      this.bl_desc  = null;         /* desc. for bit length tree */
    
      //ush bl_count[MAX_BITS+1];
      this.bl_count = new utils.Buf16(MAX_BITS+1);
      /* number of codes at each bit length for an optimal tree */
    
      //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
      this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
      zero(this.heap);
    
      this.heap_len = 0;               /* number of elements in the heap */
      this.heap_max = 0;               /* element of largest frequency */
      /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
       * The same heap array is used to build all trees.
       */
    
      this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
      zero(this.depth);
      /* Depth of each subtree used as tie breaker for trees of equal frequency
       */
    
      this.l_buf = 0;          /* buffer index for literals or lengths */
    
      this.lit_bufsize = 0;
      /* Size of match buffer for literals/lengths.  There are 4 reasons for
       * limiting lit_bufsize to 64K:
       *   - frequencies can be kept in 16 bit counters
       *   - if compression is not successful for the first block, all input
       *     data is still in the window so we can still emit a stored block even
       *     when input comes from standard input.  (This can also be done for
       *     all blocks if lit_bufsize is not greater than 32K.)
       *   - if compression is not successful for a file smaller than 64K, we can
       *     even emit a stored file instead of a stored block (saving 5 bytes).
       *     This is applicable only for zip (not gzip or zlib).
       *   - creating new Huffman trees less frequently may not provide fast
       *     adaptation to changes in the input data statistics. (Take for
       *     example a binary file with poorly compressible code followed by
       *     a highly compressible string table.) Smaller buffer sizes give
       *     fast adaptation but have of course the overhead of transmitting
       *     trees more frequently.
       *   - I can't count above 4
       */
    
      this.last_lit = 0;      /* running index in l_buf */
    
      this.d_buf = 0;
      /* Buffer index for distances. To simplify the code, d_buf and l_buf have
       * the same number of elements. To use different lengths, an extra flag
       * array would be necessary.
       */
    
      this.opt_len = 0;       /* bit length of current block with optimal trees */
      this.static_len = 0;    /* bit length of current block with static trees */
      this.matches = 0;       /* number of string matches in current block */
      this.insert = 0;        /* bytes at end of window left to insert */
    
    
      this.bi_buf = 0;
      /* Output buffer. bits are inserted starting at the bottom (least
       * significant bits).
       */
      this.bi_valid = 0;
      /* Number of valid bits in bi_buf.  All bits above the last valid bit
       * are always zero.
       */
    
      // Used for window memory init. We safely ignore it for JS. That makes
      // sense only for pointers and memory check tools.
      //this.high_water = 0;
      /* High water mark offset in window for initialized bytes -- bytes above
       * this are set to zero in order to avoid memory check warnings when
       * longest match routines access bytes past the input.  This is then
       * updated to the new high water mark.
       */
    }
    
    
    function deflateResetKeep(strm) {
      var s;
    
      if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR);
      }
    
      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;
    
      s = strm.state;
      s.pending = 0;
      s.pending_out = 0;
    
      if (s.wrap < 0) {
        s.wrap = -s.wrap;
        /* was made negative by deflate(..., Z_FINISH); */
      }
      s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
      strm.adler = (s.wrap === 2) ?
        0  // crc32(0, Z_NULL, 0)
      :
        1; // adler32(0, Z_NULL, 0)
      s.last_flush = Z_NO_FLUSH;
      trees._tr_init(s);
      return Z_OK;
    }
    
    
    function deflateReset(strm) {
      var ret = deflateResetKeep(strm);
      if (ret === Z_OK) {
        lm_init(strm.state);
      }
      return ret;
    }
    
    
    function deflateSetHeader(strm, head) {
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
      strm.state.gzhead = head;
      return Z_OK;
    }
    
    
    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
      if (!strm) { // === Z_NULL
        return Z_STREAM_ERROR;
      }
      var wrap = 1;
    
      if (level === Z_DEFAULT_COMPRESSION) {
        level = 6;
      }
    
      if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
      }
    
      else if (windowBits > 15) {
        wrap = 2;           /* write gzip wrapper instead */
        windowBits -= 16;
      }
    
    
      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
        return err(strm, Z_STREAM_ERROR);
      }
    
    
      if (windowBits === 8) {
        windowBits = 9;
      }
      /* until 256-byte window bug fixed */
    
      var s = new DeflateState();
    
      strm.state = s;
      s.strm = strm;
    
      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;
    
      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
    
      s.window = new utils.Buf8(s.w_size * 2);
      s.head = new utils.Buf16(s.hash_size);
      s.prev = new utils.Buf16(s.w_size);
    
      // Don't need mem init magic for JS.
      //s.high_water = 0;  /* nothing written to s->window yet */
    
      s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
    
      s.pending_buf_size = s.lit_bufsize * 4;
      s.pending_buf = new utils.Buf8(s.pending_buf_size);
    
      s.d_buf = s.lit_bufsize >> 1;
      s.l_buf = (1 + 2) * s.lit_bufsize;
    
      s.level = level;
      s.strategy = strategy;
      s.method = method;
    
      return deflateReset(strm);
    }
    
    function deflateInit(strm, level) {
      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    }
    
    
    function deflate(strm, flush) {
      var old_flush, s;
      var beg, val; // for gzip header write only
    
      if (!strm || !strm.state ||
        flush > Z_BLOCK || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      }
    
      s = strm.state;
    
      if (!strm.output ||
          (!strm.input && strm.avail_in !== 0) ||
          (s.status === FINISH_STATE && flush !== Z_FINISH)) {
        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
      }
    
      s.strm = strm; /* just in case */
      old_flush = s.last_flush;
      s.last_flush = flush;
    
      /* Write the header */
      if (s.status === INIT_STATE) {
    
        if (s.wrap === 2) { // GZIP header
          strm.adler = 0;  //crc32(0L, Z_NULL, 0);
          put_byte(s, 31);
          put_byte(s, 139);
          put_byte(s, 8);
          if (!s.gzhead) { // s->gzhead == Z_NULL
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, s.level === 9 ? 2 :
                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                         4 : 0));
            put_byte(s, OS_CODE);
            s.status = BUSY_STATE;
          }
          else {
            put_byte(s, (s.gzhead.text ? 1 : 0) +
                        (s.gzhead.hcrc ? 2 : 0) +
                        (!s.gzhead.extra ? 0 : 4) +
                        (!s.gzhead.name ? 0 : 8) +
                        (!s.gzhead.comment ? 0 : 16)
                    );
            put_byte(s, s.gzhead.time & 0xff);
            put_byte(s, (s.gzhead.time >> 8) & 0xff);
            put_byte(s, (s.gzhead.time >> 16) & 0xff);
            put_byte(s, (s.gzhead.time >> 24) & 0xff);
            put_byte(s, s.level === 9 ? 2 :
                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                         4 : 0));
            put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
              put_byte(s, s.gzhead.extra.length & 0xff);
              put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
            }
            if (s.gzhead.hcrc) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
            }
            s.gzindex = 0;
            s.status = EXTRA_STATE;
          }
        }
        else // DEFLATE header
        {
          var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
          var level_flags = -1;
    
          if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
            level_flags = 0;
          } else if (s.level < 6) {
            level_flags = 1;
          } else if (s.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }
          header |= (level_flags << 6);
          if (s.strstart !== 0) { header |= PRESET_DICT; }
          header += 31 - (header % 31);
    
          s.status = BUSY_STATE;
          putShortMSB(s, header);
    
          /* Save the adler32 of the preset dictionary: */
          if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 0xffff);
          }
          strm.adler = 1; // adler32(0L, Z_NULL, 0);
        }
      }
    
    //#ifdef GZIP
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
    
          while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                break;
              }
            }
            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
            s.gzindex++;
          }
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (s.gzindex === s.gzhead.extra.length) {
            s.gzindex = 0;
            s.status = NAME_STATE;
          }
        }
        else {
          s.status = NAME_STATE;
        }
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;
    
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
    
          if (s.gzhead.hcrc && s.pending > beg){
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.gzindex = 0;
            s.status = COMMENT_STATE;
          }
        }
        else {
          s.status = COMMENT_STATE;
        }
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;
    
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
    
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.status = HCRC_STATE;
          }
        }
        else {
          s.status = HCRC_STATE;
        }
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
          }
          if (s.pending + 2 <= s.pending_buf_size) {
            put_byte(s, strm.adler & 0xff);
            put_byte(s, (strm.adler >> 8) & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
            s.status = BUSY_STATE;
          }
        }
        else {
          s.status = BUSY_STATE;
        }
      }
    //#endif
    
      /* Flush as much pending output as possible */
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          /* Since avail_out is 0, deflate will be called again with
           * more output space, but possibly with both pending and
           * avail_in equal to zero. There won't be anything to do,
           * but this is not an error situation so make sure we
           * return OK instead of BUF_ERROR at next call of deflate:
           */
          s.last_flush = -1;
          return Z_OK;
        }
    
        /* Make sure there is something to do and avoid duplicate consecutive
         * flushes. For repeated and useless calls with Z_FINISH, we keep
         * returning Z_STREAM_END instead of Z_BUF_ERROR.
         */
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
        flush !== Z_FINISH) {
        return err(strm, Z_BUF_ERROR);
      }
    
      /* User must not provide more input after the first FINISH: */
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR);
      }
    
      /* Start a new block or continue the current one.
       */
      if (strm.avail_in !== 0 || s.lookahead !== 0 ||
        (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
        var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
          (s.strategy === Z_RLE ? deflate_rle(s, flush) :
            configuration_table[s.level].func(s, flush));
    
        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            /* avoid BUF_ERROR next call, see above */
          }
          return Z_OK;
          /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
           * of deflate should use the same flush parameter to make sure
           * that the flush is complete. So we don't have to output an
           * empty block here, this will be done at next call. This also
           * ensures that for a very small output buffer, we emit at most
           * one empty block.
           */
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            trees._tr_align(s);
          }
          else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
    
            trees._tr_stored_block(s, 0, 0, false);
            /* For a full flush, this empty block will be recognized
             * as a special marker by inflate_sync().
             */
            if (flush === Z_FULL_FLUSH) {
              /*** CLEAR_HASH(s); ***/             /* forget history */
              zero(s.head); // Fill with NIL (= 0);
    
              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
            return Z_OK;
          }
        }
      }
      //Assert(strm->avail_out > 0, "bug2");
      //if (strm.avail_out <= 0) { throw new Error("bug2");}
    
      if (flush !== Z_FINISH) { return Z_OK; }
      if (s.wrap <= 0) { return Z_STREAM_END; }
    
      /* Write the trailer */
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        put_byte(s, (strm.adler >> 16) & 0xff);
        put_byte(s, (strm.adler >> 24) & 0xff);
        put_byte(s, strm.total_in & 0xff);
        put_byte(s, (strm.total_in >> 8) & 0xff);
        put_byte(s, (strm.total_in >> 16) & 0xff);
        put_byte(s, (strm.total_in >> 24) & 0xff);
      }
      else
      {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
    
      flush_pending(strm);
      /* If avail_out is zero, the application will call deflate again
       * to flush the rest.
       */
      if (s.wrap > 0) { s.wrap = -s.wrap; }
      /* write the trailer only once! */
      return s.pending !== 0 ? Z_OK : Z_STREAM_END;
    }
    
    function deflateEnd(strm) {
      var status;
    
      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
        return Z_STREAM_ERROR;
      }
    
      status = strm.state.status;
      if (status !== INIT_STATE &&
        status !== EXTRA_STATE &&
        status !== NAME_STATE &&
        status !== COMMENT_STATE &&
        status !== HCRC_STATE &&
        status !== BUSY_STATE &&
        status !== FINISH_STATE
      ) {
        return err(strm, Z_STREAM_ERROR);
      }
    
      strm.state = null;
    
      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    }
    
    /* =========================================================================
     * Copy the source state to the destination state
     */
    //function deflateCopy(dest, source) {
    //
    //}
    
    exports.deflateInit = deflateInit;
    exports.deflateInit2 = deflateInit2;
    exports.deflateReset = deflateReset;
    exports.deflateResetKeep = deflateResetKeep;
    exports.deflateSetHeader = deflateSetHeader;
    exports.deflate = deflate;
    exports.deflateEnd = deflateEnd;
    exports.deflateInfo = 'pako deflate (from Nodeca project)';
    
    /* Not implemented
    exports.deflateBound = deflateBound;
    exports.deflateCopy = deflateCopy;
    exports.deflateSetDictionary = deflateSetDictionary;
    exports.deflateParams = deflateParams;
    exports.deflatePending = deflatePending;
    exports.deflatePrime = deflatePrime;
    exports.deflateTune = deflateTune;
    */
    },{"../utils/common":27,"./adler32":29,"./crc32":31,"./messages":37,"./trees":38}],33:[function(_dereq_,module,exports){
    'use strict';
    
    
    function GZheader() {
      /* true if compressed data believed to be text */
      this.text       = 0;
      /* modification time */
      this.time       = 0;
      /* extra flags (not used when writing a gzip file) */
      this.xflags     = 0;
      /* operating system */
      this.os         = 0;
      /* pointer to extra field or Z_NULL if none */
      this.extra      = null;
      /* extra field length (valid if extra != Z_NULL) */
      this.extra_len  = 0; // Actually, we don't need it in JS,
                           // but leave for few code modifications
    
      //
      // Setup limits is not necessary because in js we should not preallocate memory
      // for inflate use constant limit in 65536 bytes
      //
    
      /* space at extra (only when reading header) */
      // this.extra_max  = 0;
      /* pointer to zero-terminated file name or Z_NULL */
      this.name       = '';
      /* space at name (only when reading header) */
      // this.name_max   = 0;
      /* pointer to zero-terminated comment or Z_NULL */
      this.comment    = '';
      /* space at comment (only when reading header) */
      // this.comm_max   = 0;
      /* true if there was or will be a header crc */
      this.hcrc       = 0;
      /* true when done reading gzip header (not used when writing a gzip file) */
      this.done       = false;
    }
    
    module.exports = GZheader;
    },{}],34:[function(_dereq_,module,exports){
    'use strict';
    
    // See state defs from inflate.js
    var BAD = 30;       /* got a data error -- remain here until reset */
    var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
    
    /*
       Decode literal, length, and distance codes and write out the resulting
       literal and match bytes until either not enough input or output is
       available, an end-of-block is encountered, or a data error is encountered.
       When large enough input and output buffers are supplied to inflate(), for
       example, a 16K input buffer and a 64K output buffer, more than 95% of the
       inflate execution time is spent in this routine.
    
       Entry assumptions:
    
            state.mode === LEN
            strm.avail_in >= 6
            strm.avail_out >= 258
            start >= strm.avail_out
            state.bits < 8
    
       On return, state.mode is one of:
    
            LEN -- ran out of enough output space or enough available input
            TYPE -- reached end of block code, inflate() to interpret next block
            BAD -- error in block data
    
       Notes:
    
        - The maximum input bits used by a length/distance pair is 15 bits for the
          length code, 5 bits for the length extra, 15 bits for the distance code,
          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
          Therefore if strm.avail_in >= 6, then there is enough input to avoid
          checking for available input while decoding.
    
        - The maximum bytes that a single length/distance pair can output is 258
          bytes, which is the maximum length that can be coded.  inflate_fast()
          requires strm.avail_out >= 258 for each loop to avoid checking for
          output space.
     */
    module.exports = function inflate_fast(strm, start) {
      var state;
      var _in;                    /* local strm.input */
      var last;                   /* have enough input while in < last */
      var _out;                   /* local strm.output */
      var beg;                    /* inflate()'s initial strm.output */
      var end;                    /* while out < end, enough space available */
    //#ifdef INFLATE_STRICT
      var dmax;                   /* maximum distance from zlib header */
    //#endif
      var wsize;                  /* window size or zero if not using window */
      var whave;                  /* valid bytes in the window */
      var wnext;                  /* window write index */
      var window;                 /* allocated sliding window, if wsize != 0 */
      var hold;                   /* local strm.hold */
      var bits;                   /* local strm.bits */
      var lcode;                  /* local strm.lencode */
      var dcode;                  /* local strm.distcode */
      var lmask;                  /* mask for first level of length codes */
      var dmask;                  /* mask for first level of distance codes */
      var here;                   /* retrieved table entry */
      var op;                     /* code bits, operation, extra bits, or */
                                  /*  window position, window bytes to copy */
      var len;                    /* match length, unused bytes */
      var dist;                   /* match distance */
      var from;                   /* where to copy match from */
      var from_source;
    
    
      var input, output; // JS specific, because we have no pointers
    
      /* copy state to local variables */
      state = strm.state;
      //here = state.here;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
      dmax = state.dmax;
    //#endif
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;
    
    
      /* decode literals and length/distances until end-of-block or not enough
         input data or output space */
    
      top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
    
        here = lcode[hold & lmask];
    
        dolen:
        for (;;) { // Goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;
          if (op === 0) {                          /* literal */
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff/*here.val*/;
          }
          else if (op & 16) {                     /* length base */
            len = here & 0xffff/*here.val*/;
            op &= 15;                           /* number of extra bits */
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & ((1 << op) - 1);
              hold >>>= op;
              bits -= op;
            }
            //Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
    
            dodist:
            for (;;) { // goto emulation
              op = here >>> 24/*here.bits*/;
              hold >>>= op;
              bits -= op;
              op = (here >>> 16) & 0xff/*here.op*/;
    
              if (op & 16) {                      /* distance base */
                dist = here & 0xffff/*here.val*/;
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                }
                dist += hold & ((1 << op) - 1);
    //#ifdef INFLATE_STRICT
                if (dist > dmax) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }
    //#endif
                hold >>>= op;
                bits -= op;
                //Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = _out - beg;                /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                  op = dist - op;               /* distance back in window */
                  if (op > whave) {
                    if (state.sane) {
                      strm.msg = 'invalid distance too far back';
                      state.mode = BAD;
                      break top;
                    }
    
    // (!) This block is disabled in zlib defailts,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //                if (len <= op - whave) {
    //                  do {
    //                    output[_out++] = 0;
    //                  } while (--len);
    //                  continue top;
    //                }
    //                len -= op - whave;
    //                do {
    //                  output[_out++] = 0;
    //                } while (--op > whave);
    //                if (op === 0) {
    //                  from = _out - dist;
    //                  do {
    //                    output[_out++] = output[from++];
    //                  } while (--len);
    //                  continue top;
    //                }
    //#endif
                  }
                  from = 0; // window index
                  from_source = window;
                  if (wnext === 0) {           /* very common case */
                    from += wsize - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  else if (wnext < op) {      /* wrap around window */
                    from += wsize + wnext - op;
                    op -= wnext;
                    if (op < len) {         /* some from end of window */
                      len -= op;
                      do {
                        output[_out++] = window[from++];
                      } while (--op);
                      from = 0;
                      if (wnext < len) {  /* some from start of window */
                        op = wnext;
                        len -= op;
                        do {
                          output[_out++] = window[from++];
                        } while (--op);
                        from = _out - dist;      /* rest from output */
                        from_source = output;
                      }
                    }
                  }
                  else {                      /* contiguous in window */
                    from += wnext - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  while (len > 2) {
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    len -= 3;
                  }
                  if (len) {
                    output[_out++] = from_source[from++];
                    if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                }
                else {
                  from = _out - dist;          /* copy direct from output */
                  do {                        /* minimum length is three */
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    len -= 3;
                  } while (len > 2);
                  if (len) {
                    output[_out++] = output[from++];
                    if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
              }
              else if ((op & 64) === 0) {          /* 2nd level distance code */
                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                continue dodist;
              }
              else {
                strm.msg = 'invalid distance code';
                state.mode = BAD;
                break top;
              }
    
              break; // need to emulate goto via "continue"
            }
          }
          else if ((op & 64) === 0) {              /* 2nd level length code */
            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dolen;
          }
          else if (op & 32) {                     /* end-of-block */
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.mode = TYPE;
            break top;
          }
          else {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD;
            break top;
          }
    
          break; // need to emulate goto via "continue"
        }
      } while (_in < last && _out < end);
    
      /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;
    
      /* update state and return */
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
      strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
      state.hold = hold;
      state.bits = bits;
      return;
    };
    
    },{}],35:[function(_dereq_,module,exports){
    'use strict';
    
    
    var utils = _dereq_('../utils/common');
    var adler32 = _dereq_('./adler32');
    var crc32   = _dereq_('./crc32');
    var inflate_fast = _dereq_('./inffast');
    var inflate_table = _dereq_('./inftrees');
    
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    
    /* Public constants ==========================================================*/
    /* ===========================================================================*/
    
    
    /* Allowed flush values; see deflate() and inflate() below for details */
    //var Z_NO_FLUSH      = 0;
    //var Z_PARTIAL_FLUSH = 1;
    //var Z_SYNC_FLUSH    = 2;
    //var Z_FULL_FLUSH    = 3;
    var Z_FINISH        = 4;
    var Z_BLOCK         = 5;
    var Z_TREES         = 6;
    
    
    /* Return codes for the compression/decompression functions. Negative values
     * are errors, positive values are used for special but normal events.
     */
    var Z_OK            = 0;
    var Z_STREAM_END    = 1;
    var Z_NEED_DICT     = 2;
    //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR  = -2;
    var Z_DATA_ERROR    = -3;
    var Z_MEM_ERROR     = -4;
    var Z_BUF_ERROR     = -5;
    //var Z_VERSION_ERROR = -6;
    
    /* The deflate compression method */
    var Z_DEFLATED  = 8;
    
    
    /* STATES ====================================================================*/
    /* ===========================================================================*/
    
    
    var    HEAD = 1;       /* i: waiting for magic header */
    var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
    var    TIME = 3;       /* i: waiting for modification time (gzip) */
    var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
    var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
    var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
    var    NAME = 7;       /* i: waiting for end of file name (gzip) */
    var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
    var    HCRC = 9;       /* i: waiting for header crc (gzip) */
    var    DICTID = 10;    /* i: waiting for dictionary check value */
    var    DICT = 11;      /* waiting for inflateSetDictionary() call */
    var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
    var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
    var        STORED = 14;    /* i: waiting for stored size (length and complement) */
    var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
    var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
    var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
    var        LENLENS = 18;   /* i: waiting for code length code lengths */
    var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
    var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
    var            LEN = 21;       /* i: waiting for length/lit/eob code */
    var            LENEXT = 22;    /* i: waiting for length extra bits */
    var            DIST = 23;      /* i: waiting for distance code */
    var            DISTEXT = 24;   /* i: waiting for distance extra bits */
    var            MATCH = 25;     /* o: waiting for output space to copy string */
    var            LIT = 26;       /* o: waiting for output space to write literal */
    var    CHECK = 27;     /* i: waiting for 32-bit check value */
    var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
    var    DONE = 29;      /* finished check, done -- remain here until reset */
    var    BAD = 30;       /* got a data error -- remain here until reset */
    var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
    var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */
    
    /* ===========================================================================*/
    
    
    
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
    
    var MAX_WBITS = 15;
    /* 32K LZ77 window */
    var DEF_WBITS = MAX_WBITS;
    
    
    function ZSWAP32(q) {
      return  (((q >>> 24) & 0xff) +
              ((q >>> 8) & 0xff00) +
              ((q & 0xff00) << 8) +
              ((q & 0xff) << 24));
    }
    
    
    function InflateState() {
      this.mode = 0;             /* current inflate mode */
      this.last = false;          /* true if processing last block */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.havedict = false;      /* true if dictionary provided */
      this.flags = 0;             /* gzip header method and flags (0 if zlib) */
      this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
      this.check = 0;             /* protected copy of check value */
      this.total = 0;             /* protected copy of output count */
      // TODO: may be {}
      this.head = null;           /* where to save gzip header information */
    
      /* sliding window */
      this.wbits = 0;             /* log base 2 of requested window size */
      this.wsize = 0;             /* window size or zero if not using window */
      this.whave = 0;             /* valid bytes in the window */
      this.wnext = 0;             /* window write index */
      this.window = null;         /* allocated sliding window, if needed */
    
      /* bit accumulator */
      this.hold = 0;              /* input bit accumulator */
      this.bits = 0;              /* number of bits in "in" */
    
      /* for string and stored block copying */
      this.length = 0;            /* literal or length of data to copy */
      this.offset = 0;            /* distance back to copy string from */
    
      /* for table and code decoding */
      this.extra = 0;             /* extra bits needed */
    
      /* fixed and dynamic code tables */
      this.lencode = null;          /* starting table for length/literal codes */
      this.distcode = null;         /* starting table for distance codes */
      this.lenbits = 0;           /* index bits for lencode */
      this.distbits = 0;          /* index bits for distcode */
    
      /* dynamic table building */
      this.ncode = 0;             /* number of code length code lengths */
      this.nlen = 0;              /* number of length code lengths */
      this.ndist = 0;             /* number of distance code lengths */
      this.have = 0;              /* number of code lengths in lens[] */
      this.next = null;              /* next available space in codes[] */
    
      this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
      this.work = new utils.Buf16(288); /* work area for code table building */
    
      /*
       because we don't have pointers in js, we use lencode and distcode directly
       as buffers so we don't need codes
      */
      //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
      this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
      this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
      this.sane = 0;                   /* if false, allow invalid distance too far */
      this.back = 0;                   /* bits back of last unprocessed length/lit */
      this.was = 0;                    /* initial length of match */
    }
    
    function inflateResetKeep(strm) {
      var state;
    
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = ''; /*Z_NULL*/
      if (state.wrap) {       /* to support ill-conceived Java test suite */
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.dmax = 32768;
      state.head = null/*Z_NULL*/;
      state.hold = 0;
      state.bits = 0;
      //state.lencode = state.distcode = state.next = state.codes;
      state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
      state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
    
      state.sane = 1;
      state.back = -1;
      //Tracev((stderr, "inflate: reset\n"));
      return Z_OK;
    }
    
    function inflateReset(strm) {
      var state;
    
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);
    
    }
    
    function inflateReset2(strm, windowBits) {
      var wrap;
      var state;
    
      /* get the state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;
    
      /* extract wrap request from windowBits parameter */
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      }
      else {
        wrap = (windowBits >> 4) + 1;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }
    
      /* set number of window bits, free window if different */
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }
    
      /* update state and reset the rest of it */
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    }
    
    function inflateInit2(strm, windowBits) {
      var ret;
      var state;
    
      if (!strm) { return Z_STREAM_ERROR; }
      //strm.msg = Z_NULL;                 /* in case we return an error */
    
      state = new InflateState();
    
      //if (state === Z_NULL) return Z_MEM_ERROR;
      //Tracev((stderr, "inflate: allocated\n"));
      strm.state = state;
      state.window = null/*Z_NULL*/;
      ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK) {
        strm.state = null/*Z_NULL*/;
      }
      return ret;
    }
    
    function inflateInit(strm) {
      return inflateInit2(strm, DEF_WBITS);
    }
    
    
    /*
     Return state with length and distance decoding tables and index sizes set to
     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
     If BUILDFIXED is defined, then instead this routine builds the tables the
     first time it's called, and returns those tables the first time and
     thereafter.  This reduces the size of the code by about 2K bytes, in
     exchange for a little execution time.  However, BUILDFIXED should not be
     used for threaded applications, since the rewriting of the tables and virgin
     may not be thread-safe.
     */
    var virgin = true;
    
    var lenfix, distfix; // We have no pointers in JS, so keep tables separate
    
    function fixedtables(state) {
      /* build fixed huffman tables if first call (may not be thread safe) */
      if (virgin) {
        var sym;
    
        lenfix = new utils.Buf32(512);
        distfix = new utils.Buf32(32);
    
        /* literal/length table */
        sym = 0;
        while (sym < 144) { state.lens[sym++] = 8; }
        while (sym < 256) { state.lens[sym++] = 9; }
        while (sym < 280) { state.lens[sym++] = 7; }
        while (sym < 288) { state.lens[sym++] = 8; }
    
        inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});
    
        /* distance table */
        sym = 0;
        while (sym < 32) { state.lens[sym++] = 5; }
    
        inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});
    
        /* do this just once */
        virgin = false;
      }
    
      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    }
    
    
    /*
     Update the window with the last wsize (normally 32K) bytes written before
     returning.  If window does not exist yet, create it.  This is only called
     when a window is already in use, or when output has been written during this
     inflate call, but the end of the deflate stream has not been reached yet.
     It is also called to create a window for dictionary data when a dictionary
     is loaded.
    
     Providing output buffers larger than 32K to inflate() should provide a speed
     advantage, since only the last 32K of output is copied to the sliding window
     upon return from inflate(), and since all distances after the first 32K of
     output will fall in the output data, making match copies simpler and faster.
     The advantage may be dependent on the size of the processor's data caches.
     */
    function updatewindow(strm, src, end, copy) {
      var dist;
      var state = strm.state;
    
      /* if it hasn't been done already, allocate space for the window */
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
    
        state.window = new utils.Buf8(state.wsize);
      }
    
      /* copy state->wsize or less output bytes into the circular window */
      if (copy >= state.wsize) {
        utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
        state.wnext = 0;
        state.whave = state.wsize;
      }
      else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        utils.arraySet(state.window,src, end - copy, dist, state.wnext);
        copy -= dist;
        if (copy) {
          //zmemcpy(state->window, end - copy, copy);
          utils.arraySet(state.window,src, end - copy, copy, 0);
          state.wnext = copy;
          state.whave = state.wsize;
        }
        else {
          state.wnext += dist;
          if (state.wnext === state.wsize) { state.wnext = 0; }
          if (state.whave < state.wsize) { state.whave += dist; }
        }
      }
      return 0;
    }
    
    function inflate(strm, flush) {
      var state;
      var input, output;          // input/output buffers
      var next;                   /* next input INDEX */
      var put;                    /* next output INDEX */
      var have, left;             /* available input and output */
      var hold;                   /* bit buffer */
      var bits;                   /* bits in bit buffer */
      var _in, _out;              /* save starting available input and output */
      var copy;                   /* number of stored or match bytes to copy */
      var from;                   /* where to copy match bytes from */
      var from_source;
      var here = 0;               /* current decoding table entry */
      var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
      //var last;                   /* parent table entry */
      var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
      var len;                    /* length to copy for repeats, bits to drop */
      var ret;                    /* return code */
      var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
      var opts;
    
      var n; // temporary var for NEED_BITS
    
      var order = /* permutation of code lengths */
        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    
    
      if (!strm || !strm.state || !strm.output ||
          (!strm.input && strm.avail_in !== 0)) {
        return Z_STREAM_ERROR;
      }
    
      state = strm.state;
      if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */
    
    
      //--- LOAD() ---
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      //---
    
      _in = have;
      _out = left;
      ret = Z_OK;
    
      inf_leave: // goto emulation
      for (;;) {
        switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          //=== NEEDBITS(16);
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
            state.check = 0/*crc32(0L, Z_NULL, 0)*/;
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
    
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = FLAGS;
            break;
          }
          state.flags = 0;           /* expect zlib header */
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) ||   /* check if zlib header allowed */
            (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
            strm.msg = 'incorrect header check';
            state.mode = BAD;
            break;
          }
          if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
          len = (hold & 0x0f)/*BITS(4)*/ + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          }
          else if (len > state.wbits) {
            strm.msg = 'invalid window size';
            state.mode = BAD;
            break;
          }
          state.dmax = 1 << len;
          //Tracev((stderr, "inflate:   zlib header ok\n"));
          strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
          state.mode = hold & 0x200 ? DICTID : TYPE;
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          break;
        case FLAGS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.flags = hold;
          if ((state.flags & 0xff) !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          if (state.flags & 0xe000) {
            strm.msg = 'unknown header flags set';
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = ((hold >> 8) & 1);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = TIME;
          /* falls through */
        case TIME:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC4(state.check, hold)
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            hbuf[2] = (hold >>> 16) & 0xff;
            hbuf[3] = (hold >>> 24) & 0xff;
            state.check = crc32(state.check, hbuf, 4, 0);
            //===
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = OS;
          /* falls through */
        case OS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.xflags = (hold & 0xff);
            state.head.os = (hold >> 8);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = EXLEN;
          /* falls through */
        case EXLEN:
          if (state.flags & 0x0400) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          else if (state.head) {
            state.head.extra = null/*Z_NULL*/;
          }
          state.mode = EXTRA;
          /* falls through */
        case EXTRA:
          if (state.flags & 0x0400) {
            copy = state.length;
            if (copy > have) { copy = have; }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  // Use untyped array for more conveniend processing later
                  state.head.extra = new Array(state.head.extra_len);
                }
                utils.arraySet(
                  state.head.extra,
                  input,
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  copy,
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
                //zmemcpy(state.head.extra + len, next,
                //        len + copy > state.head.extra_max ?
                //        state.head.extra_max - len : copy);
              }
              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) { break inf_leave; }
          }
          state.length = 0;
          state.mode = NAME;
          /* falls through */
        case NAME:
          if (state.flags & 0x0800) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              // TODO: 2 or 1 bytes?
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                  (state.length < 65536 /*state.head.name_max*/)) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);
    
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
          /* falls through */
        case COMMENT:
          if (state.flags & 0x1000) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                  (state.length < 65536 /*state.head.comm_max*/)) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
          /* falls through */
        case HCRC:
          if (state.flags & 0x0200) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.check & 0xffff)) {
              strm.msg = 'header crc mismatch';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          if (state.head) {
            state.head.hcrc = ((state.flags >> 9) & 1);
            state.head.done = true;
          }
          strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
          state.mode = TYPE;
          break;
        case DICTID:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          strm.adler = state.check = ZSWAP32(hold);
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = DICT;
          /* falls through */
        case DICT:
          if (state.havedict === 0) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            return Z_NEED_DICT;
          }
          strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
          state.mode = TYPE;
          /* falls through */
        case TYPE:
          if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case TYPEDO:
          if (state.last) {
            //--- BYTEBITS() ---//
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            state.mode = CHECK;
            break;
          }
          //=== NEEDBITS(3); */
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.last = (hold & 0x01)/*BITS(1)*/;
          //--- DROPBITS(1) ---//
          hold >>>= 1;
          bits -= 1;
          //---//
    
          switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
          }
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break;
        case STORED:
          //--- BYTEBITS() ---// /* go to byte boundary */
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
            strm.msg = 'invalid stored block lengths';
            state.mode = BAD;
            break;
          }
          state.length = hold & 0xffff;
          //Tracev((stderr, "inflate:       stored length %u\n",
          //        state.length));
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = COPY_;
          if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case COPY_:
          state.mode = COPY;
          /* falls through */
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) { copy = have; }
            if (copy > left) { copy = left; }
            if (copy === 0) { break inf_leave; }
            //--- zmemcpy(put, next, copy); ---
            utils.arraySet(output, input, next, copy, put);
            //---//
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          //Tracev((stderr, "inflate:       stored end\n"));
          state.mode = TYPE;
          break;
        case TABLE:
          //=== NEEDBITS(14); */
          while (bits < 14) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
    //#ifndef PKZIP_BUG_WORKAROUND
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = 'too many length or distance symbols';
            state.mode = BAD;
            break;
          }
    //#endif
          //Tracev((stderr, "inflate:       table sizes ok\n"));
          state.have = 0;
          state.mode = LENLENS;
          /* falls through */
        case LENLENS:
          while (state.have < state.ncode) {
            //=== NEEDBITS(3);
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          // We have separate tables & no pointers. 2 commented lines below not needed.
          //state.next = state.codes;
          //state.lencode = state.next;
          // Switch to use dynamic table
          state.lencode = state.lendyn;
          state.lenbits = 7;
    
          opts = {bits: state.lenbits};
          ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
    
          if (ret) {
            strm.msg = 'invalid code lengths set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, "inflate:       code lengths ok\n"));
          state.have = 0;
          state.mode = CODELENS;
          /* falls through */
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;
    
              if ((here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_val < 16) {
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              state.lens[state.have++] = here_val;
            }
            else {
              if (here_val === 16) {
                //=== NEEDBITS(here.bits + 2);
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                if (state.have === 0) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 0x03);//BITS(2);
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
              }
              else if (here_val === 17) {
                //=== NEEDBITS(here.bits + 3);
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 3 + (hold & 0x07);//BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
                //---//
              }
              else {
                //=== NEEDBITS(here.bits + 7);
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 11 + (hold & 0x7f);//BITS(7);
                //--- DROPBITS(7) ---//
                hold >>>= 7;
                bits -= 7;
                //---//
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }
    
          /* handle error breaks in while */
          if (state.mode === BAD) { break; }
    
          /* check for end-of-block code (better have one) */
          if (state.lens[256] === 0) {
            strm.msg = 'invalid code -- missing end-of-block';
            state.mode = BAD;
            break;
          }
    
          /* build code tables -- note: do not change the lenbits or distbits
             values here (9 and 6) without reading the comments in inftrees.h
             concerning the ENOUGH constants, which depend on those values */
          state.lenbits = 9;
    
          opts = {bits: state.lenbits};
          ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.lenbits = opts.bits;
          // state.lencode = state.next;
    
          if (ret) {
            strm.msg = 'invalid literal/lengths set';
            state.mode = BAD;
            break;
          }
    
          state.distbits = 6;
          //state.distcode.copy(state.codes);
          // Switch to use dynamic table
          state.distcode = state.distdyn;
          opts = {bits: state.distbits};
          ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.distbits = opts.bits;
          // state.distcode = state.next;
    
          if (ret) {
            strm.msg = 'invalid distances set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, 'inflate:       codes ok\n'));
          state.mode = LEN_;
          if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case LEN_:
          state.mode = LEN;
          /* falls through */
        case LEN:
          if (have >= 6 && left >= 258) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            inflate_fast(strm, _out);
            //--- LOAD() ---
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            //---
    
            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
    
            if (here_bits <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_op && (here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.lencode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;
    
              if ((last_bits + here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
          /* falls through */
        case LENEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
          //Tracevv((stderr, "inflate:         length %u\n", state.length));
          state.was = state.length;
          state.mode = DIST;
          /* falls through */
        case DIST:
          for (;;) {
            here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
    
            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if ((here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.distcode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;
    
              if ((last_bits + here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = (here_op) & 15;
          state.mode = DISTEXT;
          /* falls through */
        case DISTEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
    //#ifdef INFLATE_STRICT
          if (state.offset > state.dmax) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
    //#endif
          //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
          state.mode = MATCH;
          /* falls through */
        case MATCH:
          if (left === 0) { break inf_leave; }
          copy = _out - left;
          if (state.offset > copy) {         /* copy from window */
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              }
    // (!) This block is disabled in zlib defailts,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //          Trace((stderr, "inflate.c too far\n"));
    //          copy -= state.whave;
    //          if (copy > state.length) { copy = state.length; }
    //          if (copy > left) { copy = left; }
    //          left -= copy;
    //          state.length -= copy;
    //          do {
    //            output[put++] = 0;
    //          } while (--copy);
    //          if (state.length === 0) { state.mode = LEN; }
    //          break;
    //#endif
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            }
            else {
              from = state.wnext - copy;
            }
            if (copy > state.length) { copy = state.length; }
            from_source = state.window;
          }
          else {                              /* copy from output */
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) { copy = left; }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) { state.mode = LEN; }
          break;
        case LIT:
          if (left === 0) { break inf_leave; }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              // Use '|' insdead of '+' to make sure that result is signed
              hold |= input[next++] << bits;
              bits += 8;
            }
            //===//
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (_out) {
              strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
    
            }
            _out = left;
            // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
            if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
              strm.msg = 'incorrect data check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
          }
          state.mode = LENGTH;
          /* falls through */
        case LENGTH:
          if (state.wrap && state.flags) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.total & 0xffffffff)) {
              strm.msg = 'incorrect length check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
          }
          state.mode = DONE;
          /* falls through */
        case DONE:
          ret = Z_STREAM_END;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR;
        case SYNC:
          /* falls through */
        default:
          return Z_STREAM_ERROR;
        }
      }
    
      // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
    
      /*
         Return from inflate(), updating the total counts and the check value.
         If there was no progress during the inflate() call, return a buffer
         error.  Call updatewindow() to create and/or update the window state.
         Note: a memory error from inflate() is non-recoverable.
       */
    
      //--- RESTORE() ---
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      //---
    
      if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                          (state.mode < CHECK || flush !== Z_FINISH))) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap && _out) {
        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
          (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) +
                        (state.mode === TYPE ? 128 : 0) +
                        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    }
    
    function inflateEnd(strm) {
    
      if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
        return Z_STREAM_ERROR;
      }
    
      var state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK;
    }
    
    function inflateGetHeader(strm, head) {
      var state;
    
      /* check state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;
      if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
    
      /* save header structure */
      state.head = head;
      head.done = false;
      return Z_OK;
    }
    
    
    exports.inflateReset = inflateReset;
    exports.inflateReset2 = inflateReset2;
    exports.inflateResetKeep = inflateResetKeep;
    exports.inflateInit = inflateInit;
    exports.inflateInit2 = inflateInit2;
    exports.inflate = inflate;
    exports.inflateEnd = inflateEnd;
    exports.inflateGetHeader = inflateGetHeader;
    exports.inflateInfo = 'pako inflate (from Nodeca project)';
    
    /* Not implemented
    exports.inflateCopy = inflateCopy;
    exports.inflateGetDictionary = inflateGetDictionary;
    exports.inflateMark = inflateMark;
    exports.inflatePrime = inflatePrime;
    exports.inflateSetDictionary = inflateSetDictionary;
    exports.inflateSync = inflateSync;
    exports.inflateSyncPoint = inflateSyncPoint;
    exports.inflateUndermine = inflateUndermine;
    */
    },{"../utils/common":27,"./adler32":29,"./crc32":31,"./inffast":34,"./inftrees":36}],36:[function(_dereq_,module,exports){
    'use strict';
    
    
    var utils = _dereq_('../utils/common');
    
    var MAXBITS = 15;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
    
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    
    var lbase = [ /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
      35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
    ];
    
    var lext = [ /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
      19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
    ];
    
    var dbase = [ /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
      257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
      8193, 12289, 16385, 24577, 0, 0
    ];
    
    var dext = [ /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
      23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
      28, 28, 29, 29, 64, 64
    ];
    
    module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
    {
      var bits = opts.bits;
          //here = opts.here; /* table entry for duplication */
    
      var len = 0;               /* a code's length in bits */
      var sym = 0;               /* index of code symbols */
      var min = 0, max = 0;          /* minimum and maximum code lengths */
      var root = 0;              /* number of index bits for root table */
      var curr = 0;              /* number of index bits for current table */
      var drop = 0;              /* code bits to drop for sub-table */
      var left = 0;                   /* number of prefix codes available */
      var used = 0;              /* code entries in table used */
      var huff = 0;              /* Huffman code */
      var incr;              /* for incrementing code, index */
      var fill;              /* index for replicating entries */
      var low;               /* low bits for current root entry */
      var mask;              /* mask for low root bits */
      var next;             /* next available space in table */
      var base = null;     /* base value table to use */
      var base_index = 0;
    //  var shoextra;    /* extra bits table to use */
      var end;                    /* use base and extra for symbol > end */
      var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
      var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
      var extra = null;
      var extra_index = 0;
    
      var here_bits, here_op, here_val;
    
      /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.
    
       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.
    
       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.
    
       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
       */
    
      /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }
    
      /* bound code lengths, force root to be within code lengths */
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) { break; }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {                     /* no symbols to code at all */
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;
    
    
        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;
    
        opts.bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) { break; }
      }
      if (root < min) {
        root = min;
      }
    
      /* check for an over-subscribed or incomplete set of lengths */
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }        /* over-subscribed */
      }
      if (left > 0 && (type === CODES || max !== 1)) {
        return -1;                      /* incomplete set */
      }
    
      /* generate offsets into symbol table for each length for sorting */
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }
    
      /* sort symbols by length, by symbol order within each length */
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }
    
      /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.
    
       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.
    
       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.
    
       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.
    
       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
       */
    
      /* set up for code type */
      // poor man optimization - use if-else instead of switch,
      // to avoid deopts in old v8
      if (type === CODES) {
          base = extra = work;    /* dummy value--not used */
          end = 19;
      } else if (type === LENS) {
          base = lbase;
          base_index -= 257;
          extra = lext;
          extra_index -= 257;
          end = 256;
      } else {                    /* DISTS */
          base = dbase;
          extra = dext;
          end = -1;
      }
    
      /* initialize opts for loop */
      huff = 0;                   /* starting code */
      sym = 0;                    /* starting code symbol */
      len = min;                  /* starting code length */
      next = table_index;              /* current table to fill in */
      curr = root;                /* current table index bits */
      drop = 0;                   /* current bits to drop from code for index */
      low = -1;                   /* trigger new sub-table when len > root */
      used = 1 << root;          /* use root table entries */
      mask = used - 1;            /* mask for comparing low */
    
      /* check available table space */
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }
    
      var i=0;
      /* process all codes and make table entries */
      for (;;) {
        i++;
        /* create table entry */
        here_bits = len - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        }
        else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base[base_index + work[sym]];
        }
        else {
          here_op = 32 + 64;         /* end of block */
          here_val = 0;
        }
    
        /* replicate for those indices with low len bits equal to huff */
        incr = 1 << (len - drop);
        fill = 1 << curr;
        min = fill;                 /* save offset to next table */
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
        } while (fill !== 0);
    
        /* backwards increment the len-bit code huff */
        incr = 1 << (len - 1);
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }
    
        /* go to next symbol, update count, len */
        sym++;
        if (--count[len] === 0) {
          if (len === max) { break; }
          len = lens[lens_index + work[sym]];
        }
    
        /* create new sub-table if needed */
        if (len > root && (huff & mask) !== low) {
          /* if first time, transition to sub-tables */
          if (drop === 0) {
            drop = root;
          }
    
          /* increment past last table */
          next += min;            /* here min is 1 << curr */
    
          /* determine length of next table */
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) { break; }
            curr++;
            left <<= 1;
          }
    
          /* check for enough space */
          used += 1 << curr;
          if ((type === LENS && used > ENOUGH_LENS) ||
            (type === DISTS && used > ENOUGH_DISTS)) {
            return 1;
          }
    
          /* point entry in root table to sub-table */
          low = huff & mask;
          /*table.op[low] = curr;
          table.bits[low] = root;
          table.val[low] = next - opts.table_index;*/
          table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
        }
      }
    
      /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
      if (huff !== 0) {
        //table.op[next + huff] = 64;            /* invalid code marker */
        //table.bits[next + huff] = len - drop;
        //table.val[next + huff] = 0;
        table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
      }
    
      /* set return parameters */
      //opts.table_index += used;
      opts.bits = root;
      return 0;
    };
    
    },{"../utils/common":27}],37:[function(_dereq_,module,exports){
    'use strict';
    
    module.exports = {
      '2':    'need dictionary',     /* Z_NEED_DICT       2  */
      '1':    'stream end',          /* Z_STREAM_END      1  */
      '0':    '',                    /* Z_OK              0  */
      '-1':   'file error',          /* Z_ERRNO         (-1) */
      '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
      '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
      '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
      '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
      '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
    };
    },{}],38:[function(_dereq_,module,exports){
    'use strict';
    
    
    var utils = _dereq_('../utils/common');
    
    /* Public constants ==========================================================*/
    /* ===========================================================================*/
    
    
    //var Z_FILTERED          = 1;
    //var Z_HUFFMAN_ONLY      = 2;
    //var Z_RLE               = 3;
    var Z_FIXED               = 4;
    //var Z_DEFAULT_STRATEGY  = 0;
    
    /* Possible values of the data_type field (though see inflate()) */
    var Z_BINARY              = 0;
    var Z_TEXT                = 1;
    //var Z_ASCII             = 1; // = Z_TEXT
    var Z_UNKNOWN             = 2;
    
    /*============================================================================*/
    
    
    function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
    
    // From zutil.h
    
    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES    = 2;
    /* The three kinds of block type */
    
    var MIN_MATCH    = 3;
    var MAX_MATCH    = 258;
    /* The minimum and maximum match lengths */
    
    // From deflate.h
    /* ===========================================================================
     * Internal compression state.
     */
    
    var LENGTH_CODES  = 29;
    /* number of length codes, not counting the special END_BLOCK code */
    
    var LITERALS      = 256;
    /* number of literal bytes 0..255 */
    
    var L_CODES       = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */
    
    var D_CODES       = 30;
    /* number of distance codes */
    
    var BL_CODES      = 19;
    /* number of codes used to transfer the bit lengths */
    
    var HEAP_SIZE     = 2*L_CODES + 1;
    /* maximum heap size */
    
    var MAX_BITS      = 15;
    /* All codes must not exceed MAX_BITS bits */
    
    var Buf_size      = 16;
    /* size of bit buffer in bi_buf */
    
    
    /* ===========================================================================
     * Constants
     */
    
    var MAX_BL_BITS = 7;
    /* Bit length codes must not exceed MAX_BL_BITS bits */
    
    var END_BLOCK   = 256;
    /* end of block literal code */
    
    var REP_3_6     = 16;
    /* repeat previous bit length 3-6 times (2 bits of repeat count) */
    
    var REPZ_3_10   = 17;
    /* repeat a zero length 3-10 times  (3 bits of repeat count) */
    
    var REPZ_11_138 = 18;
    /* repeat a zero length 11-138 times  (7 bits of repeat count) */
    
    var extra_lbits =   /* extra bits for each length code */
      [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];
    
    var extra_dbits =   /* extra bits for each distance code */
      [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];
    
    var extra_blbits =  /* extra bits for each bit length code */
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];
    
    var bl_order =
      [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
    /* The lengths of the bit length codes are sent in order of decreasing
     * probability, to avoid transmitting the lengths for unused bit length codes.
     */
    
    /* ===========================================================================
     * Local data. These are initialized only once.
     */
    
    // We pre-fill arrays with 0 to avoid uninitialized gaps
    
    var DIST_CODE_LEN = 512; /* see definition of array dist_code below */
    
    // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
    var static_ltree  = new Array((L_CODES+2) * 2);
    zero(static_ltree);
    /* The static literal tree. Since the bit lengths are imposed, there is no
     * need for the L_CODES extra codes used during heap construction. However
     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
     * below).
     */
    
    var static_dtree  = new Array(D_CODES * 2);
    zero(static_dtree);
    /* The static distance tree. (Actually a trivial tree since all codes use
     * 5 bits.)
     */
    
    var _dist_code    = new Array(DIST_CODE_LEN);
    zero(_dist_code);
    /* Distance codes. The first 256 values correspond to the distances
     * 3 .. 258, the last 256 values correspond to the top 8 bits of
     * the 15 bit distances.
     */
    
    var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
    zero(_length_code);
    /* length code for each normalized match length (0 == MIN_MATCH) */
    
    var base_length   = new Array(LENGTH_CODES);
    zero(base_length);
    /* First normalized length for each code (0 = MIN_MATCH) */
    
    var base_dist     = new Array(D_CODES);
    zero(base_dist);
    /* First normalized distance for each code (0 = distance of 1) */
    
    
    var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {
    
      this.static_tree  = static_tree;  /* static tree or NULL */
      this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
      this.extra_base   = extra_base;   /* base index for extra_bits */
      this.elems        = elems;        /* max number of elements in the tree */
      this.max_length   = max_length;   /* max bit length for the codes */
    
      // show if `static_tree` has data or dummy - needed for monomorphic objects
      this.has_stree    = static_tree && static_tree.length;
    };
    
    
    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;
    
    
    var TreeDesc = function(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;     /* the dynamic tree */
      this.max_code = 0;            /* largest code with non zero frequency */
      this.stat_desc = stat_desc;   /* the corresponding static tree */
    };
    
    
    
    function d_code(dist) {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    }
    
    
    /* ===========================================================================
     * Output a short LSB first on the stream.
     * IN assertion: there is enough room in pendingBuf.
     */
    function put_short (s, w) {
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
      s.pending_buf[s.pending++] = (w) & 0xff;
      s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
    }
    
    
    /* ===========================================================================
     * Send a value on a given number of bits.
     * IN assertion: length <= 16 and value fits in length bits.
     */
    function send_bits(s, value, length) {
      if (s.bi_valid > (Buf_size - length)) {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> (Buf_size - s.bi_valid);
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        s.bi_valid += length;
      }
    }
    
    
    function send_code(s, c, tree) {
      send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
    }
    
    
    /* ===========================================================================
     * Reverse the first len bits of a code, using straightforward code (a faster
     * method would use a table)
     * IN assertion: 1 <= len <= 15
     */
    function bi_reverse(code, len) {
      var res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    }
    
    
    /* ===========================================================================
     * Flush the bit buffer, keeping at most 7 bits in it.
     */
    function bi_flush(s) {
      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
    
      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    }
    
    
    /* ===========================================================================
     * Compute the optimal bit lengths for a tree and update the total bit length
     * for the current block.
     * IN assertion: the fields freq and dad are set, heap[heap_max] and
     *    above are the tree nodes sorted by increasing frequency.
     * OUT assertions: the field len is set to the optimal bit length, the
     *     array bl_count contains the frequencies for each bit length.
     *     The length opt_len is updated; static_len is also updated if stree is
     *     not null.
     */
    function gen_bitlen(s, desc)
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    {
      var tree            = desc.dyn_tree;
      var max_code        = desc.max_code;
      var stree           = desc.stat_desc.static_tree;
      var has_stree       = desc.stat_desc.has_stree;
      var extra           = desc.stat_desc.extra_bits;
      var base            = desc.stat_desc.extra_base;
      var max_length      = desc.stat_desc.max_length;
      var h;              /* heap index */
      var n, m;           /* iterate over the tree elements */
      var bits;           /* bit length */
      var xbits;          /* extra bits */
      var f;              /* frequency */
      var overflow = 0;   /* number of elements with bit length too large */
    
      for (bits = 0; bits <= MAX_BITS; bits++) {
        s.bl_count[bits] = 0;
      }
    
      /* In a first pass, compute the optimal bit lengths (which may
       * overflow in the case of the bit length tree).
       */
      tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */
    
      for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
        n = s.heap[h];
        bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n*2 + 1]/*.Len*/ = bits;
        /* We overwrite tree[n].Dad which is no longer needed */
    
        if (n > max_code) { continue; } /* not a leaf node */
    
        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n-base];
        }
        f = tree[n * 2]/*.Freq*/;
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
        }
      }
      if (overflow === 0) { return; }
    
      // Trace((stderr,"\nbit length overflow\n"));
      /* This happens for example on obj2 and pic of the Calgary corpus */
    
      /* Find the first bit length which could increase: */
      do {
        bits = max_length-1;
        while (s.bl_count[bits] === 0) { bits--; }
        s.bl_count[bits]--;      /* move one leaf down the tree */
        s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
      } while (overflow > 0);
    
      /* Now recompute all bit lengths, scanning in increasing frequency.
       * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
       * lengths instead of fixing only the wrong ones. This idea is taken
       * from 'ar' written by Haruhiko Okumura.)
       */
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) { continue; }
          if (tree[m*2 + 1]/*.Len*/ !== bits) {
            // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
            s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
            tree[m*2 + 1]/*.Len*/ = bits;
          }
          n--;
        }
      }
    }
    
    
    /* ===========================================================================
     * Generate the codes for a given tree and bit counts (which need not be
     * optimal).
     * IN assertion: the array bl_count contains the bit length statistics for
     * the given tree and the field len is set for all tree elements.
     * OUT assertion: the field code is set for all tree elements of non
     *     zero code length.
     */
    function gen_codes(tree, max_code, bl_count)
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    {
      var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
      var code = 0;              /* running code value */
      var bits;                  /* bit index */
      var n;                     /* code index */
    
      /* The distribution counts are first used to generate the code values
       * without bit reversal.
       */
      for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
      }
      /* Check that the bit counts in bl_count are consistent. The last code
       * must be all ones.
       */
      //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
      //        "inconsistent bit counts");
      //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
    
      for (n = 0;  n <= max_code; n++) {
        var len = tree[n*2 + 1]/*.Len*/;
        if (len === 0) { continue; }
        /* Now reverse the bits */
        tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);
    
        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
      }
    }
    
    
    /* ===========================================================================
     * Initialize the various 'constant' tables.
     */
    function tr_static_init() {
      var n;        /* iterates over tree elements */
      var bits;     /* bit counter */
      var length;   /* length value */
      var code;     /* code value */
      var dist;     /* distance index */
      var bl_count = new Array(MAX_BITS+1);
      /* number of codes at each bit length for an optimal tree */
    
      // do check in _tr_init()
      //if (static_init_done) return;
    
      /* For some embedded targets, global variables are not initialized: */
    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/
    
      /* Initialize the mapping length (0..255) -> length code (0..28) */
      length = 0;
      for (code = 0; code < LENGTH_CODES-1; code++) {
        base_length[code] = length;
        for (n = 0; n < (1<<extra_lbits[code]); n++) {
          _length_code[length++] = code;
        }
      }
      //Assert (length == 256, "tr_static_init: length != 256");
      /* Note that the length 255 (match length 258) can be represented
       * in two different ways: code 284 + 5 bits or code 285, so we
       * overwrite length_code[255] to use the best encoding:
       */
      _length_code[length-1] = code;
    
      /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      dist = 0;
      for (code = 0 ; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < (1<<extra_dbits[code]); n++) {
          _dist_code[dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: dist != 256");
      dist >>= 7; /* from now on, all distances are divided by 128 */
      for ( ; code < D_CODES; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: 256+dist != 512");
    
      /* Construct the codes of the static literal tree */
      for (bits = 0; bits <= MAX_BITS; bits++) {
        bl_count[bits] = 0;
      }
    
      n = 0;
      while (n <= 143) {
        static_ltree[n*2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n*2 + 1]/*.Len*/ = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n*2 + 1]/*.Len*/ = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n*2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      /* Codes 286 and 287 do not exist, but we must include them in the
       * tree construction to get a canonical Huffman tree (longest code
       * all ones)
       */
      gen_codes(static_ltree, L_CODES+1, bl_count);
    
      /* The static distance tree is trivial: */
      for (n = 0; n < D_CODES; n++) {
        static_dtree[n*2 + 1]/*.Len*/ = 5;
        static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
      }
    
      // Now data ready and we can init static trees
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
      static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);
    
      //static_init_done = true;
    }
    
    
    /* ===========================================================================
     * Initialize a new block.
     */
    function init_block(s) {
      var n; /* iterates over tree elements */
    
      /* Initialize the trees. */
      for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
      for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
      for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }
    
      s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
      s.opt_len = s.static_len = 0;
      s.last_lit = s.matches = 0;
    }
    
    
    /* ===========================================================================
     * Flush the bit buffer and align the output on a byte boundary
     */
    function bi_windup(s)
    {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        //put_byte(s, (Byte)s->bi_buf);
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    }
    
    /* ===========================================================================
     * Copy a stored block, storing first the length and its
     * one's complement if requested.
     */
    function copy_block(s, buf, len, header)
    //DeflateState *s;
    //charf    *buf;    /* the input data */
    //unsigned len;     /* its length */
    //int      header;  /* true if block header must be written */
    {
      bi_windup(s);        /* align on byte boundary */
    
      if (header) {
        put_short(s, len);
        put_short(s, ~len);
      }
    //  while (len--) {
    //    put_byte(s, *buf++);
    //  }
      utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
      s.pending += len;
    }
    
    /* ===========================================================================
     * Compares to subtrees, using the tree depth as tie breaker when
     * the subtrees have equal frequency. This minimizes the worst case length.
     */
    function smaller(tree, n, m, depth) {
      var _n2 = n*2;
      var _m2 = m*2;
      return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
             (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
    }
    
    /* ===========================================================================
     * Restore the heap property by moving down the tree starting at node k,
     * exchanging a node with the smallest of its two sons if necessary, stopping
     * when the heap property is re-established (each father smaller than its
     * two sons).
     */
    function pqdownheap(s, tree, k)
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    {
      var v = s.heap[k];
      var j = k << 1;  /* left son of k */
      while (j <= s.heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s.heap_len &&
          smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
          j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s.heap[j], s.depth)) { break; }
    
        /* Exchange v with the smallest son */
        s.heap[k] = s.heap[j];
        k = j;
    
        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
      }
      s.heap[k] = v;
    }
    
    
    // inlined manually
    // var SMALLEST = 1;
    
    /* ===========================================================================
     * Send the block data compressed using the given Huffman trees
     */
    function compress_block(s, ltree, dtree)
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    {
      var dist;           /* distance of matched string */
      var lc;             /* match length or unmatched char (if dist == 0) */
      var lx = 0;         /* running index in l_buf */
      var code;           /* the code to send */
      var extra;          /* number of extra bits to send */
    
      if (s.last_lit !== 0) {
        do {
          dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
          lc = s.pending_buf[s.l_buf + lx];
          lx++;
    
          if (dist === 0) {
            send_code(s, lc, ltree); /* send a literal byte */
            //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
          } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);       /* send the extra length bits */
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
            //Assert (code < D_CODES, "bad d_code");
    
            send_code(s, code, dtree);       /* send the distance code */
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);   /* send the extra distance bits */
            }
          } /* literal or match pair ? */
    
          /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
          //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
          //       "pendingBuf overflow");
    
        } while (lx < s.last_lit);
      }
    
      send_code(s, END_BLOCK, ltree);
    }
    
    
    /* ===========================================================================
     * Construct one Huffman tree and assigns the code bit strings and lengths.
     * Update the total bit length for the current block.
     * IN assertion: the field freq is set for all tree elements.
     * OUT assertions: the fields len and code are set to the optimal bit length
     *     and corresponding code. The length opt_len is updated; static_len is
     *     also updated if stree is not null. The field max_code is set.
     */
    function build_tree(s, desc)
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    {
      var tree     = desc.dyn_tree;
      var stree    = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var elems    = desc.stat_desc.elems;
      var n, m;          /* iterate over heap elements */
      var max_code = -1; /* largest code with non zero frequency */
      var node;          /* new node being created */
    
      /* Construct the initial heap, with least frequent element in
       * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
       * heap[0] is not used.
       */
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE;
    
      for (n = 0; n < elems; n++) {
        if (tree[n * 2]/*.Freq*/ !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;
    
        } else {
          tree[n*2 + 1]/*.Len*/ = 0;
        }
      }
    
      /* The pkzip format requires that at least one distance code exists,
       * and that at least one bit should be sent even if there is only one
       * possible code. So to avoid special checks later on we force at least
       * two codes of non zero frequency.
       */
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
        tree[node * 2]/*.Freq*/ = 1;
        s.depth[node] = 0;
        s.opt_len--;
    
        if (has_stree) {
          s.static_len -= stree[node*2 + 1]/*.Len*/;
        }
        /* node is 0 or 1 so it does not have extra bits */
      }
      desc.max_code = max_code;
    
      /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
       * establish sub-heaps of increasing lengths:
       */
      for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }
    
      /* Construct the Huffman tree by repeatedly combining the least two
       * frequent nodes.
       */
      node = elems;              /* next internal node of the tree */
      do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/
        n = s.heap[1/*SMALLEST*/];
        s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1/*SMALLEST*/);
        /***/
    
        m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */
    
        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
        s.heap[--s.heap_max] = m;
    
        /* Create a new node father of n and m */
        tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;
    
        /* and insert the new node in the heap */
        s.heap[1/*SMALLEST*/] = node++;
        pqdownheap(s, tree, 1/*SMALLEST*/);
    
      } while (s.heap_len >= 2);
    
      s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];
    
      /* At this point, the fields freq and dad are set. We can now
       * generate the bit lengths.
       */
      gen_bitlen(s, desc);
    
      /* The field len is now set, we can generate the bit codes */
      gen_codes(tree, max_code, s.bl_count);
    }
    
    
    /* ===========================================================================
     * Scan a literal or distance tree to determine the frequencies of the codes
     * in the bit length tree.
     */
    function scan_tree(s, tree, max_code)
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    {
      var n;                     /* iterates over all tree elements */
      var prevlen = -1;          /* last emitted length */
      var curlen;                /* length of current code */
    
      var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */
    
      var count = 0;             /* repeat count of the current code */
      var max_count = 7;         /* max repeat count */
      var min_count = 4;         /* min repeat count */
    
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */
    
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n+1)*2 + 1]/*.Len*/;
    
        if (++count < max_count && curlen === nextlen) {
          continue;
    
        } else if (count < min_count) {
          s.bl_tree[curlen * 2]/*.Freq*/ += count;
    
        } else if (curlen !== 0) {
    
          if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
          s.bl_tree[REP_3_6*2]/*.Freq*/++;
    
        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10*2]/*.Freq*/++;
    
        } else {
          s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
        }
    
        count = 0;
        prevlen = curlen;
    
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
    
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
    
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    
    
    /* ===========================================================================
     * Send a literal or distance tree in compressed form, using the codes in
     * bl_tree.
     */
    function send_tree(s, tree, max_code)
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    {
      var n;                     /* iterates over all tree elements */
      var prevlen = -1;          /* last emitted length */
      var curlen;                /* length of current code */
    
      var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */
    
      var count = 0;             /* repeat count of the current code */
      var max_count = 7;         /* max repeat count */
      var min_count = 4;         /* min repeat count */
    
      /* tree[max_code+1].Len = -1; */  /* guard already set */
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
    
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n+1)*2 + 1]/*.Len*/;
    
        if (++count < max_count && curlen === nextlen) {
          continue;
    
        } else if (count < min_count) {
          do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);
    
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          //Assert(count >= 3 && count <= 6, " 3_6?");
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count-3, 2);
    
        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count-3, 3);
    
        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count-11, 7);
        }
    
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
    
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
    
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    
    
    /* ===========================================================================
     * Construct the Huffman tree for the bit lengths and return the index in
     * bl_order of the last bit length code to send.
     */
    function build_bl_tree(s) {
      var max_blindex;  /* index of last bit length code of non zero freq */
    
      /* Determine the bit length frequencies for literal and distance trees */
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    
      /* Build the bit length tree: */
      build_tree(s, s.bl_desc);
      /* opt_len now includes the length of the tree representations, except
       * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
       */
    
      /* Determine the number of bit length codes to send. The pkzip format
       * requires that at least 4 bit length codes be sent. (appnote.txt says
       * 3 but the actual value used is 4.)
       */
      for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
          break;
        }
      }
      /* Update opt_len to include the bit length tree and counts */
      s.opt_len += 3*(max_blindex+1) + 5+5+4;
      //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
      //        s->opt_len, s->static_len));
    
      return max_blindex;
    }
    
    
    /* ===========================================================================
     * Send the header for a block using dynamic Huffman trees: the counts, the
     * lengths of the bit length codes, the literal tree and the distance tree.
     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
     */
    function send_all_trees(s, lcodes, dcodes, blcodes)
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    {
      var rank;                    /* index in bl_order */
    
      //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
      //        "too many codes");
      //Tracev((stderr, "\nbl counts: "));
      send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
      send_bits(s, dcodes-1,   5);
      send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
      for (rank = 0; rank < blcodes; rank++) {
        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
      }
      //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
    
      send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
      //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
    
      send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
      //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    }
    
    
    /* ===========================================================================
     * Check if the data type is TEXT or BINARY, using the following algorithm:
     * - TEXT if the two conditions below are satisfied:
     *    a) There are no non-portable control characters belonging to the
     *       "black list" (0..6, 14..25, 28..31).
     *    b) There is at least one printable character belonging to the
     *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
     * - BINARY otherwise.
     * - The following partially-portable control characters form a
     *   "gray list" that is ignored in this detection algorithm:
     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
     * IN assertion: the fields Freq of dyn_ltree are set.
     */
    function detect_data_type(s) {
      /* black_mask is the bit mask of black-listed bytes
       * set bits 0..6, 14..25, and 28..31
       * 0xf3ffc07f = binary 11110011111111111100000001111111
       */
      var black_mask = 0xf3ffc07f;
      var n;
    
      /* Check for non-textual ("black-listed") bytes. */
      for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
          return Z_BINARY;
        }
      }
    
      /* Check for textual ("white-listed") bytes. */
      if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
          s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS; n++) {
        if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
          return Z_TEXT;
        }
      }
    
      /* There are no "black-listed" or "white-listed" bytes:
       * this stream either is empty or has tolerated ("gray-listed") bytes only.
       */
      return Z_BINARY;
    }
    
    
    var static_init_done = false;
    
    /* ===========================================================================
     * Initialize the tree data structures for a new zlib stream.
     */
    function _tr_init(s)
    {
    
      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }
    
      s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
    
      s.bi_buf = 0;
      s.bi_valid = 0;
    
      /* Initialize the first block of the first file: */
      init_block(s);
    }
    
    
    /* ===========================================================================
     * Send a stored block
     */
    function _tr_stored_block(s, buf, stored_len, last)
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
      copy_block(s, buf, stored_len, true); /* with header */
    }
    
    
    /* ===========================================================================
     * Send one empty static block to give enough lookahead for inflate.
     * This takes 10 bits, of which 7 may remain in the bit buffer.
     */
    function _tr_align(s) {
      send_bits(s, STATIC_TREES<<1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    }
    
    
    /* ===========================================================================
     * Determine the best encoding for the current block: dynamic trees, static
     * trees or store, and output the encoded block to the zip file.
     */
    function _tr_flush_block(s, buf, stored_len, last)
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
      var max_blindex = 0;        /* index of last bit length code of non zero freq */
    
      /* Build the Huffman trees unless a stored block is forced */
      if (s.level > 0) {
    
        /* Check if the file is binary or text */
        if (s.strm.data_type === Z_UNKNOWN) {
          s.strm.data_type = detect_data_type(s);
        }
    
        /* Construct the literal and distance trees */
        build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
    
        build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         */
    
        /* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);
    
        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s.opt_len+3+7) >>> 3;
        static_lenb = (s.static_len+3+7) >>> 3;
    
        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->last_lit));
    
        if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }
    
      } else {
        // Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
      }
    
      if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
        /* 4: two words for the lengths */
    
        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);
    
      } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
    
        send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);
    
      } else {
        send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
      /* The above check is made mod 2^32, for files larger than 512 MB
       * and uLong implemented on 32 bits.
       */
      init_block(s);
    
      if (last) {
        bi_windup(s);
      }
      // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
      //       s->compressed_len-7*last));
    }
    
    /* ===========================================================================
     * Save the match info and tally the frequency counts. Return true if
     * the current block must be flushed.
     */
    function _tr_tally(s, dist, lc)
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    {
      //var out_length, in_length, dcode;
    
      s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
      s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
    
      s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
      s.last_lit++;
    
      if (dist === 0) {
        /* lc is the unmatched char */
        s.dyn_ltree[lc*2]/*.Freq*/++;
      } else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */
        dist--;             /* dist = match distance - 1 */
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
    
        s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
        s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
      }
    
    // (!) This block is disabled in zlib defailts,
    // don't enable it for binary compatibility
    
    //#ifdef TRUNCATE_BLOCK
    //  /* Try to guess if it is profitable to stop the current block here */
    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
    //    /* Compute an upper bound for the compressed length */
    //    out_length = s.last_lit*8;
    //    in_length = s.strstart - s.block_start;
    //
    //    for (dcode = 0; dcode < D_CODES; dcode++) {
    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
    //    }
    //    out_length >>>= 3;
    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
    //    //       s->last_lit, in_length, out_length,
    //    //       100L - out_length*100L/in_length));
    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
    //      return true;
    //    }
    //  }
    //#endif
    
      return (s.last_lit === s.lit_bufsize-1);
      /* We avoid equality with lit_bufsize because of wraparound at 64K
       * on 16 bit machines and because stored blocks are restricted to
       * 64K-1 bytes.
       */
    }
    
    exports._tr_init  = _tr_init;
    exports._tr_stored_block = _tr_stored_block;
    exports._tr_flush_block  = _tr_flush_block;
    exports._tr_tally = _tr_tally;
    exports._tr_align = _tr_align;
    },{"../utils/common":27}],39:[function(_dereq_,module,exports){
    'use strict';
    
    
    function ZStream() {
      /* next input byte */
      this.input = null; // JS specific, because we have no pointers
      this.next_in = 0;
      /* number of bytes available at input */
      this.avail_in = 0;
      /* total number of input bytes read so far */
      this.total_in = 0;
      /* next output byte should be put there */
      this.output = null; // JS specific, because we have no pointers
      this.next_out = 0;
      /* remaining free space at output */
      this.avail_out = 0;
      /* total number of bytes output so far */
      this.total_out = 0;
      /* last error message, NULL if no error */
      this.msg = ''/*Z_NULL*/;
      /* not visible by applications */
      this.state = null;
      /* best guess about the data type: binary or text */
      this.data_type = 2/*Z_UNKNOWN*/;
      /* adler32 value of the uncompressed data */
      this.adler = 0;
    }
    
    module.exports = ZStream;
    },{}]},{},[9])
    (9)
    }));
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
    },{"buffer":72}],63:[function(require,module,exports){
    (function (process,global,Buffer){
    /* xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*exported XLSX */
    /*global global, exports, module, require:false, process:false, Buffer:false */
    var XLSX = {};
    (function make_xlsx(XLSX){
    XLSX.version = '0.11.17';
    var current_codepage = 1200, current_ansi = 1252;
    /*global cptable:true */
    if(typeof module !== "undefined" && typeof require !== 'undefined') {
        if(typeof cptable === 'undefined') global.cptable = require('./dist/cpexcel.js');
    }
    
    var VALID_ANSI = [ 874, 932, 936, 949, 950 ];
    for(var i = 0; i <= 8; ++i) VALID_ANSI.push(1250 + i);
    /* ECMA-376 Part I 18.4.1 charset to codepage mapping */
    var CS2CP = ({
    0:    1252, /* ANSI */
    1:   65001, /* DEFAULT */
    2:   65001, /* SYMBOL */
    77:  10000, /* MAC */
    128:   932, /* SHIFTJIS */
    129:   949, /* HANGUL */
    130:  1361, /* JOHAB */
    134:   936, /* GB2312 */
    136:   950, /* CHINESEBIG5 */
    161:  1253, /* GREEK */
    162:  1254, /* TURKISH */
    163:  1258, /* VIETNAMESE */
    177:  1255, /* HEBREW */
    178:  1256, /* ARABIC */
    186:  1257, /* BALTIC */
    204:  1251, /* RUSSIAN */
    222:   874, /* THAI */
    238:  1250, /* EASTEUROPE */
    255:  1252, /* OEM */
    69:   6969  /* MISC */
    });
    
    var set_ansi = function(cp) { if(VALID_ANSI.indexOf(cp) == -1) return; current_ansi = CS2CP[0] = cp; };
    function reset_ansi() { set_ansi(1252); }
    
    var set_cp = function(cp) { current_codepage = cp; set_ansi(cp); };
    function reset_cp() { set_cp(1200); reset_ansi(); }
    
    function char_codes(data) { var o = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }
    
    function utf16leread(data) {
        var o = [];
        for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i) + (data.charCodeAt(2*i+1)<<8));
        return o.join("");
    }
    function utf16beread(data) {
        var o = [];
        for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i+1) + (data.charCodeAt(2*i)<<8));
        return o.join("");
    }
    
    var debom = function(data) {
        var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
        if(c1 == 0xFF && c2 == 0xFE) return utf16leread(data.substr(2));
        if(c1 == 0xFE && c2 == 0xFF) return utf16beread(data.substr(2));
        if(c1 == 0xFEFF) return data.substr(1);
        return data;
    };
    
    var _getchar = function _gc1(x) { return String.fromCharCode(x); };
    if(typeof cptable !== 'undefined') {
        set_cp = function(cp) { current_codepage = cp; };
        debom = function(data) {
            if(data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) { return cptable.utils.decode(1200, char_codes(data.substr(2))); }
            return data;
        };
        _getchar = function _gc2(x) {
            if(current_codepage === 1200) return String.fromCharCode(x);
            return cptable.utils.decode(current_codepage, [x&255,x>>8])[0];
        };
    }
    var DENSE = null;
    var DIF_XL = true;
    var Base64 = (function make_b64(){
        var map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        return {
            encode: function(input) {
                var o = "";
                var c1=0, c2=0, c3=0, e1=0, e2=0, e3=0, e4=0;
                for(var i = 0; i < input.length; ) {
                    c1 = input.charCodeAt(i++);
                    c2 = input.charCodeAt(i++);
                    c3 = input.charCodeAt(i++);
                    e1 = c1 >> 2;
                    e2 = ((c1 & 3) << 4) | (c2 >> 4);
                    e3 = ((c2 & 15) << 2) | (c3 >> 6);
                    e4 = c3 & 63;
                    if (isNaN(c2)) { e3 = e4 = 64; }
                    else if (isNaN(c3)) { e4 = 64; }
                    o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);
                }
                return o;
            },
            decode: function b64_decode(input) {
                var o = "";
                var c1=0, c2=0, c3=0;
                var e1=0, e2=0, e3=0, e4=0;
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                for(var i = 0; i < input.length;) {
                    e1 = map.indexOf(input.charAt(i++));
                    e2 = map.indexOf(input.charAt(i++));
                    e3 = map.indexOf(input.charAt(i++));
                    e4 = map.indexOf(input.charAt(i++));
                    c1 = (e1 << 2) | (e2 >> 4);
                    c2 = ((e2 & 15) << 4) | (e3 >> 2);
                    c3 = ((e3 & 3) << 6) | e4;
                    o += String.fromCharCode(c1);
                    if (e3 !== 64) { o += String.fromCharCode(c2); }
                    if (e4 !== 64) { o += String.fromCharCode(c3); }
                }
                return o;
            }
        };
    })();
    var has_buf = (typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && process.versions.node);
    
    function new_raw_buf(len) {
        /* jshint -W056 */
        // $FlowIgnore
        return new (has_buf ? Buffer : Array)(len);
        /* jshint +W056 */
    }
    
    function s2a(s) {
        if(has_buf) return new Buffer(s, "binary");
        return s.split("").map(function(x){ return x.charCodeAt(0) & 0xff; });
    }
    
    function s2ab(s) {
        if(typeof ArrayBuffer === 'undefined') return s2a(s);
        var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }
    
    function arr2str(data) {
        if(Array.isArray(data)) return data.map(_chr).join("");
        var o = []; for(var i = 0; i < data.length; ++i) o[i] = _chr(data[i]); return o.join("");
    }
    
    var bconcat = function(bufs) { return [].concat.apply([], bufs); };
    
    var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
    /* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /*jshint -W041 */
    var SSF = ({});
    var make_ssf = function make_ssf(SSF){
    SSF.version = '0.10.0';
    function _strrev(x) { var o = "", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }
    function fill(c,l) { var o = ""; while(o.length < l) o+=c; return o; }
    function pad0(v,d){var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
    function pad_(v,d){var t=""+v;return t.length>=d?t:fill(' ',d-t.length)+t;}
    function rpad_(v,d){var t=""+v; return t.length>=d?t:t+fill(' ',d-t.length);}
    function pad0r1(v,d){var t=""+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}
    function pad0r2(v,d){var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
    var p2_32 = Math.pow(2,32);
    function pad0r(v,d){if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }
    function isgeneral(s, i) { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }
    var days = [
        ['Sun', 'Sunday'],
        ['Mon', 'Monday'],
        ['Tue', 'Tuesday'],
        ['Wed', 'Wednesday'],
        ['Thu', 'Thursday'],
        ['Fri', 'Friday'],
        ['Sat', 'Saturday']
    ];
    var months = [
        ['J', 'Jan', 'January'],
        ['F', 'Feb', 'February'],
        ['M', 'Mar', 'March'],
        ['A', 'Apr', 'April'],
        ['M', 'May', 'May'],
        ['J', 'Jun', 'June'],
        ['J', 'Jul', 'July'],
        ['A', 'Aug', 'August'],
        ['S', 'Sep', 'September'],
        ['O', 'Oct', 'October'],
        ['N', 'Nov', 'November'],
        ['D', 'Dec', 'December']
    ];
    function init_table(t) {
        t[0]=  'General';
        t[1]=  '0';
        t[2]=  '0.00';
        t[3]=  '#,##0';
        t[4]=  '#,##0.00';
        t[9]=  '0%';
        t[10]= '0.00%';
        t[11]= '0.00E+00';
        t[12]= '# ?/?';
        t[13]= '# ??/??';
        t[14]= 'm/d/yy';
        t[15]= 'd-mmm-yy';
        t[16]= 'd-mmm';
        t[17]= 'mmm-yy';
        t[18]= 'h:mm AM/PM';
        t[19]= 'h:mm:ss AM/PM';
        t[20]= 'h:mm';
        t[21]= 'h:mm:ss';
        t[22]= 'm/d/yy h:mm';
        t[37]= '#,##0 ;(#,##0)';
        t[38]= '#,##0 ;[Red](#,##0)';
        t[39]= '#,##0.00;(#,##0.00)';
        t[40]= '#,##0.00;[Red](#,##0.00)';
        t[45]= 'mm:ss';
        t[46]= '[h]:mm:ss';
        t[47]= 'mmss.0';
        t[48]= '##0.0E+0';
        t[49]= '@';
        t[56]= '"ä¸Šåˆ/ä¸‹åˆ "hh"æ™‚"mm"åˆ†"ss"ç§’ "';
        t[65535]= 'General';
    }
    
    var table_fmt = {};
    init_table(table_fmt);
    function frac(x, D, mixed) {
        var sgn = x < 0 ? -1 : 1;
        var B = x * sgn;
        var P_2 = 0, P_1 = 1, P = 0;
        var Q_2 = 1, Q_1 = 0, Q = 0;
        var A = Math.floor(B);
        while(Q_1 < D) {
            A = Math.floor(B);
            P = A * P_1 + P_2;
            Q = A * Q_1 + Q_2;
            if((B - A) < 0.00000005) break;
            B = 1 / (B - A);
            P_2 = P_1; P_1 = P;
            Q_2 = Q_1; Q_1 = Q;
        }
        if(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }
        if(!mixed) return [0, sgn * P, Q];
        var q = Math.floor(sgn * P/Q);
        return [q, sgn*P - q*Q, Q];
    }
    function parse_date_code(v,opts,b2) {
        if(v > 2958465 || v < 0) return null;
        var date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;
        var dout=[];
        var out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};
        if(Math.abs(out.u) < 1e-6) out.u = 0;
        if(opts && opts.date1904) date += 1462;
        if(out.u > 0.9999) {
            out.u = 0;
            if(++time == 86400) { out.T = time = 0; ++date; ++out.D; }
        }
        if(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}
        else if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}
        else {
            if(date > 60) --date;
            /* 1 = Jan 1 1900 in Gregorian */
            var d = new Date(1900, 0, 1);
            d.setDate(d.getDate() + date - 1);
            dout = [d.getFullYear(), d.getMonth()+1,d.getDate()];
            dow = d.getDay();
            if(date < 60) dow = (dow + 6) % 7;
            if(b2) dow = fix_hijri(d, dout);
        }
        out.y = dout[0]; out.m = dout[1]; out.d = dout[2];
        out.S = time % 60; time = Math.floor(time / 60);
        out.M = time % 60; time = Math.floor(time / 60);
        out.H = time;
        out.q = dow;
        return out;
    }
    SSF.parse_date_code = parse_date_code;
    var basedate = new Date(1899, 11, 31, 0, 0, 0);
    var dnthresh = basedate.getTime();
    var base1904 = new Date(1900, 2, 1, 0, 0, 0);
    function datenum_local(v, date1904) {
        var epoch = v.getTime();
        if(date1904) epoch -= 1461*24*60*60*1000;
        else if(v >= base1904) epoch += 24*60*60*1000;
        return (epoch - (dnthresh + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);
    }
    function general_fmt_int(v) { return v.toString(10); }
    SSF._general_int = general_fmt_int;
    var general_fmt_num = (function make_general_fmt_num() {
    var gnr1 = /\.(\d*[1-9])0+$/, gnr2 = /\.0*$/, gnr4 = /\.(\d*[1-9])0+/, gnr5 = /\.0*[Ee]/, gnr6 = /(E[+-])(\d)$/;
    function gfn2(v) {
        var w = (v<0?12:11);
        var o = gfn5(v.toFixed(12)); if(o.length <= w) return o;
        o = v.toPrecision(10); if(o.length <= w) return o;
        return v.toExponential(5);
    }
    function gfn3(v) {
        var o = v.toFixed(11).replace(gnr1,".$1");
        if(o.length > (v<0?12:11)) o = v.toPrecision(6);
        return o;
    }
    function gfn4(o) {
        for(var i = 0; i != o.length; ++i) if((o.charCodeAt(i) | 0x20) === 101) return o.replace(gnr4,".$1").replace(gnr5,"E").replace("e","E").replace(gnr6,"$10$2");
        return o;
    }
    function gfn5(o) {
        return o.indexOf(".") > -1 ? o.replace(gnr2,"").replace(gnr1,".$1") : o;
    }
    return function general_fmt_num(v) {
        var V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;
        if(V >= -4 && V <= -1) o = v.toPrecision(10+V);
        else if(Math.abs(V) <= 9) o = gfn2(v);
        else if(V === 10) o = v.toFixed(10).substr(0,12);
        else o = gfn3(v);
        return gfn5(gfn4(o));
    };})();
    SSF._general_num = general_fmt_num;
    function general_fmt(v, opts) {
        switch(typeof v) {
            case 'string': return v;
            case 'boolean': return v ? "TRUE" : "FALSE";
            case 'number': return (v|0) === v ? general_fmt_int(v) : general_fmt_num(v);
            case 'undefined': return "";
            case 'object':
                if(v == null) return "";
                if(v instanceof Date) return format(14, datenum_local(v, opts && opts.date1904), opts);
        }
        throw new Error("unsupported value in General format: " + v);
    }
    SSF._general = general_fmt;
    function fix_hijri() { return 0; }
    /*jshint -W086 */
    function write_date(type, fmt, val, ss0) {
        var o="", ss=0, tt=0, y = val.y, out, outl = 0;
        switch(type) {
            case 98: /* 'b' buddhist year */
                y = val.y + 543;
                /* falls through */
            case 121: /* 'y' year */
            switch(fmt.length) {
                case 1: case 2: out = y % 100; outl = 2; break;
                default: out = y % 10000; outl = 4; break;
            } break;
            case 109: /* 'm' month */
            switch(fmt.length) {
                case 1: case 2: out = val.m; outl = fmt.length; break;
                case 3: return months[val.m-1][1];
                case 5: return months[val.m-1][0];
                default: return months[val.m-1][2];
            } break;
            case 100: /* 'd' day */
            switch(fmt.length) {
                case 1: case 2: out = val.d; outl = fmt.length; break;
                case 3: return days[val.q][0];
                default: return days[val.q][1];
            } break;
            case 104: /* 'h' 12-hour */
            switch(fmt.length) {
                case 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;
                default: throw 'bad hour format: ' + fmt;
            } break;
            case 72: /* 'H' 24-hour */
            switch(fmt.length) {
                case 1: case 2: out = val.H; outl = fmt.length; break;
                default: throw 'bad hour format: ' + fmt;
            } break;
            case 77: /* 'M' minutes */
            switch(fmt.length) {
                case 1: case 2: out = val.M; outl = fmt.length; break;
                default: throw 'bad minute format: ' + fmt;
            } break;
            case 115: /* 's' seconds */
                if(fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;
                if(val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
    if(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
                else tt = ss0 === 1 ? 10 : 1;
                ss = Math.round((tt)*(val.S + val.u));
                if(ss >= 60*tt) ss = 0;
                if(fmt === 's') return ss === 0 ? "0" : ""+ss/tt;
                o = pad0(ss,2 + ss0);
                if(fmt === 'ss') return o.substr(0,2);
                return "." + o.substr(2,fmt.length-1);
            case 90: /* 'Z' absolute time */
            switch(fmt) {
                case '[h]': case '[hh]': out = val.D*24+val.H; break;
                case '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;
                case '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;
                default: throw 'bad abstime format: ' + fmt;
            } outl = fmt.length === 3 ? 1 : 2; break;
            case 101: /* 'e' era */
                out = y; outl = 1;
        }
        if(outl > 0) return pad0(out, outl); else return "";
    }
    /*jshint +W086 */
    function commaify(s) {
        var w = 3;
        if(s.length <= w) return s;
        var j = (s.length % w), o = s.substr(0,j);
        for(; j!=s.length; j+=w) o+=(o.length > 0 ? "," : "") + s.substr(j,w);
        return o;
    }
    var write_num = (function make_write_num(){
    var pct1 = /%/g;
    function write_num_pct(type, fmt, val){
        var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
    }
    function write_num_cm(type, fmt, val){
        var idx = fmt.length - 1;
        while(fmt.charCodeAt(idx-1) === 44) --idx;
        return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
    }
    function write_num_exp(fmt, val){
        var o;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
        if(fmt.match(/^#+0.0E\+0$/)) {
            if(val == 0) return "0.0E+0";
            else if(val < 0) return "-" + write_num_exp(fmt, -val);
            var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
            var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
            if(ee < 0) ee += period;
            o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
            if(o.indexOf("e") === -1) {
                var fakee = Math.floor(Math.log(val)*Math.LOG10E);
                if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
                else o += "E+" + (fakee - ee);
                while(o.substr(0,2) === "0.") {
                    o = o.charAt(0) + o.substr(2,period) + "." + o.substr(2+period);
                    o = o.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");
                }
                o = o.replace(/\+-/,"-");
            }
            o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
        } else o = val.toExponential(idx);
        if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
        if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
        return o.replace("e","E");
    }
    var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
    function write_num_f1(r, aval, sign) {
        var den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);
        var myn = (rr - base*den), myd = den;
        return sign + (base === 0 ? "" : ""+base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + "/" + r[3] + pad0(myd,r[4].length));
    }
    function write_num_f2(r, aval, sign) {
        return sign + (aval === 0 ? "" : ""+aval) + fill(" ", r[1].length + 2 + r[4].length);
    }
    var dec1 = /^#*0*\.([0#]+)/;
    var closeparen = /\).*[0#]/;
    var phone = /\(###\) ###\\?-####/;
    function hashq(str) {
        var o = "", cc;
        for(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {
            case 35: break;
            case 63: o+= " "; break;
            case 48: o+= "0"; break;
            default: o+= String.fromCharCode(cc);
        }
        return o;
    }
    function rnd(val, d) { var dd = Math.pow(10,d); return ""+(Math.round(val * dd)/dd); }
    function dec(val, d) {
        if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
            return 0;
        }
        return Math.round((val-Math.floor(val))*Math.pow(10,d));
    }
    function carry(val, d) {
        if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
            return 1;
        }
        return 0;
    }
    function flr(val) { if(val < 2147483647 && val > -2147483648) return ""+(val >= 0 ? (val|0) : (val-1|0)); return ""+Math.floor(val); }
    function write_num_flt(type, fmt, val) {
        if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
            var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
            if(val >= 0) return write_num_flt('n', ffmt, val);
            return '(' + write_num_flt('n', ffmt, -val) + ')';
        }
        if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
        if(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);
        if(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);
        if(fmt.charCodeAt(0) === 36) return "$"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
        var o;
        var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
        if(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);
        if(fmt.match(/^[#?]+$/)) {
            o = pad0r(val,0); if(o === "0") o = "";
            return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
        }
        if((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);
        if(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf("0"));
        if((r = fmt.match(dec1))) {
            o = rnd(val, r[1].length).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1])).replace(/\.(\d*)$/,function($$, $1) { return "." + $1 + fill("0", hashq(r[1]).length-$1.length); });
            return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
        }
        fmt = fmt.replace(/^#+([0.])/, "$1");
        if((r = fmt.match(/^(0*)\.(#*)$/))) {
            return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
        }
        if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify(pad0r(aval,0));
        if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
            return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(""+(Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length),r[1].length);
        }
        if((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,""),val);
        if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
            o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g,""), val));
            ri = 0;
            return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
        }
        if(fmt.match(phone)) {
            o = write_num_flt(type, "##########", val);
            return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
        }
        var oa = "";
        if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
            ri = Math.min(r[4].length,7);
            ff = frac(aval, Math.pow(10,ri)-1, false);
            o = "" + sign;
            oa = write_num("n", r[1], ff[1]);
            if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
            o += oa + r[2] + "/" + r[3];
            oa = rpad_(ff[2],ri);
            if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
            o += oa;
            return o;
        }
        if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
            ri = Math.min(Math.max(r[1].length, r[4].length),7);
            ff = frac(aval, Math.pow(10,ri)-1, true);
            return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
        }
        if((r = fmt.match(/^[#0?]+$/))) {
            o = pad0r(val, 0);
            if(fmt.length <= o.length) return o;
            return hashq(fmt.substr(0,fmt.length-o.length)) + o;
        }
        if((r = fmt.match(/^([#0?]+)\.([#0]+)$/))) {
            o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
            ri = o.indexOf(".");
            var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
            return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
        }
        if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
            ri = dec(val, r[1].length);
            return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(ri,r[1].length);
        }
        switch(fmt) {
            case "###,##0.00": return write_num_flt(type, "#,##0.00", val);
            case "###,###":
            case "##,###":
            case "#,###": var x = commaify(pad0r(aval,0)); return x !== "0" ? sign + x : "";
            case "###,###.00": return write_num_flt(type, "###,##0.00",val).replace(/^0\./,".");
            case "#,###.00": return write_num_flt(type, "#,##0.00",val).replace(/^0\./,".");
            default:
        }
        throw new Error("unsupported format |" + fmt + "|");
    }
    function write_num_cm2(type, fmt, val){
        var idx = fmt.length - 1;
        while(fmt.charCodeAt(idx-1) === 44) --idx;
        return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
    }
    function write_num_pct2(type, fmt, val){
        var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
    }
    function write_num_exp2(fmt, val){
        var o;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
        if(fmt.match(/^#+0.0E\+0$/)) {
            if(val == 0) return "0.0E+0";
            else if(val < 0) return "-" + write_num_exp2(fmt, -val);
            var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
            var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
            if(ee < 0) ee += period;
            o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
            if(!o.match(/[Ee]/)) {
                var fakee = Math.floor(Math.log(val)*Math.LOG10E);
                if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
                else o += "E+" + (fakee - ee);
                o = o.replace(/\+-/,"-");
            }
            o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
        } else o = val.toExponential(idx);
        if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
        if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
        return o.replace("e","E");
    }
    function write_num_int(type, fmt, val) {
        if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
            var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
            if(val >= 0) return write_num_int('n', ffmt, val);
            return '(' + write_num_int('n', ffmt, -val) + ')';
        }
        if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
        if(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);
        if(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);
        if(fmt.charCodeAt(0) === 36) return "$"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
        var o;
        var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
        if(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);
        if(fmt.match(/^[#?]+$/)) {
            o = (""+val); if(val === 0) o = "";
            return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
        }
        if((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);
        if(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf("0"));
        if((r = fmt.match(dec1))) {
    o = (""+val).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1]));
            o = o.replace(/\.(\d*)$/,function($$, $1) {
    return "." + $1 + fill("0", hashq(r[1]).length-$1.length); });
            return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
        }
        fmt = fmt.replace(/^#+([0.])/, "$1");
        if((r = fmt.match(/^(0*)\.(#*)$/))) {
            return sign + (""+aval).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
        }
        if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify((""+aval));
        if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
            return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify((""+val)) + "." + fill('0',r[1].length);
        }
        if((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,""),val);
        if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
            o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g,""), val));
            ri = 0;
            return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
        }
        if(fmt.match(phone)) {
            o = write_num_int(type, "##########", val);
            return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
        }
        var oa = "";
        if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
            ri = Math.min(r[4].length,7);
            ff = frac(aval, Math.pow(10,ri)-1, false);
            o = "" + sign;
            oa = write_num("n", r[1], ff[1]);
            if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
            o += oa + r[2] + "/" + r[3];
            oa = rpad_(ff[2],ri);
            if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
            o += oa;
            return o;
        }
        if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
            ri = Math.min(Math.max(r[1].length, r[4].length),7);
            ff = frac(aval, Math.pow(10,ri)-1, true);
            return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
        }
        if((r = fmt.match(/^[#0?]+$/))) {
            o = "" + val;
            if(fmt.length <= o.length) return o;
            return hashq(fmt.substr(0,fmt.length-o.length)) + o;
        }
        if((r = fmt.match(/^([#0]+)\.([#0]+)$/))) {
            o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
            ri = o.indexOf(".");
            var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
            return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
        }
        if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
            return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(""+val).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(0,r[1].length);
        }
        switch(fmt) {
            case "###,###":
            case "##,###":
            case "#,###": var x = commaify(""+aval); return x !== "0" ? sign + x : "";
            default:
                if(fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
        }
        throw new Error("unsupported format |" + fmt + "|");
    }
    return function write_num(type, fmt, val) {
        return (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
    };})();
    function split_fmt(fmt) {
        var out = [];
        var in_str = false/*, cc*/;
        for(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {
            case 34: /* '"' */
                in_str = !in_str; break;
            case 95: case 42: case 92: /* '_' '*' '\\' */
                ++i; break;
            case 59: /* ';' */
                out[out.length] = fmt.substr(j,i-j);
                j = i+1;
        }
        out[out.length] = fmt.substr(j);
        if(in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
        return out;
    }
    SSF._split = split_fmt;
    var abstime = /\[[HhMmSs]*\]/;
    function fmt_is_date(fmt) {
        var i = 0, /*cc = 0,*/ c = "", o = "";
        while(i < fmt.length) {
            switch((c = fmt.charAt(i))) {
                case 'G': if(isgeneral(fmt, i)) i+= 6; i++; break;
                case '"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) ++i; ++i; break;
                case '\\': i+=2; break;
                case '_': i+=2; break;
                case '@': ++i; break;
                case 'B': case 'b':
                    if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") return true;
                    /* falls through */
                case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
                    /* falls through */
                case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;
                case 'A': case 'a':
                    if(fmt.substr(i, 3).toUpperCase() === "A/P") return true;
                    if(fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
                    ++i; break;
                case '[':
                    o = c;
                    while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
                    if(o.match(abstime)) return true;
                    break;
                case '.':
                    /* falls through */
                case '0': case '#':
                    while(i < fmt.length && ("0#?.,E+-%".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\' && fmt.charAt(i+1) == "-" && "0#".indexOf(fmt.charAt(i+2))>-1))){/* empty */}
                    break;
                case '?': while(fmt.charAt(++i) === c){/* empty */} break;
                case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;
                case '(': case ')': ++i; break;
                case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
                    while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;
                case ' ': ++i; break;
                default: ++i; break;
            }
        }
        return false;
    }
    SSF.is_date = fmt_is_date;
    function eval_fmt(fmt, v, opts, flen) {
        var out = [], o = "", i = 0, c = "", lst='t', dt, j, cc;
        var hr='H';
        /* Tokenize */
        while(i < fmt.length) {
            switch((c = fmt.charAt(i))) {
                case 'G': /* General */
                    if(!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);
                    out[out.length] = {t:'G', v:'General'}; i+=7; break;
                case '"': /* Literal text */
                    for(o="";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);
                    out[out.length] = {t:'t', v:o}; ++i; break;
                case '\\': var w = fmt.charAt(++i), t = (w === "(" || w === ")") ? w : 't';
                    out[out.length] = {t:t, v:w}; ++i; break;
                case '_': out[out.length] = {t:'t', v:" "}; i+=2; break;
                case '@': /* Text Placeholder */
                    out[out.length] = {t:'T', v:v}; ++i; break;
                case 'B': case 'b':
                    if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") {
                        if(dt==null) { dt=parse_date_code(v, opts, fmt.charAt(i+1) === "2"); if(dt==null) return ""; }
                        out[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;
                    }
                    /* falls through */
                case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
                    c = c.toLowerCase();
                    /* falls through */
                case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':
                    if(v < 0) return "";
                    if(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return ""; }
                    o = c; while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;
                    if(c === 'm' && lst.toLowerCase() === 'h') c = 'M';
                    if(c === 'h') c = hr;
                    out[out.length] = {t:c, v:o}; lst = c; break;
                case 'A': case 'a':
                    var q={t:c, v:c};
                    if(dt==null) dt=parse_date_code(v, opts);
                    if(fmt.substr(i, 3).toUpperCase() === "A/P") { if(dt!=null) q.v = dt.H >= 12 ? "P" : "A"; q.t = 'T'; hr='h';i+=3;}
                    else if(fmt.substr(i,5).toUpperCase() === "AM/PM") { if(dt!=null) q.v = dt.H >= 12 ? "PM" : "AM"; q.t = 'T'; i+=5; hr='h'; }
                    else { q.t = "t"; ++i; }
                    if(dt==null && q.t === 'T') return "";
                    out[out.length] = q; lst = c; break;
                case '[':
                    o = c;
                    while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
                    if(o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';
                    if(o.match(abstime)) {
                        if(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return ""; }
                        out[out.length] = {t:'Z', v:o.toLowerCase()};
                        lst = o.charAt(1);
                    } else if(o.indexOf("$") > -1) {
                        o = (o.match(/\$([^-\[\]]*)/)||[])[1]||"$";
                        if(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};
                    }
                    break;
                /* Numbers */
                case '.':
                    if(dt != null) {
                        o = c; while(++i < fmt.length && (c=fmt.charAt(i)) === "0") o += c;
                        out[out.length] = {t:'s', v:o}; break;
                    }
                    /* falls through */
                case '0': case '#':
                    o = c; while((++i < fmt.length && "0#?.,E+-%".indexOf(c=fmt.charAt(i)) > -1) || (c=='\\' && fmt.charAt(i+1) == "-" && i < fmt.length - 2 && "0#".indexOf(fmt.charAt(i+2))>-1)) o += c;
                    out[out.length] = {t:'n', v:o}; break;
                case '?':
                    o = c; while(fmt.charAt(++i) === c) o+=c;
                    out[out.length] = {t:c, v:o}; lst = c; break;
                case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **
                case '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;
                case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
                    o = c; while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);
                    out[out.length] = {t:'D', v:o}; break;
                case ' ': out[out.length] = {t:c, v:c}; ++i; break;
                default:
                    if(",$-+/():!^&'~{}<>=â‚¬acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);
                    out[out.length] = {t:'t', v:c}; ++i; break;
            }
        }
        var bt = 0, ss0 = 0, ssm;
        for(i=out.length-1, lst='t'; i >= 0; --i) {
            switch(out[i].t) {
                case 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;
                case 's':
                    if((ssm=out[i].v.match(/\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);
                    if(bt < 3) bt = 3;
                /* falls through */
                case 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;
                case 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;
                case 'X': /*if(out[i].v === "B2");*/
                    break;
                case 'Z':
                    if(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
                    if(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
                    if(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
            }
        }
        switch(bt) {
            case 0: break;
            case 1:
    if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
                if(dt.S >=  60) { dt.S = 0; ++dt.M; }
                if(dt.M >=  60) { dt.M = 0; ++dt.H; }
                break;
            case 2:
    if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
                if(dt.S >=  60) { dt.S = 0; ++dt.M; }
                break;
        }
        /* replace fields */
        var nstr = "", jj;
        for(i=0; i < out.length; ++i) {
            switch(out[i].t) {
                case 't': case 'T': case ' ': case 'D': break;
                case 'X': out[i].v = ""; out[i].t = ";"; break;
                case 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':
    out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
                    out[i].t = 't'; break;
                case 'n': case '(': case '?':
                    jj = i+1;
                    while(out[jj] != null && (
                        (c=out[jj].t) === "?" || c === "D" ||
                        ((c === " " || c === "t") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === "t" && out[jj+1].v === '/')) ||
                        (out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||
                        (c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))
                    )) {
                        out[i].v += out[jj].v;
                        out[jj] = {v:"", t:";"}; ++jj;
                    }
                    nstr += out[i].v;
                    i = jj-1; break;
                case 'G': out[i].t = 't'; out[i].v = general_fmt(v,opts); break;
            }
        }
        var vv = "", myv, ostr;
        if(nstr.length > 0) {
            if(nstr.charCodeAt(0) == 40) /* '(' */ {
                myv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);
                ostr = write_num('(', nstr, myv);
            } else {
                myv = (v<0 && flen > 1 ? -v : v);
                ostr = write_num('n', nstr, myv);
                if(myv < 0 && out[0] && out[0].t == 't') {
                    ostr = ostr.substr(1);
                    out[0].v = "-" + out[0].v;
                }
            }
            jj=ostr.length-1;
            var decpt = out.length;
            for(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(".") > -1) { decpt = i; break; }
            var lasti=out.length;
            if(decpt === out.length && ostr.indexOf("E") === -1) {
                for(i=out.length-1; i>= 0;--i) {
                    if(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;
                    if(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }
                    else if(jj < 0) out[i].v = "";
                    else { out[i].v = ostr.substr(0, jj+1); jj = -1; }
                    out[i].t = 't';
                    lasti = i;
                }
                if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
            }
            else if(decpt !== out.length && ostr.indexOf("E") === -1) {
                jj = ostr.indexOf(".")-1;
                for(i=decpt; i>= 0; --i) {
                    if(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;
                    j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")-1:out[i].v.length-1;
                    vv = out[i].v.substr(j+1);
                    for(; j>=0; --j) {
                        if(jj>=0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
                    }
                    out[i].v = vv;
                    out[i].t = 't';
                    lasti = i;
                }
                if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
                jj = ostr.indexOf(".")+1;
                for(i=decpt; i<out.length; ++i) {
                    if(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;
                    j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")+1:0;
                    vv = out[i].v.substr(0,j);
                    for(; j<out[i].v.length; ++j) {
                        if(jj<ostr.length) vv += ostr.charAt(jj++);
                    }
                    out[i].v = vv;
                    out[i].t = 't';
                    lasti = i;
                }
            }
        }
        for(i=0; i<out.length; ++i) if(out[i] != null && 'n(?'.indexOf(out[i].t)>-1) {
            myv = (flen >1 && v < 0 && i>0 && out[i-1].v === "-" ? -v:v);
            out[i].v = write_num(out[i].t, out[i].v, myv);
            out[i].t = 't';
        }
        var retval = "";
        for(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;
        return retval;
    }
    SSF._eval = eval_fmt;
    var cfregex = /\[[=<>]/;
    var cfregex2 = /\[([=<>]*)(-?\d+\.?\d*)\]/;
    function chkcond(v, rr) {
        if(rr == null) return false;
        var thresh = parseFloat(rr[2]);
        switch(rr[1]) {
            case "=":  if(v == thresh) return true; break;
            case ">":  if(v >  thresh) return true; break;
            case "<":  if(v <  thresh) return true; break;
            case "<>": if(v != thresh) return true; break;
            case ">=": if(v >= thresh) return true; break;
            case "<=": if(v <= thresh) return true; break;
        }
        return false;
    }
    function choose_fmt(f, v) {
        var fmt = split_fmt(f);
        var l = fmt.length, lat = fmt[l-1].indexOf("@");
        if(l<4 && lat>-1) --l;
        if(fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
        if(typeof v !== "number") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:"@"];
        switch(fmt.length) {
            case 1: fmt = lat>-1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"]; break;
            case 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"]; break;
            case 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"]; break;
            case 4: break;
        }
        var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
        if(fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
        if(fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {
            var m1 = fmt[0].match(cfregex2);
            var m2 = fmt[1].match(cfregex2);
            return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
        }
        return [l, ff];
    }
    function format(fmt,v,o) {
        if(o == null) o = {};
        var sfmt = "";
        switch(typeof fmt) {
            case "string":
                if(fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
                else sfmt = fmt;
                break;
            case "number":
                if(fmt == 14 && o.dateNF) sfmt = o.dateNF;
                else sfmt = (o.table != null ? (o.table) : table_fmt)[fmt];
                break;
        }
        if(isgeneral(sfmt,0)) return general_fmt(v, o);
        if(v instanceof Date) v = datenum_local(v, o.date1904);
        var f = choose_fmt(sfmt, v);
        if(isgeneral(f[1])) return general_fmt(v, o);
        if(v === true) v = "TRUE"; else if(v === false) v = "FALSE";
        else if(v === "" || v == null) return "";
        return eval_fmt(f[1], v, o, f[0]);
    }
    function load_entry(fmt, idx) {
        if(typeof idx != 'number') {
            idx = +idx || -1;
    for(var i = 0; i < 0x0188; ++i) {
    if(table_fmt[i] == undefined) { if(idx < 0) idx = i; continue; }
                if(table_fmt[i] == fmt) { idx = i; break; }
            }
    if(idx < 0) idx = 0x187;
        }
    table_fmt[idx] = fmt;
        return idx;
    }
    SSF.load = load_entry;
    SSF._table = table_fmt;
    SSF.get_table = function get_table() { return table_fmt; };
    SSF.load_table = function load_table(tbl) {
        for(var i=0; i!=0x0188; ++i)
            if(tbl[i] !== undefined) load_entry(tbl[i], i);
    };
    SSF.init_table = init_table;
    SSF.format = format;
    };
    make_ssf(SSF);
    /* map from xlml named formats to SSF TODO: localize */
    var XLMLFormatMap/*{[string]:string}*/ = ({
        "General Number": "General",
        "General Date": SSF._table[22],
        "Long Date": "dddd, mmmm dd, yyyy",
        "Medium Date": SSF._table[15],
        "Short Date": SSF._table[14],
        "Long Time": SSF._table[19],
        "Medium Time": SSF._table[18],
        "Short Time": SSF._table[20],
        "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "Fixed": SSF._table[2],
        "Standard": SSF._table[4],
        "Percent": SSF._table[10],
        "Scientific": SSF._table[11],
        "Yes/No": '"Yes";"Yes";"No";@',
        "True/False": '"True";"True";"False";@',
        "On/Off": '"Yes";"Yes";"No";@'
    });
    
    /* dateNF parse TODO: move to SSF */
    var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
    function dateNF_regex(dateNF) {
        var fmt = typeof dateNF == "number" ? SSF._table[dateNF] : dateNF;
        fmt = fmt.replace(dateNFregex, "(\\d+)");
        return new RegExp("^" + fmt + "$");
    }
    function dateNF_fix(str, dateNF, match) {
        var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
        (dateNF.match(dateNFregex)||[]).forEach(function(n, i) {
            var v = parseInt(match[i+1], 10);
            switch(n.toLowerCase().charAt(0)) {
                case 'y': Y = v; break; case 'd': d = v; break;
                case 'h': H = v; break; case 's': S = v; break;
                case 'm': if(H >= 0) M = v; else m = v; break;
            }
        });
        if(S >= 0 && M == -1 && m >= 0) { M = m; m = -1; }
        var datestr = (("" + (Y>=0?Y: new Date().getFullYear())).slice(-4) + "-" + ("00" + (m>=1?m:1)).slice(-2) + "-" + ("00" + (d>=1?d:1)).slice(-2));
        if(datestr.length == 7) datestr = "0" + datestr;
        if(datestr.length == 8) datestr = "20" + datestr;
        var timestr = (("00" + (H>=0?H:0)).slice(-2) + ":" + ("00" + (M>=0?M:0)).slice(-2) + ":" + ("00" + (S>=0?S:0)).slice(-2));
        if(H == -1 && M == -1 && S == -1) return datestr;
        if(Y == -1 && m == -1 && d == -1) return timestr;
        return datestr + "T" + timestr;
    }
    
    var DO_NOT_EXPORT_CFB = true;
    /* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*jshint eqnull:true */
    /*exported CFB */
    /*global module, require:false, process:false, Buffer:false, Uint8Array:false */
    
    /* [MS-CFB] v20130118 */
    var CFB = (function _CFB(){
    var exports = {};
    exports.version = '1.0.1';
    /* [MS-CFB] 2.6.4 */
    function namecmp(l, r) {
        var L = l.split("/"), R = r.split("/");
        for(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {
            if((c = L[i].length - R[i].length)) return c;
            if(L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
        }
        return L.length - R.length;
    }
    function dirname(p) {
        if(p.charAt(p.length - 1) == "/") return (p.slice(0,-1).indexOf("/") === -1) ? p : dirname(p.slice(0, -1));
        var c = p.lastIndexOf("/");
        return (c === -1) ? p : p.slice(0, c+1);
    }
    
    function filename(p) {
        if(p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
        var c = p.lastIndexOf("/");
        return (c === -1) ? p : p.slice(c+1);
    }
    var fs;
    function get_fs() { return fs || (fs = require('fs')); }
    function parse(file, options) {
    var mver = 3;
    var ssz = 512;
    var nmfs = 0; // number of mini FAT sectors
    var difat_sec_cnt = 0;
    var dir_start = 0;
    var minifat_start = 0;
    var difat_start = 0;
    
    var fat_addrs = []; // locations of FAT sectors
    
    /* [MS-CFB] 2.2 Compound File Header */
    var blob = file.slice(0,512);
    prep_blob(blob, 0);
    
    /* major version */
    var mv = check_get_mver(blob);
    mver = mv[0];
    switch(mver) {
        case 3: ssz = 512; break; case 4: ssz = 4096; break;
        default: throw new Error("Major Version: Expected 3 or 4 saw " + mver);
    }
    
    /* reprocess header */
    if(ssz !== 512) { blob = file.slice(0,ssz); prep_blob(blob, 28 /* blob.l */); }
    /* Save header for final object */
    var header = file.slice(0,ssz);
    
    check_shifts(blob, mver);
    
    // Number of Directory Sectors
    var dir_cnt = blob.read_shift(4, 'i');
    if(mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);
    
    // Number of FAT Sectors
    blob.l += 4;
    
    // First Directory Sector Location
    dir_start = blob.read_shift(4, 'i');
    
    // Transaction Signature
    blob.l += 4;
    
    // Mini Stream Cutoff Size
    blob.chk('00100000', 'Mini Stream Cutoff Size: ');
    
    // First Mini FAT Sector Location
    minifat_start = blob.read_shift(4, 'i');
    
    // Number of Mini FAT Sectors
    nmfs = blob.read_shift(4, 'i');
    
    // First DIFAT sector location
    difat_start = blob.read_shift(4, 'i');
    
    // Number of DIFAT Sectors
    difat_sec_cnt = blob.read_shift(4, 'i');
    
    // Grab FAT Sector Locations
    for(var q = -1, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */
        q = blob.read_shift(4, 'i');
        if(q<0) break;
        fat_addrs[j] = q;
    }
    
    /** Break the file up into sectors */
    var sectors = sectorify(file, ssz);
    
    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
    
    /** Chains */
    var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
    
    sector_list[dir_start].name = "!Directory";
    if(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
    sector_list[fat_addrs[0]].name = "!FAT";
    sector_list.fat_addrs = fat_addrs;
    sector_list.ssz = ssz;
    
    /* [MS-CFB] 2.6.1 Compound File Directory Entry */
    var files = {}, Paths = [], FileIndex = [], FullPaths = [];
    read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
    
    build_full_paths(FileIndex, FullPaths, Paths);
    Paths.shift();
    
    var o = {
        FileIndex: FileIndex,
        FullPaths: FullPaths
    };
    
    // $FlowIgnore
    if(options && options.raw) o.raw = {header: header, sectors: sectors};
    return o;
    } // parse
    
    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */
    function check_get_mver(blob) {
        // header signature 8
        blob.chk(HEADER_SIGNATURE, 'Header Signature: ');
    
        // clsid 16
        blob.chk(HEADER_CLSID, 'CLSID: ');
    
        // minor version 2
        var mver = blob.read_shift(2, 'u');
    
        return [blob.read_shift(2,'u'), mver];
    }
    function check_shifts(blob, mver) {
        var shift = 0x09;
    
        // Byte Order
        //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff
        blob.l += 2;
    
        // Sector Shift
        switch((shift = blob.read_shift(2))) {
            case 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;
            case 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;
            default: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);
        }
    
        // Mini Sector Shift
        blob.chk('0600', 'Mini Sector Shift: ');
    
        // Reserved
        blob.chk('000000000000', 'Reserved: ');
    }
    
    /** Break the file up into sectors */
    function sectorify(file, ssz) {
        var nsectors = Math.ceil(file.length/ssz)-1;
        var sectors = [];
        for(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);
        sectors[nsectors-1] = file.slice(nsectors*ssz);
        return sectors;
    }
    
    /* [MS-CFB] 2.6.4 Red-Black Tree */
    function build_full_paths(FI, FP, Paths) {
        var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
        var dad = [], q = [];
    
        for(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }
    
        for(; j < q.length; ++j) {
            i = q[j];
            L = FI[i].L; R = FI[i].R; C = FI[i].C;
            if(dad[i] === i) {
                if(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];
                if(R !== -1 && dad[R] !== R) dad[i] = dad[R];
            }
            if(C !== -1 /*NOSTREAM*/) dad[C] = i;
            if(L !== -1) { dad[L] = dad[i]; q.push(L); }
            if(R !== -1) { dad[R] = dad[i]; q.push(R); }
        }
        for(i=1; i !== pl; ++i) if(dad[i] === i) {
            if(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];
            else if(L !== -1 && dad[L] !== L) dad[i] = dad[L];
        }
    
        for(i=1; i < pl; ++i) {
            if(FI[i].type === 0 /* unknown */) continue;
            j = dad[i];
            if(j === 0) FP[i] = FP[0] + "/" + FP[i];
            else while(j !== 0 && j !== dad[j]) {
                FP[i] = FP[j] + "/" + FP[i];
                j = dad[j];
            }
            dad[i] = 0;
        }
    
        FP[0] += "/";
        for(i=1; i < pl; ++i) {
            if(FI[i].type !== 2 /* stream */) FP[i] += "/";
        }
    }
    
    function get_mfat_entry(entry, payload, mini) {
        var start = entry.start, size = entry.size;
        //return (payload.slice(start*MSSZ, start*MSSZ + size));
        var o = [];
        var idx = start;
        while(mini && size > 0 && idx >= 0) {
            o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
            size -= MSSZ;
            idx = __readInt32LE(mini, idx * 4);
        }
        if(o.length === 0) return (new_buf(0));
        return (bconcat(o).slice(0, entry.size));
    }
    
    /** Chase down the rest of the DIFAT chain to build a comprehensive list
        DIFAT chains by storing the next sector number as the last 32 bits */
    function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
        var q = ENDOFCHAIN;
        if(idx === ENDOFCHAIN) {
            if(cnt !== 0) throw new Error("DIFAT chain shorter than expected");
        } else if(idx !== -1 /*FREESECT*/) {
            var sector = sectors[idx], m = (ssz>>>2)-1;
            if(!sector) return;
            for(var i = 0; i < m; ++i) {
                if((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;
                fat_addrs.push(q);
            }
            sleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);
        }
    }
    
    /** Follow the linked list of sectors for a given starting point */
    function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
        var buf = [], buf_chain = [];
        if(!chkd) chkd = [];
        var modulus = ssz - 1, j = 0, jj = 0;
        for(j=start; j>=0;) {
            chkd[j] = true;
            buf[buf.length] = j;
            buf_chain.push(sectors[j]);
            var addr = fat_addrs[Math.floor(j*4/ssz)];
            jj = ((j*4) & modulus);
            if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
            if(!sectors[addr]) break;
            j = __readInt32LE(sectors[addr], jj);
        }
        return {nodes: buf, data:__toBuffer([buf_chain])};
    }
    
    /** Chase down the sector linked lists */
    function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
        var sl = sectors.length, sector_list = ([]);
        var chkd = [], buf = [], buf_chain = [];
        var modulus = ssz - 1, i=0, j=0, k=0, jj=0;
        for(i=0; i < sl; ++i) {
            buf = ([]);
            k = (i + dir_start); if(k >= sl) k-=sl;
            if(chkd[k]) continue;
            buf_chain = [];
            for(j=k; j>=0;) {
                chkd[j] = true;
                buf[buf.length] = j;
                buf_chain.push(sectors[j]);
                var addr = fat_addrs[Math.floor(j*4/ssz)];
                jj = ((j*4) & modulus);
                if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
                if(!sectors[addr]) break;
                j = __readInt32LE(sectors[addr], jj);
            }
            sector_list[k] = ({nodes: buf, data:__toBuffer([buf_chain])});
        }
        return sector_list;
    }
    
    /* [MS-CFB] 2.6.1 Compound File Directory Entry */
    function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
        var minifat_store = 0, pl = (Paths.length?2:0);
        var sector = sector_list[dir_start].data;
        var i = 0, namelen = 0, name;
        for(; i < sector.length; i+= 128) {
            var blob = sector.slice(i, i+128);
            prep_blob(blob, 64);
            namelen = blob.read_shift(2);
            name = __utf16le(blob,0,namelen-pl);
            Paths.push(name);
            var o = ({
                name:  name,
                type:  blob.read_shift(1),
                color: blob.read_shift(1),
                L:     blob.read_shift(4, 'i'),
                R:     blob.read_shift(4, 'i'),
                C:     blob.read_shift(4, 'i'),
                clsid: blob.read_shift(16),
                state: blob.read_shift(4, 'i'),
                start: 0,
                size: 0
            });
            var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if(ctime !== 0) o.ct = read_date(blob, blob.l-8);
            var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if(mtime !== 0) o.mt = read_date(blob, blob.l-8);
            o.start = blob.read_shift(4, 'i');
            o.size = blob.read_shift(4, 'i');
            if(o.size < 0 && o.start < 0) { o.size = o.type = 0; o.start = ENDOFCHAIN; o.name = ""; }
            if(o.type === 5) { /* root */
                minifat_store = o.start;
                if(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
                /*minifat_size = o.size;*/
            } else if(o.size >= 4096 /* MSCSZ */) {
                o.storage = 'fat';
                if(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
                sector_list[o.start].name = o.name;
                o.content = (sector_list[o.start].data.slice(0,o.size));
                prep_blob(o.content, 0);
            } else {
                o.storage = 'minifat';
                if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
                    o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini]||{}).data);
                    prep_blob(o.content, 0);
                }
            }
            files[name] = o;
            FileIndex.push(o);
        }
    }
    
    function read_date(blob, offset) {
        return new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);
    }
    
    function read_file(filename, options) {
        get_fs();
        return parse(fs.readFileSync(filename), options);
    }
    
    function read(blob, options) {
        switch(options && options.type || "base64") {
            case "file": return read_file(blob, options);
            case "base64": return parse(s2a(Base64.decode(blob)), options);
            case "binary": return parse(s2a(blob), options);
        }
        return parse(blob, options);
    }
    
    function init_cfb(cfb, opts) {
        var o = opts || {}, root = o.root || "Root Entry";
        if(!cfb.FullPaths) cfb.FullPaths = [];
        if(!cfb.FileIndex) cfb.FileIndex = [];
        if(cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
        if(cfb.FullPaths.length === 0) {
            cfb.FullPaths[0] = root + "/";
            cfb.FileIndex[0] = ({ name: root, type: 5 });
        }
        if(o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
        seed_cfb(cfb);
    }
    function seed_cfb(cfb) {
        var nm = "\u0001Sh33tJ5";
        if(CFB.find(cfb, "/" + nm)) return;
        var p = new_buf(4); p[0] = 55; p[1] = p[3] = 50; p[2] = 54;
        cfb.FileIndex.push(({ name: nm, type: 2, content:p, size:4, L:69, R:69, C:69 }));
        cfb.FullPaths.push(cfb.FullPaths[0] + nm);
        rebuild_cfb(cfb);
    }
    function rebuild_cfb(cfb, f) {
        init_cfb(cfb);
        var gc = false, s = false;
        for(var i = cfb.FullPaths.length - 1; i >= 0; --i) {
            var _file = cfb.FileIndex[i];
            switch(_file.type) {
                case 0:
                    if(s) gc = true;
                    else { cfb.FileIndex.pop(); cfb.FullPaths.pop(); }
                    break;
                case 1: case 2: case 5:
                    s = true;
                    if(isNaN(_file.R * _file.L * _file.C)) gc = true;
                    if(_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
                    break;
                default: gc = true; break;
            }
        }
        if(!gc && !f) return;
    
        var now = new Date(1987, 1, 19), j = 0;
        var data = [];
        for(i = 0; i < cfb.FullPaths.length; ++i) {
            if(cfb.FileIndex[i].type === 0) continue;
            data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);
        }
        for(i = 0; i < data.length; ++i) {
            var dad = dirname(data[i][0]);
            s = false;
            for(j = 0; j < data.length; ++j) if(data[j][0] === dad) s = true;
            if(!s) data.push([dad, ({
                name: filename(dad).replace("/",""),
                type: 1,
                clsid: HEADER_CLSID,
                ct: now, mt: now,
                content: null
            })]);
        }
    
        data.sort(function(x,y) { return namecmp(x[0], y[0]); });
        cfb.FullPaths = []; cfb.FileIndex = [];
        for(i = 0; i < data.length; ++i) { cfb.FullPaths[i] = data[i][0]; cfb.FileIndex[i] = data[i][1]; }
        for(i = 0; i < data.length; ++i) {
            var elt = cfb.FileIndex[i];
            var nm = cfb.FullPaths[i];
    
            elt.name =  filename(nm).replace("/","");
            elt.L = elt.R = elt.C = -(elt.color = 1);
            elt.size = elt.content ? elt.content.length : 0;
            elt.start = 0;
            elt.clsid = (elt.clsid || HEADER_CLSID);
            if(i === 0) {
                elt.C = data.length > 1 ? 1 : -1;
                elt.size = 0;
                elt.type = 5;
            } else if(nm.slice(-1) == "/") {
                for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==nm) break;
                elt.C = j >= data.length ? -1 : j;
                for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==dirname(nm)) break;
                elt.R = j >= data.length ? -1 : j;
                elt.type = 1;
            } else {
                if(dirname(cfb.FullPaths[i+1]||"") == dirname(nm)) elt.R = i + 1;
                elt.type = 2;
            }
        }
    
    }
    
    function _write(cfb, options) {
        rebuild_cfb(cfb);
        var L = (function(cfb){
            var mini_size = 0, fat_size = 0;
            for(var i = 0; i < cfb.FileIndex.length; ++i) {
                var file = cfb.FileIndex[i];
                if(!file.content) continue;
    var flen = file.content.length;
                if(flen === 0){}
                else if(flen < 0x1000) mini_size += (flen + 0x3F) >> 6;
                else fat_size += (flen + 0x01FF) >> 9;
            }
            var dir_cnt = (cfb.FullPaths.length +3) >> 2;
            var mini_cnt = (mini_size + 7) >> 3;
            var mfat_cnt = (mini_size + 0x7F) >> 7;
            var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
            var fat_cnt = (fat_base + 0x7F) >> 7;
            var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
            while(((fat_base + fat_cnt + difat_cnt + 0x7F) >> 7) > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
            var L =  [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
            cfb.FileIndex[0].size = mini_size << 6;
            L[7] = (cfb.FileIndex[0].start=L[0]+L[1]+L[2]+L[3]+L[4]+L[5])+((L[6]+7) >> 3);
            return L;
        })(cfb);
        var o = new_buf(L[7] << 9);
        var i = 0, T = 0;
        {
            for(i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);
            for(i = 0; i < 8; ++i) o.write_shift(2, 0);
            o.write_shift(2, 0x003E);
            o.write_shift(2, 0x0003);
            o.write_shift(2, 0xFFFE);
            o.write_shift(2, 0x0009);
            o.write_shift(2, 0x0006);
            for(i = 0; i < 3; ++i) o.write_shift(2, 0);
            o.write_shift(4, 0);
            o.write_shift(4, L[2]);
            o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
            o.write_shift(4, 0);
            o.write_shift(4, 1<<12);
            o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1: ENDOFCHAIN);
            o.write_shift(4, L[3]);
            o.write_shift(-4, L[1] ? L[0] - 1: ENDOFCHAIN);
            o.write_shift(4, L[1]);
            for(i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
        }
        if(L[1]) {
            for(T = 0; T < L[1]; ++T) {
                for(; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
                o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
            }
        }
        var chainit = function(w) {
            for(T += w; i<T-1; ++i) o.write_shift(-4, i+1);
            if(w) { ++i; o.write_shift(-4, ENDOFCHAIN); }
        };
        T = i = 0;
        for(T+=L[1]; i<T; ++i) o.write_shift(-4, consts.DIFSECT);
        for(T+=L[2]; i<T; ++i) o.write_shift(-4, consts.FATSECT);
        chainit(L[3]);
        chainit(L[4]);
        var j = 0, flen = 0;
        var file = cfb.FileIndex[0];
        for(; j < cfb.FileIndex.length; ++j) {
            file = cfb.FileIndex[j];
            if(!file.content) continue;
    flen = file.content.length;
            if(flen < 0x1000) continue;
            file.start = T;
            chainit((flen + 0x01FF) >> 9);
        }
        chainit((L[6] + 7) >> 3);
        while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
        T = i = 0;
        for(j = 0; j < cfb.FileIndex.length; ++j) {
            file = cfb.FileIndex[j];
            if(!file.content) continue;
    flen = file.content.length;
            if(!flen || flen >= 0x1000) continue;
            file.start = T;
            chainit((flen + 0x3F) >> 6);
        }
        while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
        for(i = 0; i < L[4]<<2; ++i) {
            var nm = cfb.FullPaths[i];
            if(!nm || nm.length === 0) {
                for(j = 0; j < 17; ++j) o.write_shift(4, 0);
                for(j = 0; j < 3; ++j) o.write_shift(4, -1);
                for(j = 0; j < 12; ++j) o.write_shift(4, 0);
                continue;
            }
            file = cfb.FileIndex[i];
            if(i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
            flen = 2*(file.name.length+1);
            o.write_shift(64, file.name, "utf16le");
            o.write_shift(2, flen);
            o.write_shift(1, file.type);
            o.write_shift(1, file.color);
            o.write_shift(-4, file.L);
            o.write_shift(-4, file.R);
            o.write_shift(-4, file.C);
            if(!file.clsid) for(j = 0; j < 4; ++j) o.write_shift(4, 0);
            else o.write_shift(16, file.clsid, "hex");
            o.write_shift(4, file.state || 0);
            o.write_shift(4, 0); o.write_shift(4, 0);
            o.write_shift(4, 0); o.write_shift(4, 0);
            o.write_shift(4, file.start);
            o.write_shift(4, file.size); o.write_shift(4, 0);
        }
        for(i = 1; i < cfb.FileIndex.length; ++i) {
            file = cfb.FileIndex[i];
    if(file.size >= 0x1000) {
                o.l = (file.start+1) << 9;
                for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
                for(; j & 0x1FF; ++j) o.write_shift(1, 0);
            }
        }
        for(i = 1; i < cfb.FileIndex.length; ++i) {
            file = cfb.FileIndex[i];
    if(file.size > 0 && file.size < 0x1000) {
                for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
                for(; j & 0x3F; ++j) o.write_shift(1, 0);
            }
        }
        while(o.l < o.length) o.write_shift(1, 0);
        return o;
    }
    /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */
    function find(cfb, path) {
        //return cfb.find(path);
        var UCFullPaths = cfb.FullPaths.map(function(x) { return x.toUpperCase(); });
        var UCPaths = UCFullPaths.map(function(x) { var y = x.split("/"); return y[y.length - (x.slice(-1) == "/" ? 2 : 1)]; });
        var k = false;
        if(path.charCodeAt(0) === 47 /* "/" */) { k = true; path = UCFullPaths[0].slice(0, -1) + path; }
        else k = path.indexOf("/") !== -1;
        var UCPath = path.toUpperCase();
        var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
        if(w !== -1) return cfb.FileIndex[w];
    
        UCPath = UCPath.replace(chr0,'').replace(chr1,'!');
        for(w = 0; w < UCFullPaths.length; ++w) {
            if(UCFullPaths[w].replace(chr0,'').replace(chr1,'!') == UCPath) return cfb.FileIndex[w];
            if(UCPaths[w].replace(chr0,'').replace(chr1,'!') == UCPath) return cfb.FileIndex[w];
        }
        return null;
    }
    /** CFB Constants */
    var MSSZ = 64; /* Mini Sector Size = 1<<6 */
    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */
    /* 2.1 Compound File Sector Numbers and Types */
    var ENDOFCHAIN = -2;
    /* 2.2 Compound File Header */
    var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
    var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];
    var HEADER_CLSID = '00000000000000000000000000000000';
    var consts = {
        /* 2.1 Compund File Sector Numbers and Types */
        MAXREGSECT: -6,
        DIFSECT: -4,
        FATSECT: -3,
        ENDOFCHAIN: ENDOFCHAIN,
        FREESECT: -1,
        /* 2.2 Compound File Header */
        HEADER_SIGNATURE: HEADER_SIGNATURE,
        HEADER_MINOR_VERSION: '3e00',
        MAXREGSID: -6,
        NOSTREAM: -1,
        HEADER_CLSID: HEADER_CLSID,
        /* 2.6.1 Compound File Directory Entry */
        EntryTypes: ['unknown','storage','stream','lockbytes','property','root']
    };
    
    function write_file(cfb, filename, options) {
        get_fs();
        var o = _write(cfb, options);
    fs.writeFileSync(filename, o);
    }
    
    function a2s(o) {
        var out = new Array(o.length);
        for(var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);
        return out.join("");
    }
    
    function write(cfb, options) {
        var o = _write(cfb, options);
        switch(options && options.type) {
            case "file": get_fs(); fs.writeFileSync(options.filename, (o)); return o;
            case "binary": return a2s(o);
            case "base64": return Base64.encode(a2s(o));
        }
        return o;
    }
    function cfb_new(opts) {
        var o = ({});
        init_cfb(o, opts);
        return o;
    }
    
    function cfb_add(cfb, name, content, opts) {
        init_cfb(cfb);
        var file = CFB.find(cfb, name);
        if(!file) {
            var fpath = cfb.FullPaths[0];
            if(name.slice(0, fpath.length) == fpath) fpath = name;
            else {
                if(fpath.slice(-1) != "/") fpath += "/";
                fpath = (fpath + name).replace("//","/");
            }
            file = ({name: filename(name), type: 2});
            cfb.FileIndex.push(file);
            cfb.FullPaths.push(fpath);
            CFB.utils.cfb_gc(cfb);
        }
    file.content = (content);
        file.size = content ? content.length : 0;
        if(opts) {
            if(opts.CLSID) file.clsid = opts.CLSID;
        }
        return file;
    }
    
    function cfb_del(cfb, name) {
        init_cfb(cfb);
        var file = CFB.find(cfb, name);
        if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
            cfb.FileIndex.splice(j, 1);
            cfb.FullPaths.splice(j, 1);
            return true;
        }
        return false;
    }
    
    function cfb_mov(cfb, old_name, new_name) {
        init_cfb(cfb);
        var file = CFB.find(cfb, old_name);
        if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
            cfb.FileIndex[j].name = filename(new_name);
            cfb.FullPaths[j] = new_name;
            return true;
        }
        return false;
    }
    
    function cfb_gc(cfb) { rebuild_cfb(cfb, true); }
    
    exports.find = find;
    exports.read = read;
    exports.parse = parse;
    exports.write = write;
    exports.writeFile = write_file;
    exports.utils = {
        cfb_new: cfb_new,
        cfb_add: cfb_add,
        cfb_del: cfb_del,
        cfb_mov: cfb_mov,
        cfb_gc: cfb_gc,
        ReadShift: ReadShift,
        CheckField: CheckField,
        prep_blob: prep_blob,
        bconcat: bconcat,
        consts: consts
    };
    
    return exports;
    })();
    
    if(typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') { module.exports = CFB; }
    function keys(o) { return Object.keys(o); }
    
    function evert_key(obj, key) {
        var o = ([]), K = keys(obj);
        for(var i = 0; i !== K.length; ++i) o[obj[K[i]][key]] = K[i];
        return o;
    }
    
    function evert(obj) {
        var o = ([]), K = keys(obj);
        for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
        return o;
    }
    
    function evert_num(obj) {
        var o = ([]), K = keys(obj);
        for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i],10);
        return o;
    }
    
    function evert_arr(obj) {
        var o = ([]), K = keys(obj);
        for(var i = 0; i !== K.length; ++i) {
            if(o[obj[K[i]]] == null) o[obj[K[i]]] = [];
            o[obj[K[i]]].push(K[i]);
        }
        return o;
    }
    
    var basedate = new Date(1899, 11, 30, 0, 0, 0); // 2209161600000
    var dnthresh = basedate.getTime() + (new Date().getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000;
    function datenum(v, date1904) {
        var epoch = v.getTime();
        if(date1904) epoch -= 1462*24*60*60*1000;
        return (epoch - dnthresh) / (24 * 60 * 60 * 1000);
    }
    function numdate(v) {
        var out = new Date();
        out.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);
        return out;
    }
    
    /* ISO 8601 Duration */
    function parse_isodur(s) {
        var sec = 0, mt = 0, time = false;
        var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
        if(!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
        for(var i = 1; i != m.length; ++i) {
            if(!m[i]) continue;
            mt = 1;
            if(i > 3) time = true;
            switch(m[i].substr(m[i].length-1)) {
                case 'Y':
                    throw new Error("Unsupported ISO Duration Field: " + m[i].substr(m[i].length-1));
                case 'D': mt *= 24;
                    /* falls through */
                case 'H': mt *= 60;
                    /* falls through */
                case 'M':
                    if(!time) throw new Error("Unsupported ISO Duration Field: M");
                    else mt *= 60;
                    /* falls through */
                case 'S': break;
            }
            sec += mt * parseInt(m[i], 10);
        }
        return sec;
    }
    
    var good_pd_date = new Date('2017-02-19T19:06:09.000Z');
    if(isNaN(good_pd_date.getFullYear())) good_pd_date = new Date('2/19/17');
    var good_pd = good_pd_date.getFullYear() == 2017;
    /* parses a date as a local date */
    function parseDate(str, fixdate) {
        var d = new Date(str);
        if(good_pd) {
    if(fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);
            else if(fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);
            return d;
        }
        if(str instanceof Date) return str;
        if(good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
            var s = d.getFullYear();
            if(str.indexOf("" + s) > -1) return d;
            d.setFullYear(d.getFullYear() + 100); return d;
        }
        var n = str.match(/\d+/g)||["2017","2","19","0","0","0"];
        var out = new Date(+n[0], +n[1] - 1, +n[2], (+n[3]||0), (+n[4]||0), (+n[5]||0));
        if(str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);
        return out;
    }
    
    function cc2str(arr) {
        var o = "";
        for(var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);
        return o;
    }
    
    function dup(o) {
        if(typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
        if(typeof o != 'object' || o == null) return o;
        var out = {};
        for(var k in o) if(o.hasOwnProperty(k)) out[k] = dup(o[k]);
        return out;
    }
    
    function fill(c,l) { var o = ""; while(o.length < l) o+=c; return o; }
    
    /* TODO: stress test */
    function fuzzynum(s) {
        var v = Number(s);
        if(!isNaN(v)) return v;
        var wt = 1;
        var ss = s.replace(/([\d]),([\d])/g,"$1$2").replace(/[$]/g,"").replace(/[%]/g, function() { wt *= 100; return "";});
        if(!isNaN(v = Number(ss))) return v / wt;
        ss = ss.replace(/[(](.*)[)]/,function($$, $1) { wt = -wt; return $1;});
        if(!isNaN(v = Number(ss))) return v / wt;
        return v;
    }
    function fuzzydate(s) {
        var o = new Date(s), n = new Date(NaN);
        var y = o.getYear(), m = o.getMonth(), d = o.getDate();
        if(isNaN(d)) return n;
        if(y < 0 || y > 8099) return n;
        if((m > 0 || d > 1) && y != 101) return o;
        if(s.toLowerCase().match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) return o;
        if(s.match(/[^-0-9:,\/\\]/)) return n;
        return o;
    }
    
    var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
    function split_regex(str, re, def) {
        if(safe_split_regex || typeof re == "string") return str.split(re);
        var p = str.split(re), o = [p[0]];
        for(var i = 1; i < p.length; ++i) { o.push(def); o.push(p[i]); }
        return o;
    }
    function getdatastr(data) {
        if(!data) return null;
        if(data.data) return debom(data.data);
        if(data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));
        if(data.asBinary) return debom(data.asBinary());
        if(data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));
        return null;
    }
    
    function getdatabin(data) {
        if(!data) return null;
        if(data.data) return char_codes(data.data);
        if(data.asNodeBuffer && has_buf) return data.asNodeBuffer();
        if(data._data && data._data.getContent) {
            var o = data._data.getContent();
            if(typeof o == "string") return char_codes(o);
            return Array.prototype.slice.call(o);
        }
        return null;
    }
    
    function getdata(data) { return (data && data.name.slice(-4) === ".bin") ? getdatabin(data) : getdatastr(data); }
    
    /* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */
    /* OASIS does not comment on filename case sensitivity */
    function safegetzipfile(zip, file) {
        var k = keys(zip.files);
        var f = file.toLowerCase(), g = f.replace(/\//g,'\\');
        for(var i=0; i<k.length; ++i) {
            var n = k[i].toLowerCase();
            if(f == n || g == n) return zip.files[k[i]];
        }
        return null;
    }
    
    function getzipfile(zip, file) {
        var o = safegetzipfile(zip, file);
        if(o == null) throw new Error("Cannot find file " + file + " in zip");
        return o;
    }
    
    function getzipdata(zip, file, safe) {
        if(!safe) return getdata(getzipfile(zip, file));
        if(!file) return null;
        try { return getzipdata(zip, file); } catch(e) { return null; }
    }
    
    function getzipstr(zip, file, safe) {
        if(!safe) return getdatastr(getzipfile(zip, file));
        if(!file) return null;
        try { return getzipstr(zip, file); } catch(e) { return null; }
    }
    
    var _fs, jszip;
    /*global JSZip:true */
    if(typeof JSZip !== 'undefined') jszip = JSZip;
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            if(typeof jszip === 'undefined') jszip = require('./jszip.js');
            try { _fs = require('fs'); } catch(e) { }
        }
    }
    
    function resolve_path(path, base) {
        var result = base.split('/');
        if(base.slice(-1) != "/") result.pop(); // folder path
        var target = path.split('/');
        while (target.length !== 0) {
            var step = target.shift();
            if (step === '..') result.pop();
            else if (step !== '.') result.push(step);
        }
        return result.join('/');
    }
    var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
    var attregexg=/([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
    var tagregex=/<[\/\?]?[a-zA-Z0-9:]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s]+))*\s?[\/\?]?>/g;
    if(!(XML_HEADER.match(tagregex))) tagregex = /<[^>]*>/g;
    var nsregex=/<\w*:/, nsregex2 = /<(\/?)\w+:/;
    function parsexmltag(tag, skip_root) {
        var z = ({});
        var eq = 0, c = 0;
        for(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
        if(!skip_root) z[0] = tag.substr(0, eq);
        if(eq === tag.length) return z;
        var m = tag.match(attregexg), j=0, v="", i=0, q="", cc="", quot = 1;
        if(m) for(i = 0; i != m.length; ++i) {
            cc = m[i];
            for(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;
            q = cc.substr(0,c).trim();
            while(cc.charCodeAt(c+1) == 32) ++c;
            quot = ((eq=cc.charCodeAt(c+1)) == 34 || eq == 39) ? 1 : 0;
            v = cc.substring(c+1+quot, cc.length-quot);
            for(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;
            if(j===q.length) {
                if(q.indexOf("_") > 0) q = q.substr(0, q.indexOf("_")); // from ods
                z[q] = v;
            }
            else {
                var k = (j===5 && q.substr(0,5)==="xmlns"?"xmlns":"")+q.substr(j+1);
                if(z[k] && q.substr(j-3,3) == "ext") continue; // from ods
                z[k] = v;
            }
        }
        return z;
    }
    function strip_ns(x) { return x.replace(nsregex2, "<$1"); }
    
    var encodings = {
        '&quot;': '"',
        '&apos;': "'",
        '&gt;': '>',
        '&lt;': '<',
        '&amp;': '&'
    };
    var rencoding = evert(encodings);
    //var rencstr = "&<>'\"".split("");
    
    // TODO: CP remap (need to read file version to determine OS)
    var unescapexml = (function() {
        /* 22.4.2.4 bstr (Basic String) */
        var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/g, coderegex = /_x([\da-fA-F]{4})_/g;
        return function unescapexml(text) {
            var s = text + '', i = s.indexOf("<![CDATA[");
            if(i == -1) return s.replace(encregex, function($$, $1) { return encodings[$$]||String.fromCharCode(parseInt($1,$$.indexOf("x")>-1?16:10))||$$; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});
            var j = s.indexOf("]]>");
            return unescapexml(s.slice(0, i)) + s.slice(i+9,j) + unescapexml(s.slice(j+3));
        };
    })();
    
    var decregex=/[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
    function escapexml(text, xml){
        var s = text + '';
        return s.replace(decregex, function(y) { return rencoding[y]; }).replace(charegex,function(s) { return "_x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + "_";});
    }
    function escapexmltag(text){ return escapexml(text).replace(/ /g,"_x0020_"); }
    
    var htmlcharegex = /[\u0000-\u001f]/g;
    function escapehtml(text){
        var s = text + '';
        return s.replace(decregex, function(y) { return rencoding[y]; }).replace(htmlcharegex,function(s) { return "&#x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + ";"; });
    }
    
    function escapexlml(text){
        var s = text + '';
        return s.replace(decregex, function(y) { return rencoding[y]; }).replace(htmlcharegex,function(s) { return "&#x" + (s.charCodeAt(0).toString(16)).toUpperCase() + ";"; });
    }
    
    /* TODO: handle codepages */
    var xlml_fixstr = (function() {
        var entregex = /&#(\d+);/g;
        function entrepl($$,$1) { return String.fromCharCode(parseInt($1,10)); }
        return function xlml_fixstr(str) { return str.replace(entregex,entrepl); };
    })();
    var xlml_unfixstr = (function() {
        return function xlml_unfixstr(str) { return str.replace(/(\r\n|[\r\n])/g,"\&#10;"); };
    })();
    
    function parsexmlbool(value, tag) {
        switch(value) {
            case 1: case true: case '1': case 'true': case 'TRUE': return true;
            /* case '0': case 'false': case 'FALSE':*/
            default: return false;
        }
    }
    
    var utf8read = function utf8reada(orig) {
        var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
        while (i < orig.length) {
            c = orig.charCodeAt(i++);
            if (c < 128) { out += String.fromCharCode(c); continue; }
            d = orig.charCodeAt(i++);
            if (c>191 && c<224) { f = ((c & 31) << 6); f |= (d & 63); out += String.fromCharCode(f); continue; }
            e = orig.charCodeAt(i++);
            if (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }
            f = orig.charCodeAt(i++);
            w = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;
            out += String.fromCharCode(0xD800 + ((w>>>10)&1023));
            out += String.fromCharCode(0xDC00 + (w&1023));
        }
        return out;
    };
    
    var utf8write = function(orig) {
        var out = [], i = 0, c = 0, d = 0;
        while(i < orig.length) {
            c = orig.charCodeAt(i++);
            switch(true) {
                case c < 128: out.push(String.fromCharCode(c)); break;
                case c < 2048:
                    out.push(String.fromCharCode(192 + (c >> 6)));
                    out.push(String.fromCharCode(128 + (c & 63)));
                    break;
                case c >= 55296 && c < 57344:
                    c -= 55296; d = orig.charCodeAt(i++) - 56320 + (c<<10);
                    out.push(String.fromCharCode(240 + ((d >>18) & 7)));
                    out.push(String.fromCharCode(144 + ((d >>12) & 63)));
                    out.push(String.fromCharCode(128 + ((d >> 6) & 63)));
                    out.push(String.fromCharCode(128 + (d & 63)));
                    break;
                default:
                    out.push(String.fromCharCode(224 + (c >> 12)));
                    out.push(String.fromCharCode(128 + ((c >> 6) & 63)));
                    out.push(String.fromCharCode(128 + (c & 63)));
            }
        }
        return out.join("");
    };
    
    if(has_buf) {
        var utf8readb = function utf8readb(data) {
            var out = new Buffer(2*data.length), w, i, j = 1, k = 0, ww=0, c;
            for(i = 0; i < data.length; i+=j) {
                j = 1;
                if((c=data.charCodeAt(i)) < 128) w = c;
                else if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }
                else if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }
                else { j = 4;
                    w = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);
                    w -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);
                }
                if(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }
                out[k++] = w%256; out[k++] = w>>>8;
            }
            return out.slice(0,k).toString('ucs2');
        };
        var corpus = "foo bar baz\u00e2\u0098\u0083\u00f0\u009f\u008d\u00a3";
        if(utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb;
        // $FlowIgnore
        var utf8readc = function utf8readc(data) { return Buffer(data, 'binary').toString('utf8'); };
        if(utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc;
    
        utf8write = function(data) { return new Buffer(data, 'utf8').toString("binary"); };
    }
    
    // matches <foo>...</foo> extracts content
    var matchtag = (function() {
        var mtcache = ({});
        return function matchtag(f,g) {
            var t = f+"|"+(g||"");
            if(mtcache[t]) return mtcache[t];
            return (mtcache[t] = new RegExp('<(?:\\w+:)?'+f+'(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?'+f+'>',((g||""))));
        };
    })();
    
    var htmldecode = (function() {
        var entities = [
            ['nbsp', ' '], ['middot', 'Â·'],
            ['quot', '"'], ['apos', "'"], ['gt',   '>'], ['lt',   '<'], ['amp',  '&']
        ].map(function(x) { return [new RegExp('&' + x[0] + ';', "g"), x[1]]; });
        return function htmldecode(str) {
            var o = str.trim().replace(/\s+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g,"\n").replace(/<[^>]*>/g,"");
            for(var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);
            return o;
        };
    })();
    
    var vtregex = (function(){ var vt_cache = {};
        return function vt_regex(bt) {
            if(vt_cache[bt] !== undefined) return vt_cache[bt];
            return (vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", 'g') );
    };})();
    var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
    function parseVector(data, opts) {
        var h = parsexmltag(data);
    
        var matches = data.match(vtregex(h.baseType))||[];
        var res = [];
        if(matches.length != h.size) {
            if(opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
            return res;
        }
        matches.forEach(function(x) {
            var v = x.replace(vtvregex,"").match(vtmregex);
            if(v) res.push({v:utf8read(v[2]), t:v[1]});
        });
        return res;
    }
    
    var wtregex = /(^\s|\s$|\n)/;
    function writetag(f,g) { return '<' + f + (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f + '>'; }
    
    function wxt_helper(h) { return keys(h).map(function(k) { return " " + k + '="' + h[k] + '"';}).join(""); }
    function writextag(f,g,h) { return '<' + f + ((h != null) ? wxt_helper(h) : "") + ((g != null) ? (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f : "/") + '>';}
    
    function write_w3cdtf(d, t) { try { return d.toISOString().replace(/\.\d*/,""); } catch(e) { if(t) throw e; } return ""; }
    
    function write_vt(s) {
        switch(typeof s) {
            case 'string': return writextag('vt:lpwstr', s);
            case 'number': return writextag((s|0)==s?'vt:i4':'vt:r8', String(s));
            case 'boolean': return writextag('vt:bool',s?'true':'false');
        }
        if(s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));
        throw new Error("Unable to serialize " + s);
    }
    
    var XMLNS = ({
        'dc': 'http://purl.org/dc/elements/1.1/',
        'dcterms': 'http://purl.org/dc/terms/',
        'dcmitype': 'http://purl.org/dc/dcmitype/',
        'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',
        'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
        'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',
        'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
        'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
        'xsd': 'http://www.w3.org/2001/XMLSchema'
    });
    
    XMLNS.main = [
        'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
        'http://purl.oclc.org/ooxml/spreadsheetml/main',
        'http://schemas.microsoft.com/office/excel/2006/main',
        'http://schemas.microsoft.com/office/excel/2006/2'
    ];
    
    var XLMLNS = ({
        'o':    'urn:schemas-microsoft-com:office:office',
        'x':    'urn:schemas-microsoft-com:office:excel',
        'ss':   'urn:schemas-microsoft-com:office:spreadsheet',
        'dt':   'uuid:C2F41010-65B3-11d1-A29F-00AA00C14882',
        'mv':   'http://macVmlSchemaUri',
        'v':    'urn:schemas-microsoft-com:vml',
        'html': 'http://www.w3.org/TR/REC-html40'
    });
    function read_double_le(b, idx) {
        var s = 1 - 2 * (b[idx + 7] >>> 7);
        var e = ((b[idx + 7] & 0x7f) << 4) + ((b[idx + 6] >>> 4) & 0x0f);
        var m = (b[idx+6]&0x0f);
        for(var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];
        if(e == 0x7ff) return m == 0 ? s * Infinity : NaN;
        if(e == 0) e = -1022;
        else { e -= 1023; m += Math.pow(2,52); }
        return s * Math.pow(2, e - 52) * m;
    }
    
    function write_double_le(b, v, idx) {
        var bs = ((v < 0 || 1/v == -Infinity) ? 1 : 0) << 7, e = 0, m = 0;
        var av = bs ? -v : v;
        if(!isFinite(av)) { e = 0x7ff; m = isNaN(v) ? 0x6969 : 0; }
        else if(av == 0) e = m = 0;
        else {
            e = Math.floor(Math.log(av) / Math.LN2);
            m = av * Math.pow(2, 52 - e);
            if(e <= -1023 && (!isFinite(m) || m < Math.pow(2,52))) { e = -1022; }
            else { m -= Math.pow(2,52); e+=1023; }
        }
        for(var i = 0; i <= 5; ++i, m/=256) b[idx + i] = m & 0xff;
        b[idx + 6] = ((e & 0x0f) << 4) | m & 0xf;
        b[idx + 7] = (e >> 4) | bs;
    }
    
    var __toBuffer = function(bufs) { var x=[],w=10240; for(var i=0;i<bufs[0].length;++i) for(var j=0,L=bufs[0][i].length;j<L;j+=w) x.push.apply(x, bufs[0][i].slice(j,j+w)); return x; };
    var ___toBuffer = __toBuffer;
    var __utf16le = function(b,s,e) { var ss=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join("").replace(chr0,''); };
    var ___utf16le = __utf16le;
    var __hexlify = function(b,s,l) { var ss=[]; for(var i=s; i<s+l; ++i) ss.push(("0" + b[i].toString(16)).slice(-2)); return ss.join(""); };
    var ___hexlify = __hexlify;
    var __utf8 = function(b,s,e) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(""); };
    var ___utf8 = __utf8;
    var __lpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var ___lpstr = __lpstr;
    var __cpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var ___cpstr = __cpstr;
    var __lpwstr = function(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var ___lpwstr = __lpwstr;
    var __lpp4, ___lpp4;
    __lpp4 = ___lpp4 = function lpp4_(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf16le(b, i+4,i+4+len) : "";};
    var __8lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len) : "";};
    var ___8lpp4 = __8lpp4;
    var __double, ___double;
    __double = ___double = function(b, idx) { return read_double_le(b, idx);};
    var is_buf = function is_buf_a(a) { return Array.isArray(a); };
    
    if(has_buf) {
        __utf16le = function(b,s,e) { if(!Buffer.isBuffer(b)) return ___utf16le(b,s,e); return b.toString('utf16le',s,e).replace(chr0,'')/*.replace(chr1,'!')*/; };
        __hexlify = function(b,s,l) { return Buffer.isBuffer(b) ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); };
        __lpstr = function lpstr_b(b, i) { if(!Buffer.isBuffer(b)) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
        __cpstr = function cpstr_b(b, i) { if(!Buffer.isBuffer(b)) return ___cpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
        __lpwstr = function lpwstr_b(b, i) { if(!Buffer.isBuffer(b)) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};
        __lpp4 = function lpp4_b(b, i) { if(!Buffer.isBuffer(b)) return ___lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len);};
        __8lpp4 = function lpp4_8b(b, i) { if(!Buffer.isBuffer(b)) return ___8lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf8',i+4,i+4+len);};
        __utf8 = function utf8_b(b, s, e) { return (Buffer.isBuffer(b)) ? b.toString('utf8',s,e) : __utf8(b,s,e); };
        __toBuffer = function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);};
        bconcat = function(bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs); };
        __double = function double_(b, i) { if(Buffer.isBuffer(b)) return b.readDoubleLE(i); return ___double(b,i); };
        is_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a); };
    }
    
    /* from js-xls */
    if(typeof cptable !== 'undefined') {
        __utf16le = function(b,s,e) { return cptable.utils.decode(1200, b.slice(s,e)).replace(chr0, ''); };
        __utf8 = function(b,s,e) { return cptable.utils.decode(65001, b.slice(s,e)); };
        __lpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(current_ansi, b.slice(i+4, i+4+len-1)) : "";};
        __cpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i+4, i+4+len-1)) : "";};
        __lpwstr = function(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len-1)) : "";};
        __lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len)) : "";};
        __8lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(65001, b.slice(i+4,i+4+len)) : "";};
    }
    
    var __readUInt8 = function(b, idx) { return b[idx]; };
    var __readUInt16LE = function(b, idx) { return b[idx+1]*(1<<8)+b[idx]; };
    var __readInt16LE = function(b, idx) { var u = b[idx+1]*(1<<8)+b[idx]; return (u < 0x8000) ? u : (0xffff - u + 1) * -1; };
    var __readUInt32LE = function(b, idx) { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };
    var __readInt32LE = function(b, idx) { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };
    var __readInt32BE = function(b, idx) { return (b[idx]<<24)|(b[idx+1]<<16)|(b[idx+2]<<8)|b[idx+3]; };
    
    var ___unhexlify = function(s) { return (s.match(/../g)||[]).map(function(x) { return parseInt(x,16);}); };
    var __unhexlify = typeof Buffer !== "undefined" ? function(s) { return Buffer.isBuffer(s) ? new Buffer(s, 'hex') : ___unhexlify(s); } : ___unhexlify;
    
    function ReadShift(size, t) {
        var o="", oI, oR, oo=[], w, vv, i, loc;
        switch(t) {
            case 'dbcs':
                loc = this.l;
                if(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString("utf16le");
                else for(i = 0; i != size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }
                size *= 2;
                break;
    
            case 'utf8': o = __utf8(this, this.l, this.l + size); break;
            case 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;
    
            case 'wstr':
                if(typeof cptable !== 'undefined') o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l+2*size));
                else return ReadShift.call(this, size, 'dbcs');
                size = 2 * size; break;
    
            /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
            case 'lpstr-ansi': o = __lpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
            case 'lpstr-cp': o = __cpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
            /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
            case 'lpwstr': o = __lpwstr(this, this.l); size = 4 + 2 * __readUInt32LE(this, this.l); break;
            /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */
            case 'lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __lpp4(this, this.l); if(size & 0x02) size += 2; break;
            /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */
            case '8lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __8lpp4(this, this.l); if(size & 0x03) size += 4 - (size & 0x03); break;
    
            case 'cstr': size = 0; o = "";
                while((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));
                o = oo.join(""); break;
            case '_wstr': size = 0; o = "";
                while((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}
                size+=2; o = oo.join(""); break;
    
            /* sbcs and dbcs support continue records in the SST way TODO codepages */
            case 'dbcs-cont': o = ""; loc = this.l;
                for(i = 0; i != size; ++i) {
                    if(this.lens && this.lens.indexOf(loc) !== -1) {
                        w = __readUInt8(this, loc);
                        this.l = loc + 1;
                        vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
                        return oo.join("") + vv;
                    }
                    oo.push(_getchar(__readUInt16LE(this, loc)));
                    loc+=2;
                } o = oo.join(""); size *= 2; break;
    
            case 'cpstr':
                if(typeof cptable !== 'undefined') {
                    o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
                    break;
                }
            /* falls through */
            case 'sbcs-cont': o = ""; loc = this.l;
                for(i = 0; i != size; ++i) {
                    if(this.lens && this.lens.indexOf(loc) !== -1) {
                        w = __readUInt8(this, loc);
                        this.l = loc + 1;
                        vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
                        return oo.join("") + vv;
                    }
                    oo.push(_getchar(__readUInt8(this, loc)));
                    loc+=1;
                } o = oo.join(""); break;
    
            default:
        switch(size) {
            case 1: oI = __readUInt8(this, this.l); this.l++; return oI;
            case 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;
            case 4: case -4:
                if(t === 'i' || (this[this.l+3] & 0x80)===0) { oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l); this.l += 4; return oI; }
                else { oR = __readUInt32LE(this, this.l); this.l += 4; } return oR;
            case 8: case -8:
                if(t === 'f') {
                    if(size == 8) oR = __double(this, this.l);
                    else oR = __double([this[this.l+7],this[this.l+6],this[this.l+5],this[this.l+4],this[this.l+3],this[this.l+2],this[this.l+1],this[this.l+0]], 0);
                    this.l += 8; return oR;
                } else size = 8;
            /* falls through */
            case 16: o = __hexlify(this, this.l, size); break;
        }}
        this.l+=size; return o;
    }
    
    var __writeUInt32LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };
    var __writeInt32LE  = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };
    var __writeUInt16LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); };
    
    function WriteShift(t, val, f) {
        var size = 0, i = 0;
        if(f === 'dbcs') {
    for(i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
            size = 2 * val.length;
        } else if(f === 'sbcs') {
            /* TODO: codepage */
    val = val.replace(/[^\x00-\x7F]/g, "_");
    for(i = 0; i != val.length; ++i) this[this.l + i] = val.charCodeAt(i) & 0xFF;
            size = val.length;
        } else if(f === 'hex') {
            for(; i < t; ++i) {
    this[this.l++] = parseInt(val.slice(2*i, 2*i+2), 16)||0;
            } return this;
        } else if(f === 'utf16le') {
    var end = this.l + t;
                for(i = 0; i < Math.min(val.length, t); ++i) {
                    var cc = val.charCodeAt(i);
                    this[this.l++] = cc & 0xff;
                    this[this.l++] = cc >> 8;
                }
                while(this.l < end) this[this.l++] = 0;
                return this;
        } else  switch(t) {
            case  1: size = 1; this[this.l] = val&0xFF; break;
            case  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;
            case  3: size = 3; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; val >>>= 8; this[this.l+2] = val&0xFF; break;
            case  4: size = 4; __writeUInt32LE(this, val, this.l); break;
            case  8: size = 8; if(f === 'f') { write_double_le(this, val, this.l); break; }
            /* falls through */
            case 16: break;
            case -4: size = 4; __writeInt32LE(this, val, this.l); break;
        }
        this.l += size; return this;
    }
    
    function CheckField(hexstr, fld) {
        var m = __hexlify(this,this.l,hexstr.length>>1);
        if(m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);
        this.l += hexstr.length>>1;
    }
    
    function prep_blob(blob, pos) {
        blob.l = pos;
        blob.read_shift = ReadShift;
        blob.chk = CheckField;
        blob.write_shift = WriteShift;
    }
    
    function parsenoop(blob, length) { blob.l += length; }
    
    function new_buf(sz) {
        var o = new_raw_buf(sz);
        prep_blob(o, 0);
        return o;
    }
    
    /* [MS-XLSB] 2.1.4 Record */
    function recordhopper(data, cb, opts) {
        if(!data) return;
        var tmpbyte, cntbyte, length;
        prep_blob(data, data.l || 0);
        var L = data.length, RT = 0, tgt = 0;
        while(data.l < L) {
            RT = data.read_shift(1);
            if(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);
            var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
            tmpbyte = data.read_shift(1);
            length = tmpbyte & 0x7F;
            for(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);
            tgt = data.l + length;
            var d = (R.f||parsenoop)(data, length, opts);
            data.l = tgt;
            if(cb(d, R.n, RT)) return;
        }
    }
    
    /* control buffer usage for fixed-length buffers */
    function buf_array() {
        var bufs = [], blksz = has_buf ? 256 : 2048;
        var newblk = function ba_newblk(sz) {
            var o = (new_buf(sz));
            prep_blob(o, 0);
            return o;
        };
    
        var curbuf = newblk(blksz);
    
        var endbuf = function ba_endbuf() {
            if(!curbuf) return;
            if(curbuf.length > curbuf.l) curbuf = curbuf.slice(0, curbuf.l);
            if(curbuf.length > 0) bufs.push(curbuf);
            curbuf = null;
        };
    
        var next = function ba_next(sz) {
            if(curbuf && sz < curbuf.length - curbuf.l) return curbuf;
            endbuf();
            return (curbuf = newblk(Math.max(sz+1, blksz)));
        };
    
        var end = function ba_end() {
            endbuf();
            return __toBuffer([bufs]);
        };
    
        var push = function ba_push(buf) { endbuf(); curbuf = buf; next(blksz); };
    
        return ({ next:next, push:push, end:end, _bufs:bufs });
    }
    
    function write_record(ba, type, payload, length) {
        var t = +XLSBRE[type], l;
        if(isNaN(t)) return; // TODO: throw something here?
        if(!length) length = XLSBRecordEnum[t].p || (payload||[]).length || 0;
        l = 1 + (t >= 0x80 ? 1 : 0) + 1/* + length*/;
        if(length >= 0x80) ++l; if(length >= 0x4000) ++l; if(length >= 0x200000) ++l;
        var o = ba.next(l);
        if(t <= 0x7F) o.write_shift(1, t);
        else {
            o.write_shift(1, (t & 0x7F) + 0x80);
            o.write_shift(1, (t >> 7));
        }
        for(var i = 0; i != 4; ++i) {
            if(length >= 0x80) { o.write_shift(1, (length & 0x7F)+0x80); length >>= 7; }
            else { o.write_shift(1, length); break; }
        }
        if(length > 0 && is_buf(payload)) ba.push(payload);
    }
    /* XLS ranges enforced */
    function shift_cell_xls(cell, tgt, opts) {
        var out = dup(cell);
        if(tgt.s) {
            if(out.cRel) out.c += tgt.s.c;
            if(out.rRel) out.r += tgt.s.r;
        } else {
            if(out.cRel) out.c += tgt.c;
            if(out.rRel) out.r += tgt.r;
        }
        if(!opts || opts.biff < 12) {
            while(out.c >= 0x100) out.c -= 0x100;
            while(out.r >= 0x10000) out.r -= 0x10000;
        }
        return out;
    }
    
    function shift_range_xls(cell, range, opts) {
        var out = dup(cell);
        out.s = shift_cell_xls(out.s, range.s, opts);
        out.e = shift_cell_xls(out.e, range.s, opts);
        return out;
    }
    
    function encode_cell_xls(c) {
        var s = encode_cell(c);
        if(c.cRel === 0) s = fix_col(s);
        if(c.rRel === 0) s = fix_row(s);
        return s;
    }
    
    function encode_range_xls(r, opts) {
        if(r.s.r == 0 && !r.s.rRel) {
            if(r.e.r == (opts.biff >= 12 ? 0xFFFFF : 0xFFFF) && !r.e.rRel) {
                return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
            }
        }
        if(r.s.c == 0 && !r.s.cRel) {
            if(r.e.c == (opts.biff >= 12 ? 0xFFFF : 0xFF) && !r.e.cRel) {
                return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
            }
        }
        return encode_cell_xls(r.s) + ":" + encode_cell_xls(r.e);
    }
    var OFFCRYPTO = {};
    
    var make_offcrypto = function(O, _crypto) {
        var crypto;
        if(typeof _crypto !== 'undefined') crypto = _crypto;
        else if(typeof require !== 'undefined') {
            try { crypto = require('crypto'); }
            catch(e) { crypto = null; }
        }
    
        O.rc4 = function(key, data) {
            var S = new Array(256);
            var c = 0, i = 0, j = 0, t = 0;
            for(i = 0; i != 256; ++i) S[i] = i;
            for(i = 0; i != 256; ++i) {
                j = (j + S[i] + (key[i%key.length]).charCodeAt(0))&255;
                t = S[i]; S[i] = S[j]; S[j] = t;
            }
            // $FlowIgnore
            i = j = 0; var out = Buffer(data.length);
            for(c = 0; c != data.length; ++c) {
                i = (i + 1)&255;
                j = (j + S[i])%256;
                t = S[i]; S[i] = S[j]; S[j] = t;
                out[c] = (data[c] ^ S[(S[i]+S[j])&255]);
            }
            return out;
        };
    
        O.md5 = function(hex) {
            if(!crypto) throw new Error("Unsupported crypto");
            return crypto.createHash('md5').update(hex).digest('hex');
        };
    };
    /*global crypto:true */
    make_offcrypto(OFFCRYPTO, typeof crypto !== "undefined" ? crypto : undefined);
    
    function decode_row(rowstr) { return parseInt(unfix_row(rowstr),10) - 1; }
    function encode_row(row) { return "" + (row + 1); }
    function fix_row(cstr) { return cstr.replace(/([A-Z]|^)(\d+)$/,"$1$$$2"); }
    function unfix_row(cstr) { return cstr.replace(/\$(\d+)$/,"$1"); }
    
    function decode_col(colstr) { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }
    function encode_col(col) { var s=""; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }
    function fix_col(cstr) { return cstr.replace(/^([A-Z])/,"$$$1"); }
    function unfix_col(cstr) { return cstr.replace(/^\$([A-Z])/,"$1"); }
    
    function split_cell(cstr) { return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/,"$1,$2").split(","); }
    function decode_cell(cstr) { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }
    function encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }
    function fix_cell(cstr) { return fix_col(fix_row(cstr)); }
    function unfix_cell(cstr) { return unfix_col(unfix_row(cstr)); }
    function decode_range(range) { var x =range.split(":").map(decode_cell); return {s:x[0],e:x[x.length-1]}; }
    function encode_range(cs,ce) {
        if(typeof ce === 'undefined' || typeof ce === 'number') {
    return encode_range(cs.s, cs.e);
        }
    if(typeof cs !== 'string') cs = encode_cell((cs));
        if(typeof ce !== 'string') ce = encode_cell((ce));
    return cs == ce ? cs : cs + ":" + ce;
    }
    
    function safe_decode_range(range) {
        var o = {s:{c:0,r:0},e:{c:0,r:0}};
        var idx = 0, i = 0, cc = 0;
        var len = range.length;
        for(idx = 0; i < len; ++i) {
            if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
            idx = 26*idx + cc;
        }
        o.s.c = --idx;
    
        for(idx = 0; i < len; ++i) {
            if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
            idx = 10*idx + cc;
        }
        o.s.r = --idx;
    
        if(i === len || range.charCodeAt(++i) === 58) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }
    
        for(idx = 0; i != len; ++i) {
            if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
            idx = 26*idx + cc;
        }
        o.e.c = --idx;
    
        for(idx = 0; i != len; ++i) {
            if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
            idx = 10*idx + cc;
        }
        o.e.r = --idx;
        return o;
    }
    
    function safe_format_cell(cell, v) {
        var q = (cell.t == 'd' && v instanceof Date);
        if(cell.z != null) try { return (cell.w = SSF.format(cell.z, q ? datenum(v) : v)); } catch(e) { }
        try { return (cell.w = SSF.format((cell.XF||{}).numFmtId||(q ? 14 : 0),  q ? datenum(v) : v)); } catch(e) { return ''+v; }
    }
    
    function format_cell(cell, v, o) {
        if(cell == null || cell.t == null || cell.t == 'z') return "";
        if(cell.w !== undefined) return cell.w;
        if(cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;
        if(v == undefined) return safe_format_cell(cell, cell.v);
        return safe_format_cell(cell, v);
    }
    
    function sheet_to_workbook(sheet, opts) {
        var n = opts && opts.sheet ? opts.sheet : "Sheet1";
        var sheets = {}; sheets[n] = sheet;
        return { SheetNames: [n], Sheets: sheets };
    }
    
    function sheet_add_aoa(_ws, data, opts) {
        var o = opts || {};
        var dense = _ws ? Array.isArray(_ws) : o.dense;
        if(DENSE != null && dense == null) dense = DENSE;
        var ws = _ws || (dense ? ([]) : ({}));
        var _R = 0, _C = 0;
        if(ws && o.origin != null) {
            if(typeof o.origin == 'number') _R = o.origin;
            else {
                var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
                _R = _origin.r; _C = _origin.c;
            }
        }
        var range = ({s: {c:10000000, r:10000000}, e: {c:0, r:0}});
        if(ws['!ref']) {
            var _range = safe_decode_range(ws['!ref']);
            range.s.c = _range.s.c;
            range.s.r = _range.s.r;
            range.e.c = Math.max(range.e.c, _range.e.c);
            range.e.r = Math.max(range.e.r, _range.e.r);
            if(_R == -1) range.e.r = _R = _range.e.r + 1;
        }
        for(var R = 0; R != data.length; ++R) {
            for(var C = 0; C != data[R].length; ++C) {
                if(typeof data[R][C] === 'undefined') continue;
                var cell = ({v: data[R][C] });
                if(Array.isArray(cell.v)) { cell.f = data[R][C][1]; cell.v = cell.v[0]; }
                var __R = _R + R, __C = _C + C;
                if(range.s.r > __R) range.s.r = __R;
                if(range.s.c > __C) range.s.c = __C;
                if(range.e.r < __R) range.e.r = __R;
                if(range.e.c < __C) range.e.c = __C;
                if(cell.v === null) { if(cell.f) cell.t = 'n'; else if(!o.cellStubs) continue; else cell.t = 'z'; }
                else if(typeof cell.v === 'number') cell.t = 'n';
                else if(typeof cell.v === 'boolean') cell.t = 'b';
                else if(cell.v instanceof Date) {
                    cell.z = o.dateNF || SSF._table[14];
                    if(o.cellDates) { cell.t = 'd'; cell.w = SSF.format(cell.z, datenum(cell.v)); }
                    else { cell.t = 'n'; cell.v = datenum(cell.v); cell.w = SSF.format(cell.z, cell.v); }
                }
                else cell.t = 's';
                if(dense) {
                    if(!ws[__R]) ws[__R] = [];
                    ws[__R][__C] = cell;
                } else {
                    var cell_ref = encode_cell(({c:__C,r:__R}));
                    ws[cell_ref] = cell;
                }
            }
        }
        if(range.s.c < 10000000) ws['!ref'] = encode_range(range);
        return ws;
    }
    function aoa_to_sheet(data, opts) { return sheet_add_aoa(null, data, opts); }
    
    function write_UInt32LE(x, o) {
        if(!o) o = new_buf(4);
        o.write_shift(4, x);
        return o;
    }
    
    /* [MS-XLSB] 2.5.168 */
    function parse_XLWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, 'dbcs');
    }
    function write_XLWideString(data, o) {
        var _null = false; if(o == null) { _null = true; o = new_buf(4+2*data.length); }
        o.write_shift(4, data.length);
        if(data.length > 0) o.write_shift(0, data, 'dbcs');
        return _null ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.5.143 */
    function parse_StrRun(data, length) {
        return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
    }
    function write_StrRun(run, o) {
        if(!o) o = new_buf(4);
        o.write_shift(2, run.ich || 0);
        o.write_shift(2, run.ifnt || 0);
        return o;
    }
    
    /* [MS-XLSB] 2.1.7.121 */
    function parse_RichStr(data, length) {
        var start = data.l;
        var flags = data.read_shift(1);
        var str = parse_XLWideString(data);
        var rgsStrRun = [];
        var z = ({ t: str, h: str });
        if((flags & 1) !== 0) { /* fRichStr */
            /* TODO: formatted string */
            var dwSizeStrRun = data.read_shift(4);
            for(var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
            z.r = rgsStrRun;
        }
        else z.r = [{ich:0, ifnt:0}];
        //if((flags & 2) !== 0) { /* fExtStr */
        //	/* TODO: phonetic string */
        //}
        data.l = start + length;
        return z;
    }
    function write_RichStr(str, o) {
        /* TODO: formatted string */
        var _null = false; if(o == null) { _null = true; o = new_buf(15+4*str.t.length); }
        o.write_shift(1,0);
        write_XLWideString(str.t, o);
        return _null ? o.slice(0, o.l) : o;
    }
    /* [MS-XLSB] 2.4.325 BrtCommentText (RichStr w/1 run) */
    var parse_BrtCommentText = parse_RichStr;
    function write_BrtCommentText(str, o) {
        /* TODO: formatted string */
        var _null = false; if(o == null) { _null = true; o = new_buf(23+4*str.t.length); }
        o.write_shift(1,1);
        write_XLWideString(str.t, o);
        o.write_shift(4,1);
        write_StrRun({ich:0,ifnt:0}, o);
        return _null ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.5.9 */
    function parse_XLSBCell(data) {
        var col = data.read_shift(4);
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) <<16;
        var fPhShow = data.read_shift(1);
        return { c:col, iStyleRef: iStyleRef };
    }
    function write_XLSBCell(cell, o) {
        if(o == null) o = new_buf(8);
        o.write_shift(-4, cell.c);
        o.write_shift(3, cell.iStyleRef || cell.s);
        o.write_shift(1, 0); /* fPhShow */
        return o;
    }
    
    
    /* [MS-XLSB] 2.5.21 */
    var parse_XLSBCodeName = parse_XLWideString;
    var write_XLSBCodeName = write_XLWideString;
    
    /* [MS-XLSB] 2.5.166 */
    function parse_XLNullableWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, 'dbcs');
    }
    function write_XLNullableWideString(data, o) {
        var _null = false; if(o == null) { _null = true; o = new_buf(127); }
        o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);
        if(data.length > 0) o.write_shift(0, data, 'dbcs');
        return _null ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.5.165 */
    var parse_XLNameWideString = parse_XLWideString;
    var write_XLNameWideString = write_XLWideString;
    
    /* [MS-XLSB] 2.5.114 */
    var parse_RelID = parse_XLNullableWideString;
    var write_RelID = write_XLNullableWideString;
    
    
    /* [MS-XLSB] 2.5.122 */
    /* [MS-XLS] 2.5.217 */
    function parse_RkNumber(data) {
        var b = data.slice(data.l, data.l+4);
        var fX100 = b[0] & 1, fInt = b[0] & 2;
        data.l+=4;
        b[0] &= 0xFC; // b[0] &= ~3;
        var RK = fInt === 0 ? __double([0,0,0,0,b[0],b[1],b[2],b[3]],0) : __readInt32LE(b,0)>>2;
        return fX100 ? RK/100 : RK;
    }
    function write_RkNumber(data, o) {
        if(o == null) o = new_buf(4);
        var fX100 = 0, fInt = 0, d100 = data * 100;
        if(data == (data | 0) && data >= -(1<<29) && data < (1 << 29)) { fInt = 1; }
        else if(d100 == (d100 | 0) && d100 >= -(1<<29) && d100 < (1 << 29)) { fInt = 1; fX100 = 1; }
        if(fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
        else throw new Error("unsupported RkNumber " + data); // TODO
    }
    
    
    /* [MS-XLSB] 2.5.117 RfX */
    function parse_RfX(data ) {
        var cell = ({s: {}, e: {}});
        cell.s.r = data.read_shift(4);
        cell.e.r = data.read_shift(4);
        cell.s.c = data.read_shift(4);
        cell.e.c = data.read_shift(4);
        return cell;
    }
    
    function write_RfX(r, o) {
        if(!o) o = new_buf(16);
        o.write_shift(4, r.s.r);
        o.write_shift(4, r.e.r);
        o.write_shift(4, r.s.c);
        o.write_shift(4, r.e.c);
        return o;
    }
    
    /* [MS-XLSB] 2.5.153 UncheckedRfX */
    var parse_UncheckedRfX = parse_RfX;
    var write_UncheckedRfX = write_RfX;
    
    /* [MS-XLSB] 2.5.171 */
    /* [MS-XLS] 2.5.342 */
    /* TODO: error checking, NaN and Infinity values are not valid Xnum */
    function parse_Xnum(data, length) { return data.read_shift(8, 'f'); }
    function write_Xnum(data, o) { return (o || new_buf(8)).write_shift(8, data, 'f'); }
    
    /* [MS-XLSB] 2.5.198.2 */
    var BErr = {
    0x00: "#NULL!",
    0x07: "#DIV/0!",
    0x0F: "#VALUE!",
    0x17: "#REF!",
    0x1D: "#NAME?",
    0x24: "#NUM!",
    0x2A: "#N/A",
    0x2B: "#GETTING_DATA",
    0xFF: "#WTF?"
    };
    var RBErr = evert_num(BErr);
    
    /* [MS-XLSB] 2.4.321 BrtColor */
    function parse_BrtColor(data, length) {
        var out = {};
        var d = data.read_shift(1);
    
        var fValidRGB = d & 1;
        var xColorType = d >>> 1;
    
        var index = data.read_shift(1);
        var nTS = data.read_shift(2, 'i');
        var bR = data.read_shift(1);
        var bG = data.read_shift(1);
        var bB = data.read_shift(1);
        var bAlpha = data.read_shift(1);
    
        switch(xColorType) {
            case 0: out.auto = 1; break;
            case 1:
                out.index = index;
                var icv = XLSIcv[index];
                /* automatic pseudo index 81 */
                if(icv) out.rgb = rgb2Hex(icv);
                break;
            case 2:
                /* if(!fValidRGB) throw new Error("invalid"); */
                out.rgb = rgb2Hex([bR, bG, bB]);
                break;
            case 3: out.theme = index; break;
        }
        if(nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
    
        return out;
    }
    function write_BrtColor(color, o) {
        if(!o) o = new_buf(8);
        if(!color||color.auto) { o.write_shift(4, 0); o.write_shift(4, 0); return o; }
        if(color.index) {
            o.write_shift(1, 0x02);
            o.write_shift(1, color.index);
        } else if(color.theme) {
            o.write_shift(1, 0x06);
            o.write_shift(1, color.theme);
        } else {
            o.write_shift(1, 0x05);
            o.write_shift(1, 0);
        }
        var nTS = color.tint || 0;
        if(nTS > 0) nTS *= 32767;
        else if(nTS < 0) nTS *= 32768;
        o.write_shift(2, nTS);
        if(!color.rgb) {
            o.write_shift(2, 0);
            o.write_shift(1, 0);
            o.write_shift(1, 0);
        } else {
            var rgb = (color.rgb || 'FFFFFF');
            o.write_shift(1, parseInt(rgb.substr(0,2),16));
            o.write_shift(1, parseInt(rgb.substr(2,2),16));
            o.write_shift(1, parseInt(rgb.substr(4,2),16));
            o.write_shift(1, 0xFF);
        }
        return o;
    }
    
    /* [MS-XLSB] 2.5.52 */
    function parse_FontFlags(data, length, opts) {
        var d = data.read_shift(1);
        data.l++;
        var out = {
            /* fBold: d & 0x01 */
            fItalic: d & 0x02,
            /* fUnderline: d & 0x04 */
            fStrikeout: d & 0x08,
            fOutline: d & 0x10,
            fShadow: d & 0x20,
            fCondense: d & 0x40,
            fExtend: d & 0x80
        };
        return out;
    }
    function write_FontFlags(font, o) {
        if(!o) o = new_buf(2);
        var grbit =
            (font.italic   ? 0x02 : 0) |
            (font.strike   ? 0x08 : 0) |
            (font.outline  ? 0x10 : 0) |
            (font.shadow   ? 0x20 : 0) |
            (font.condense ? 0x40 : 0) |
            (font.extend   ? 0x80 : 0);
        o.write_shift(1, grbit);
        o.write_shift(1, 0);
        return o;
    }
    
    /* [MS-OLEDS] 2.3.1 and 2.3.2 */
    function parse_ClipboardFormatOrString(o, w) {
        // $FlowIgnore
        var ClipFmt = {2:"BITMAP",3:"METAFILEPICT",8:"DIB",14:"ENHMETAFILE"};
        var m = o.read_shift(4);
        switch(m) {
            case 0x00000000: return "";
            case 0xffffffff: case 0xfffffffe: return ClipFmt[o.read_shift(4)]||"";
        }
        if(m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
        o.l -= 4;
        return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
    }
    function parse_ClipboardFormatOrAnsiString(o) { return parse_ClipboardFormatOrString(o, 1); }
    function parse_ClipboardFormatOrUnicodeString(o) { return parse_ClipboardFormatOrString(o, 2); }
    
    /* [MS-OLEPS] 2.2 PropertyType */
    //var VT_EMPTY    = 0x0000;
    //var VT_NULL     = 0x0001;
    var VT_I2       = 0x0002;
    var VT_I4       = 0x0003;
    //var VT_R4       = 0x0004;
    //var VT_R8       = 0x0005;
    //var VT_CY       = 0x0006;
    //var VT_DATE     = 0x0007;
    //var VT_BSTR     = 0x0008;
    //var VT_ERROR    = 0x000A;
    var VT_BOOL     = 0x000B;
    var VT_VARIANT  = 0x000C;
    //var VT_DECIMAL  = 0x000E;
    //var VT_I1       = 0x0010;
    //var VT_UI1      = 0x0011;
    //var VT_UI2      = 0x0012;
    var VT_UI4      = 0x0013;
    //var VT_I8       = 0x0014;
    var VT_UI8      = 0x0015;
    //var VT_INT      = 0x0016;
    //var VT_UINT     = 0x0017;
    var VT_LPSTR    = 0x001E;
    //var VT_LPWSTR   = 0x001F;
    var VT_FILETIME = 0x0040;
    //var VT_BLOB     = 0x0041;
    //var VT_STREAM   = 0x0042;
    //var VT_STORAGE  = 0x0043;
    //var VT_STREAMED_Object  = 0x0044;
    //var VT_STORED_Object    = 0x0045;
    //var VT_BLOB_Object      = 0x0046;
    var VT_CF       = 0x0047;
    //var VT_CLSID    = 0x0048;
    //var VT_VERSIONED_STREAM = 0x0049;
    var VT_VECTOR   = 0x1000;
    //var VT_ARRAY    = 0x2000;
    
    var VT_STRING   = 0x0050; // 2.3.3.1.11 VtString
    var VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString
    var VT_CUSTOM   = [VT_STRING, VT_USTR];
    
    /* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */
    var DocSummaryPIDDSI = {
    0x01: { n: 'CodePage', t: VT_I2 },
    0x02: { n: 'Category', t: VT_STRING },
    0x03: { n: 'PresentationFormat', t: VT_STRING },
    0x04: { n: 'ByteCount', t: VT_I4 },
    0x05: { n: 'LineCount', t: VT_I4 },
    0x06: { n: 'ParagraphCount', t: VT_I4 },
    0x07: { n: 'SlideCount', t: VT_I4 },
    0x08: { n: 'NoteCount', t: VT_I4 },
    0x09: { n: 'HiddenCount', t: VT_I4 },
    0x0a: { n: 'MultimediaClipCount', t: VT_I4 },
    0x0b: { n: 'Scale', t: VT_BOOL },
    0x0c: { n: 'HeadingPair', t: VT_VECTOR | VT_VARIANT },
    0x0d: { n: 'DocParts', t: VT_VECTOR | VT_LPSTR },
    0x0e: { n: 'Manager', t: VT_STRING },
    0x0f: { n: 'Company', t: VT_STRING },
    0x10: { n: 'LinksDirty', t: VT_BOOL },
    0x11: { n: 'CharacterCount', t: VT_I4 },
    0x13: { n: 'SharedDoc', t: VT_BOOL },
    0x16: { n: 'HLinksChanged', t: VT_BOOL },
    0x17: { n: 'AppVersion', t: VT_I4, p: 'version' },
    0x1A: { n: 'ContentType', t: VT_STRING },
    0x1B: { n: 'ContentStatus', t: VT_STRING },
    0x1C: { n: 'Language', t: VT_STRING },
    0x1D: { n: 'Version', t: VT_STRING },
    0xFF: {}
    };
    
    /* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */
    var SummaryPIDSI = {
    0x01: { n: 'CodePage', t: VT_I2 },
    0x02: { n: 'Title', t: VT_STRING },
    0x03: { n: 'Subject', t: VT_STRING },
    0x04: { n: 'Author', t: VT_STRING },
    0x05: { n: 'Keywords', t: VT_STRING },
    0x06: { n: 'Comments', t: VT_STRING },
    0x07: { n: 'Template', t: VT_STRING },
    0x08: { n: 'LastAuthor', t: VT_STRING },
    0x09: { n: 'RevNumber', t: VT_STRING },
    0x0A: { n: 'EditTime', t: VT_FILETIME },
    0x0B: { n: 'LastPrinted', t: VT_FILETIME },
    0x0C: { n: 'CreatedDate', t: VT_FILETIME },
    0x0D: { n: 'ModifiedDate', t: VT_FILETIME },
    0x0E: { n: 'PageCount', t: VT_I4 },
    0x0F: { n: 'WordCount', t: VT_I4 },
    0x10: { n: 'CharCount', t: VT_I4 },
    0x11: { n: 'Thumbnail', t: VT_CF },
    0x12: { n: 'ApplicationName', t: VT_STRING },
    0x13: { n: 'DocumentSecurity', t: VT_I4 },
    0xFF: {}
    };
    
    /* [MS-OLEPS] 2.18 */
    var SpecialProperties = {
    0x80000000: { n: 'Locale', t: VT_UI4 },
    0x80000003: { n: 'Behavior', t: VT_UI4 },
    0x72627262: {}
    };
    
    (function() {
        for(var y in SpecialProperties) if(SpecialProperties.hasOwnProperty(y))
        DocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];
    })();
    
    /* [MS-XLS] 2.4.63 Country/Region codes */
    var CountryEnum = {
    0x0001: "US", // United States
    0x0002: "CA", // Canada
    0x0003: "", // Latin America (except Brazil)
    0x0007: "RU", // Russia
    0x0014: "EG", // Egypt
    0x001E: "GR", // Greece
    0x001F: "NL", // Netherlands
    0x0020: "BE", // Belgium
    0x0021: "FR", // France
    0x0022: "ES", // Spain
    0x0024: "HU", // Hungary
    0x0027: "IT", // Italy
    0x0029: "CH", // Switzerland
    0x002B: "AT", // Austria
    0x002C: "GB", // United Kingdom
    0x002D: "DK", // Denmark
    0x002E: "SE", // Sweden
    0x002F: "NO", // Norway
    0x0030: "PL", // Poland
    0x0031: "DE", // Germany
    0x0034: "MX", // Mexico
    0x0037: "BR", // Brazil
    0x003d: "AU", // Australia
    0x0040: "NZ", // New Zealand
    0x0042: "TH", // Thailand
    0x0051: "JP", // Japan
    0x0052: "KR", // Korea
    0x0054: "VN", // Viet Nam
    0x0056: "CN", // China
    0x005A: "TR", // Turkey
    0x0069: "JS", // Ramastan
    0x00D5: "DZ", // Algeria
    0x00D8: "MA", // Morocco
    0x00DA: "LY", // Libya
    0x015F: "PT", // Portugal
    0x0162: "IS", // Iceland
    0x0166: "FI", // Finland
    0x01A4: "CZ", // Czech Republic
    0x0376: "TW", // Taiwan
    0x03C1: "LB", // Lebanon
    0x03C2: "JO", // Jordan
    0x03C3: "SY", // Syria
    0x03C4: "IQ", // Iraq
    0x03C5: "KW", // Kuwait
    0x03C6: "SA", // Saudi Arabia
    0x03CB: "AE", // United Arab Emirates
    0x03CC: "IL", // Israel
    0x03CE: "QA", // Qatar
    0x03D5: "IR", // Iran
    0xFFFF: "US"  // United States
    };
    
    /* [MS-XLS] 2.5.127 */
    var XLSFillPattern = [
        null,
        'solid',
        'mediumGray',
        'darkGray',
        'lightGray',
        'darkHorizontal',
        'darkVertical',
        'darkDown',
        'darkUp',
        'darkGrid',
        'darkTrellis',
        'lightHorizontal',
        'lightVertical',
        'lightDown',
        'lightUp',
        'lightGrid',
        'lightTrellis',
        'gray125',
        'gray0625'
    ];
    
    function rgbify(arr) { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }
    
    /* [MS-XLS] 2.5.161 */
    /* [MS-XLSB] 2.5.75 */
    var XLSIcv = rgbify([
        /* Color Constants */
        0x000000,
        0xFFFFFF,
        0xFF0000,
        0x00FF00,
        0x0000FF,
        0xFFFF00,
        0xFF00FF,
        0x00FFFF,
    
        /* Overridable Defaults */
        0x000000,
        0xFFFFFF,
        0xFF0000,
        0x00FF00,
        0x0000FF,
        0xFFFF00,
        0xFF00FF,
        0x00FFFF,
    
        0x800000,
        0x008000,
        0x000080,
        0x808000,
        0x800080,
        0x008080,
        0xC0C0C0,
        0x808080,
        0x9999FF,
        0x993366,
        0xFFFFCC,
        0xCCFFFF,
        0x660066,
        0xFF8080,
        0x0066CC,
        0xCCCCFF,
    
        0x000080,
        0xFF00FF,
        0xFFFF00,
        0x00FFFF,
        0x800080,
        0x800000,
        0x008080,
        0x0000FF,
        0x00CCFF,
        0xCCFFFF,
        0xCCFFCC,
        0xFFFF99,
        0x99CCFF,
        0xFF99CC,
        0xCC99FF,
        0xFFCC99,
    
        0x3366FF,
        0x33CCCC,
        0x99CC00,
        0xFFCC00,
        0xFF9900,
        0xFF6600,
        0x666699,
        0x969696,
        0x003366,
        0x339966,
        0x003300,
        0x333300,
        0x993300,
        0x993366,
        0x333399,
        0x333333,
    
        /* Other entries to appease BIFF8/12 */
        0xFFFFFF, /* 0x40 icvForeground ?? */
        0x000000, /* 0x41 icvBackground ?? */
        0x000000, /* 0x42 icvFrame ?? */
        0x000000, /* 0x43 icv3D ?? */
        0x000000, /* 0x44 icv3DText ?? */
        0x000000, /* 0x45 icv3DHilite ?? */
        0x000000, /* 0x46 icv3DShadow ?? */
        0x000000, /* 0x47 icvHilite ?? */
        0x000000, /* 0x48 icvCtlText ?? */
        0x000000, /* 0x49 icvCtlScrl ?? */
        0x000000, /* 0x4A icvCtlInv ?? */
        0x000000, /* 0x4B icvCtlBody ?? */
        0x000000, /* 0x4C icvCtlFrame ?? */
        0x000000, /* 0x4D icvCtlFore ?? */
        0x000000, /* 0x4E icvCtlBack ?? */
        0x000000, /* 0x4F icvCtlNeutral */
        0x000000, /* 0x50 icvInfoBk ?? */
        0x000000 /* 0x51 icvInfoText ?? */
    ]);
    
    /* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */
    /* 12.3 Part Summary <SpreadsheetML> */
    /* 14.2 Part Summary <DrawingML> */
    /* [MS-XLSX] 2.1 Part Enumerations */
    /* [MS-XLSB] 2.1.7 Part Enumeration */
    var ct2type/*{[string]:string}*/ = ({
        /* Workbook */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
    
        /* Worksheet */
        "application/vnd.ms-excel.binIndexWs": "TODO", /* Binary Index */
    
        /* Macrosheet */
        "application/vnd.ms-excel.intlmacrosheet": "TODO",
        "application/vnd.ms-excel.binIndexMs": "TODO", /* Binary Index */
    
        /* File Properties */
        "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
        "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
        "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
    
        /* Custom Data Properties */
        "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
    
        /* PivotTable */
        "application/vnd.ms-excel.pivotTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
    
        /* Chart Colors */
        "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
    
        /* Chart Style */
        "application/vnd.ms-office.chartstyle+xml": "TODO",
    
        /* Calculation Chain */
        "application/vnd.ms-excel.calcChain": "calcchains",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
    
        /* Printer Settings */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
    
        /* ActiveX */
        "application/vnd.ms-office.activeX": "TODO",
        "application/vnd.ms-office.activeX+xml": "TODO",
    
        /* Custom Toolbars */
        "application/vnd.ms-excel.attachedToolbars": "TODO",
    
        /* External Data Connections */
        "application/vnd.ms-excel.connections": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
    
        /* External Links */
        "application/vnd.ms-excel.externalLink": "links",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
    
        /* Metadata */
        "application/vnd.ms-excel.sheetMetadata": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "TODO",
    
        /* PivotCache */
        "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
        "application/vnd.ms-excel.pivotCacheRecords": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
    
        /* Query Table */
        "application/vnd.ms-excel.queryTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
    
        /* Shared Workbook */
        "application/vnd.ms-excel.userNames": "TODO",
        "application/vnd.ms-excel.revisionHeaders": "TODO",
        "application/vnd.ms-excel.revisionLog": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
    
        /* Single Cell Table */
        "application/vnd.ms-excel.tableSingleCells": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
    
        /* Slicer */
        "application/vnd.ms-excel.slicer": "TODO",
        "application/vnd.ms-excel.slicerCache": "TODO",
        "application/vnd.ms-excel.slicer+xml": "TODO",
        "application/vnd.ms-excel.slicerCache+xml": "TODO",
    
        /* Sort Map */
        "application/vnd.ms-excel.wsSortMap": "TODO",
    
        /* Table */
        "application/vnd.ms-excel.table": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
    
        /* Themes */
        "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
    
        /* Theme Override */
        "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
    
        /* Timeline */
        "application/vnd.ms-excel.Timeline+xml": "TODO", /* verify */
        "application/vnd.ms-excel.TimelineCache+xml": "TODO", /* verify */
    
        /* VBA */
        "application/vnd.ms-office.vbaProject": "vba",
        "application/vnd.ms-office.vbaProjectSignature": "vba",
    
        /* Volatile Dependencies */
        "application/vnd.ms-office.volatileDependencies": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
    
        /* Control Properties */
        "application/vnd.ms-excel.controlproperties+xml": "TODO",
    
        /* Data Model */
        "application/vnd.openxmlformats-officedocument.model+data": "TODO",
    
        /* Survey */
        "application/vnd.ms-excel.Survey+xml": "TODO",
    
        /* Drawing */
        "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
        "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
    
        /* VML */
        "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
    
        "application/vnd.openxmlformats-package.relationships+xml": "rels",
        "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
    
        /* Image */
        "image/png": "TODO",
    
        "sheet": "js"
    });
    
    var CT_LIST = (function(){
        var o = {
            workbooks: {
                xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
                xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
                xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
                xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
                xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
            },
            strs: { /* Shared Strings */
                xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
                xlsb: "application/vnd.ms-excel.sharedStrings"
            },
            comments: { /* Comments */
                xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
                xlsb: "application/vnd.ms-excel.comments"
            },
            sheets: { /* Worksheet */
                xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
                xlsb: "application/vnd.ms-excel.worksheet"
            },
            charts: { /* Chartsheet */
                xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
                xlsb: "application/vnd.ms-excel.chartsheet"
            },
            dialogs: { /* Dialogsheet */
                xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
                xlsb: "application/vnd.ms-excel.dialogsheet"
            },
            macros: { /* Macrosheet (Excel 4.0 Macros) */
                xlsx: "application/vnd.ms-excel.macrosheet+xml",
                xlsb: "application/vnd.ms-excel.macrosheet"
            },
            styles: { /* Styles */
                xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
                xlsb: "application/vnd.ms-excel.styles"
            }
        };
        keys(o).forEach(function(k) { ["xlsm", "xlam"].forEach(function(v) { if(!o[k][v]) o[k][v] = o[k].xlsx; }); });
        keys(o).forEach(function(k){ keys(o[k]).forEach(function(v) { ct2type[o[k][v]] = k; }); });
        return o;
    })();
    
    var type2ct/*{[string]:Array<string>}*/ = evert_arr(ct2type);
    
    XMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';
    
    function new_ct() {
        return ({
            workbooks:[], sheets:[], charts:[], dialogs:[], macros:[],
            rels:[], strs:[], comments:[], links:[],
            coreprops:[], extprops:[], custprops:[], themes:[], styles:[],
            calcchains:[], vba: [], drawings: [],
            TODO:[], xmlns: "" });
    }
    
    function parse_ct(data, opts) {
        var ct = new_ct();
        if(!data || !data.match) return ct;
        var ctext = {};
        (data.match(tagregex)||[]).forEach(function(x) {
            var y = parsexmltag(x);
            switch(y[0].replace(nsregex,"<")) {
                case '<?xml': break;
                case '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/)||["",""])[1] ]; break;
                case '<Default': ctext[y.Extension] = y.ContentType; break;
                case '<Override':
                    if(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
                    break;
            }
        });
        if(ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
        ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
        ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
        ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
        ct.defaults = ctext;
        delete ct.calcchains;
        return ct;
    }
    
    var CTYPE_XML_ROOT = writextag('Types', null, {
        'xmlns': XMLNS.CT,
        'xmlns:xsd': XMLNS.xsd,
        'xmlns:xsi': XMLNS.xsi
    });
    
    var CTYPE_DEFAULTS = [
        ['xml', 'application/xml'],
        ['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'],
        ['vml', 'application/vnd.openxmlformats-officedocument.vmlDrawing'],
        /* from test files */
        ['bmp', 'image/bmp'],
        ['png', 'image/png'],
        ['gif', 'image/gif'],
        ['emf', 'image/x-emf'],
        ['wmf', 'image/x-wmf'],
        ['jpg', 'image/jpeg'], ['jpeg', 'image/jpeg'],
        ['tif', 'image/tiff'], ['tiff', 'image/tiff'],
        ['pdf', 'application/pdf'],
        ['rels', type2ct.rels[0]]
    ].map(function(x) {
        return writextag('Default', null, {'Extension':x[0], 'ContentType': x[1]});
    });
    
    function write_ct(ct, opts) {
        var o = [], v;
        o[o.length] = (XML_HEADER);
        o[o.length] = (CTYPE_XML_ROOT);
        o = o.concat(CTYPE_DEFAULTS);
        var f1 = function(w) {
            if(ct[w] && ct[w].length > 0) {
                v = ct[w][0];
                o[o.length] = (writextag('Override', null, {
                    'PartName': (v[0] == '/' ? "":"/") + v,
                    'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
                }));
            }
        };
        var f2 = function(w) {
            (ct[w]||[]).forEach(function(v) {
                o[o.length] = (writextag('Override', null, {
                    'PartName': (v[0] == '/' ? "":"/") + v,
                    'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
                }));
            });
        };
        var f3 = function(t) {
            (ct[t]||[]).forEach(function(v) {
                o[o.length] = (writextag('Override', null, {
                    'PartName': (v[0] == '/' ? "":"/") + v,
                    'ContentType': type2ct[t][0]
                }));
            });
        };
        f1('workbooks');
        f2('sheets');
        f2('charts');
        f3('themes');
        ['strs', 'styles'].forEach(f1);
        ['coreprops', 'extprops', 'custprops'].forEach(f3);
        f3('vba');
        f3('comments');
        f3('drawings');
        if(o.length>2){ o[o.length] = ('</Types>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* 9.3 Relationships */
    var RELS = ({
        WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
        VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
        VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
    });
    
    /* 9.3.3 Representing Relationships */
    function get_rels_path(file) {
        var n = file.lastIndexOf("/");
        return file.substr(0,n+1) + '_rels/' + file.substr(n+1) + ".rels";
    }
    
    function parse_rels(data, currentFilePath) {
        if (!data) return data;
        if (currentFilePath.charAt(0) !== '/') {
            currentFilePath = '/'+currentFilePath;
        }
        var rels = {};
        var hash = {};
    
        (data.match(tagregex)||[]).forEach(function(x) {
            var y = parsexmltag(x);
            /* 9.3.2.2 OPC_Relationships */
            if (y[0] === '<Relationship') {
                var rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; rel.TargetMode = y.TargetMode;
                var canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);
                rels[canonictarget] = rel;
                hash[y.Id] = rel;
            }
        });
        rels["!id"] = hash;
        return rels;
    }
    
    XMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';
    
    var RELS_ROOT = writextag('Relationships', null, {
        //'xmlns:ns0': XMLNS.RELS,
        'xmlns': XMLNS.RELS
    });
    
    /* TODO */
    function write_rels(rels) {
        var o = [XML_HEADER, RELS_ROOT];
        keys(rels['!id']).forEach(function(rid) {
            o[o.length] = (writextag('Relationship', null, rels['!id'][rid]));
        });
        if(o.length>2){ o[o.length] = ('</Relationships>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    
    function add_rels(rels, rId, f, type, relobj) {
        if(!relobj) relobj = {};
        if(!rels['!id']) rels['!id'] = {};
        if(rId < 0) for(rId = 1; rels['!id']['rId' + rId]; ++rId){/* empty */}
        relobj.Id = 'rId' + rId;
        relobj.Type = type;
        relobj.Target = f;
        if(relobj.Type == RELS.HLINK) relobj.TargetMode = "External";
        if(rels['!id'][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
        rels['!id'][relobj.Id] = relobj;
        rels[('/' + relobj.Target).replace("//","/")] = relobj;
        return rId;
    }
    /* Open Document Format for Office Applications (OpenDocument) Version 1.2 */
    /* Part 3 Section 4 Manifest File */
    var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
    function parse_manifest(d, opts) {
        var str = xlml_normalize(d);
        var Rn;
        var FEtag;
        while((Rn = xlmlregex.exec(str))) switch(Rn[3]) {
            case 'manifest': break; // 4.2 <manifest:manifest>
            case 'file-entry': // 4.3 <manifest:file-entry>
                FEtag = parsexmltag(Rn[0], false);
                if(FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
                break;
            case 'encryption-data': // 4.4 <manifest:encryption-data>
            case 'algorithm': // 4.5 <manifest:algorithm>
            case 'start-key-generation': // 4.6 <manifest:start-key-generation>
            case 'key-derivation': // 4.7 <manifest:key-derivation>
                throw new Error("Unsupported ODS Encryption");
            default: if(opts && opts.WTF) throw Rn;
        }
    }
    
    function write_manifest(manifest, opts) {
        var o = [XML_HEADER];
        o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
        o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
        for(var i = 0; i < manifest.length; ++i) o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n');
        o.push('</manifest:manifest>');
        return o.join("");
    }
    
    /* Part 3 Section 6 Metadata Manifest File */
    function write_rdf_type(file, res, tag) {
        return [
            '  <rdf:Description rdf:about="' + file + '">\n',
            '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + '#' + res + '"/>\n',
            '  </rdf:Description>\n'
        ].join("");
    }
    function write_rdf_has(base, file) {
        return [
            '  <rdf:Description rdf:about="' + base + '">\n',
            '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
            '  </rdf:Description>\n'
        ].join("");
    }
    function write_rdf(rdf, opts) {
        var o = [XML_HEADER];
        o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
        for(var i = 0; i != rdf.length; ++i) {
            o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
            o.push(write_rdf_has("",rdf[i][0]));
        }
        o.push(write_rdf_type("","Document", "pkg"));
        o.push('</rdf:RDF>');
        return o.join("");
    }
    /* TODO: pull properties */
    var write_meta_ods = (function() {
        var payload = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>Sheet' + 'JS ' + XLSX.version + '</meta:generator></office:meta></office:document-meta>';
        return function wmo(wb, opts) {
            return payload;
        };
    })();
    
    /* ECMA-376 Part II 11.1 Core Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var CORE_PROPS = [
        ["cp:category", "Category"],
        ["cp:contentStatus", "ContentStatus"],
        ["cp:keywords", "Keywords"],
        ["cp:lastModifiedBy", "LastAuthor"],
        ["cp:lastPrinted", "LastPrinted"],
        ["cp:revision", "RevNumber"],
        ["cp:version", "Version"],
        ["dc:creator", "Author"],
        ["dc:description", "Comments"],
        ["dc:identifier", "Identifier"],
        ["dc:language", "Language"],
        ["dc:subject", "Subject"],
        ["dc:title", "Title"],
        ["dcterms:created", "CreatedDate", 'date'],
        ["dcterms:modified", "ModifiedDate", 'date']
    ];
    
    XMLNS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/metadata/core-properties";
    RELS.CORE_PROPS  = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';
    
    var CORE_PROPS_REGEX = (function() {
        var r = new Array(CORE_PROPS.length);
        for(var i = 0; i < CORE_PROPS.length; ++i) {
            var f = CORE_PROPS[i];
            var g = "(?:"+ f[0].substr(0,f[0].indexOf(":")) +":)"+ f[0].substr(f[0].indexOf(":")+1);
            r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)<\/" + g + ">");
        }
        return r;
    })();
    
    function parse_core_props(data) {
        var p = {};
        data = utf8read(data);
    
        for(var i = 0; i < CORE_PROPS.length; ++i) {
            var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
            if(cur != null && cur.length > 0) p[f[1]] = cur[1];
            if(f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
        }
    
        return p;
    }
    
    var CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {
        //'xmlns': XMLNS.CORE_PROPS,
        'xmlns:cp': XMLNS.CORE_PROPS,
        'xmlns:dc': XMLNS.dc,
        'xmlns:dcterms': XMLNS.dcterms,
        'xmlns:dcmitype': XMLNS.dcmitype,
        'xmlns:xsi': XMLNS.xsi
    });
    
    function cp_doit(f, g, h, o, p) {
        if(p[f] != null || g == null || g === "") return;
        p[f] = g;
        o[o.length] = (h ? writextag(f,g,h) : writetag(f,g));
    }
    
    function write_core_props(cp, _opts) {
        var opts = _opts || {};
        var o = [XML_HEADER, CORE_PROPS_XML_ROOT], p = {};
        if(!cp && !opts.Props) return o.join("");
    
        if(cp) {
            if(cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {"xsi:type":"dcterms:W3CDTF"}, o, p);
            if(cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {"xsi:type":"dcterms:W3CDTF"}, o, p);
        }
    
        for(var i = 0; i != CORE_PROPS.length; ++i) {
            var f = CORE_PROPS[i];
            var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
            if(v === true) v = "1";
            else if(v === false) v = "0";
            else if(typeof v == "number") v = String(v);
            if(v != null) cp_doit(f[0], v, null, o, p);
        }
        if(o.length>2){ o[o.length] = ('</cp:coreProperties>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* 15.2.12.3 Extended File Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var EXT_PROPS = [
        ["Application", "Application", "string"],
        ["AppVersion", "AppVersion", "string"],
        ["Company", "Company", "string"],
        ["DocSecurity", "DocSecurity", "string"],
        ["Manager", "Manager", "string"],
        ["HyperlinksChanged", "HyperlinksChanged", "bool"],
        ["SharedDoc", "SharedDoc", "bool"],
        ["LinksUpToDate", "LinksUpToDate", "bool"],
        ["ScaleCrop", "ScaleCrop", "bool"],
        ["HeadingPairs", "HeadingPairs", "raw"],
        ["TitlesOfParts", "TitlesOfParts", "raw"]
    ];
    
    XMLNS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties";
    RELS.EXT_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';
    
    function parse_ext_props(data, p, opts) {
        var q = {}; if(!p) p = {};
        data = utf8read(data);
    
        EXT_PROPS.forEach(function(f) {
            switch(f[2]) {
                case "string": p[f[1]] = (data.match(matchtag(f[0]))||[])[1]; break;
                case "bool": p[f[1]] = (data.match(matchtag(f[0]))||[])[1] === "true"; break;
                case "raw":
                    var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)<\/" + f[0] + ">"));
                    if(cur && cur.length > 0) q[f[1]] = cur[1];
                    break;
            }
        });
    
        if(q.HeadingPairs && q.TitlesOfParts) {
            var v = parseVector(q.HeadingPairs, opts);
            var parts = parseVector(q.TitlesOfParts, opts).map(function (x) { return x.v; });
            var idx = 0, len = 0;
            if(parts.length > 0) for(var i = 0; i !== v.length; i += 2) {
                len = +(v[i+1].v);
                switch(v[i].v) {
                    case "Worksheets":
                    case "å·¥ä½œè¡¨":
                    case "Ð›Ð¸ÑÑ‚Ñ‹":
                    case "Ø£ÙˆØ±Ø§Ù‚ Ø§Ù„Ø¹Ù…Ù„":
                    case "ãƒ¯ãƒ¼ã‚¯ã‚·ãƒ¼ãƒˆ":
                    case "×’×œ×™×•× ×•×ª ×¢×‘×•×“×”":
                    case "ArbeitsblÃ¤tter":
                    case "Ã‡alÄ±ÅŸma SayfalarÄ±":
                    case "Feuilles de calcul":
                    case "Fogli di lavoro":
                    case "Folhas de cÃ¡lculo":
                    case "Planilhas":
                    case "Regneark":
                    case "Werkbladen":
                        p.Worksheets = len;
                        p.SheetNames = parts.slice(idx, idx + len);
                        break;
    
                    case "Named Ranges":
                    case "åå‰ä»˜ãä¸€è¦§":
                    case "Benannte Bereiche":
                    case "Navngivne omrÃ¥der":
                        p.NamedRanges = len;
                        p.DefinedNames = parts.slice(idx, idx + len);
                        break;
    
                    case "Charts":
                    case "Diagramme":
                        p.Chartsheets = len;
                        p.ChartNames = parts.slice(idx, idx + len);
                        break;
                }
                idx += len;
            }
        }
    
        return p;
    }
    
    var EXT_PROPS_XML_ROOT = writextag('Properties', null, {
        'xmlns': XMLNS.EXT_PROPS,
        'xmlns:vt': XMLNS.vt
    });
    
    function write_ext_props(cp, opts) {
        var o = [], p = {}, W = writextag;
        if(!cp) cp = {};
        cp.Application = "SheetJS";
        o[o.length] = (XML_HEADER);
        o[o.length] = (EXT_PROPS_XML_ROOT);
    
        EXT_PROPS.forEach(function(f) {
            if(cp[f[1]] === undefined) return;
            var v;
            switch(f[2]) {
                case 'string': v = String(cp[f[1]]); break;
                case 'bool': v = cp[f[1]] ? 'true' : 'false'; break;
            }
            if(v !== undefined) o[o.length] = (W(f[0], v));
        });
    
        /* TODO: HeadingPairs, TitlesOfParts */
        o[o.length] = (W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>')+W('vt:variant', W('vt:i4', String(cp.Worksheets))), {size:2, baseType:"variant"})));
        o[o.length] = (W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function(s) { return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>"; }).join(""), {size: cp.Worksheets, baseType:"lpstr"})));
        if(o.length>2){ o[o.length] = ('</Properties>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* 15.2.12.2 Custom File Properties Part */
    XMLNS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties";
    RELS.CUST_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';
    
    var custregex = /<[^>]+>[^<]*/g;
    function parse_cust_props(data, opts) {
        var p = {}, name = "";
        var m = data.match(custregex);
        if(m) for(var i = 0; i != m.length; ++i) {
            var x = m[i], y = parsexmltag(x);
            switch(y[0]) {
                case '<?xml': break;
                case '<Properties': break;
                case '<property': name = y.name; break;
                case '</property>': name = null; break;
                default: if (x.indexOf('<vt:') === 0) {
                    var toks = x.split('>');
                    var type = toks[0].substring(4), text = toks[1];
                    /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */
                    switch(type) {
                        case 'lpstr': case 'bstr': case 'lpwstr':
                            p[name] = unescapexml(text);
                            break;
                        case 'bool':
                            p[name] = parsexmlbool(text, '<vt:bool>');
                            break;
                        case 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':
                            p[name] = parseInt(text, 10);
                            break;
                        case 'r4': case 'r8': case 'decimal':
                            p[name] = parseFloat(text);
                            break;
                        case 'filetime': case 'date':
                            p[name] = parseDate(text);
                            break;
                        case 'cy': case 'error':
                            p[name] = unescapexml(text);
                            break;
                        default:
                            if(type.slice(-1) == '/') break;
                            if(opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);
                    }
                } else if(x.substr(0,2) === "</") {/* empty */
                } else if(opts.WTF) throw new Error(x);
            }
        }
        return p;
    }
    
    var CUST_PROPS_XML_ROOT = writextag('Properties', null, {
        'xmlns': XMLNS.CUST_PROPS,
        'xmlns:vt': XMLNS.vt
    });
    
    function write_cust_props(cp, opts) {
        var o = [XML_HEADER, CUST_PROPS_XML_ROOT];
        if(!cp) return o.join("");
        var pid = 1;
        keys(cp).forEach(function custprop(k) { ++pid;
            // $FlowIgnore
            o[o.length] = (writextag('property', write_vt(cp[k]), {
                'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',
                'pid': pid,
                'name': k
            }));
        });
        if(o.length>2){ o[o.length] = '</Properties>'; o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* Common Name -> XLML Name */
    var XLMLDocPropsMap = {
        Title: 'Title',
        Subject: 'Subject',
        Author: 'Author',
        Keywords: 'Keywords',
        Comments: 'Description',
        LastAuthor: 'LastAuthor',
        RevNumber: 'Revision',
        Application: 'AppName',
        /* TotalTime: 'TotalTime', */
        LastPrinted: 'LastPrinted',
        CreatedDate: 'Created',
        ModifiedDate: 'LastSaved',
        /* Pages */
        /* Words */
        /* Characters */
        Category: 'Category',
        /* PresentationFormat */
        Manager: 'Manager',
        Company: 'Company',
        /* Guid */
        /* HyperlinkBase */
        /* Bytes */
        /* Lines */
        /* Paragraphs */
        /* CharactersWithSpaces */
        AppVersion: 'Version',
    
        ContentStatus: 'ContentStatus', /* NOTE: missing from schema */
        Identifier: 'Identifier', /* NOTE: missing from schema */
        Language: 'Language' /* NOTE: missing from schema */
    };
    var evert_XLMLDPM = evert(XLMLDocPropsMap);
    
    function xlml_set_prop(Props, tag, val) {
        tag = evert_XLMLDPM[tag] || tag;
        Props[tag] = val;
    }
    
    function xlml_write_docprops(Props, opts) {
        var o = [];
        keys(XLMLDocPropsMap).map(function(m) {
            for(var i = 0; i < CORE_PROPS.length; ++i) if(CORE_PROPS[i][1] == m) return CORE_PROPS[i];
            for(i = 0; i < EXT_PROPS.length; ++i) if(EXT_PROPS[i][1] == m) return EXT_PROPS[i];
            throw m;
        }).forEach(function(p) {
            if(Props[p[1]] == null) return;
            var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
            switch(p[2]) {
                case 'date': m = new Date(m).toISOString().replace(/\.\d*Z/,"Z"); break;
            }
            if(typeof m == 'number') m = String(m);
            else if(m === true || m === false) { m = m ? "1" : "0"; }
            else if(m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/,"");
            o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
        });
        return writextag('DocumentProperties', o.join(""), {xmlns:XLMLNS.o });
    }
    function xlml_write_custprops(Props, Custprops, opts) {
        var BLACKLIST = ["Worksheets","SheetNames"];
        var T = 'CustomDocumentProperties';
        var o = [];
        if(Props) keys(Props).forEach(function(k) {
    if(!Props.hasOwnProperty(k)) return;
            for(var i = 0; i < CORE_PROPS.length; ++i) if(k == CORE_PROPS[i][1]) return;
            for(i = 0; i < EXT_PROPS.length; ++i) if(k == EXT_PROPS[i][1]) return;
            for(i = 0; i < BLACKLIST.length; ++i) if(k == BLACKLIST[i]) return;
    
            var m = Props[k];
            var t = "string";
            if(typeof m == 'number') { t = "float"; m = String(m); }
            else if(m === true || m === false) { t = "boolean"; m = m ? "1" : "0"; }
            else m = String(m);
            o.push(writextag(escapexmltag(k), m, {"dt:dt":t}));
        });
        if(Custprops) keys(Custprops).forEach(function(k) {
    if(!Custprops.hasOwnProperty(k)) return;
            if(Props && Props.hasOwnProperty(k)) return;
            var m = Custprops[k];
            var t = "string";
            if(typeof m == 'number') { t = "float"; m = String(m); }
            else if(m === true || m === false) { t = "boolean"; m = m ? "1" : "0"; }
            else if(m instanceof Date) { t = "dateTime.tz"; m = m.toISOString(); }
            else m = String(m);
            o.push(writextag(escapexmltag(k), m, {"dt:dt":t}));
        });
        return '<' + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + '</' + T + '>';
    }
    /* [MS-DTYP] 2.3.3 FILETIME */
    /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */
    /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */
    function parse_FILETIME(blob) {
        var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
        return new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\.000/,"");
    }
    
    /* [MS-OSHARED] 2.3.3.1.4 Lpstr */
    function parse_lpstr(blob, type, pad) {
        var start = blob.l;
        var str = blob.read_shift(0, 'lpstr-cp');
        if(pad) while((blob.l - start) & 3) ++blob.l;
        return str;
    }
    
    /* [MS-OSHARED] 2.3.3.1.6 Lpwstr */
    function parse_lpwstr(blob, type, pad) {
        var str = blob.read_shift(0, 'lpwstr');
        if(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;
        return str;
    }
    
    
    /* [MS-OSHARED] 2.3.3.1.11 VtString */
    /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */
    function parse_VtStringBase(blob, stringType, pad) {
        if(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);
        return parse_lpstr(blob, stringType, pad);
    }
    
    function parse_VtString(blob, t, pad) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }
    function parse_VtUnalignedString(blob, t) { if(!t) throw new Error("VtUnalignedString must have positive length"); return parse_VtStringBase(blob, t, 0); }
    
    /* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */
    function parse_VtVecUnalignedLpstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr-cp').replace(chr0,'');
        return ret;
    }
    
    /* [MS-OSHARED] 2.3.3.1.10 VtVecUnalignedLpstr */
    function parse_VtVecUnalignedLpstr(blob) {
        return parse_VtVecUnalignedLpstrValue(blob);
    }
    
    /* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */
    function parse_VtHeadingPair(blob) {
        var headingString = parse_TypedPropertyValue(blob, VT_USTR);
        var headerParts = parse_TypedPropertyValue(blob, VT_I4);
        return [headingString, headerParts];
    }
    
    /* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */
    function parse_VtVecHeadingPairValue(blob) {
        var cElements = blob.read_shift(4);
        var out = [];
        for(var i = 0; i != cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));
        return out;
    }
    
    /* [MS-OSHARED] 2.3.3.1.15 VtVecHeadingPair */
    function parse_VtVecHeadingPair(blob) {
        // NOTE: When invoked, wType & padding were already consumed
        return parse_VtVecHeadingPairValue(blob);
    }
    
    /* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */
    function parse_dictionary(blob,CodePage) {
        var cnt = blob.read_shift(4);
        var dict = ({});
        for(var j = 0; j != cnt; ++j) {
            var pid = blob.read_shift(4);
            var len = blob.read_shift(4);
            dict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');
        }
        if(blob.l & 3) blob.l = (blob.l>>2+1)<<2;
        return dict;
    }
    
    /* [MS-OLEPS] 2.9 BLOB */
    function parse_BLOB(blob) {
        var size = blob.read_shift(4);
        var bytes = blob.slice(blob.l,blob.l+size);
        if((size & 3) > 0) blob.l += (4 - (size & 3)) & 3;
        return bytes;
    }
    
    /* [MS-OLEPS] 2.11 ClipboardData */
    function parse_ClipboardData(blob) {
        // TODO
        var o = {};
        o.Size = blob.read_shift(4);
        //o.Format = blob.read_shift(4);
        blob.l += o.Size;
        return o;
    }
    
    /* [MS-OLEPS] 2.14 Vector and Array Property Types */
    function parse_VtVector(blob, cb) {
        /* [MS-OLEPS] 2.14.2 VectorHeader */
    /*	var Length = blob.read_shift(4);
        var o = [];
        for(var i = 0; i != Length; ++i) {
            o.push(cb(blob));
        }
        return o;*/
    }
    
    /* [MS-OLEPS] 2.15 TypedPropertyValue */
    function parse_TypedPropertyValue(blob, type, _opts) {
        var t = blob.read_shift(2), ret, opts = _opts||{};
        blob.l += 2;
        if(type !== VT_VARIANT)
        if(t !== type && VT_CUSTOM.indexOf(type)===-1) throw new Error('Expected type ' + type + ' saw ' + t);
        switch(type === VT_VARIANT ? t : type) {
            case 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;
            case 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;
            case 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;
            case 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;
            case 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');
            case 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);
            case 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);
            case 0x41 /*VT_BLOB*/: return parse_BLOB(blob);
            case 0x47 /*VT_CF*/: return parse_ClipboardData(blob);
            case 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw).replace(chr0,'');
            case 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t/*, 4*/).replace(chr0,'');
            case 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPair(blob);
            case 0x101E /*VT_LPSTR*/: return parse_VtVecUnalignedLpstr(blob);
            default: throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
        }
    }
    /* [MS-OLEPS] 2.14.2 VectorHeader */
    /*function parse_VTVectorVariant(blob) {
        var Length = blob.read_shift(4);
    
        if(Length & 1 !== 0) throw new Error("VectorHeader Length=" + Length + " must be even");
        var o = [];
        for(var i = 0; i != Length; ++i) {
            o.push(parse_TypedPropertyValue(blob, VT_VARIANT));
        }
        return o;
    }*/
    
    /* [MS-OLEPS] 2.20 PropertySet */
    function parse_PropertySet(blob, PIDSI) {
        var start_addr = blob.l;
        var size = blob.read_shift(4);
        var NumProps = blob.read_shift(4);
        var Props = [], i = 0;
        var CodePage = 0;
        var Dictionary = -1, DictObj = ({});
        for(i = 0; i != NumProps; ++i) {
            var PropID = blob.read_shift(4);
            var Offset = blob.read_shift(4);
            Props[i] = [PropID, Offset + start_addr];
        }
        Props.sort(function(x,y) { return x[1] - y[1]; });
        var PropH = {};
        for(i = 0; i != NumProps; ++i) {
            if(blob.l !== Props[i][1]) {
                var fail = true;
                if(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {
                    case 0x02 /*VT_I2*/: if(blob.l+2 === Props[i][1]) { blob.l+=2; fail = false; } break;
                    case 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
                    case 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
                }
                if((!PIDSI||i==0) && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }
                if(fail) throw new Error("Read Error: Expected address " + Props[i][1] + ' at ' + blob.l + ' :' + i);
            }
            if(PIDSI) {
                var piddsi = PIDSI[Props[i][0]];
                PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});
                if(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + String(PropH[piddsi.n] & 0xFFFF);
                if(piddsi.n == "CodePage") switch(PropH[piddsi.n]) {
                    case 0: PropH[piddsi.n] = 1252;
                        /* falls through */
                    case 874:
                    case 932:
                    case 936:
                    case 949:
                    case 950:
                    case 1250:
                    case 1251:
                    case 1253:
                    case 1254:
                    case 1255:
                    case 1256:
                    case 1257:
                    case 1258:
                    case 10000:
                    case 1200:
                    case 1201:
                    case 1252:
                    case 65000: case -536:
                    case 65001: case -535:
                        set_cp(CodePage = (PropH[piddsi.n]>>>0) & 0xFFFF); break;
                    default: throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
                }
            } else {
                if(Props[i][0] === 0x1) {
                    CodePage = PropH.CodePage = (parse_TypedPropertyValue(blob, VT_I2));
                    set_cp(CodePage);
                    if(Dictionary !== -1) {
                        var oldpos = blob.l;
                        blob.l = Props[Dictionary][1];
                        DictObj = parse_dictionary(blob,CodePage);
                        blob.l = oldpos;
                    }
                } else if(Props[i][0] === 0) {
                    if(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }
                    DictObj = parse_dictionary(blob,CodePage);
                } else {
                    var name = DictObj[Props[i][0]];
                    var val;
                    /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */
                    switch(blob[blob.l]) {
                        case 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;
                        case 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;
                        case 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;
                        case 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;
                        case 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;
                        case 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;
                        case 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;
                        case 0x40 /*VT_FILETIME*/: blob.l += 4; val = parseDate(parse_FILETIME(blob)); break;
                        default: throw new Error("unparsed value: " + blob[blob.l]);
                    }
                    PropH[name] = val;
                }
            }
        }
        blob.l = start_addr + size; /* step ahead to skip padding */
        return PropH;
    }
    
    /* [MS-OLEPS] 2.21 PropertySetStream */
    function parse_PropertySetStream(file, PIDSI) {
        var blob = file.content;
        if(!blob) return ({});
        prep_blob(blob, 0);
    
        var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
        blob.chk('feff', 'Byte Order: ');
    
        var vers = blob.read_shift(2); // TODO: check version
        var SystemIdentifier = blob.read_shift(4);
        blob.chk(CFB.utils.consts.HEADER_CLSID, 'CLSID: ');
        NumSets = blob.read_shift(4);
        if(NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
        FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);
    
        if(NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
        else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
        var PSet0 = parse_PropertySet(blob, PIDSI);
    
        var rval = ({ SystemIdentifier: SystemIdentifier });
        for(var y in PSet0) rval[y] = PSet0[y];
        //rval.blob = blob;
        rval.FMTID = FMTID0;
        //rval.PSet0 = PSet0;
        if(NumSets === 1) return rval;
        if(blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
        var PSet1;
        try { PSet1 = parse_PropertySet(blob, null); } catch(e) {/* empty */}
        for(y in PSet1) rval[y] = PSet1[y];
        rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1
        return rval;
    }
    
    
    function parsenoop2(blob, length) { blob.read_shift(length); return null; }
    function writezeroes(n, o) { if(!o) o=new_buf(n); for(var j=0; j<n; ++j) o.write_shift(1, 0); return o; }
    
    function parslurp(blob, length, cb) {
        var arr = [], target = blob.l + length;
        while(blob.l < target) arr.push(cb(blob, target - blob.l));
        if(target !== blob.l) throw new Error("Slurp error");
        return arr;
    }
    
    function parsebool(blob, length) { return blob.read_shift(length) === 0x1; }
    function writebool(v, o) { if(!o) o=new_buf(2); o.write_shift(2, +!!v); return o; }
    
    function parseuint16(blob) { return blob.read_shift(2, 'u'); }
    function writeuint16(v, o) { if(!o) o=new_buf(2); o.write_shift(2, v); return o; }
    function parseuint16a(blob, length) { return parslurp(blob,length,parseuint16);}
    
    /* --- 2.5 Structures --- */
    
    /* [MS-XLS] 2.5.10 Bes (boolean or error) */
    function parse_Bes(blob) {
        var v = blob.read_shift(1), t = blob.read_shift(1);
        return t === 0x01 ? v : v === 0x01;
    }
    function write_Bes(v, t, o) {
        if(!o) o = new_buf(2);
        o.write_shift(1, +v);
        o.write_shift(1, t == 'e' ? 1 : 0);
        return o;
    }
    
    /* [MS-XLS] 2.5.240 ShortXLUnicodeString */
    function parse_ShortXLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
        var width = 1, encoding = 'sbcs-cont';
        var cp = current_codepage;
        if(opts && opts.biff >= 8) current_codepage = 1200;
        if(!opts || opts.biff == 8 ) {
            var fHighByte = blob.read_shift(1);
            if(fHighByte) { width = 2; encoding = 'dbcs-cont'; }
        } else if(opts.biff == 12) {
            width = 2; encoding = 'wstr';
        }
        var o = cch ? blob.read_shift(cch, encoding) : "";
        current_codepage = cp;
        return o;
    }
    
    /* 2.5.293 XLUnicodeRichExtendedString */
    function parse_XLUnicodeRichExtendedString(blob) {
        var cp = current_codepage;
        current_codepage = 1200;
        var cch = blob.read_shift(2), flags = blob.read_shift(1);
        var fHighByte = flags & 0x1, fExtSt = flags & 0x4, fRichSt = flags & 0x8;
        var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs
        var cRun = 0, cbExtRst;
        var z = {};
        if(fRichSt) cRun = blob.read_shift(2);
        if(fExtSt) cbExtRst = blob.read_shift(4);
        var encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';
        var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
        if(fRichSt) blob.l += 4 * cRun; //TODO: parse this
        if(fExtSt) blob.l += cbExtRst; //TODO: parse this
        z.t = msg;
        if(!fRichSt) { z.raw = "<t>" + z.t + "</t>"; z.r = z.t; }
        current_codepage = cp;
        return z;
    }
    
    /* 2.5.296 XLUnicodeStringNoCch */
    function parse_XLUnicodeStringNoCch(blob, cch, opts) {
        var retval;
        if(opts) {
            if(opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'sbcs-cont');
            if(opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');
        }
        var fHighByte = blob.read_shift(1);
        if(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }
        else { retval = blob.read_shift(cch, 'dbcs-cont'); }
        return retval;
    }
    
    /* 2.5.294 XLUnicodeString */
    function parse_XLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        if(cch === 0) { blob.l++; return ""; }
        return parse_XLUnicodeStringNoCch(blob, cch, opts);
    }
    /* BIFF5 override */
    function parse_XLUnicodeString2(blob, length, opts) {
        if(opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
        var cch = blob.read_shift(1);
        if(cch === 0) { blob.l++; return ""; }
        return blob.read_shift(cch, opts.biff == 4 ? 'cpstr' : 'sbcs-cont');
    }
    /* TODO: BIFF5 and lower, codepage awareness */
    function write_XLUnicodeString(str, opts, o) {
        if(!o) o = new_buf(3 + 2 * str.length);
        o.write_shift(2, str.length);
        o.write_shift(1, 1);
        o.write_shift(31, str, 'utf16le');
        return o;
    }
    
    /* [MS-XLS] 2.5.61 ControlInfo */
    function parse_ControlInfo(blob, length, opts) {
        var flags = blob.read_shift(1);
        blob.l++;
        var accel = blob.read_shift(2);
        blob.l += 2;
        return [flags, accel];
    }
    
    /* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */
    function parse_URLMoniker(blob) {
        var len = blob.read_shift(4), start = blob.l;
        var extra = false;
        if(len > 24) {
            /* look ahead */
            blob.l += len - 24;
            if(blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
            blob.l = start;
        }
        var url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,"");
        if(extra) blob.l += 24;
        return url;
    }
    
    /* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */
    function parse_FileMoniker(blob, length) {
        var cAnti = blob.read_shift(2);
        var ansiPath = blob.read_shift(0, 'lpstr-ansi');
        var endServer = blob.read_shift(2);
        if(blob.read_shift(2) != 0xDEAD) throw new Error("Bad FileMoniker");
        var sz = blob.read_shift(4);
        if(sz === 0) return ansiPath.replace(/\\/g,"/");
        var bytes = blob.read_shift(4);
        if(blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
        var unicodePath = blob.read_shift(bytes>>1, 'utf16le').replace(chr0,"");
        return unicodePath;
    }
    
    /* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */
    function parse_HyperlinkMoniker(blob, length) {
        var clsid = blob.read_shift(16); length -= 16;
        switch(clsid) {
            case "e0c9ea79f9bace118c8200aa004ba90b": return parse_URLMoniker(blob, length);
            case "0303000000000000c000000000000046": return parse_FileMoniker(blob, length);
            default: throw new Error("Unsupported Moniker " + clsid);
        }
    }
    
    /* [MS-OSHARED] 2.3.7.9 HyperlinkString */
    function parse_HyperlinkString(blob, length) {
        var len = blob.read_shift(4);
        var o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, "") : "";
        return o;
    }
    
    /* [MS-OSHARED] 2.3.7.1 Hyperlink Object */
    function parse_Hyperlink(blob, length) {
        var end = blob.l + length;
        var sVer = blob.read_shift(4);
        if(sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
        var flags = blob.read_shift(2);
        blob.l += 2;
        var displayName, targetFrameName, moniker, oleMoniker, Location="", guid, fileTime;
        if(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
        if(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
        if((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
        if((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
        if(flags & 0x0008) Location = parse_HyperlinkString(blob, end - blob.l);
        if(flags & 0x0020) guid = blob.read_shift(16);
        if(flags & 0x0040) fileTime = parse_FILETIME(blob/*, 8*/);
        blob.l = end;
        var target = targetFrameName||moniker||oleMoniker||"";
        if(target && Location) target+="#"+Location;
        if(!target) target = "#" + Location;
        return {Target: target};
    }
    function write_Hyperlink(hl) {
        var out = new_buf(512), i = 0;
        var Target = hl.Target;
        var F = Target.indexOf("#") > -1 ? 0x1f : 0x17;
        switch(Target.charAt(0)) { case "#": F=0x1c; break; case ".": F&=~2; break; }
        out.write_shift(4,2); out.write_shift(4, F);
        var data = [8,6815827,6619237,4849780,83]; for(i = 0; i < data.length; ++i) out.write_shift(4, data[i]);
        if(F == 0x1C) {
            Target = Target.slice(1);
            out.write_shift(4, Target.length + 1);
            for(i = 0; i < Target.length; ++i) out.write_shift(2, Target.charCodeAt(i));
            out.write_shift(2, 0);
        } else if(F & 0x02) {
            data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
            for(i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));
            out.write_shift(4, 2*(Target.length + 1));
            for(i = 0; i < Target.length; ++i) out.write_shift(2, Target.charCodeAt(i));
            out.write_shift(2, 0);
        } else {
            data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
            for(i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));
            var P = 0;
            while(Target.slice(P*3,P*3+3)=="../"||Target.slice(P*3,P*3+3)=="..\\") ++P;
            out.write_shift(2, P);
            out.write_shift(4, Target.length + 1);
            for(i = 0; i < Target.length; ++i) out.write_shift(1, Target.charCodeAt(i) & 0xFF);
            out.write_shift(1, 0);
            out.write_shift(2, 0xFFFF);
            out.write_shift(2, 0xDEAD);
            for(i = 0; i < 6; ++i) out.write_shift(4, 0);
        }
        return out.slice(0, out.l);
    }
    
    /* 2.5.178 LongRGBA */
    function parse_LongRGBA(blob, length) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }
    
    /* 2.5.177 LongRGB */
    function parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob, length); x[3] = 0; return x; }
    
    
    /* --- MS-XLS --- */
    
    /* 2.5.19 */
    function parse_XLSCell(blob, length) {
        var rw = blob.read_shift(2); // 0-indexed
        var col = blob.read_shift(2);
        var ixfe = blob.read_shift(2);
        return ({r:rw, c:col, ixfe:ixfe});
    }
    function write_XLSCell(R, C, ixfe, o) {
        if(!o) o = new_buf(6);
        o.write_shift(2, R);
        o.write_shift(2, C);
        o.write_shift(2, ixfe||0);
        return o;
    }
    
    /* 2.5.134 */
    function parse_frtHeader(blob) {
        var rt = blob.read_shift(2);
        var flags = blob.read_shift(2); // TODO: parse these flags
        blob.l += 8;
        return {type: rt, flags: flags};
    }
    
    
    
    function parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts); }
    
    /* 2.5.344 */
    function parse_XTI(blob, length, opts) {
        var w = opts.biff > 8 ? 4 : 2;
        var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w,'i'), itabLast = blob.read_shift(w,'i');
        return [iSupBook, itabFirst, itabLast];
    }
    
    /* 2.5.218 */
    function parse_RkRec(blob, length) {
        var ixfe = blob.read_shift(2);
        var RK = parse_RkNumber(blob);
        return [ixfe, RK];
    }
    
    /* 2.5.1 */
    function parse_AddinUdf(blob, length, opts) {
        blob.l += 4; length -= 4;
        var l = blob.l + length;
        var udfName = parse_ShortXLUnicodeString(blob, length, opts);
        var cb = blob.read_shift(2);
        l -= blob.l;
        if(cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
        blob.l += cb;
        return udfName;
    }
    
    /* 2.5.209 TODO: Check sizes */
    function parse_Ref8U(blob, length) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(2);
        var colLast = blob.read_shift(2);
        return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
    }
    function write_Ref8U(r, o) {
        if(!o) o = new_buf(8);
        o.write_shift(2, r.s.r);
        o.write_shift(2, r.e.r);
        o.write_shift(2, r.s.c);
        o.write_shift(2, r.e.c);
        return o;
    }
    
    /* 2.5.211 */
    function parse_RefU(blob, length) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(1);
        var colLast = blob.read_shift(1);
        return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
    }
    
    /* 2.5.207 */
    var parse_Ref = parse_RefU;
    
    /* 2.5.143 */
    function parse_FtCmo(blob, length) {
        blob.l += 4;
        var ot = blob.read_shift(2);
        var id = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l+=12;
        return [id, ot, flags];
    }
    
    /* 2.5.149 */
    function parse_FtNts(blob, length) {
        var out = {};
        blob.l += 4;
        blob.l += 16; // GUID TODO
        out.fSharedNote = blob.read_shift(2);
        blob.l += 4;
        return out;
    }
    
    /* 2.5.142 */
    function parse_FtCf(blob, length) {
        var out = {};
        blob.l += 4;
        blob.cf = blob.read_shift(2);
        return out;
    }
    
    /* 2.5.140 - 2.5.154 and friends */
    function parse_FtSkip(blob, length) { blob.l += 2; blob.l += blob.read_shift(2); }
    var FtTab = {
    0x00: parse_FtSkip,      /* FtEnd */
    0x04: parse_FtSkip,      /* FtMacro */
    0x05: parse_FtSkip,      /* FtButton */
    0x06: parse_FtSkip,      /* FtGmo */
    0x07: parse_FtCf,        /* FtCf */
    0x08: parse_FtSkip,      /* FtPioGrbit */
    0x09: parse_FtSkip,      /* FtPictFmla */
    0x0A: parse_FtSkip,      /* FtCbls */
    0x0B: parse_FtSkip,      /* FtRbo */
    0x0C: parse_FtSkip,      /* FtSbs */
    0x0D: parse_FtNts,       /* FtNts */
    0x0E: parse_FtSkip,      /* FtSbsFmla */
    0x0F: parse_FtSkip,      /* FtGboData */
    0x10: parse_FtSkip,      /* FtEdoData */
    0x11: parse_FtSkip,      /* FtRboData */
    0x12: parse_FtSkip,      /* FtCblsData */
    0x13: parse_FtSkip,      /* FtLbsData */
    0x14: parse_FtSkip,      /* FtCblsFmla */
    0x15: parse_FtCmo
    };
    function parse_FtArray(blob, length, ot) {
        var tgt = blob.l + length;
        var fts = [];
        while(blob.l < tgt) {
            var ft = blob.read_shift(2);
            blob.l-=2;
            try {
                fts.push(FtTab[ft](blob, tgt - blob.l));
            } catch(e) { blob.l = tgt; return fts; }
        }
        if(blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");
        return fts;
    }
    
    /* --- 2.4 Records --- */
    
    /* 2.4.21 */
    function parse_BOF(blob, length) {
        var o = {BIFFVer:0, dt:0};
        o.BIFFVer = blob.read_shift(2); length -= 2;
        if(length >= 2) { o.dt = blob.read_shift(2); blob.l -= 2; }
        switch(o.BIFFVer) {
            case 0x0600: /* BIFF8 */
            case 0x0500: /* BIFF5 */
            case 0x0002: case 0x0007: /* BIFF2 */
                break;
            default: if(length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
        }
    
        blob.read_shift(length);
        return o;
    }
    function write_BOF(wb, t, o) {
        var h = 0x0600, w = 16;
        switch(o.bookType) {
            case 'biff8': break;
            case 'biff5': h = 0x0500; w = 8; break;
            case 'biff4': h = 0x0004; w = 6; break;
            case 'biff3': h = 0x0003; w = 6; break;
            case 'biff2': h = 0x0002; w = 4; break;
            case 'xla': break;
            default: throw new Error("unsupported BIFF version");
        }
        var out = new_buf(w);
        out.write_shift(2, h);
        out.write_shift(2, t);
        if(w > 4) out.write_shift(2, 0x7262);
        if(w > 6) out.write_shift(2, 0x07CD);
        if(w > 8) {
            out.write_shift(2, 0xC009);
            out.write_shift(2, 0x0001);
            out.write_shift(2, 0x0706);
            out.write_shift(2, 0x0000);
        }
        return out;
    }
    
    
    /* 2.4.146 */
    function parse_InterfaceHdr(blob, length) {
        if(length === 0) return 0x04b0;
        var q;
        if((q=blob.read_shift(2))!==0x04b0){/* empty */}
        return 0x04b0;
    }
    
    
    /* 2.4.349 */
    function parse_WriteAccess(blob, length, opts) {
        if(opts.enc) { blob.l += length; return ""; }
        var l = blob.l;
        // TODO: make sure XLUnicodeString doesnt overrun
        var UserName = parse_XLUnicodeString(blob, 0, opts);
        blob.read_shift(length + l - blob.l);
        return UserName;
    }
    function write_WriteAccess(s, opts) {
        var b8 = !opts || opts.biff == 8;
        var o = new_buf(b8 ? 112 : 54);
        o.write_shift(opts.biff == 8 ? 2 : 1, 7);
        o.write_shift(1, 0);
        o.write_shift(4, 0x33336853);
        o.write_shift(4, 0x00534A74);
        while(o.l < o.length) o.write_shift(1, 0);
        return o;
    }
    
    /* 2.4.351 */
    function parse_WsBool(blob, length, opts) {
        var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
        return { fDialog: flags & 0x10 };
    }
    
    /* 2.4.28 */
    function parse_BoundSheet8(blob, length, opts) {
        var pos = blob.read_shift(4);
        var hidden = blob.read_shift(1) & 0x03;
        var dt = blob.read_shift(1);
        switch(dt) {
            case 0: dt = 'Worksheet'; break;
            case 1: dt = 'Macrosheet'; break;
            case 2: dt = 'Chartsheet'; break;
            case 6: dt = 'VBAModule'; break;
        }
        var name = parse_ShortXLUnicodeString(blob, 0, opts);
        if(name.length === 0) name = "Sheet1";
        return { pos:pos, hs:hidden, dt:dt, name:name };
    }
    function write_BoundSheet8(data, opts) {
        var w = (!opts || opts.biff >= 8 ? 2 : 1);
        var o = new_buf(8 + w * data.name.length);
        o.write_shift(4, data.pos);
        o.write_shift(1, data.hs || 0);
        o.write_shift(1, data.dt);
        o.write_shift(1, data.name.length);
        if(opts.biff >= 8) o.write_shift(1, 1);
        o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? 'sbcs' : 'utf16le');
        return o.slice(0, o.l);
    }
    
    /* 2.4.265 TODO */
    function parse_SST(blob, length) {
        var end = blob.l + length;
        var cnt = blob.read_shift(4);
        var ucnt = blob.read_shift(4);
        var strs = ([]);
        for(var i = 0; i != ucnt && blob.l < end; ++i) {
            strs.push(parse_XLUnicodeRichExtendedString(blob));
        }
        strs.Count = cnt; strs.Unique = ucnt;
        return strs;
    }
    
    /* 2.4.107 */
    function parse_ExtSST(blob, length) {
        var extsst = {};
        extsst.dsst = blob.read_shift(2);
        blob.l += length-2;
        return extsst;
    }
    
    
    /* 2.4.221 TODO: check BIFF2-4 */
    function parse_Row(blob, length) {
        var z = ({});
        z.r = blob.read_shift(2);
        z.c = blob.read_shift(2);
        z.cnt = blob.read_shift(2) - z.c;
        var miyRw = blob.read_shift(2);
        blob.l += 4; // reserved(2), unused(2)
        var flags = blob.read_shift(1); // various flags
        blob.l += 3; // reserved(8), ixfe(12), flags(4)
        if(flags & 0x07) z.level = flags & 0x07;
        // collapsed: flags & 0x10
        if(flags & 0x20) z.hidden = true;
        if(flags & 0x40) z.hpt = miyRw / 20;
        return z;
    }
    
    
    /* 2.4.125 */
    function parse_ForceFullCalculation(blob, length) {
        var header = parse_frtHeader(blob);
        if(header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
        var fullcalc = blob.read_shift(4);
        return fullcalc !== 0x0;
    }
    
    
    
    
    
    /* 2.4.215 rt */
    function parse_RecalcId(blob, length) {
        blob.read_shift(2);
        return blob.read_shift(4);
    }
    
    /* 2.4.87 */
    function parse_DefaultRowHeight(blob, length, opts) {
        var f = 0;
        if(!(opts && opts.biff == 2)) {
            f = blob.read_shift(2);
        }
        var miyRw = blob.read_shift(2);
        if((opts && opts.biff == 2)) {
            f = 1 - (miyRw >> 15); miyRw &= 0x7fff;
        }
        var fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};
        return [fl, miyRw];
    }
    
    /* 2.4.345 TODO */
    function parse_Window1(blob, length) {
        var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
        var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
        var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
        return { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,
            FirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };
    }
    function write_Window1(opts) {
        var o = new_buf(18);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0x7260);
        o.write_shift(2, 0x44c0);
        o.write_shift(2, 0x38);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 1);
        o.write_shift(2, 0x01f4);
        return o;
    }
    /* 2.4.346 TODO */
    function parse_Window2(blob, length, opts) {
        if(opts && opts.biff >= 2 && opts.biff < 8) return {};
        var f = blob.read_shift(2);
        return { RTL: f & 0x40 };
    }
    function write_Window2(view) {
        var o = new_buf(18), f = 0x6b6;
        if(view && view.RTL) f |= 0x40;
        o.write_shift(2, f);
        o.write_shift(4, 0);
        o.write_shift(4, 64);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
    }
    
    /* 2.4.122 TODO */
    function parse_Font(blob, length, opts) {
        var o = {
            dyHeight: blob.read_shift(2),
            fl: blob.read_shift(2)
        };
        switch(opts && opts.biff || 8) {
            case 2: break;
            case 3: case 4: blob.l += 2; break;
            default: blob.l += 10; break;
        }
        o.name = parse_ShortXLUnicodeString(blob, 0, opts);
        return o;
    }
    
    /* 2.4.149 */
    function parse_LabelSst(blob, length) {
        var cell = parse_XLSCell(blob);
        cell.isst = blob.read_shift(4);
        return cell;
    }
    
    /* 2.4.148 */
    function parse_Label(blob, length, opts) {
        var target = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if(opts.biff == 2) blob.l++;
        var str = parse_XLUnicodeString(blob, target - blob.l, opts);
        cell.val = str;
        return cell;
    }
    function write_Label(R, C, v, opts) {
        var b8 = !opts || opts.biff == 8;
        var o = new_buf(6 + 2 + (+b8) + (1 + b8) * v.length);
        write_XLSCell(R, C, 0, o);
        o.write_shift(2, v.length);
        if(b8) o.write_shift(1, 1);
        o.write_shift((1 + b8) * v.length, v, b8 ? 'utf16le' : 'sbcs');
        return o;
    }
    
    
    /* 2.4.126 Number Formats */
    function parse_Format(blob, length, opts) {
        var numFmtId = blob.read_shift(2);
        var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
        return [numFmtId, fmtstr];
    }
    var parse_BIFF2Format = parse_XLUnicodeString2;
    
    /* 2.4.90 */
    function parse_Dimensions(blob, length, opts) {
        var end = blob.l + length;
        var w = opts.biff == 8 || !opts.biff ? 4 : 2;
        var r = blob.read_shift(w), R = blob.read_shift(w);
        var c = blob.read_shift(2), C = blob.read_shift(2);
        blob.l = end;
        return {s: {r:r, c:c}, e: {r:R, c:C}};
    }
    function write_Dimensions(range, opts) {
        var w = opts.biff == 8 || !opts.biff ? 4 : 2;
        var o = new_buf(2*w + 6);
        o.write_shift(w, range.s.r);
        o.write_shift(w, range.e.r + 1);
        o.write_shift(2, range.s.c);
        o.write_shift(2, range.e.c + 1);
        o.write_shift(2, 0);
        return o;
    }
    
    /* 2.4.220 */
    function parse_RK(blob, length) {
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrec = parse_RkRec(blob);
        return {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};
    }
    
    /* 2.4.175 */
    function parse_MulRk(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrecs = [];
        while(blob.l < target) rkrecs.push(parse_RkRec(blob));
        if(blob.l !== target) throw new Error("MulRK read error");
        var lastcol = blob.read_shift(2);
        if(rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
        return {r:rw, c:col, C:lastcol, rkrec:rkrecs};
    }
    /* 2.4.174 */
    function parse_MulBlank(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var ixfes = [];
        while(blob.l < target) ixfes.push(blob.read_shift(2));
        if(blob.l !== target) throw new Error("MulBlank read error");
        var lastcol = blob.read_shift(2);
        if(ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
        return {r:rw, c:col, C:lastcol, ixfe:ixfes};
    }
    
    /* 2.5.20 2.5.249 TODO: interpret values here */
    function parse_CellStyleXF(blob, length, style, opts) {
        var o = {};
        var a = blob.read_shift(4), b = blob.read_shift(4);
        var c = blob.read_shift(4), d = blob.read_shift(2);
        o.patternType = XLSFillPattern[c >> 26];
    
        if(!opts.cellStyles) return o;
        o.alc = a & 0x07;
        o.fWrap = (a >> 3) & 0x01;
        o.alcV = (a >> 4) & 0x07;
        o.fJustLast = (a >> 7) & 0x01;
        o.trot = (a >> 8) & 0xFF;
        o.cIndent = (a >> 16) & 0x0F;
        o.fShrinkToFit = (a >> 20) & 0x01;
        o.iReadOrder = (a >> 22) & 0x02;
        o.fAtrNum = (a >> 26) & 0x01;
        o.fAtrFnt = (a >> 27) & 0x01;
        o.fAtrAlc = (a >> 28) & 0x01;
        o.fAtrBdr = (a >> 29) & 0x01;
        o.fAtrPat = (a >> 30) & 0x01;
        o.fAtrProt = (a >> 31) & 0x01;
    
        o.dgLeft = b & 0x0F;
        o.dgRight = (b >> 4) & 0x0F;
        o.dgTop = (b >> 8) & 0x0F;
        o.dgBottom = (b >> 12) & 0x0F;
        o.icvLeft = (b >> 16) & 0x7F;
        o.icvRight = (b >> 23) & 0x7F;
        o.grbitDiag = (b >> 30) & 0x03;
    
        o.icvTop = c & 0x7F;
        o.icvBottom = (c >> 7) & 0x7F;
        o.icvDiag = (c >> 14) & 0x7F;
        o.dgDiag = (c >> 21) & 0x0F;
    
        o.icvFore = d & 0x7F;
        o.icvBack = (d >> 7) & 0x7F;
        o.fsxButton = (d >> 14) & 0x01;
        return o;
    }
    function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
    function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}
    
    /* 2.4.353 TODO: actually do this right */
    function parse_XF(blob, length, opts) {
        var o = {};
        o.ifnt = blob.read_shift(2); o.numFmtId = blob.read_shift(2); o.flags = blob.read_shift(2);
        o.fStyle = (o.flags >> 2) & 0x01;
        length -= 6;
        o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
        return o;
    }
    
    /* 2.4.134 */
    function parse_Guts(blob, length) {
        blob.l += 4;
        var out = [blob.read_shift(2), blob.read_shift(2)];
        if(out[0] !== 0) out[0]--;
        if(out[1] !== 0) out[1]--;
        if(out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
        return out;
    }
    function write_Guts(guts) {
        var o = new_buf(8);
        o.write_shift(4, 0);
        o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
        o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
        return o;
    }
    
    /* 2.4.24 */
    function parse_BoolErr(blob, length, opts) {
        var cell = parse_XLSCell(blob, 6);
        if(opts.biff == 2) ++blob.l;
        var val = parse_Bes(blob, 2);
        cell.val = val;
        cell.t = (val === true || val === false) ? 'b' : 'e';
        return cell;
    }
    function write_BoolErr(R, C, v, opts, t) {
        var o = new_buf(8);
        write_XLSCell(R, C, 0, o);
        write_Bes(v, t, o);
        return o;
    }
    
    /* 2.4.180 Number */
    function parse_Number(blob, length) {
        var cell = parse_XLSCell(blob, 6);
        var xnum = parse_Xnum(blob, 8);
        cell.val = xnum;
        return cell;
    }
    function write_Number(R, C, v, opts) {
        var o = new_buf(14);
        write_XLSCell(R, C, 0, o);
        write_Xnum(v, o);
        return o;
    }
    
    var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136
    
    /* 2.4.271 */
    function parse_SupBook(blob, length, opts) {
        var end = blob.l + length;
        var ctab = blob.read_shift(2);
        var cch = blob.read_shift(2);
        opts.sbcch = cch;
        if(cch == 0x0401 || cch == 0x3A01) return [cch, ctab];
        if(cch < 0x01 || cch >0xff) throw new Error("Unexpected SupBook type: "+cch);
        var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
        /* TODO: 2.5.277 Virtual Path */
        var rgst = [];
        while(end > blob.l) rgst.push(parse_XLUnicodeString(blob));
        return [cch, ctab, virtPath, rgst];
    }
    
    /* 2.4.105 TODO */
    function parse_ExternName(blob, length, opts) {
        var flags = blob.read_shift(2);
        var body;
        var o = ({
            fBuiltIn: flags & 0x01,
            fWantAdvise: (flags >>> 1) & 0x01,
            fWantPict: (flags >>> 2) & 0x01,
            fOle: (flags >>> 3) & 0x01,
            fOleLink: (flags >>> 4) & 0x01,
            cf: (flags >>> 5) & 0x3FF,
            fIcon: flags >>> 15 & 0x01
        });
        if(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2, opts);
        //else throw new Error("unsupported SupBook cch: " + opts.sbcch);
        o.body = body || blob.read_shift(length-2);
        if(typeof body === "string") o.Name = body;
        return o;
    }
    
    /* 2.4.150 TODO */
    var XLSLblBuiltIn = [
        "_xlnm.Consolidate_Area",
        "_xlnm.Auto_Open",
        "_xlnm.Auto_Close",
        "_xlnm.Extract",
        "_xlnm.Database",
        "_xlnm.Criteria",
        "_xlnm.Print_Area",
        "_xlnm.Print_Titles",
        "_xlnm.Recorder",
        "_xlnm.Data_Form",
        "_xlnm.Auto_Activate",
        "_xlnm.Auto_Deactivate",
        "_xlnm.Sheet_Title",
        "_xlnm._FilterDatabase"
    ];
    function parse_Lbl(blob, length, opts) {
        var target = blob.l + length;
        var flags = blob.read_shift(2);
        var chKey = blob.read_shift(1);
        var cch = blob.read_shift(1);
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var itab = 0;
        if(!opts || opts.biff >= 5) {
            if(opts.biff != 5) blob.l += 2;
            itab = blob.read_shift(2);
            if(opts.biff == 5) blob.l += 2;
            blob.l += 4;
        }
        var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
        if(flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];
        var npflen = target - blob.l; if(opts && opts.biff == 2) --npflen;
        var rgce = target == blob.l || cce === 0 ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
        return {
            chKey: chKey,
            Name: name,
            itab: itab,
            rgce: rgce
        };
    }
    
    /* 2.4.106 TODO: verify filename encoding */
    function parse_ExternSheet(blob, length, opts) {
        if(opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
        var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
        while(len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
            // [iSupBook, itabFirst, itabLast];
        return o;
    }
    function parse_BIFF5ExternSheet(blob, length, opts) {
        if(blob[blob.l + 1] == 0x03) blob[blob.l]++;
        var o = parse_ShortXLUnicodeString(blob, length, opts);
        return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;
    }
    
    /* 2.4.176 TODO: check older biff */
    function parse_NameCmt(blob, length, opts) {
        if(opts.biff < 8) { blob.l += length; return; }
        var cchName = blob.read_shift(2);
        var cchComment = blob.read_shift(2);
        var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
        var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
        return [name, comment];
    }
    
    /* 2.4.260 */
    function parse_ShrFmla(blob, length, opts) {
        var ref = parse_RefU(blob, 6);
        blob.l++;
        var cUse = blob.read_shift(1);
        length -= 8;
        return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
    }
    
    /* 2.4.4 TODO */
    function parse_Array(blob, length, opts) {
        var ref = parse_Ref(blob, 6);
        /* TODO: fAlwaysCalc */
        switch(opts.biff) {
            case 2: blob.l ++; length -= 7; break;
            case 3: case 4: blob.l += 2; length -= 8; break;
            default: blob.l += 6; length -= 12;
        }
        return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
    }
    
    /* 2.4.173 */
    function parse_MTRSettings(blob, length) {
        var fMTREnabled = blob.read_shift(4) !== 0x00;
        var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
        var cUserThreadCount = blob.read_shift(4);
        return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
    }
    
    /* 2.5.186 TODO: BIFF5 */
    function parse_NoteSh(blob, length, opts) {
        if(opts.biff < 8) return;
        var row = blob.read_shift(2), col = blob.read_shift(2);
        var flags = blob.read_shift(2), idObj = blob.read_shift(2);
        var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
        if(opts.biff < 8) blob.read_shift(1);
        return [{r:row,c:col}, stAuthor, idObj, flags];
    }
    
    /* 2.4.179 */
    function parse_Note(blob, length, opts) {
        /* TODO: Support revisions */
        return parse_NoteSh(blob, length, opts);
    }
    
    /* 2.4.168 */
    function parse_MergeCells(blob, length) {
        var merges = [];
        var cmcs = blob.read_shift(2);
        while (cmcs--) merges.push(parse_Ref8U(blob,length));
        return merges;
    }
    function write_MergeCells(merges) {
        var o = new_buf(2 + merges.length * 8);
        o.write_shift(2, merges.length);
        for(var i = 0; i < merges.length; ++i) write_Ref8U(merges[i], o);
        return o;
    }
    
    /* 2.4.181 TODO: parse all the things! */
    function parse_Obj(blob, length, opts) {
        if(opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
        var cmo = parse_FtCmo(blob, 22); // id, ot, flags
        var fts = parse_FtArray(blob, length-22, cmo[1]);
        return { cmo: cmo, ft:fts };
    }
    /* from older spec */
    var parse_BIFF5OT = [];
    parse_BIFF5OT[0x08] = function(blob, length, opts) {
        var tgt = blob.l + length;
        blob.l += 10; // todo
        var cf = blob.read_shift(2);
        blob.l += 4;
        var cbPictFmla = blob.read_shift(2);
        blob.l += 2;
        var grbit = blob.read_shift(2);
        blob.l += 4;
        var cchName = blob.read_shift(1);
        blob.l += cchName; // TODO: stName
        blob.l = tgt; // TODO: fmla
        return { fmt:cf };
    };
    
    function parse_BIFF5Obj(blob, length, opts) {
        var cnt = blob.read_shift(4);
        var ot = blob.read_shift(2);
        var id = blob.read_shift(2);
        var grbit = blob.read_shift(2);
        var colL = blob.read_shift(2);
        var dxL = blob.read_shift(2);
        var rwT = blob.read_shift(2);
        var dyT = blob.read_shift(2);
        var colR = blob.read_shift(2);
        var dxR = blob.read_shift(2);
        var rwB = blob.read_shift(2);
        var dyB = blob.read_shift(2);
        var cbMacro = blob.read_shift(2);
        blob.l += 6;
        length -= 36;
        var fts = [];
        fts.push((parse_BIFF5OT[ot]||parsenoop)(blob, length, opts));
        return { cmo: [id, ot, grbit], ft:fts };
    }
    
    /* 2.4.329 TODO: parse properly */
    function parse_TxO(blob, length, opts) {
        var s = blob.l;
        var texts = "";
    try {
        blob.l += 4;
        var ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];
        var controlInfo;
        if([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;
        else controlInfo = parse_ControlInfo(blob, 6, opts);
        var cchText = blob.read_shift(2);
        var cbRuns = blob.read_shift(2);
        var ifntEmpty = parseuint16(blob, 2);
        var len = blob.read_shift(2);
        blob.l += len;
        //var fmla = parse_ObjFmla(blob, s + length - blob.l);
    
        for(var i = 1; i < blob.lens.length-1; ++i) {
            if(blob.l-s != blob.lens[i]) throw new Error("TxO: bad continue record");
            var hdr = blob[blob.l];
            var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);
            texts += t;
            if(texts.length >= (hdr ? cchText : 2*cchText)) break;
        }
        if(texts.length !== cchText && texts.length !== cchText*2) {
            throw new Error("cchText: " + cchText + " != " + texts.length);
        }
    
        blob.l = s + length;
        /* 2.5.272 TxORuns */
    //	var rgTxoRuns = [];
    //	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
    //	var cchText2 = blob.read_shift(2);
    //	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
    //	blob.l += 6;
    //	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);
        return { t: texts };
    } catch(e) { blob.l = s + length; return { t: texts }; }
    }
    
    /* 2.4.140 */
    function parse_HLink(blob, length) {
        var ref = parse_Ref8U(blob, 8);
        blob.l += 16; /* CLSID */
        var hlink = parse_Hyperlink(blob, length-24);
        return [ref, hlink];
    }
    function write_HLink(hl) {
        var O = new_buf(24);
        var ref = decode_cell(hl[0]);
        O.write_shift(2, ref.r); O.write_shift(2, ref.r);
        O.write_shift(2, ref.c); O.write_shift(2, ref.c);
        var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
        for(var i = 0; i < 16; ++i) O.write_shift(1, parseInt(clsid[i], 16));
        return bconcat([O, write_Hyperlink(hl[1])]);
    }
    
    
    /* 2.4.141 */
    function parse_HLinkTooltip(blob, length) {
        var end = blob.l + length;
        blob.read_shift(2);
        var ref = parse_Ref8U(blob, 8);
        var wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');
        wzTooltip = wzTooltip.replace(chr0,"");
        return [ref, wzTooltip];
    }
    function write_HLinkTooltip(hl) {
        var TT = hl[1].Tooltip;
        var O = new_buf(10 + 2 * (TT.length + 1));
        O.write_shift(2, 0x0800);
        var ref = decode_cell(hl[0]);
        O.write_shift(2, ref.r); O.write_shift(2, ref.r);
        O.write_shift(2, ref.c); O.write_shift(2, ref.c);
        for(var i = 0; i < TT.length; ++i) O.write_shift(2, TT.charCodeAt(i));
        O.write_shift(2, 0);
        return O;
    }
    
    /* 2.4.63 */
    function parse_Country(blob, length) {
        var o = [0,0], d;
        d = blob.read_shift(2); o[0] = CountryEnum[d] || d;
        d = blob.read_shift(2); o[1] = CountryEnum[d] || d;
        return o;
    }
    function write_Country(o) {
        if(!o) o = new_buf(4);
        o.write_shift(2, 0x01);
        o.write_shift(2, 0x01);
        return o;
    }
    
    /* 2.4.50 ClrtClient */
    function parse_ClrtClient(blob, length) {
        var ccv = blob.read_shift(2);
        var o = [];
        while(ccv-->0) o.push(parse_LongRGB(blob, 8));
        return o;
    }
    
    /* 2.4.188 */
    function parse_Palette(blob, length) {
        var ccv = blob.read_shift(2);
        var o = [];
        while(ccv-->0) o.push(parse_LongRGB(blob, 8));
        return o;
    }
    
    /* 2.4.354 */
    function parse_XFCRC(blob, length) {
        blob.l += 2;
        var o = {cxfs:0, crc:0};
        o.cxfs = blob.read_shift(2);
        o.crc = blob.read_shift(4);
        return o;
    }
    
    /* 2.4.53 TODO: parse flags */
    /* [MS-XLSB] 2.4.323 TODO: parse flags */
    function parse_ColInfo(blob, length, opts) {
        if(!opts.cellStyles) return parsenoop(blob, length);
        var w = opts && opts.biff >= 12 ? 4 : 2;
        var colFirst = blob.read_shift(w);
        var colLast = blob.read_shift(w);
        var coldx = blob.read_shift(w);
        var ixfe = blob.read_shift(w);
        var flags = blob.read_shift(2);
        if(w == 2) blob.l += 2;
        return {s:colFirst, e:colLast, w:coldx, ixfe:ixfe, flags:flags};
    }
    
    /* 2.4.257 */
    function parse_Setup(blob, length, opts) {
        var o = {};
        blob.l += 16;
        o.header = parse_Xnum(blob, 8);
        o.footer = parse_Xnum(blob, 8);
        blob.l += 2;
        return o;
    }
    
    /* 2.4.261 */
    function parse_ShtProps(blob, length, opts) {
        var def = {area:false};
        if(opts.biff != 5) { blob.l += length; return def; }
        var d = blob.read_shift(1); blob.l += 3;
        if((d & 0x10)) def.area = true;
        return def;
    }
    
    /* 2.4.241 */
    function write_RRTabId(n) {
        var out = new_buf(2 * n);
        for(var i = 0; i < n; ++i) out.write_shift(2, i+1);
        return out;
    }
    
    var parse_Blank = parse_XLSCell; /* 2.4.20 Just the cell */
    var parse_Scl = parseuint16a; /* 2.4.247 num, den */
    var parse_String = parse_XLUnicodeString; /* 2.4.268 */
    
    /* --- Specific to versions before BIFF8 --- */
    function parse_ImData(blob, length, opts) {
        var tgt = blob.l + length;
        var cf = blob.read_shift(2);
        var env = blob.read_shift(2);
        var lcb = blob.read_shift(4);
        var o = {fmt:cf, env:env, len:lcb, data:blob.slice(blob.l,blob.l+lcb)};
        blob.l += lcb;
        return o;
    }
    
    function parse_BIFF5String(blob) {
        var len = blob.read_shift(1);
        return blob.read_shift(len, 'sbcs-cont');
    }
    
    /* BIFF2_??? where ??? is the name from [XLS] */
    function parse_BIFF2STR(blob, length, opts) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var str = parse_XLUnicodeString2(blob, length-7, opts);
        cell.t = 'str';
        cell.val = str;
        return cell;
    }
    
    function parse_BIFF2NUM(blob, length, opts) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = parse_Xnum(blob, 8);
        cell.t = 'n';
        cell.val = num;
        return cell;
    }
    function write_BIFF2NUM(r, c, val) {
        var out = new_buf(15);
        write_BIFF2Cell(out, r, c);
        out.write_shift(8, val, 'f');
        return out;
    }
    
    function parse_BIFF2INT(blob, length) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = blob.read_shift(2);
        cell.t = 'n';
        cell.val = num;
        return cell;
    }
    function write_BIFF2INT(r, c, val) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r, c);
        out.write_shift(2, val);
        return out;
    }
    
    function parse_BIFF2STRING(blob, length) {
        var cch = blob.read_shift(1);
        if(cch === 0) { blob.l++; return ""; }
        return blob.read_shift(cch, 'sbcs-cont');
    }
    
    /* TODO: convert to BIFF8 font struct */
    function parse_BIFF2FONTXTRA(blob, length) {
        blob.l += 6; // unknown
        blob.l += 2; // font weight "bls"
        blob.l += 1; // charset
        blob.l += 3; // unknown
        blob.l += 1; // font family
        blob.l += length - 13;
    }
    
    /* TODO: parse rich text runs */
    function parse_RString(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        var cch = blob.read_shift(2);
        var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
        blob.l = end;
        cell.t = 'str';
        cell.val = str;
        return cell;
    }
    /* from js-harb (C) 2014-present  SheetJS */
    var DBF = (function() {
    var dbf_codepage_map = {
        /* Code Pages Supported by Visual FoxPro */
    0x01:   437,           0x02:   850,
    0x03:  1252,           0x04: 10000,
    0x64:   852,           0x65:   866,
    0x66:   865,           0x67:   861,
    0x68:   895,           0x69:   620,
    0x6A:   737,           0x6B:   857,
    0x78:   950,           0x79:   949,
    0x7A:   936,           0x7B:   932,
    0x7C:   874,           0x7D:  1255,
    0x7E:  1256,           0x96: 10007,
    0x97: 10029,           0x98: 10006,
    0xC8:  1250,           0xC9:  1251,
    0xCA:  1254,           0xCB:  1253,
    
        /* shapefile DBF extension */
    0x00: 20127,           0x08:   865,
    0x09:   437,           0x0A:   850,
    0x0B:   437,           0x0D:   437,
    0x0E:   850,           0x0F:   437,
    0x10:   850,           0x11:   437,
    0x12:   850,           0x13:   932,
    0x14:   850,           0x15:   437,
    0x16:   850,           0x17:   865,
    0x18:   437,           0x19:   437,
    0x1A:   850,           0x1B:   437,
    0x1C:   863,           0x1D:   850,
    0x1F:   852,           0x22:   852,
    0x23:   852,           0x24:   860,
    0x25:   850,           0x26:   866,
    0x37:   850,           0x40:   852,
    0x4D:   936,           0x4E:   949,
    0x4F:   950,           0x50:   874,
    0x57:  1252,           0x58:  1252,
    0x59:  1252,
    
    0xFF: 16969
    };
    
    /* TODO: find an actual specification */
    function dbf_to_aoa(buf, opts) {
        var out = [];
        /* TODO: browser based */
        var d = (new_raw_buf(1));
        switch(opts.type) {
            case 'base64': d = s2a(Base64.decode(buf)); break;
            case 'binary': d = s2a(buf); break;
            case 'buffer':
            case 'array': d = buf; break;
        }
        prep_blob(d, 0);
        /* header */
        var ft = d.read_shift(1);
        var memo = false;
        var vfp = false, l7 = false;
        switch(ft) {
            case 0x02: case 0x03: break;
            case 0x30: vfp = true; memo = true; break;
            case 0x31: vfp = true; break;
            case 0x83: memo = true; break;
            case 0x8B: memo = true; break;
            case 0x8C: memo = true; l7 = true; break;
            case 0xF5: memo = true; break;
            default: throw new Error("DBF Unsupported Version: " + ft.toString(16));
        }
        var filedate = new Date(), nrow = 0, fpos = 0;
        if(ft == 0x02) nrow = d.read_shift(2);
        filedate = new Date(d.read_shift(1) + 1900, d.read_shift(1) - 1, d.read_shift(1));
        if(ft != 0x02) nrow = d.read_shift(4);
        if(ft != 0x02) fpos = d.read_shift(2);
        var rlen = d.read_shift(2);
    
        var flags = 0, current_cp = 1252;
        if(ft != 0x02) {
        d.l+=16;
        flags = d.read_shift(1);
        //if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));
    
        /* codepage present in FoxPro */
        if(d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
        d.l+=1;
    
        d.l+=2;
        }
        if(l7) d.l += 36;
    var fields = [], field = ({});
        var hend = fpos - 10 - (vfp ? 264 : 0), ww = l7 ? 32 : 11;
        while(ft == 0x02 ? d.l < d.length && d[d.l] != 0x0d: d.l < hend) {
            field = ({});
            field.name = cptable.utils.decode(current_cp, d.slice(d.l, d.l+ww)).replace(/[\u0000\r\n].*$/g,"");
            d.l += ww;
            field.type = String.fromCharCode(d.read_shift(1));
            if(ft != 0x02 && !l7) field.offset = d.read_shift(4);
            field.len = d.read_shift(1);
            if(ft == 0x02) field.offset = d.read_shift(2);
            field.dec = d.read_shift(1);
            if(field.name.length) fields.push(field);
            if(ft != 0x02) d.l += l7 ? 13 : 14;
            switch(field.type) {
                case 'B': // VFP Double
                    if((!vfp || field.len != 8) && opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
                    break;
                case 'G': // General
                case 'P': // Picture
                    if(opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
                    break;
                case 'C': // character
                case 'D': // date
                case 'F': // floating point
                case 'I': // long
                case 'L': // boolean
                case 'M': // memo
                case 'N': // number
                case 'O': // double
                case 'T': // datetime
                case 'Y': // currency
                case '0': // VFP _NullFlags
                case '@': // timestamp
                case '+': // autoincrement
                    break;
                default: throw new Error('Unknown Field Type: ' + field.type);
            }
        }
        if(d[d.l] !== 0x0D) d.l = fpos-1;
        else if(ft == 0x02) d.l = 0x209;
        if(ft != 0x02) {
            if(d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
            d.l = fpos;
        }
        /* data */
        var R = 0, C = 0;
        out[0] = [];
        for(C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
        while(nrow-- > 0) {
            if(d[d.l] === 0x2A) { d.l+=rlen; continue; }
            ++d.l;
            out[++R] = []; C = 0;
            for(C = 0; C != fields.length; ++C) {
                var dd = d.slice(d.l, d.l+fields[C].len); d.l+=fields[C].len;
                prep_blob(dd, 0);
                var s = cptable.utils.decode(current_cp, dd);
                switch(fields[C].type) {
                    case 'C':
                        out[R][C] = cptable.utils.decode(current_cp, dd);
                        out[R][C] = out[R][C].trim();
                        break;
                    case 'D':
                        if(s.length === 8) out[R][C] = new Date(+s.substr(0,4), +s.substr(4,2)-1, +s.substr(6,2));
                        else out[R][C] = s;
                        break;
                    case 'F': out[R][C] = parseFloat(s.trim()); break;
                    case '+': case 'I': out[R][C] = l7 ? dd.read_shift(-4, 'i') ^ 0x80000000 : dd.read_shift(4, 'i'); break;
                    case 'L': switch(s.toUpperCase()) {
                        case 'Y': case 'T': out[R][C] = true; break;
                        case 'N': case 'F': out[R][C] = false; break;
                        case ' ': case '?': out[R][C] = false; break; /* NOTE: technically uninitialized */
                        default: throw new Error("DBF Unrecognized L:|" + s + "|");
                        } break;
                    case 'M': /* TODO: handle memo files */
                        if(!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
                        out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10): dd.read_shift(4));
                        break;
                    case 'N': out[R][C] = +s.replace(/\u0000/g,"").trim(); break;
                    case '@': out[R][C] = new Date(dd.read_shift(-8, 'f') - 0x388317533400); break;
                    case 'T': out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4)); break;
                    case 'Y': out[R][C] = dd.read_shift(4,'i')/1e4; break;
                    case 'O': out[R][C] = -dd.read_shift(-8, 'f'); break;
                    case 'B': if(vfp && fields[C].len == 8) { out[R][C] = dd.read_shift(8,'f'); break; }
                        /* falls through */
                    case 'G': case 'P': dd.l += fields[C].len; break;
                    case '0':
                        if(fields[C].name === '_NullFlags') break;
                        /* falls through */
                    default: throw new Error("DBF Unsupported data type " + fields[C].type);
                }
            }
        }
        if(ft != 0x02) if(d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l-1) + " of " + d.length + " " + d[d.l-1].toString(16));
        return out;
    }
    
    function dbf_to_sheet(buf, opts) {
        var o = opts || {};
        if(!o.dateNF) o.dateNF = "yyyymmdd";
        return aoa_to_sheet(dbf_to_aoa(buf, o), o);
    }
    
    function dbf_to_workbook(buf, opts) {
        try { return sheet_to_workbook(dbf_to_sheet(buf, opts), opts); }
        catch(e) { if(opts && opts.WTF) throw e; }
        return ({SheetNames:[],Sheets:{}});
    }
    
    var _RLEN = { 'B': 8, 'C': 250, 'L': 1, 'D': 8, '?': 0, '': 0 };
    function sheet_to_dbf(ws, opts) {
        var o = opts || {};
        if(o.type == "string") throw new Error("Cannot write DBF to JS string");
        var ba = buf_array();
        var aoa = sheet_to_json(ws, {header:1, raw:true, cellDates:true});
        var headers = aoa[0], data = aoa.slice(1);
        var i = 0, j = 0, hcnt = 0, rlen = 1;
        for(i = 0; i < headers.length; ++i) {
            if(i == null) continue;
            ++hcnt;
            if(typeof headers[i] !== 'string') throw new Error("DBF Invalid column name");
            if(headers.indexOf(headers[i]) !== i) for(j=0; j<1024;++j)
                if(headers.indexOf(headers[i] + "_" + j) == -1) { headers[i] += "_" + j; break; }
        }
        var range = safe_decode_range(ws['!ref']);
        var coltypes = [];
        for(i = 0; i <= range.e.c - range.s.c; ++i) {
            var col = [];
            for(j=0; j < data.length; ++j) {
                if(data[j][i] != null) col.push(data[j][i]);
            }
            if(col.length == 0 || headers[i] == null) { coltypes[i] = '?'; continue; }
            var guess = '', _guess = '';
            for(j = 0; j < col.length; ++j) {
                switch(typeof col[j]) {
                    /* TODO: check if L2 compat is desired */
                    case 'number': _guess = 'B'; break;
                    case 'string': _guess = 'C'; break;
                    case 'boolean': _guess = 'L'; break;
                    case 'object': _guess = col[j] instanceof Date ? 'D' : 'C'; break;
                    default: _guess = 'C';
                }
                guess = guess && guess != _guess ? 'C' : _guess;
                if(guess == 'C') break;
            }
            rlen += _RLEN[guess] || 0;
            coltypes[i] = guess;
        }
    
        var h = ba.next(32);
        h.write_shift(4, 0x13021130);
        h.write_shift(4, data.length);
        h.write_shift(2, 296 + 32 * hcnt);
        h.write_shift(2, rlen);
        for(i=0; i < 4; ++i) h.write_shift(4, 0);
        h.write_shift(4, 0x00000300); // TODO: CP
    
        for(i = 0, j = 0; i < headers.length; ++i) {
            if(headers[i] == null) continue;
            var hf = ba.next(32);
            var _f = (headers[i].slice(-10) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00").slice(0, 11);
            hf.write_shift(1, _f, "sbcs");
            hf.write_shift(1, coltypes[i] == '?' ? 'C' : coltypes[i], "sbcs");
            hf.write_shift(4, j);
            hf.write_shift(1, _RLEN[coltypes[i]] || 0);
            hf.write_shift(1, 0);
            hf.write_shift(1, 0x02);
            hf.write_shift(4, 0);
            hf.write_shift(1, 0);
            hf.write_shift(4, 0);
            hf.write_shift(4, 0);
            j += _RLEN[coltypes[i]] || 0;
        }
    
        var hb = ba.next(264);
        hb.write_shift(4, 0x0000000D);
        for(i=0; i < 65;++i) hb.write_shift(4, 0x00000000);
        for(i=0; i < data.length; ++i) {
            var rout = ba.next(rlen);
            rout.write_shift(1, 0);
            for(j=0; j<headers.length; ++j) {
                if(headers[j] == null) continue;
                switch(coltypes[j]) {
                    case 'L': rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46); break;
                    case 'B': rout.write_shift(8, data[i][j]||0, 'f'); break;
                    case 'D':
                        if(!data[i][j]) rout.write_shift(8, "00000000", "sbcs");
                        else {
                            rout.write_shift(4, ("0000"+data[i][j].getFullYear()).slice(-4), "sbcs");
                            rout.write_shift(2, ("00"+(data[i][j].getMonth()+1)).slice(-2), "sbcs");
                            rout.write_shift(2, ("00"+data[i][j].getDate()).slice(-2), "sbcs");
                        } break;
                    case 'C':
                        var _s = String(data[i][j]||"");
                        rout.write_shift(1, _s, "sbcs");
                        for(hcnt=0; hcnt < 250-_s.length; ++hcnt) rout.write_shift(1, 0x20); break;
                }
            }
            // data
        }
        ba.next(1).write_shift(1, 0x1A);
        return ba.end();
    }
        return {
            to_workbook: dbf_to_workbook,
            to_sheet: dbf_to_sheet,
            from_sheet: sheet_to_dbf
        };
    })();
    
    var SYLK = (function() {
        /* TODO: find an actual specification */
        function sylk_to_aoa(d, opts) {
            switch(opts.type) {
                case 'base64': return sylk_to_aoa_str(Base64.decode(d), opts);
                case 'binary': return sylk_to_aoa_str(d, opts);
                case 'buffer': return sylk_to_aoa_str(d.toString('binary'), opts);
                case 'array': return sylk_to_aoa_str(cc2str(d), opts);
            }
            throw new Error("Unrecognized type " + opts.type);
        }
        function sylk_to_aoa_str(str, opts) {
            var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = [];
            var formats = [];
            var next_cell_format = null;
            var sht = {}, rowinfo = [], colinfo = [], cw = [];
            var Mval = 0, j;
            for (; ri !== records.length; ++ri) {
                Mval = 0;
                var rstr=records[ri].trim();
                var record=rstr.replace(/;;/g, "\u0001").split(";").map(function(x) { return x.replace(/\u0001/g, ";"); });
                var RT=record[0], val;
                if(rstr.length > 0) switch(RT) {
                case 'ID': break; /* header */
                case 'E': break; /* EOF */
                case 'B': break; /* dimensions */
                case 'O': break; /* options? */
                case 'P':
                    if(record[1].charAt(0) == 'P')
                        formats.push(rstr.substr(3).replace(/;;/g, ";"));
                    break;
                case 'C':
                for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
                    case 'X': C = parseInt(record[rj].substr(1))-1; break;
                    case 'Y':
                        R = parseInt(record[rj].substr(1))-1; C = 0;
                        for(j = arr.length; j <= R; ++j) arr[j] = [];
                        break;
                    case 'K':
                        val = record[rj].substr(1);
                        if(val.charAt(0) === '"') val = val.substr(1,val.length - 2);
                        else if(val === 'TRUE') val = true;
                        else if(val === 'FALSE') val = false;
                        else if(!isNaN(fuzzynum(val))) {
                            val = fuzzynum(val);
                            if(next_cell_format !== null && SSF.is_date(next_cell_format)) val = numdate(val);
                        } else if(!isNaN(fuzzydate(val).getDate())) {
                            val = parseDate(val);
                        }
                        arr[R][C] = val;
                        next_cell_format = null;
                        break;
                    case 'E':
                        var formula = rc_to_a1(record[rj].substr(1), {r:R,c:C});
                        arr[R][C] = [arr[R][C], formula];
                        break;
                    default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                } break;
                case 'F':
                var F_seen = 0;
                for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
                    case 'X': C = parseInt(record[rj].substr(1))-1; ++F_seen; break;
                    case 'Y':
                        R = parseInt(record[rj].substr(1))-1; /*C = 0;*/
                        for(j = arr.length; j <= R; ++j) arr[j] = [];
                        break;
                    case 'M': Mval = parseInt(record[rj].substr(1)) / 20; break;
                    case 'F': break; /* ??? */
                    case 'P':
                        next_cell_format = formats[parseInt(record[rj].substr(1))];
                        break;
                    case 'S': break; /* cell style */
                    case 'D': break; /* column */
                    case 'N': break; /* font */
                    case 'W':
                        cw = record[rj].substr(1).split(" ");
                        for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
                            Mval = parseInt(cw[2], 10);
                            colinfo[j-1] = Mval === 0 ? {hidden:true}: {wch:Mval}; process_col(colinfo[j-1]);
                        } break;
                    case 'C': /* default column format */
                        C = parseInt(record[rj].substr(1))-1;
                        if(!colinfo[C]) colinfo[C] = {};
                        break;
                    case 'R': /* row properties */
                        R = parseInt(record[rj].substr(1))-1;
                        if(!rowinfo[R]) rowinfo[R] = {};
                        if(Mval > 0) { rowinfo[R].hpt = Mval; rowinfo[R].hpx = pt2px(Mval); }
                        else if(Mval === 0) rowinfo[R].hidden = true;
                        break;
                    default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                }
                if(F_seen < 1) next_cell_format = null; break;
                default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                }
            }
            if(rowinfo.length > 0) sht['!rows'] = rowinfo;
            if(colinfo.length > 0) sht['!cols'] = colinfo;
            return [arr, sht];
        }
    
        function sylk_to_sheet(d, opts) {
            var aoasht = sylk_to_aoa(d, opts);
            var aoa = aoasht[0], ws = aoasht[1];
            var o = aoa_to_sheet(aoa, opts);
            keys(ws).forEach(function(k) { o[k] = ws[k]; });
            return o;
        }
    
        function sylk_to_workbook(d, opts) { return sheet_to_workbook(sylk_to_sheet(d, opts), opts); }
    
        function write_ws_cell_sylk(cell, ws, R, C, opts) {
            var o = "C;Y" + (R+1) + ";X" + (C+1) + ";K";
            switch(cell.t) {
                case 'n':
                    o += (cell.v||0);
                    if(cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {r:R, c:C}); break;
                case 'b': o += cell.v ? "TRUE" : "FALSE"; break;
                case 'e': o += cell.w || cell.v; break;
                case 'd': o += '"' + (cell.w || cell.v) + '"'; break;
                case 's': o += '"' + cell.v.replace(/"/g,"") + '"'; break;
            }
            return o;
        }
    
        function write_ws_cols_sylk(out, cols) {
            cols.forEach(function(col, i) {
                var rec = "F;W" + (i+1) + " " + (i+1) + " ";
                if(col.hidden) rec += "0";
                else {
                    if(typeof col.width == 'number') col.wpx = width2px(col.width);
                    if(typeof col.wpx == 'number') col.wch = px2char(col.wpx);
                    if(typeof col.wch == 'number') rec += Math.round(col.wch);
                }
                if(rec.charAt(rec.length - 1) != " ") out.push(rec);
            });
        }
    
        function write_ws_rows_sylk(out, rows) {
            rows.forEach(function(row, i) {
                var rec = "F;";
                if(row.hidden) rec += "M0;";
                else if(row.hpt) rec += "M" + 20 * row.hpt + ";";
                else if(row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
                if(rec.length > 2) out.push(rec + "R" + (i+1));
            });
        }
    
        function sheet_to_sylk(ws, opts) {
            var preamble = ["ID;PWXL;N;E"], o = [];
            var r = safe_decode_range(ws['!ref']), cell;
            var dense = Array.isArray(ws);
            var RS = "\r\n";
    
            preamble.push("P;PGeneral");
            preamble.push("F;P0;DG0G8;M255");
            if(ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);
            if(ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);
    
            preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c,r.s.r,r.e.c,r.e.r].join(" "));
            for(var R = r.s.r; R <= r.e.r; ++R) {
                for(var C = r.s.c; C <= r.e.c; ++C) {
                    var coord = encode_cell({r:R,c:C});
                    cell = dense ? (ws[R]||[])[C]: ws[coord];
                    if(!cell || cell.v == null && (!cell.f || cell.F)) continue;
                    o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
                }
            }
            return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
        }
    
        return {
            to_workbook: sylk_to_workbook,
            to_sheet: sylk_to_sheet,
            from_sheet: sheet_to_sylk
        };
    })();
    
    var DIF = (function() {
        function dif_to_aoa(d, opts) {
            switch(opts.type) {
                case 'base64': return dif_to_aoa_str(Base64.decode(d), opts);
                case 'binary': return dif_to_aoa_str(d, opts);
                case 'buffer': return dif_to_aoa_str(d.toString('binary'), opts);
                case 'array': return dif_to_aoa_str(cc2str(d), opts);
            }
            throw new Error("Unrecognized type " + opts.type);
        }
        function dif_to_aoa_str(str, opts) {
            var records = str.split('\n'), R = -1, C = -1, ri = 0, arr = [];
            for (; ri !== records.length; ++ri) {
                if (records[ri].trim() === 'BOT') { arr[++R] = []; C = 0; continue; }
                if (R < 0) continue;
                var metadata = records[ri].trim().split(",");
                var type = metadata[0], value = metadata[1];
                ++ri;
                var data = records[ri].trim();
                switch (+type) {
                    case -1:
                        if (data === 'BOT') { arr[++R] = []; C = 0; continue; }
                        else if (data !== 'EOD') throw new Error("Unrecognized DIF special command " + data);
                        break;
                    case 0:
                        if(data === 'TRUE') arr[R][C] = true;
                        else if(data === 'FALSE') arr[R][C] = false;
                        else if(!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
                        else if(!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
                        else arr[R][C] = value;
                        ++C; break;
                    case 1:
                        data = data.substr(1,data.length-2);
                        arr[R][C++] = data !== '' ? data : null;
                        break;
                }
                if (data === 'EOD') break;
            }
            return arr;
        }
    
        function dif_to_sheet(str, opts) { return aoa_to_sheet(dif_to_aoa(str, opts), opts); }
        function dif_to_workbook(str, opts) { return sheet_to_workbook(dif_to_sheet(str, opts), opts); }
    
        var sheet_to_dif = (function() {
            var push_field = function pf(o, topic, v, n, s) {
                o.push(topic);
                o.push(v + "," + n);
                o.push('"' + s.replace(/"/g,'""') + '"');
            };
            var push_value = function po(o, type, v, s) {
                o.push(type + "," + v);
                o.push(type == 1 ? '"' + s.replace(/"/g,'""') + '"' : s);
            };
            return function sheet_to_dif(ws, opts) {
                var o = [];
                var r = safe_decode_range(ws['!ref']), cell;
                var dense = Array.isArray(ws);
                push_field(o, "TABLE", 0, 1, "sheetjs");
                push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1,"");
                push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1,"");
                push_field(o, "DATA", 0, 0,"");
                for(var R = r.s.r; R <= r.e.r; ++R) {
                    push_value(o, -1, 0, "BOT");
                    for(var C = r.s.c; C <= r.e.c; ++C) {
                        var coord = encode_cell({r:R,c:C});
                        cell = dense ? (ws[R]||[])[C] : ws[coord];
                        if(!cell) { push_value(o, 1, 0, ""); continue;}
                        switch(cell.t) {
                            case 'n':
                                var val = DIF_XL ? cell.w : cell.v;
                                if(!val && cell.v != null) val = cell.v;
                                if(val == null) {
                                    if(DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
                                    else push_value(o, 1, 0, "");
                                }
                                else push_value(o, 0, val, "V");
                                break;
                            case 'b':
                                push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                                break;
                            case 's':
                                push_value(o, 1, 0, (!DIF_XL || isNaN(cell.v)) ? cell.v : '="' + cell.v + '"');
                                break;
                            case 'd':
                                if(!cell.w) cell.w = SSF.format(cell.z || SSF._table[14], datenum(parseDate(cell.v)));
                                if(DIF_XL) push_value(o, 0, cell.w, "V");
                                else push_value(o, 1, 0, cell.w);
                                break;
                            default: push_value(o, 1, 0, "");
                        }
                    }
                }
                push_value(o, -1, 0, "EOD");
                var RS = "\r\n";
                var oo = o.join(RS);
                //while((oo.length & 0x7F) != 0) oo += "\0";
                return oo;
            };
        })();
        return {
            to_workbook: dif_to_workbook,
            to_sheet: dif_to_sheet,
            from_sheet: sheet_to_dif
        };
    })();
    
    var ETH = (function() {
        function decode(s) { return s.replace(/\\b/g,"\\").replace(/\\c/g,":").replace(/\\n/g,"\n"); }
        function encode(s) { return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g,"\\n"); }
    
        function eth_to_aoa(str, opts) {
            var records = str.split('\n'), R = -1, C = -1, ri = 0, arr = [];
            for (; ri !== records.length; ++ri) {
                var record = records[ri].trim().split(":");
                if(record[0] !== 'cell') continue;
                var addr = decode_cell(record[1]);
                if(arr.length <= addr.r) for(R = arr.length; R <= addr.r; ++R) if(!arr[R]) arr[R] = [];
                R = addr.r; C = addr.c;
                switch(record[2]) {
                    case 't': arr[R][C] = decode(record[3]); break;
                    case 'v': arr[R][C] = +record[3]; break;
                    case 'vtf': var _f = record[record.length - 1];
                        /* falls through */
                    case 'vtc':
                        switch(record[3]) {
                            case 'nl': arr[R][C] = +record[4] ? true : false; break;
                            default: arr[R][C] = +record[4]; break;
                        }
                        if(record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];
                }
            }
            return arr;
        }
    
        function eth_to_sheet(d, opts) { return aoa_to_sheet(eth_to_aoa(d, opts), opts); }
        function eth_to_workbook(d, opts) { return sheet_to_workbook(eth_to_sheet(d, opts), opts); }
    
        var header = [
            "socialcalc:version:1.5",
            "MIME-Version: 1.0",
            "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
        ].join("\n");
    
        var sep = [
            "--SocialCalcSpreadsheetControlSave",
            "Content-type: text/plain; charset=UTF-8"
        ].join("\n") + "\n";
    
        /* TODO: the other parts */
        var meta = [
            "# SocialCalc Spreadsheet Control Save",
            "part:sheet"
        ].join("\n");
    
        var end = "--SocialCalcSpreadsheetControlSave--";
    
        function sheet_to_eth_data(ws) {
            if(!ws || !ws['!ref']) return "";
            var o = [], oo = [], cell, coord = "";
            var r = decode_range(ws['!ref']);
            var dense = Array.isArray(ws);
            for(var R = r.s.r; R <= r.e.r; ++R) {
                for(var C = r.s.c; C <= r.e.c; ++C) {
                    coord = encode_cell({r:R,c:C});
                    cell = dense ? (ws[R]||[])[C] : ws[coord];
                    if(!cell || cell.v == null || cell.t === 'z') continue;
                    oo = ["cell", coord, 't'];
                    switch(cell.t) {
                        case 's': case 'str': oo.push(encode(cell.v)); break;
                        case 'n':
                            if(!cell.f) { oo[2]='v'; oo[3]=cell.v; }
                            else { oo[2]='vtf'; oo[3]='n'; oo[4]=cell.v; oo[5]=encode(cell.f); }
                            break;
                        case 'b':
                            oo[2] = 'vt'+(cell.f?'f':'c'); oo[3]='nl'; oo[4]=cell.v?"1":"0";
                            oo[5] = encode(cell.f||(cell.v?'TRUE':'FALSE'));
                            break;
                        case 'd':
                            var t = datenum(parseDate(cell.v));
                            oo[2] = 'vtc'; oo[3] = 'nd'; oo[4] = ""+t;
                            oo[5] = cell.w || SSF.format(cell.z || SSF._table[14], t);
                            break;
                        case 'e': continue;
                    }
                    o.push(oo.join(":"));
                }
            }
            o.push("sheet:c:" + (r.e.c-r.s.c+1) + ":r:" + (r.e.r-r.s.r+1) + ":tvf:1");
            o.push("valueformat:1:text-wiki");
            //o.push("copiedfrom:" + ws['!ref']); // clipboard only
            return o.join("\n");
        }
    
        function sheet_to_eth(ws, opts) {
            return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
            // return ["version:1.5", sheet_to_eth_data(ws)].join("\n"); // clipboard form
        }
    
        return {
            to_workbook: eth_to_workbook,
            to_sheet: eth_to_sheet,
            from_sheet: sheet_to_eth
        };
    })();
    
    var PRN = (function() {
        function set_text_arr(data, arr, R, C, o) {
            if(o.raw) arr[R][C] = data;
            else if(data === 'TRUE') arr[R][C] = true;
            else if(data === 'FALSE') arr[R][C] = false;
            else if(data === ""){/* empty */}
            else if(!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);
            else if(!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);
            else arr[R][C] = data;
        }
    
        function prn_to_aoa_str(f, opts) {
            var o = opts || {};
            var arr = ([]);
            if(!f || f.length === 0) return arr;
            var lines = f.split(/[\r\n]/);
            var L = lines.length - 1;
            while(L >= 0 && lines[L].length === 0) --L;
            var start = 10, idx = 0;
            var R = 0;
            for(; R <= L; ++R) {
                idx = lines[R].indexOf(" ");
                if(idx == -1) idx = lines[R].length; else idx++;
                start = Math.max(start, idx);
            }
            for(R = 0; R <= L; ++R) {
                arr[R] = [];
                /* TODO: confirm that widths are always 10 */
                var C = 0;
                set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
                for(C = 1; C <= (lines[R].length - start)/10 + 1; ++C)
                    set_text_arr(lines[R].slice(start+(C-1)*10,start+C*10).trim(),arr,R,C,o);
            }
            return arr;
        }
    
        // List of accepted CSV separators
        var guess_seps = {
    0x2C: ',',
    0x09: "\t",
    0x3B: ';'
        };
    
        // CSV separator weights to be used in case of equal numbers
        var guess_sep_weights = {
    0x2C: 3,
    0x09: 2,
    0x3B: 1
        };
    
        function guess_sep(str) {
            var cnt = {}, instr = false, end = 0, cc = 0;
            for(;end < str.length;++end) {
                if((cc=str.charCodeAt(end)) == 0x22) instr = !instr;
                else if(!instr && cc in guess_seps) cnt[cc] = (cnt[cc]||0)+1;
            }
    
            cc = [];
            for(end in cnt) if ( cnt.hasOwnProperty(end) ) {
                cc.push([ cnt[end], end ]);
            }
    
            if ( !cc.length ) {
                cnt = guess_sep_weights;
                for(end in cnt) if ( cnt.hasOwnProperty(end) ) {
                    cc.push([ cnt[end], end ]);
                }
            }
    
            cc.sort(function(a, b) { return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]]; });
    
            return guess_seps[cc.pop()[1]];
        }
    
        function dsv_to_sheet_str(str, opts) {
            var o = opts || {};
            var sep = "";
            if(DENSE != null && o.dense == null) o.dense = DENSE;
            var ws = o.dense ? ([]) : ({});
            var range = ({s: {c:0, r:0}, e: {c:0, r:0}});
    
            if(str.substr(0,4) == "sep=" && str.charCodeAt(5) == 10) { sep = str.charAt(4); str = str.substr(6); }
            else sep = guess_sep(str.substr(0,1024));
            var R = 0, C = 0, v = 0;
            var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc=0;
            str = str.replace(/\r\n/mg, "\n");
            var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
            function finish_cell() {
                var s = str.slice(start, end);
                var cell = ({});
                if(s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1,-1).replace(/""/g,'"');
                if(s.length === 0) cell.t = 'z';
                else if(o.raw) { cell.t = 's'; cell.v = s; }
                else if(s.trim().length === 0) { cell.t = 's'; cell.v = s; }
                else if(s.charCodeAt(0) == 0x3D) {
                    if(s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) { cell.t = 's'; cell.v = s.slice(2,-1).replace(/""/g,'"'); }
                    else if(fuzzyfmla(s)) { cell.t = 'n'; cell.f = s.substr(1); }
                    else { cell.t = 's'; cell.v = s; } }
                else if(s == "TRUE") { cell.t = 'b'; cell.v = true; }
                else if(s == "FALSE") { cell.t = 'b'; cell.v = false; }
                else if(!isNaN(v = fuzzynum(s))) { cell.t = 'n'; if(o.cellText !== false) cell.w = s; cell.v = v; }
                else if(!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
                    cell.z = o.dateNF || SSF._table[14];
                    var k = 0;
                    if(_re && s.match(_re)){ s=dateNF_fix(s, o.dateNF, (s.match(_re)||[])); k=1; }
                    if(o.cellDates) { cell.t = 'd'; cell.v = parseDate(s, k); }
                    else { cell.t = 'n'; cell.v = datenum(parseDate(s, k)); }
                    if(o.cellText !== false) cell.w = SSF.format(cell.z, cell.v instanceof Date ? datenum(cell.v):cell.v);
                    if(!o.cellNF) delete cell.z;
                } else {
                    cell.t = 's';
                    cell.v = s;
                }
                if(cell.t == 'z'){}
                else if(o.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = cell; }
                else ws[encode_cell({c:C,r:R})] = cell;
                start = end+1;
                if(range.e.c < C) range.e.c = C;
                if(range.e.r < R) range.e.r = R;
                if(cc == sepcc) ++C; else { C = 0; ++R; }
            }
            for(;end < str.length;++end) switch((cc=str.charCodeAt(end))) {
                case 0x22: instr = !instr; break;
                case sepcc: case 0x0a: case 0x0d: if(!instr) finish_cell(); break;
                default: break;
            }
            if(end - start > 0) finish_cell();
    
            ws['!ref'] = encode_range(range);
            return ws;
        }
    
        function prn_to_sheet_str(str, opts) {
            if(str.slice(0,4) == "sep=") return dsv_to_sheet_str(str, opts);
            if(str.indexOf("\t") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
            return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
        }
    
        function prn_to_sheet(d, opts) {
            var str = "", bytes = opts.type == 'string' ? [0,0,0,0] : firstbyte(d, opts);
            switch(opts.type) {
                case 'base64': str = Base64.decode(d); break;
                case 'binary': str = d; break;
                case 'buffer': str = d.toString('binary'); break;
                case 'array': str = cc2str(d); break;
                case 'string': str = d; break;
                default: throw new Error("Unrecognized type " + opts.type);
            }
            if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));
            else if((opts.type == 'binary' || opts.type == 'buffer') && typeof cptable !== 'undefined' && opts.codepage)  str = cptable.utils.decode(opts.codepage, cptable.utils.encode(1252,str));
            if(str.slice(0,19) == "socialcalc:version:") return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);
            return prn_to_sheet_str(str, opts);
        }
    
        function prn_to_workbook(d, opts) { return sheet_to_workbook(prn_to_sheet(d, opts), opts); }
    
        function sheet_to_prn(ws, opts) {
            var o = [];
            var r = safe_decode_range(ws['!ref']), cell;
            var dense = Array.isArray(ws);
            for(var R = r.s.r; R <= r.e.r; ++R) {
                var oo = [];
                for(var C = r.s.c; C <= r.e.c; ++C) {
                    var coord = encode_cell({r:R,c:C});
                    cell = dense ? (ws[R]||[])[C] : ws[coord];
                    if(!cell || cell.v == null) { oo.push("          "); continue; }
                    var w = (cell.w || (format_cell(cell), cell.w) || "").substr(0,10);
                    while(w.length < 10) w += " ";
                    oo.push(w + (C === 0 ? " " : ""));
                }
                o.push(oo.join(""));
            }
            return o.join("\n");
        }
    
        return {
            to_workbook: prn_to_workbook,
            to_sheet: prn_to_sheet,
            from_sheet: sheet_to_prn
        };
    })();
    
    /* Excel defaults to SYLK but warns if data is not valid */
    function read_wb_ID(d, opts) {
        var o = opts || {}, OLD_WTF = !!o.WTF; o.WTF = true;
        try {
            var out = SYLK.to_workbook(d, o);
            o.WTF = OLD_WTF;
            return out;
        } catch(e) {
            o.WTF = OLD_WTF;
            if(!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
            return PRN.to_workbook(d, opts);
        }
    }
    
    var WK_ = (function() {
        function lotushopper(data, cb, opts) {
            if(!data) return;
            prep_blob(data, data.l || 0);
            var Enum = opts.Enum || WK1Enum;
            while(data.l < data.length) {
                var RT = data.read_shift(2);
                var R = Enum[RT] || Enum[0xFF];
                var length = data.read_shift(2);
                var tgt = data.l + length;
                var d = (R.f||parsenoop)(data, length, opts);
                data.l = tgt;
                if(cb(d, R.n, RT)) return;
            }
        }
    
        function lotus_to_workbook(d, opts) {
            switch(opts.type) {
                case 'base64': return lotus_to_workbook_buf(s2a(Base64.decode(d)), opts);
                case 'binary': return lotus_to_workbook_buf(s2a(d), opts);
                case 'buffer':
                case 'array': return lotus_to_workbook_buf(d, opts);
            }
            throw "Unsupported type " + opts.type;
        }
    
        function lotus_to_workbook_buf(d,opts) {
            if(!d) return d;
            var o = opts || {};
            if(DENSE != null && o.dense == null) o.dense = DENSE;
            var s = ((o.dense ? [] : {})), n = "Sheet1", sidx = 0;
            var sheets = {}, snames = [n];
    
            var refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
    
            if(d[2] == 0x02) o.Enum = WK1Enum;
            else if(d[2] == 0x1a) o.Enum = WK3Enum;
            else if(d[2] == 0x0e) { o.Enum = WK3Enum; o.qpro = true; d.l = 0; }
            else throw new Error("Unrecognized LOTUS BOF " + d[2]);
            lotushopper(d, function(val, Rn, RT) {
                if(d[2] == 0x02) switch(RT) {
                    case 0x00:
                        o.vers = val;
                        if(val >= 0x1000) o.qpro = true;
                        break;
                    case 0x06: refguess = val; break; /* RANGE */
                    case 0x0F: /* LABEL */
                        if(!o.qpro) val[1].v = val[1].v.substr(1);
                        /* falls through */
                    case 0x0D: /* INTEGER */
                    case 0x0E: /* NUMBER */
                    case 0x10: /* FORMULA */
                    case 0x33: /* STRING */
                        /* TODO: actual translation of the format code */
                        if(RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {
                            val[1].z = o.dateNF || SSF._table[14];
                            if(o.cellDates) { val[1].t = 'd'; val[1].v = numdate(val[1].v); }
                        }
                        if(o.dense) {
                            if(!s[val[0].r]) s[val[0].r] = [];
                            s[val[0].r][val[0].c] = val[1];
                        } else s[encode_cell(val[0])] = val[1];
                        break;
                } else switch(RT) {
                    case 0x16: /* LABEL16 */
                        val[1].v = val[1].v.substr(1);
                        /* falls through */
                    case 0x17: /* NUMBER17 */
                    case 0x18: /* NUMBER18 */
                    case 0x19: /* FORMULA19 */
                    case 0x25: /* NUMBER25 */
                    case 0x27: /* NUMBER27 */
                    case 0x28: /* FORMULA28 */
                        if(val[3] > sidx) {
                            s["!ref"] = encode_range(refguess);
                            sheets[n] = s;
                            s = (o.dense ? [] : {});
                            refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
                            sidx = val[3]; n = "Sheet" + (sidx + 1);
                            snames.push(n);
                        }
                        if(o.dense) {
                            if(!s[val[0].r]) s[val[0].r] = [];
                            s[val[0].r][val[0].c] = val[1];
                        } else s[encode_cell(val[0])] = val[1];
                        if(refguess.e.c < val[0].c) refguess.e.c = val[0].c;
                        if(refguess.e.r < val[0].r) refguess.e.r = val[0].r;
                        break;
                    default: break;
                }
            }, o);
    
            s["!ref"] = encode_range(refguess);
            sheets[n] = s;
            return { SheetNames: snames, Sheets:sheets };
        }
    
        function parse_RANGE(blob, length) {
            var o = {s:{c:0,r:0},e:{c:0,r:0}};
            o.s.c = blob.read_shift(2);
            o.s.r = blob.read_shift(2);
            o.e.c = blob.read_shift(2);
            o.e.r = blob.read_shift(2);
            if(o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
            return o;
        }
    
        function parse_cell(blob, length, opts) {
            var o = [{c:0,r:0}, {t:'n',v:0}, 0];
            if(opts.qpro && opts.vers != 0x5120) {
                o[0].c = blob.read_shift(1);
                blob.l++;
                o[0].r = blob.read_shift(2);
                blob.l+=2;
            } else {
                o[2] = blob.read_shift(1);
                o[0].c = blob.read_shift(2); o[0].r = blob.read_shift(2);
            }
            return o;
        }
    
        function parse_LABEL(blob, length, opts) {
            var tgt = blob.l + length;
            var o = parse_cell(blob, length, opts);
            o[1].t = 's';
            if(opts.vers == 0x5120) {
                blob.l++;
                var len = blob.read_shift(1);
                o[1].v = blob.read_shift(len, 'utf8');
                return o;
            }
            if(opts.qpro) blob.l++;
            o[1].v = blob.read_shift(tgt - blob.l, 'cstr');
            return o;
        }
    
        function parse_INTEGER(blob, length, opts) {
            var o = parse_cell(blob, length, opts);
            o[1].v = blob.read_shift(2, 'i');
            return o;
        }
    
        function parse_NUMBER(blob, length, opts) {
            var o = parse_cell(blob, length, opts);
            o[1].v = blob.read_shift(8, 'f');
            return o;
        }
    
        function parse_FORMULA(blob, length, opts) {
            var tgt = blob.l + length;
            var o = parse_cell(blob, length, opts);
            /* TODO: formula */
            o[1].v = blob.read_shift(8, 'f');
            if(opts.qpro) blob.l = tgt;
            else {
                var flen = blob.read_shift(2);
                blob.l += flen;
            }
            return o;
        }
    
        function parse_cell_3(blob, length) {
            var o = [{c:0,r:0}, {t:'n',v:0}, 0];
            o[0].r = blob.read_shift(2); o[3] = blob[blob.l++]; o[0].c = blob[blob.l++];
            return o;
        }
    
        function parse_LABEL_16(blob, length) {
            var o = parse_cell_3(blob, length);
            o[1].t = 's';
            o[1].v = blob.read_shift(length - 4, 'cstr');
            return o;
        }
    
        function parse_NUMBER_18(blob, length) {
            var o = parse_cell_3(blob, length);
            o[1].v = blob.read_shift(2);
            var v = o[1].v >> 1;
            /* TODO: figure out all of the corner cases */
            if(o[1].v & 0x1) {
                switch(v & 0x07) {
                    case 1: v = (v >> 3) * 500; break;
                    case 2: v = (v >> 3) / 20; break;
                    case 4: v = (v >> 3) / 2000; break;
                    case 6: v = (v >> 3) / 16; break;
                    case 7: v = (v >> 3) / 64; break;
                    default: throw "unknown NUMBER_18 encoding " + (v & 0x07);
                }
            }
            o[1].v = v;
            return o;
        }
    
        function parse_NUMBER_17(blob, length) {
            var o = parse_cell_3(blob, length);
            var v1 = blob.read_shift(4);
            var v2 = blob.read_shift(4);
            var e = blob.read_shift(2);
            if(e == 0xFFFF) { o[1].v = 0; return o; }
            var s = e & 0x8000; e = (e&0x7FFF) - 16446;
            o[1].v = ((e > 0 ? (v2 << e) : (v2 >>> -e)) + (e > -32 ? (v1 << (e + 32)) : (v1 >>> -(e + 32))));
            return o;
        }
    
        function parse_FORMULA_19(blob, length) {
            var o = parse_NUMBER_17(blob, 14);
            blob.l += length - 14; /* TODO: formula */
            return o;
        }
    
        function parse_NUMBER_25(blob, length) {
            var o = parse_cell_3(blob, length);
            var v1 = blob.read_shift(4);
            o[1].v = v1 >> 6;
            return o;
        }
    
        function parse_NUMBER_27(blob, length) {
            var o = parse_cell_3(blob, length);
            var v1 = blob.read_shift(8,'f');
            o[1].v = v1;
            return o;
        }
    
        function parse_FORMULA_28(blob, length) {
            var o = parse_NUMBER_27(blob, 14);
            blob.l += length - 10; /* TODO: formula */
            return o;
        }
    
        var WK1Enum = {
    0x0000: { n:"BOF", f:parseuint16 },
    0x0001: { n:"EOF" },
    0x0002: { n:"CALCMODE" },
    0x0003: { n:"CALCORDER" },
    0x0004: { n:"SPLIT" },
    0x0005: { n:"SYNC" },
    0x0006: { n:"RANGE", f:parse_RANGE },
    0x0007: { n:"WINDOW1" },
    0x0008: { n:"COLW1" },
    0x0009: { n:"WINTWO" },
    0x000A: { n:"COLW2" },
    0x000B: { n:"NAME" },
    0x000C: { n:"BLANK" },
    0x000D: { n:"INTEGER", f:parse_INTEGER },
    0x000E: { n:"NUMBER", f:parse_NUMBER },
    0x000F: { n:"LABEL", f:parse_LABEL },
    0x0010: { n:"FORMULA", f:parse_FORMULA },
    0x0018: { n:"TABLE" },
    0x0019: { n:"ORANGE" },
    0x001A: { n:"PRANGE" },
    0x001B: { n:"SRANGE" },
    0x001C: { n:"FRANGE" },
    0x001D: { n:"KRANGE1" },
    0x0020: { n:"HRANGE" },
    0x0023: { n:"KRANGE2" },
    0x0024: { n:"PROTEC" },
    0x0025: { n:"FOOTER" },
    0x0026: { n:"HEADER" },
    0x0027: { n:"SETUP" },
    0x0028: { n:"MARGINS" },
    0x0029: { n:"LABELFMT" },
    0x002A: { n:"TITLES" },
    0x002B: { n:"SHEETJS" },
    0x002D: { n:"GRAPH" },
    0x002E: { n:"NGRAPH" },
    0x002F: { n:"CALCCOUNT" },
    0x0030: { n:"UNFORMATTED" },
    0x0031: { n:"CURSORW12" },
    0x0032: { n:"WINDOW" },
    0x0033: { n:"STRING", f:parse_LABEL },
    0x0037: { n:"PASSWORD" },
    0x0038: { n:"LOCKED" },
    0x003C: { n:"QUERY" },
    0x003D: { n:"QUERYNAME" },
    0x003E: { n:"PRINT" },
    0x003F: { n:"PRINTNAME" },
    0x0040: { n:"GRAPH2" },
    0x0041: { n:"GRAPHNAME" },
    0x0042: { n:"ZOOM" },
    0x0043: { n:"SYMSPLIT" },
    0x0044: { n:"NSROWS" },
    0x0045: { n:"NSCOLS" },
    0x0046: { n:"RULER" },
    0x0047: { n:"NNAME" },
    0x0048: { n:"ACOMM" },
    0x0049: { n:"AMACRO" },
    0x004A: { n:"PARSE" },
    0x00FF: { n:"", f:parsenoop }
        };
    
        var WK3Enum = {
    0x0000: { n:"BOF" },
    0x0001: { n:"EOF" },
    0x0003: { n:"??" },
    0x0004: { n:"??" },
    0x0005: { n:"??" },
    0x0006: { n:"??" },
    0x0007: { n:"??" },
    0x0009: { n:"??" },
    0x000a: { n:"??" },
    0x000b: { n:"??" },
    0x000c: { n:"??" },
    0x000e: { n:"??" },
    0x000f: { n:"??" },
    0x0010: { n:"??" },
    0x0011: { n:"??" },
    0x0012: { n:"??" },
    0x0013: { n:"??" },
    0x0015: { n:"??" },
    0x0016: { n:"LABEL16", f:parse_LABEL_16},
    0x0017: { n:"NUMBER17", f:parse_NUMBER_17 },
    0x0018: { n:"NUMBER18", f:parse_NUMBER_18 },
    0x0019: { n:"FORMULA19", f:parse_FORMULA_19},
    0x001a: { n:"??" },
    0x001b: { n:"??" },
    0x001c: { n:"??" },
    0x001d: { n:"??" },
    0x001e: { n:"??" },
    0x001f: { n:"??" },
    0x0021: { n:"??" },
    0x0025: { n:"NUMBER25", f:parse_NUMBER_25 },
    0x0027: { n:"NUMBER27", f:parse_NUMBER_27 },
    0x0028: { n:"FORMULA28", f:parse_FORMULA_28 },
    0x00FF: { n:"", f:parsenoop }
        };
        return {
            to_workbook: lotus_to_workbook
        };
    })();
    /* Parse a list of <r> tags */
    var parse_rs = (function parse_rs_factory() {
        var tregex = matchtag("t"), rpregex = matchtag("rPr"), rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/, nlregex = /\r\n/g;
        /* 18.4.7 rPr CT_RPrElt */
        var parse_rpr = function parse_rpr(rpr, intro, outro) {
            var font = {}, cp = 65001, align = "";
            var m = rpr.match(tagregex), i = 0;
            if(m) for(;i!=m.length; ++i) {
                var y = parsexmltag(m[i]);
                switch(y[0].replace(/\w*:/g,"")) {
                    /* 18.8.12 condense CT_BooleanProperty */
                    /* ** not required . */
                    case '<condense': break;
                    /* 18.8.17 extend CT_BooleanProperty */
                    /* ** not required . */
                    case '<extend': break;
                    /* 18.8.36 shadow CT_BooleanProperty */
                    /* ** not required . */
                    case '<shadow':
                        if(!y.val) break;
                        /* falls through */
                    case '<shadow>':
                    case '<shadow/>': font.shadow = 1; break;
                    case '</shadow>': break;
    
                    /* 18.4.1 charset CT_IntProperty TODO */
                    case '<charset':
                        if(y.val == '1') break;
                        cp = CS2CP[parseInt(y.val, 10)];
                        break;
    
                    /* 18.4.2 outline CT_BooleanProperty TODO */
                    case '<outline':
                        if(!y.val) break;
                        /* falls through */
                    case '<outline>':
                    case '<outline/>': font.outline = 1; break;
                    case '</outline>': break;
    
                    /* 18.4.5 rFont CT_FontName */
                    case '<rFont': font.name = y.val; break;
    
                    /* 18.4.11 sz CT_FontSize */
                    case '<sz': font.sz = y.val; break;
    
                    /* 18.4.10 strike CT_BooleanProperty */
                    case '<strike':
                        if(!y.val) break;
                        /* falls through */
                    case '<strike>':
                    case '<strike/>': font.strike = 1; break;
                    case '</strike>': break;
    
                    /* 18.4.13 u CT_UnderlineProperty */
                    case '<u':
                        if(!y.val) break;
                        switch(y.val) {
                            case 'double': font.uval = "double"; break;
                            case 'singleAccounting': font.uval = "single-accounting"; break;
                            case 'doubleAccounting': font.uval = "double-accounting"; break;
                        }
                        /* falls through */
                    case '<u>':
                    case '<u/>': font.u = 1; break;
                    case '</u>': break;
    
                    /* 18.8.2 b */
                    case '<b':
                        if(y.val == '0') break;
                        /* falls through */
                    case '<b>':
                    case '<b/>': font.b = 1; break;
                    case '</b>': break;
    
                    /* 18.8.26 i */
                    case '<i':
                        if(y.val == '0') break;
                        /* falls through */
                    case '<i>':
                    case '<i/>': font.i = 1; break;
                    case '</i>': break;
    
                    /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
                    case '<color':
                        if(y.rgb) font.color = y.rgb.substr(2,6);
                        break;
    
                    /* 18.8.18 family ST_FontFamily */
                    case '<family': font.family = y.val; break;
    
                    /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
                    case '<vertAlign': align = y.val; break;
    
                    /* 18.8.35 scheme CT_FontScheme TODO */
                    case '<scheme': break;
    
                    default:
                        if(y[0].charCodeAt(1) !== 47) throw 'Unrecognized rich format ' + y[0];
                }
            }
            var style = [];
    
            if(font.u) style.push("text-decoration: underline;");
            if(font.uval) style.push("text-underline-style:" + font.uval + ";");
            if(font.sz) style.push("font-size:" + font.sz + ";");
            if(font.outline) style.push("text-effect: outline;");
            if(font.shadow) style.push("text-shadow: auto;");
            intro.push('<span style="' + style.join("") + '">');
    
            if(font.b) { intro.push("<b>"); outro.push("</b>"); }
            if(font.i) { intro.push("<i>"); outro.push("</i>"); }
            if(font.strike) { intro.push("<s>"); outro.push("</s>"); }
    
            if(align == "superscript") align = "sup";
            else if(align == "subscript") align = "sub";
            if(align != "") { intro.push("<" + align + ">"); outro.push("</" + align + ">"); }
    
            outro.push("</span>");
            return cp;
        };
    
        /* 18.4.4 r CT_RElt */
        function parse_r(r) {
            var terms = [[],"",[]];
            /* 18.4.12 t ST_Xstring */
            var t = r.match(tregex), cp = 65001;
            if(!t) return "";
            terms[1] = t[1];
    
            var rpr = r.match(rpregex);
            if(rpr) cp = parse_rpr(rpr[1], terms[0], terms[2]);
    
            return terms[0].join("") + terms[1].replace(nlregex,'<br/>') + terms[2].join("");
        }
        return function parse_rs(rs) {
            return rs.replace(rregex,"").split(rend).map(parse_r).join("");
        };
    })();
    
    /* 18.4.8 si CT_Rst */
    var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
    var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
    function parse_si(x, opts) {
        var html = opts ? opts.cellHTML : true;
        var z = {};
        if(!x) return null;
        var y;
        /* 18.4.12 t ST_Xstring (Plaintext String) */
        // TODO: is whitespace actually valid here?
        if(x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
            z.t = unescapexml(utf8read(x.slice(x.indexOf(">")+1).split(/<\/(?:\w+:)?t>/)[0]||""));
            z.r = utf8read(x);
            if(html) z.h = escapehtml(z.t);
        }
        /* 18.4.4 r CT_RElt (Rich Text Run) */
        else if((y = x.match(sirregex))) {
            z.r = utf8read(x);
            z.t = unescapexml(utf8read((x.replace(sirphregex, '').match(sitregex)||[]).join("").replace(tagregex,"")));
            if(html) z.h = parse_rs(z.r);
        }
        /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */
        /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */
        return z;
    }
    
    /* 18.4 Shared String Table */
    var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
    var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
    var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
    function parse_sst_xml(data, opts) {
        var s = ([]), ss = "";
        if(!data) return s;
        /* 18.4.9 sst CT_Sst */
        var sst = data.match(sstr0);
        if(sst) {
            ss = sst[2].replace(sstr1,"").split(sstr2);
            for(var i = 0; i != ss.length; ++i) {
                var o = parse_si(ss[i].trim(), opts);
                if(o != null) s[s.length] = o;
            }
            sst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;
        }
        return s;
    }
    
    RELS.SST = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings";
    var straywsregex = /^\s|\s$|[\t\n\r]/;
    function write_sst_xml(sst, opts) {
        if(!opts.bookSST) return "";
        var o = [XML_HEADER];
        o[o.length] = (writextag('sst', null, {
            xmlns: XMLNS.main[0],
            count: sst.Count,
            uniqueCount: sst.Unique
        }));
        for(var i = 0; i != sst.length; ++i) { if(sst[i] == null) continue;
            var s = sst[i];
            var sitag = "<si>";
            if(s.r) sitag += s.r;
            else {
                sitag += "<t";
                if(!s.t) s.t = "";
                if(s.t.match(straywsregex)) sitag += ' xml:space="preserve"';
                sitag += ">" + escapexml(s.t) + "</t>";
            }
            sitag += "</si>";
            o[o.length] = (sitag);
        }
        if(o.length>2){ o[o.length] = ('</sst>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.219 BrtBeginSst */
    function parse_BrtBeginSst(data, length) {
        return [data.read_shift(4), data.read_shift(4)];
    }
    
    /* [MS-XLSB] 2.1.7.45 Shared Strings */
    function parse_sst_bin(data, opts) {
        var s = ([]);
        var pass = false;
        recordhopper(data, function hopper_sst(val, R_n, RT) {
            switch(RT) {
                case 0x009F: /* 'BrtBeginSst' */
                    s.Count = val[0]; s.Unique = val[1]; break;
                case 0x0013: /* 'BrtSSTItem' */
                    s.push(val); break;
                case 0x00A0: /* 'BrtEndSst' */
                    return true;
    
                case 0x0023: /* 'BrtFRTBegin' */
                    pass = true; break;
                case 0x0024: /* 'BrtFRTEnd' */
                    pass = false; break;
    
                default:
                    if(R_n.indexOf("Begin") > 0){/* empty */}
                    else if(R_n.indexOf("End") > 0){/* empty */}
                    if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
            }
        });
        return s;
    }
    
    function write_BrtBeginSst(sst, o) {
        if(!o) o = new_buf(8);
        o.write_shift(4, sst.Count);
        o.write_shift(4, sst.Unique);
        return o;
    }
    
    var write_BrtSSTItem = write_RichStr;
    
    function write_sst_bin(sst, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginSst", write_BrtBeginSst(sst));
        for(var i = 0; i < sst.length; ++i) write_record(ba, "BrtSSTItem", write_BrtSSTItem(sst[i]));
        /* FRTSST */
        write_record(ba, "BrtEndSst");
        return ba.end();
    }
    function _JS2ANSI(str) {
        if(typeof cptable !== 'undefined') return cptable.utils.encode(current_ansi, str);
        var o = [], oo = str.split("");
        for(var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.1.4 Version */
    function parse_CRYPTOVersion(blob, length) {
        var o = {};
        o.Major = blob.read_shift(2);
        o.Minor = blob.read_shift(2);
    if(length >= 4) blob.l += length - 4;
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */
    function parse_DataSpaceVersionInfo(blob, length) {
        var o = {};
        o.id = blob.read_shift(0, 'lpp4');
        o.R = parse_CRYPTOVersion(blob, 4);
        o.U = parse_CRYPTOVersion(blob, 4);
        o.W = parse_CRYPTOVersion(blob, 4);
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */
    function parse_DataSpaceMapEntry(blob) {
        var len = blob.read_shift(4);
        var end = blob.l + len - 4;
        var o = {};
        var cnt = blob.read_shift(4);
        var comps = [];
        /* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */
        while(cnt-- > 0) comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, 'lpp4') });
        o.name = blob.read_shift(0, 'lpp4');
        o.comps = comps;
        if(blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */
    function parse_DataSpaceMap(blob, length) {
        var o = [];
        blob.l += 4; // must be 0x8
        var cnt = blob.read_shift(4);
        while(cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */
    function parse_DataSpaceDefinition(blob, length) {
        var o = [];
        blob.l += 4; // must be 0x8
        var cnt = blob.read_shift(4);
        while(cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */
    function parse_TransformInfoHeader(blob, length) {
        var o = {};
        var len = blob.read_shift(4);
        blob.l += 4; // must be 0x1
        o.id = blob.read_shift(0, 'lpp4');
        o.name = blob.read_shift(0, 'lpp4');
        o.R = parse_CRYPTOVersion(blob, 4);
        o.U = parse_CRYPTOVersion(blob, 4);
        o.W = parse_CRYPTOVersion(blob, 4);
        return o;
    }
    
    function parse_Primary(blob, length) {
        /* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */
        var hdr = parse_TransformInfoHeader(blob);
        /* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */
        hdr.ename = blob.read_shift(0, '8lpp4');
        hdr.blksz = blob.read_shift(4);
        hdr.cmode = blob.read_shift(4);
        if(blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
        return hdr;
    }
    
    /* [MS-OFFCRYPTO] 2.3.2 Encryption Header */
    function parse_EncryptionHeader(blob, length) {
        var tgt = blob.l + length;
        var o = {};
        o.Flags = (blob.read_shift(4) & 0x3F);
        blob.l += 4;
        o.AlgID = blob.read_shift(4);
        var valid = false;
        switch(o.AlgID) {
            case 0x660E: case 0x660F: case 0x6610: valid = (o.Flags == 0x24); break;
            case 0x6801: valid = (o.Flags == 0x04); break;
            case 0: valid = (o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24); break;
            default: throw 'Unrecognized encryption algorithm: ' + o.AlgID;
        }
        if(!valid) throw new Error("Encryption Flags/AlgID mismatch");
        o.AlgIDHash = blob.read_shift(4);
        o.KeySize = blob.read_shift(4);
        o.ProviderType = blob.read_shift(4);
        blob.l += 8;
        o.CSPName = blob.read_shift((tgt-blob.l)>>1, 'utf16le');
        blob.l = tgt;
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */
    function parse_EncryptionVerifier(blob, length) {
        var o = {}, tgt = blob.l + length;
        blob.l += 4; // SaltSize must be 0x10
        o.Salt = blob.slice(blob.l, blob.l+16); blob.l += 16;
        o.Verifier = blob.slice(blob.l, blob.l+16); blob.l += 16;
        var sz = blob.read_shift(4);
        o.VerifierHash = blob.slice(blob.l, tgt); blob.l = tgt;
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */
    function parse_EncryptionInfo(blob, length) {
        var vers = parse_CRYPTOVersion(blob);
        switch(vers.Minor) {
            case 0x02: return [vers.Minor, parse_EncInfoStd(blob, vers)];
            case 0x03: return [vers.Minor, parse_EncInfoExt(blob, vers)];
            case 0x04: return [vers.Minor, parse_EncInfoAgl(blob, vers)];
        }
        throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
    }
    
    /* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */
    function parse_EncInfoStd(blob, vers) {
        var flags = blob.read_shift(4);
        if((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
        var sz = blob.read_shift(4);
        var tgt = blob.l + sz;
        var hdr = parse_EncryptionHeader(blob, sz);
        var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
        return { t:"Std", h:hdr, v:verifier };
    }
    /* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */
    function parse_EncInfoExt(blob, vers) { throw new Error("File is password-protected: ECMA-376 Extensible"); }
    /* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */
    function parse_EncInfoAgl(blob, vers) {
        var KeyData = ["saltSize","blockSize","keyBits","hashSize","cipherAlgorithm","cipherChaining","hashAlgorithm","saltValue"];
        blob.l+=4;
        var xml = blob.read_shift(blob.length - blob.l, 'utf8');
        var o = {};
        xml.replace(tagregex, function xml_agile(x, idx) {
            var y = parsexmltag(x);
            switch(strip_ns(y[0])) {
                case '<?xml': break;
                case '<encryption': case '</encryption>': break;
                case '<keyData': KeyData.forEach(function(k) { o[k] = y[k]; }); break;
                case '<dataIntegrity': o.encryptedHmacKey = y.encryptedHmacKey; o.encryptedHmacValue = y.encryptedHmacValue; break;
                case '<keyEncryptors>': case '<keyEncryptors': o.encs = []; break;
                case '</keyEncryptors>': break;
    
                case '<keyEncryptor': o.uri = y.uri; break;
                case '</keyEncryptor>': break;
                case '<encryptedKey': o.encs.push(y); break;
                default: throw y[0];
            }
        });
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */
    function parse_RC4CryptoHeader(blob, length) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;
        if(vers.Minor != 2) throw new Error('unrecognized minor version code: ' + vers.Minor);
        if(vers.Major > 4 || vers.Major < 2) throw new Error('unrecognized major version code: ' + vers.Major);
        o.Flags = blob.read_shift(4); length -= 4;
        var sz = blob.read_shift(4); length -= 4;
        o.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;
        o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
        return o;
    }
    /* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */
    function parse_RC4Header(blob, length) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;
        if(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
        o.Salt = blob.read_shift(16);
        o.EncryptedVerifier = blob.read_shift(16);
        o.EncryptedVerifierHash = blob.read_shift(16);
        return o;
    }
    
    /* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */
    function crypto_CreatePasswordVerifier_Method1(Password) {
        var Verifier = 0x0000, PasswordArray;
        var PasswordDecoded = _JS2ANSI(Password);
        var len = PasswordDecoded.length + 1, i, PasswordByte;
        var Intermediate1, Intermediate2, Intermediate3;
        PasswordArray = new_raw_buf(len);
        PasswordArray[0] = PasswordDecoded.length;
        for(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];
        for(i = len-1; i >= 0; --i) {
            PasswordByte = PasswordArray[i];
            Intermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;
            Intermediate2 = (Verifier << 1) & 0x7FFF;
            Intermediate3 = Intermediate1 | Intermediate2;
            Verifier = Intermediate3 ^ PasswordByte;
        }
        return Verifier ^ 0xCE4B;
    }
    
    /* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */
    var crypto_CreateXorArray_Method1 = (function() {
        var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];
        var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];
        var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];
        var Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };
        var XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };
        var CreateXorKey_Method1 = function(Password) {
            var XorKey = InitialCode[Password.length - 1];
            var CurrentElement = 0x68;
            for(var i = Password.length-1; i >= 0; --i) {
                var Char = Password[i];
                for(var j = 0; j != 7; ++j) {
                    if(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
                    Char *= 2; --CurrentElement;
                }
            }
            return XorKey;
        };
        return function(password) {
            var Password = _JS2ANSI(password);
            var XorKey = CreateXorKey_Method1(Password);
            var Index = Password.length;
            var ObfuscationArray = new_raw_buf(16);
            for(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;
            var Temp, PasswordLastChar, PadIndex;
            if((Index & 1) === 1) {
                Temp = XorKey >> 8;
                ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
                --Index;
                Temp = XorKey & 0xFF;
                PasswordLastChar = Password[Password.length - 1];
                ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
            }
            while(Index > 0) {
                --Index;
                Temp = XorKey >> 8;
                ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                --Index;
                Temp = XorKey & 0xFF;
                ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            }
            Index = 15;
            PadIndex = 15 - Password.length;
            while(PadIndex > 0) {
                Temp = XorKey >> 8;
                ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
                --Index;
                --PadIndex;
                Temp = XorKey & 0xFF;
                ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                --Index;
                --PadIndex;
            }
            return ObfuscationArray;
        };
    })();
    
    /* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */
    var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {
        /* If XorArray is set, use it; if O is not set, make changes in-place */
        if(!O) O = Data;
        if(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
        var Index, Value;
        for(Index = 0; Index != Data.length; ++Index) {
            Value = Data[Index];
            Value ^= XorArray[XorArrayIndex];
            Value = ((Value>>5) | (Value<<3)) & 0xFF;
            O[Index] = Value;
            ++XorArrayIndex;
        }
        return [O, XorArrayIndex, XorArray];
    };
    
    var crypto_MakeXorDecryptor = function(password) {
        var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
        return function(Data) {
            var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
            XorArrayIndex = O[1];
            return O[0];
        };
    };
    
    /* 2.5.343 */
    function parse_XORObfuscation(blob, length, opts, out) {
        var o = ({ key: parseuint16(blob), verificationBytes: parseuint16(blob) });
        if(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
        out.valid = o.verificationBytes === o.verifier;
        if(out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
        return o;
    }
    
    /* 2.4.117 */
    function parse_FilePassHeader(blob, length, oo) {
        var o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;
        if(o.Info === 1) o.Data = parse_RC4Header(blob, length);
        else o.Data = parse_RC4CryptoHeader(blob, length);
        return o;
    }
    function parse_FilePass(blob, length, opts) {
        var o = ({ Type: opts.biff >= 8 ? blob.read_shift(2) : 0 }); /* wEncryptionType */
        if(o.Type) parse_FilePassHeader(blob, length-2, o);
        else parse_XORObfuscation(blob, length-2, opts, o);
        return o;
    }
    
    
    var RTF = (function() {
        function rtf_to_sheet(d, opts) {
            switch(opts.type) {
                case 'base64': return rtf_to_sheet_str(Base64.decode(d), opts);
                case 'binary': return rtf_to_sheet_str(d, opts);
                case 'buffer': return rtf_to_sheet_str(d.toString('binary'), opts);
                case 'array':  return rtf_to_sheet_str(cc2str(d), opts);
            }
            throw new Error("Unrecognized type " + opts.type);
        }
    
        function rtf_to_sheet_str(str, opts) {
            var o = opts || {};
            var ws = o.dense ? ([]) : ({});
            var range = ({s: {c:0, r:0}, e: {c:0, r:0}});
    
            // TODO: parse
            if(!str.match(/\\trowd/)) throw new Error("RTF missing table");
    
            ws['!ref'] = encode_range(range);
            return ws;
        }
    
        function rtf_to_workbook(d, opts) { return sheet_to_workbook(rtf_to_sheet(d, opts), opts); }
    
        /* TODO: this is a stub */
        function sheet_to_rtf(ws, opts) {
            var o = ["{\\rtf1\\ansi"];
            var r = safe_decode_range(ws['!ref']), cell;
            var dense = Array.isArray(ws);
            for(var R = r.s.r; R <= r.e.r; ++R) {
                o.push("\\trowd\\trautofit1");
                for(var C = r.s.c; C <= r.e.c; ++C) o.push("\\cellx" + (C+1));
                o.push("\\pard\\intbl");
                for(C = r.s.c; C <= r.e.c; ++C) {
                    var coord = encode_cell({r:R,c:C});
                    cell = dense ? (ws[R]||[])[C]: ws[coord];
                    if(!cell || cell.v == null && (!cell.f || cell.F)) continue;
                    o.push(" " + (cell.w || (format_cell(cell), cell.w)));
                    o.push("\\cell");
                }
                o.push("\\pard\\intbl\\row");
            }
            return o.join("") + "}";
        }
    
        return {
            to_workbook: rtf_to_workbook,
            to_sheet: rtf_to_sheet,
            from_sheet: sheet_to_rtf
        };
    })();
    function hex2RGB(h) {
        var o = h.substr(h[0]==="#"?1:0,6);
        return [parseInt(o.substr(0,2),16),parseInt(o.substr(2,2),16),parseInt(o.substr(4,2),16)];
    }
    function rgb2Hex(rgb) {
        for(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);
        return o.toString(16).toUpperCase().substr(1);
    }
    
    function rgb2HSL(rgb) {
        var R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;
        var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
        if(C === 0) return [0, 0, R];
    
        var H6 = 0, S = 0, L2 = (M + m);
        S = C / (L2 > 1 ? 2 - L2 : L2);
        switch(M){
            case R: H6 = ((G - B) / C + 6)%6; break;
            case G: H6 = ((B - R) / C + 2); break;
            case B: H6 = ((R - G) / C + 4); break;
        }
        return [H6 / 6, S, L2 / 2];
    }
    
    function hsl2RGB(hsl){
        var H = hsl[0], S = hsl[1], L = hsl[2];
        var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;
        var rgb = [m,m,m], h6 = 6*H;
    
        var X;
        if(S !== 0) switch(h6|0) {
            case 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;
            case 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;
            case 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;
            case 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;
            case 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;
            case 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;
        }
        for(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);
        return rgb;
    }
    
    /* 18.8.3 bgColor tint algorithm */
    function rgb_tint(hex, tint) {
        if(tint === 0) return hex;
        var hsl = rgb2HSL(hex2RGB(hex));
        if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
        else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
        return rgb2Hex(hsl2RGB(hsl));
    }
    
    /* 18.3.1.13 width calculations */
    /* [MS-OI29500] 2.1.595 Column Width & Formatting */
    var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
    function width2px(width) { return Math.floor(( width + (Math.round(128/MDW))/256 )* MDW ); }
    function px2char(px) { return (Math.floor((px - 5)/MDW * 100 + 0.5))/100; }
    function char2width(chr) { return (Math.round((chr * MDW + 5)/MDW*256))/256; }
    function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
    function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }
    function cycle_width(collw) { return char2width(px2char(width2px(collw))); }
    /* XLSX/XLSB/XLS specify width in units of MDW */
    function find_mdw_colw(collw) {
        var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
        if(delta > 0.005) for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) if(Math.abs(collw - cycle_width(collw)) <= delta) { delta = Math.abs(collw - cycle_width(collw)); _MDW = MDW; }
        MDW = _MDW;
    }
    /* XLML specifies width in terms of pixels */
    function find_mdw_wpx(wpx) {
        var delta = Infinity, guess = 0, _MDW = MIN_MDW;
        for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
            guess = char2width_(px2char_(wpx))*256;
            guess = (guess) % 1;
            if(guess > 0.5) guess--;
            if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
        }
        MDW = _MDW;
    }
    
    function process_col(coll) {
        if(coll.width) {
            coll.wpx = width2px(coll.width);
            coll.wch = px2char(coll.wpx);
            coll.MDW = MDW;
        } else if(coll.wpx) {
            coll.wch = px2char(coll.wpx);
            coll.width = char2width(coll.wch);
            coll.MDW = MDW;
        } else if(typeof coll.wch == 'number') {
            coll.width = char2width(coll.wch);
            coll.wpx = width2px(coll.width);
            coll.MDW = MDW;
        }
        if(coll.customWidth) delete coll.customWidth;
    }
    
    var DEF_PPI = 96, PPI = DEF_PPI;
    function px2pt(px) { return px * 96 / PPI; }
    function pt2px(pt) { return pt * PPI / 96; }
    
    /* [MS-EXSPXML3] 2.4.54 ST_enmPattern */
    var XLMLPatternTypeMap = {
        "None": "none",
        "Solid": "solid",
        "Gray50": "mediumGray",
        "Gray75": "darkGray",
        "Gray25": "lightGray",
        "HorzStripe": "darkHorizontal",
        "VertStripe": "darkVertical",
        "ReverseDiagStripe": "darkDown",
        "DiagStripe": "darkUp",
        "DiagCross": "darkGrid",
        "ThickDiagCross": "darkTrellis",
        "ThinHorzStripe": "lightHorizontal",
        "ThinVertStripe": "lightVertical",
        "ThinReverseDiagStripe": "lightDown",
        "ThinHorzCross": "lightGrid"
    };
    
    /* 18.8.5 borders CT_Borders */
    function parse_borders(t, styles, themes, opts) {
        styles.Borders = [];
        var border = {}, sub_border = {};
        t[0].match(tagregex).forEach(function(x) {
            var y = parsexmltag(x);
            switch (y[0]) {
                case '<borders': case '<borders>': case '</borders>': break;
    
                /* 18.8.4 border CT_Border */
                case '<border': case '<border>': case '<border/>':
                    border = {};
                    if (y.diagonalUp) { border.diagonalUp = y.diagonalUp; }
                    if (y.diagonalDown) { border.diagonalDown = y.diagonalDown; }
                    styles.Borders.push(border);
                    break;
                case '</border>': break;
    
                /* note: not in spec, appears to be CT_BorderPr */
                case '<left/>': break;
                case '<left': case '<left>': break;
                case '</left>': break;
    
                /* note: not in spec, appears to be CT_BorderPr */
                case '<right/>': break;
                case '<right': case '<right>': break;
                case '</right>': break;
    
                /* 18.8.43 top CT_BorderPr */
                case '<top/>': break;
                case '<top': case '<top>': break;
                case '</top>': break;
    
                /* 18.8.6 bottom CT_BorderPr */
                case '<bottom/>': break;
                case '<bottom': case '<bottom>': break;
                case '</bottom>': break;
    
                /* 18.8.13 diagonal CT_BorderPr */
                case '<diagonal': case '<diagonal>': case '<diagonal/>': break;
                case '</diagonal>': break;
    
                /* 18.8.25 horizontal CT_BorderPr */
                case '<horizontal': case '<horizontal>': case '<horizontal/>': break;
                case '</horizontal>': break;
    
                /* 18.8.44 vertical CT_BorderPr */
                case '<vertical': case '<vertical>': case '<vertical/>': break;
                case '</vertical>': break;
    
                /* 18.8.37 start CT_BorderPr */
                case '<start': case '<start>': case '<start/>': break;
                case '</start>': break;
    
                /* 18.8.16 end CT_BorderPr */
                case '<end': case '<end>': case '<end/>': break;
                case '</end>': break;
    
                /* 18.8.? color CT_Color */
                case '<color': case '<color>': break;
                case '<color/>': case '</color>': break;
    
                default: if(opts && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in borders');
            }
        });
    }
    
    /* 18.8.21 fills CT_Fills */
    function parse_fills(t, styles, themes, opts) {
        styles.Fills = [];
        var fill = {};
        t[0].match(tagregex).forEach(function(x) {
            var y = parsexmltag(x);
            switch(y[0]) {
                case '<fills': case '<fills>': case '</fills>': break;
    
                /* 18.8.20 fill CT_Fill */
                case '<fill>': case '<fill': case '<fill/>':
                    fill = {}; styles.Fills.push(fill); break;
                case '</fill>': break;
    
                /* 18.8.24 gradientFill CT_GradientFill */
                case '<gradientFill>': break;
                case '<gradientFill':
                case '</gradientFill>': styles.Fills.push(fill); fill = {}; break;
    
                /* 18.8.32 patternFill CT_PatternFill */
                case '<patternFill': case '<patternFill>':
                    if(y.patternType) fill.patternType = y.patternType;
                    break;
                case '<patternFill/>': case '</patternFill>': break;
    
                /* 18.8.3 bgColor CT_Color */
                case '<bgColor':
                    if(!fill.bgColor) fill.bgColor = {};
                    if(y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
                    if(y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
                    if(y.tint) fill.bgColor.tint = parseFloat(y.tint);
                    /* Excel uses ARGB strings */
                    if(y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
                    break;
                case '<bgColor/>': case '</bgColor>': break;
    
                /* 18.8.19 fgColor CT_Color */
                case '<fgColor':
                    if(!fill.fgColor) fill.fgColor = {};
                    if(y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
                    if(y.tint) fill.fgColor.tint = parseFloat(y.tint);
                    /* Excel uses ARGB strings */
                    if(y.rgb) fill.fgColor.rgb = y.rgb.slice(-6);
                    break;
                case '<fgColor/>': case '</fgColor>': break;
    
                /* 18.8.38 stop CT_GradientStop */
                case '<stop': case '<stop/>': break;
                case '</stop>': break;
    
                /* 18.8.? color CT_Color */
                case '<color': case '<color/>': break;
                case '</color>': break;
    
                default: if(opts && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in fills');
            }
        });
    }
    
    /* 18.8.23 fonts CT_Fonts */
    function parse_fonts(t, styles, themes, opts) {
        styles.Fonts = [];
        var font = {};
        t[0].match(tagregex).forEach(function(x) {
            var y = parsexmltag(x);
            switch (y[0]) {
                case '<fonts': case '<fonts>': case '</fonts>': break;
    
                /* 18.8.22 font CT_Font */
                case '<font': case '<font>': break;
                case '</font>': case '<font/>':
                    styles.Fonts.push(font);
                    font = {};
                    break;
    
                /* 18.8.29 name CT_FontName */
                case '<name': if(y.val) font.name = y.val; break;
                case '<name/>': case '</name>': break;
    
                /* 18.8.2  b CT_BooleanProperty */
                case '<b': font.bold = y.val ? parsexmlbool(y.val) : 1; break;
                case '<b/>': font.bold = 1; break;
    
                /* 18.8.26 i CT_BooleanProperty */
                case '<i': font.italic = y.val ? parsexmlbool(y.val) : 1; break;
                case '<i/>': font.italic = 1; break;
    
                /* 18.4.13 u CT_UnderlineProperty */
                case '<u':
                    switch(y.val) {
                        case "none": font.underline = 0x00; break;
                        case "single": font.underline = 0x01; break;
                        case "double": font.underline = 0x02; break;
                        case "singleAccounting": font.underline = 0x21; break;
                        case "doubleAccounting": font.underline = 0x22; break;
                    } break;
                case '<u/>': font.underline = 1; break;
    
                /* 18.4.10 strike CT_BooleanProperty */
                case '<strike': font.strike = y.val ? parsexmlbool(y.val) : 1; break;
                case '<strike/>': font.strike = 1; break;
    
                /* 18.4.2  outline CT_BooleanProperty */
                case '<outline': font.outline = y.val ? parsexmlbool(y.val) : 1; break;
                case '<outline/>': font.outline = 1; break;
    
                /* 18.8.36 shadow CT_BooleanProperty */
                case '<shadow': font.shadow = y.val ? parsexmlbool(y.val) : 1; break;
                case '<shadow/>': font.shadow = 1; break;
    
                /* 18.8.12 condense CT_BooleanProperty */
                case '<condense': font.condense = y.val ? parsexmlbool(y.val) : 1; break;
                case '<condense/>': font.condense = 1; break;
    
                /* 18.8.17 extend CT_BooleanProperty */
                case '<extend': font.extend = y.val ? parsexmlbool(y.val) : 1; break;
                case '<extend/>': font.extend = 1; break;
    
                /* 18.4.11 sz CT_FontSize */
                case '<sz': if(y.val) font.sz = +y.val; break;
                case '<sz/>': case '</sz>': break;
    
                /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */
                case '<vertAlign': if(y.val) font.vertAlign = y.val; break;
                case '<vertAlign/>': case '</vertAlign>': break;
    
                /* 18.8.18 family CT_FontFamily */
                case '<family': if(y.val) font.family = parseInt(y.val,10); break;
                case '<family/>': case '</family>': break;
    
                /* 18.8.35 scheme CT_FontScheme */
                case '<scheme': if(y.val) font.scheme = y.val; break;
                case '<scheme/>': case '</scheme>': break;
    
                /* 18.4.1 charset CT_IntProperty */
                case '<charset':
                    if(y.val == '1') break;
                    y.codepage = CS2CP[parseInt(y.val, 10)];
                    break;
    
                /* 18.?.? color CT_Color */
                case '<color':
                    if(!font.color) font.color = {};
                    if(y.auto) font.color.auto = parsexmlbool(y.auto);
    
                    if(y.rgb) font.color.rgb = y.rgb.slice(-6);
                    else if(y.indexed) {
                        font.color.index = parseInt(y.indexed, 10);
                        var icv = XLSIcv[font.color.index];
                        if(font.color.index == 81) icv = XLSIcv[1];
                        if(!icv) throw new Error(x);
                        font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
                    } else if(y.theme) {
                        font.color.theme = parseInt(y.theme, 10);
                        if(y.tint) font.color.tint = parseFloat(y.tint);
                        if(y.theme && themes.themeElements && themes.themeElements.clrScheme) {
                            font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
                        }
                    }
    
                    break;
                case '<color/>': case '</color>': break;
    
                default: if(opts && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in fonts');
            }
        });
    }
    
    /* 18.8.31 numFmts CT_NumFmts */
    function parse_numFmts(t, styles, opts) {
        styles.NumberFmt = [];
        var k/*Array<number>*/ = (keys(SSF._table));
        for(var i=0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]];
        var m = t[0].match(tagregex);
        if(!m) return;
        for(i=0; i < m.length; ++i) {
            var y = parsexmltag(m[i]);
            switch(y[0]) {
                case '<numFmts': case '</numFmts>': case '<numFmts/>': case '<numFmts>': break;
                case '<numFmt': {
                    var f=unescapexml(utf8read(y.formatCode)), j=parseInt(y.numFmtId,10);
                    styles.NumberFmt[j] = f;
                    if(j>0) {
                        if(j > 0x188) {
                            for(j = 0x188; j > 0x3c; --j) if(styles.NumberFmt[j] == null) break;
                            styles.NumberFmt[j] = f;
                        }
                        SSF.load(f,j);
                    }
                } break;
                case '</numFmt>': break;
                default: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');
            }
        }
    }
    
    function write_numFmts(NF, opts) {
        var o = ["<numFmts>"];
        [[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
            for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) o[o.length] = (writextag('numFmt',null,{numFmtId:i,formatCode:escapexml(NF[i])}));
        });
        if(o.length === 1) return "";
        o[o.length] = ("</numFmts>");
        o[0] = writextag('numFmts', null, { count:o.length-2 }).replace("/>", ">");
        return o.join("");
    }
    
    /* 18.8.10 cellXfs CT_CellXfs */
    var cellXF_uint = [ "numFmtId", "fillId", "fontId", "borderId", "xfId" ];
    var cellXF_bool = [ "applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix" ];
    function parse_cellXfs(t, styles, opts) {
        styles.CellXf = [];
        var xf;
        t[0].match(tagregex).forEach(function(x) {
            var y = parsexmltag(x), i = 0;
            switch(y[0]) {
                case '<cellXfs': case '<cellXfs>': case '<cellXfs/>': case '</cellXfs>': break;
    
                /* 18.8.45 xf CT_Xf */
                case '<xf': case '<xf/>':
                    xf = y;
                    delete xf[0];
                    for(i = 0; i < cellXF_uint.length; ++i) if(xf[cellXF_uint[i]])
                        xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
                    for(i = 0; i < cellXF_bool.length; ++i) if(xf[cellXF_bool[i]])
                        xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]], "");
                    if(xf.numFmtId > 0x188) {
                        for(i = 0x188; i > 0x3c; --i) if(styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) { xf.numFmtId = i; break; }
                    }
                    styles.CellXf.push(xf); break;
                case '</xf>': break;
    
                /* 18.8.1 alignment CT_CellAlignment */
                case '<alignment': case '<alignment/>':
                    var alignment = {};
                    if(y.vertical) alignment.vertical = y.vertical;
                    if(y.horizontal) alignment.horizontal = y.horizontal;
                    if(y.textRotation != null) alignment.textRotation = y.textRotation;
                    if(y.indent) alignment.indent = y.indent;
                    if(y.wrapText) alignment.wrapText = y.wrapText;
                    xf.alignment = alignment;
                    break;
                case '</alignment>': break;
    
                /* 18.8.33 protection CT_CellProtection */
                case '<protection': case '</protection>': case '<protection/>': break;
    
                /* 18.2.10 extLst CT_ExtensionList ? */
                case '<extLst': case '</extLst>': break;
                case '<ext': break;
                default: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in cellXfs');
            }
        });
    }
    
    function write_cellXfs(cellXfs) {
        var o = [];
        o[o.length] = (writextag('cellXfs',null));
        cellXfs.forEach(function(c) { o[o.length] = (writextag('xf', null, c)); });
        o[o.length] = ("</cellXfs>");
        if(o.length === 2) return "";
        o[0] = writextag('cellXfs',null, {count:o.length-2}).replace("/>",">");
        return o.join("");
    }
    
    /* 18.8 Styles CT_Stylesheet*/
    var parse_sty_xml= (function make_pstyx() {
    var numFmtRegex = /<numFmts([^>]*)>[\S\s]*?<\/numFmts>/;
    var cellXfRegex = /<cellXfs([^>]*)>[\S\s]*?<\/cellXfs>/;
    var fillsRegex = /<fills([^>]*)>[\S\s]*?<\/fills>/;
    var fontsRegex = /<fonts([^>]*)>[\S\s]*?<\/fonts>/;
    var bordersRegex = /<borders([^>]*)>[\S\s]*?<\/borders>/;
    
    return function parse_sty_xml(data, themes, opts) {
        var styles = {};
        if(!data) return styles;
        data = data.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
        /* 18.8.39 styleSheet CT_Stylesheet */
        var t;
    
        /* 18.8.31 numFmts CT_NumFmts ? */
        if((t=data.match(numFmtRegex))) parse_numFmts(t, styles, opts);
    
        /* 18.8.23 fonts CT_Fonts ? */
        if((t=data.match(fontsRegex))) parse_fonts(t, styles, themes, opts);
    
        /* 18.8.21 fills CT_Fills ? */
        if((t=data.match(fillsRegex))) parse_fills(t, styles, themes, opts);
    
        /* 18.8.5  borders CT_Borders ? */
        if((t=data.match(bordersRegex))) parse_borders(t, styles, themes, opts);
    
        /* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */
    
        /* 18.8.10 cellXfs CT_CellXfs ? */
        if((t=data.match(cellXfRegex))) parse_cellXfs(t, styles, opts);
    
        /* 18.8.8  cellStyles CT_CellStyles ? */
        /* 18.8.15 dxfs CT_Dxfs ? */
        /* 18.8.42 tableStyles CT_TableStyles ? */
        /* 18.8.11 colors CT_Colors ? */
        /* 18.2.10 extLst CT_ExtensionList ? */
    
        return styles;
    };
    })();
    
    var STYLES_XML_ROOT = writextag('styleSheet', null, {
        'xmlns': XMLNS.main[0],
        'xmlns:vt': XMLNS.vt
    });
    
    RELS.STY = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles";
    
    function write_sty_xml(wb, opts) {
        var o = [XML_HEADER, STYLES_XML_ROOT], w;
        if(wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
        o[o.length] = ('<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>');
        o[o.length] = ('<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>');
        o[o.length] = ('<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>');
        o[o.length] = ('<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>');
        if((w = write_cellXfs(opts.cellXfs))) o[o.length] = (w);
        o[o.length] = ('<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>');
        o[o.length] = ('<dxfs count="0"/>');
        o[o.length] = ('<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>');
    
        if(o.length>2){ o[o.length] = ('</styleSheet>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.651 BrtFmt */
    function parse_BrtFmt(data, length) {
        var numFmtId = data.read_shift(2);
        var stFmtCode = parse_XLWideString(data,length-2);
        return [numFmtId, stFmtCode];
    }
    function write_BrtFmt(i, f, o) {
        if(!o) o = new_buf(6 + 4 * f.length);
        o.write_shift(2, i);
        write_XLWideString(f, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.653 BrtFont TODO */
    function parse_BrtFont(data, length, opts) {
        var out = ({});
    
        out.sz = data.read_shift(2) / 20;
    
        var grbit = parse_FontFlags(data, 2, opts);
        if(grbit.fCondense) out.condense = 1;
        if(grbit.fExtend) out.extend = 1;
        if(grbit.fShadow) out.shadow = 1;
        if(grbit.fOutline) out.outline = 1;
        if(grbit.fStrikeout) out.strike = 1;
        if(grbit.fItalic) out.italic = 1;
    
        var bls = data.read_shift(2);
        if(bls === 0x02BC) out.bold = 1;
    
        switch(data.read_shift(2)) {
            /* case 0: out.vertAlign = "baseline"; break; */
            case 1: out.vertAlign = "superscript"; break;
            case 2: out.vertAlign = "subscript"; break;
        }
    
        var underline = data.read_shift(1);
        if(underline != 0) out.underline = underline;
    
        var family = data.read_shift(1);
        if(family > 0) out.family = family;
    
        var bCharSet = data.read_shift(1);
        if(bCharSet > 0) out.charset = bCharSet;
    
        data.l++;
        out.color = parse_BrtColor(data, 8);
    
        switch(data.read_shift(1)) {
            /* case 0: out.scheme = "none": break; */
            case 1: out.scheme = "major"; break;
            case 2: out.scheme = "minor"; break;
        }
    
        out.name = parse_XLWideString(data, length - 21);
    
        return out;
    }
    function write_BrtFont(font, o) {
        if(!o) o = new_buf(25+4*32);
        o.write_shift(2, font.sz * 20);
        write_FontFlags(font, o);
        o.write_shift(2, font.bold ? 0x02BC : 0x0190);
        var sss = 0;
        if(font.vertAlign == "superscript") sss = 1;
        else if(font.vertAlign == "subscript") sss = 2;
        o.write_shift(2, sss);
        o.write_shift(1, font.underline || 0);
        o.write_shift(1, font.family || 0);
        o.write_shift(1, font.charset || 0);
        o.write_shift(1, 0);
        write_BrtColor(font.color, o);
        var scheme = 0;
        if(font.scheme == "major") scheme = 1;
        if(font.scheme == "minor") scheme = 2;
        o.write_shift(1, scheme);
        write_XLWideString(font.name, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.644 BrtFill */
    var XLSBFillPTNames = [
        "none",
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
    ];
    var rev_XLSBFillPTNames = (evert(XLSBFillPTNames));
    /* TODO: gradient fill representation */
    var parse_BrtFill = parsenoop;
    function write_BrtFill(fill, o) {
        if(!o) o = new_buf(4*3 + 8*7 + 16*1);
        var fls = rev_XLSBFillPTNames[fill.patternType];
        if(fls == null) fls = 0x28;
        o.write_shift(4, fls);
        var j = 0;
        if(fls != 0x28) {
            /* TODO: custom FG Color */
            write_BrtColor({auto:1}, o);
            /* TODO: custom BG Color */
            write_BrtColor({auto:1}, o);
    
            for(; j < 12; ++j) o.write_shift(4, 0);
        } else {
            for(; j < 4; ++j) o.write_shift(4, 0);
    
            for(; j < 12; ++j) o.write_shift(4, 0); /* TODO */
            /* iGradientType */
            /* xnumDegree */
            /* xnumFillToLeft */
            /* xnumFillToRight */
            /* xnumFillToTop */
            /* xnumFillToBottom */
            /* cNumStop */
            /* xfillGradientStop */
        }
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.816 BrtXF */
    function parse_BrtXF(data, length) {
        var tgt = data.l + length;
        var ixfeParent = data.read_shift(2);
        var ifmt = data.read_shift(2);
        data.l = tgt;
        return {ixfe:ixfeParent, numFmtId:ifmt };
    }
    function write_BrtXF(data, ixfeP, o) {
        if(!o) o = new_buf(16);
        o.write_shift(2, ixfeP||0);
        o.write_shift(2, data.numFmtId||0);
        o.write_shift(2, 0); /* iFont */
        o.write_shift(2, 0); /* iFill */
        o.write_shift(2, 0); /* ixBorder */
        o.write_shift(1, 0); /* trot */
        o.write_shift(1, 0); /* indent */
        o.write_shift(1, 0); /* flags */
        o.write_shift(1, 0); /* flags */
        o.write_shift(1, 0); /* xfGrbitAtr */
        o.write_shift(1, 0);
        return o;
    }
    
    /* [MS-XLSB] 2.5.4 Blxf TODO */
    function write_Blxf(data, o) {
        if(!o) o = new_buf(10);
        o.write_shift(1, 0); /* dg */
        o.write_shift(1, 0);
        o.write_shift(4, 0); /* color */
        o.write_shift(4, 0); /* color */
        return o;
    }
    /* [MS-XLSB] 2.4.299 BrtBorder TODO */
    var parse_BrtBorder = parsenoop;
    function write_BrtBorder(border, o) {
        if(!o) o = new_buf(51);
        o.write_shift(1, 0); /* diagonal */
        write_Blxf(null, o); /* top */
        write_Blxf(null, o); /* bottom */
        write_Blxf(null, o); /* left */
        write_Blxf(null, o); /* right */
        write_Blxf(null, o); /* diag */
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.755 BrtStyle TODO */
    function write_BrtStyle(style, o) {
        if(!o) o = new_buf(12+4*10);
        o.write_shift(4, style.xfId);
        o.write_shift(2, 1);
        o.write_shift(1, +style.builtinId);
        o.write_shift(1, 0); /* iLevel */
        write_XLNullableWideString(style.name || "", o);
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.269 BrtBeginTableStyles */
    function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
        var o = new_buf(4+256*2*4);
        o.write_shift(4, cnt);
        write_XLNullableWideString(defTableStyle, o);
        write_XLNullableWideString(defPivotStyle, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.1.7.50 Styles */
    function parse_sty_bin(data, themes, opts) {
        var styles = {};
        styles.NumberFmt = ([]);
        for(var y in SSF._table) styles.NumberFmt[y] = SSF._table[y];
    
        styles.CellXf = [];
        styles.Fonts = [];
        var state = [];
        var pass = false;
        recordhopper(data, function hopper_sty(val, R_n, RT) {
            switch(RT) {
                case 0x002C: /* 'BrtFmt' */
                    styles.NumberFmt[val[0]] = val[1]; SSF.load(val[1], val[0]);
                    break;
                case 0x002B: /* 'BrtFont' */
                    styles.Fonts.push(val);
                    if(val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
                        val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
                    }
                    break;
                case 0x0401: /* 'BrtKnownFonts' */ break;
                case 0x002D: /* 'BrtFill' */ break;
                case 0x002E: /* 'BrtBorder' */ break;
                case 0x002F: /* 'BrtXF' */
                    if(state[state.length - 1] == "BrtBeginCellXFs") {
                        styles.CellXf.push(val);
                    }
                    break;
                case 0x0030: /* 'BrtStyle' */
                case 0x01FB: /* 'BrtDXF' */
                case 0x023C: /* 'BrtMRUColor' */
                case 0x01DB: /* 'BrtIndexedColor': */
                    break;
    
                case 0x0493: /* 'BrtDXF14' */
                case 0x0836: /* 'BrtDXF15' */
                case 0x046A: /* 'BrtSlicerStyleElement' */
                case 0x0200: /* 'BrtTableStyleElement' */
                case 0x082F: /* 'BrtTimelineStyleElement' */
                /* case 'BrtUid' */
                    break;
    
                case 0x0023: /* 'BrtFRTBegin' */
                    pass = true; break;
                case 0x0024: /* 'BrtFRTEnd' */
                    pass = false; break;
                case 0x0025: /* 'BrtACBegin' */
                    state.push(R_n); break;
                case 0x0026: /* 'BrtACEnd' */
                    state.pop(); break;
    
                default:
                    if((R_n||"").indexOf("Begin") > 0) state.push(R_n);
                    else if((R_n||"").indexOf("End") > 0) state.pop();
                    else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
            }
        });
        return styles;
    }
    
    function write_FMTS_bin(ba, NF) {
        if(!NF) return;
        var cnt = 0;
        [[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
    for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) ++cnt;
        });
    
        if(cnt == 0) return;
        write_record(ba, "BrtBeginFmts", write_UInt32LE(cnt));
        [[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
    for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) write_record(ba, "BrtFmt", write_BrtFmt(i, NF[i]));
        });
        write_record(ba, "BrtEndFmts");
    }
    
    function write_FONTS_bin(ba, data) {
        var cnt = 1;
    
        if(cnt == 0) return;
        write_record(ba, "BrtBeginFonts", write_UInt32LE(cnt));
        write_record(ba, "BrtFont", write_BrtFont({
            sz:12,
            color: {theme:1},
            name: "Calibri",
            family: 2,
            scheme: "minor"
        }));
        /* 1*65491BrtFont [ACFONTS] */
        write_record(ba, "BrtEndFonts");
    }
    
    function write_FILLS_bin(ba, data) {
        var cnt = 2;
    
        if(cnt == 0) return;
        write_record(ba, "BrtBeginFills", write_UInt32LE(cnt));
        write_record(ba, "BrtFill", write_BrtFill({patternType:"none"}));
        write_record(ba, "BrtFill", write_BrtFill({patternType:"gray125"}));
        /* 1*65431BrtFill */
        write_record(ba, "BrtEndFills");
    }
    
    function write_BORDERS_bin(ba, data) {
        var cnt = 1;
    
        if(cnt == 0) return;
        write_record(ba, "BrtBeginBorders", write_UInt32LE(cnt));
        write_record(ba, "BrtBorder", write_BrtBorder({}));
        /* 1*65430BrtBorder */
        write_record(ba, "BrtEndBorders");
    }
    
    function write_CELLSTYLEXFS_bin(ba, data) {
        var cnt = 1;
        write_record(ba, "BrtBeginCellStyleXFs", write_UInt32LE(cnt));
        write_record(ba, "BrtXF", write_BrtXF({
            numFmtId:0,
            fontId:0,
            fillId:0,
            borderId:0
        }, 0xFFFF));
        /* 1*65430(BrtXF *FRT) */
        write_record(ba, "BrtEndCellStyleXFs");
    }
    
    function write_CELLXFS_bin(ba, data) {
        write_record(ba, "BrtBeginCellXFs", write_UInt32LE(data.length));
        data.forEach(function(c) { write_record(ba, "BrtXF", write_BrtXF(c,0)); });
        /* 1*65430(BrtXF *FRT) */
        write_record(ba, "BrtEndCellXFs");
    }
    
    function write_STYLES_bin(ba, data) {
        var cnt = 1;
    
        write_record(ba, "BrtBeginStyles", write_UInt32LE(1));
        write_record(ba, "BrtStyle", write_BrtStyle({
            xfId:0,
            builtinId:0,
            name:"Normal"
        }));
        /* 1*65430(BrtStyle *FRT) */
        write_record(ba, "BrtEndStyles");
    }
    
    function write_DXFS_bin(ba, data) {
        var cnt = 0;
    
        write_record(ba, "BrtBeginDXFs", write_UInt32LE(cnt));
        /* *2147483647(BrtDXF *FRT) */
        write_record(ba, "BrtEndDXFs");
    }
    
    function write_TABLESTYLES_bin(ba, data) {
        var cnt = 0;
    
        write_record(ba, "BrtBeginTableStyles", write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
        /* *TABLESTYLE */
        write_record(ba, "BrtEndTableStyles");
    }
    
    function write_COLORPALETTE_bin(ba, data) {
        return;
        /* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */
    }
    
    /* [MS-XLSB] 2.1.7.50 Styles */
    function write_sty_bin(wb, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginStyleSheet");
        write_FMTS_bin(ba, wb.SSF);
        write_FONTS_bin(ba, wb);
        write_FILLS_bin(ba, wb);
        write_BORDERS_bin(ba, wb);
        write_CELLSTYLEXFS_bin(ba, wb);
        write_CELLXFS_bin(ba, opts.cellXfs);
        write_STYLES_bin(ba, wb);
        write_DXFS_bin(ba, wb);
        write_TABLESTYLES_bin(ba, wb);
        write_COLORPALETTE_bin(ba, wb);
        /* FRTSTYLESHEET*/
        write_record(ba, "BrtEndStyleSheet");
        return ba.end();
    }
    RELS.THEME = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme";
    
    /* 20.1.6.2 clrScheme CT_ColorScheme */
    function parse_clrScheme(t, themes, opts) {
        themes.themeElements.clrScheme = [];
        var color = {};
        (t[0].match(tagregex)||[]).forEach(function(x) {
            var y = parsexmltag(x);
            switch(y[0]) {
                /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
                case '<a:clrScheme': case '</a:clrScheme>': break;
    
                /* 20.1.2.3.32 srgbClr CT_SRgbColor */
                case '<a:srgbClr':
                    color.rgb = y.val; break;
    
                /* 20.1.2.3.33 sysClr CT_SystemColor */
                case '<a:sysClr':
                    color.rgb = y.lastClr; break;
    
                /* 20.1.4.1.1 accent1 (Accent 1) */
                /* 20.1.4.1.2 accent2 (Accent 2) */
                /* 20.1.4.1.3 accent3 (Accent 3) */
                /* 20.1.4.1.4 accent4 (Accent 4) */
                /* 20.1.4.1.5 accent5 (Accent 5) */
                /* 20.1.4.1.6 accent6 (Accent 6) */
                /* 20.1.4.1.9 dk1 (Dark 1) */
                /* 20.1.4.1.10 dk2 (Dark 2) */
                /* 20.1.4.1.15 folHlink (Followed Hyperlink) */
                /* 20.1.4.1.19 hlink (Hyperlink) */
                /* 20.1.4.1.22 lt1 (Light 1) */
                /* 20.1.4.1.23 lt2 (Light 2) */
                case '<a:dk1>': case '</a:dk1>':
                case '<a:lt1>': case '</a:lt1>':
                case '<a:dk2>': case '</a:dk2>':
                case '<a:lt2>': case '</a:lt2>':
                case '<a:accent1>': case '</a:accent1>':
                case '<a:accent2>': case '</a:accent2>':
                case '<a:accent3>': case '</a:accent3>':
                case '<a:accent4>': case '</a:accent4>':
                case '<a:accent5>': case '</a:accent5>':
                case '<a:accent6>': case '</a:accent6>':
                case '<a:hlink>': case '</a:hlink>':
                case '<a:folHlink>': case '</a:folHlink>':
                    if (y[0].charAt(1) === '/') {
                        themes.themeElements.clrScheme.push(color);
                        color = {};
                    } else {
                        color.name = y[0].substring(3, y[0].length - 1);
                    }
                    break;
    
                default: if(opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');
            }
        });
    }
    
    /* 20.1.4.1.18 fontScheme CT_FontScheme */
    function parse_fontScheme(t, themes, opts) { }
    
    /* 20.1.4.1.15 fmtScheme CT_StyleMatrix */
    function parse_fmtScheme(t, themes, opts) { }
    
    var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
    var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
    var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
    
    /* 20.1.6.10 themeElements CT_BaseStyles */
    function parse_themeElements(data, themes, opts) {
        themes.themeElements = {};
    
        var t;
    
        [
            /* clrScheme CT_ColorScheme */
            ['clrScheme', clrsregex, parse_clrScheme],
            /* fontScheme CT_FontScheme */
            ['fontScheme', fntsregex, parse_fontScheme],
            /* fmtScheme CT_StyleMatrix */
            ['fmtScheme', fmtsregex, parse_fmtScheme]
        ].forEach(function(m) {
            if(!(t=data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');
            m[2](t, themes, opts);
        });
    }
    
    var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
    
    /* 14.2.7 Theme Part */
    function parse_theme_xml(data, opts) {
        /* 20.1.6.9 theme CT_OfficeStyleSheet */
        if(!data || data.length === 0) return parse_theme_xml(write_theme());
    
        var t;
        var themes = {};
    
        /* themeElements CT_BaseStyles */
        if(!(t=data.match(themeltregex))) throw new Error('themeElements not found in theme');
        parse_themeElements(t[0], themes, opts);
    
        return themes;
    }
    
    function write_theme(Themes, opts) {
        if(opts && opts.themeXLSX) return opts.themeXLSX;
        var o = [XML_HEADER];
        o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
        o[o.length] =  '<a:themeElements>';
    
        o[o.length] =   '<a:clrScheme name="Office">';
        o[o.length] =    '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
        o[o.length] =    '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
        o[o.length] =    '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
        o[o.length] =    '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
        o[o.length] =    '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
        o[o.length] =    '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
        o[o.length] =    '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
        o[o.length] =    '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
        o[o.length] =    '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
        o[o.length] =    '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
        o[o.length] =    '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
        o[o.length] =    '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
        o[o.length] =   '</a:clrScheme>';
    
        o[o.length] =   '<a:fontScheme name="Office">';
        o[o.length] =    '<a:majorFont>';
        o[o.length] =     '<a:latin typeface="Cambria"/>';
        o[o.length] =     '<a:ea typeface=""/>';
        o[o.length] =     '<a:cs typeface=""/>';
        o[o.length] =     '<a:font script="Jpan" typeface="ï¼­ï¼³ ï¼°ã‚´ã‚·ãƒƒã‚¯"/>';
        o[o.length] =     '<a:font script="Hang" typeface="ë§‘ì€ ê³ ë”•"/>';
        o[o.length] =     '<a:font script="Hans" typeface="å®‹ä½“"/>';
        o[o.length] =     '<a:font script="Hant" typeface="æ–°ç´°æ˜Žé«”"/>';
        o[o.length] =     '<a:font script="Arab" typeface="Times New Roman"/>';
        o[o.length] =     '<a:font script="Hebr" typeface="Times New Roman"/>';
        o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
        o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
        o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
        o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
        o[o.length] =     '<a:font script="Khmr" typeface="MoolBoran"/>';
        o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
        o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
        o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
        o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
        o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
        o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
        o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
        o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
        o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
        o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
        o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o[o.length] =     '<a:font script="Viet" typeface="Times New Roman"/>';
        o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
        o[o.length] =    '</a:majorFont>';
        o[o.length] =    '<a:minorFont>';
        o[o.length] =     '<a:latin typeface="Calibri"/>';
        o[o.length] =     '<a:ea typeface=""/>';
        o[o.length] =     '<a:cs typeface=""/>';
        o[o.length] =     '<a:font script="Jpan" typeface="ï¼­ï¼³ ï¼°ã‚´ã‚·ãƒƒã‚¯"/>';
        o[o.length] =     '<a:font script="Hang" typeface="ë§‘ì€ ê³ ë”•"/>';
        o[o.length] =     '<a:font script="Hans" typeface="å®‹ä½“"/>';
        o[o.length] =     '<a:font script="Hant" typeface="æ–°ç´°æ˜Žé«”"/>';
        o[o.length] =     '<a:font script="Arab" typeface="Arial"/>';
        o[o.length] =     '<a:font script="Hebr" typeface="Arial"/>';
        o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
        o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
        o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
        o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
        o[o.length] =     '<a:font script="Khmr" typeface="DaunPenh"/>';
        o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
        o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
        o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
        o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
        o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
        o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
        o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
        o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
        o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
        o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
        o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o[o.length] =     '<a:font script="Viet" typeface="Arial"/>';
        o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
        o[o.length] =    '</a:minorFont>';
        o[o.length] =   '</a:fontScheme>';
    
        o[o.length] =   '<a:fmtScheme name="Office">';
        o[o.length] =    '<a:fillStyleLst>';
        o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o[o.length] =     '<a:gradFill rotWithShape="1">';
        o[o.length] =      '<a:gsLst>';
        o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] =       '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] =      '</a:gsLst>';
        o[o.length] =      '<a:lin ang="16200000" scaled="1"/>';
        o[o.length] =     '</a:gradFill>';
        o[o.length] =     '<a:gradFill rotWithShape="1">';
        o[o.length] =      '<a:gsLst>';
        o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
        o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] =      '</a:gsLst>';
        o[o.length] =      '<a:lin ang="16200000" scaled="0"/>';
        o[o.length] =     '</a:gradFill>';
        o[o.length] =    '</a:fillStyleLst>';
        o[o.length] =    '<a:lnStyleLst>';
        o[o.length] =     '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] =     '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] =     '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] =    '</a:lnStyleLst>';
        o[o.length] =    '<a:effectStyleLst>';
        o[o.length] =     '<a:effectStyle>';
        o[o.length] =      '<a:effectLst>';
        o[o.length] =       '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
        o[o.length] =      '</a:effectLst>';
        o[o.length] =     '</a:effectStyle>';
        o[o.length] =     '<a:effectStyle>';
        o[o.length] =      '<a:effectLst>';
        o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o[o.length] =      '</a:effectLst>';
        o[o.length] =     '</a:effectStyle>';
        o[o.length] =     '<a:effectStyle>';
        o[o.length] =      '<a:effectLst>';
        o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o[o.length] =      '</a:effectLst>';
        o[o.length] =      '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
        o[o.length] =      '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
        o[o.length] =     '</a:effectStyle>';
        o[o.length] =    '</a:effectStyleLst>';
        o[o.length] =    '<a:bgFillStyleLst>';
        o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o[o.length] =     '<a:gradFill rotWithShape="1">';
        o[o.length] =      '<a:gsLst>';
        o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] =       '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
        o[o.length] =      '</a:gsLst>';
        o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
        o[o.length] =     '</a:gradFill>';
        o[o.length] =     '<a:gradFill rotWithShape="1">';
        o[o.length] =      '<a:gsLst>';
        o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
        o[o.length] =      '</a:gsLst>';
        o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
        o[o.length] =     '</a:gradFill>';
        o[o.length] =    '</a:bgFillStyleLst>';
        o[o.length] =   '</a:fmtScheme>';
        o[o.length] =  '</a:themeElements>';
    
        o[o.length] =  '<a:objectDefaults>';
        o[o.length] =   '<a:spDef>';
        o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
        o[o.length] =   '</a:spDef>';
        o[o.length] =   '<a:lnDef>';
        o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
        o[o.length] =   '</a:lnDef>';
        o[o.length] =  '</a:objectDefaults>';
        o[o.length] =  '<a:extraClrSchemeLst/>';
        o[o.length] = '</a:theme>';
        return o.join("");
    }
    /* [MS-XLS] 2.4.326 TODO: payload is a zip file */
    function parse_Theme(blob, length, opts) {
        var end = blob.l + length;
        var dwThemeVersion = blob.read_shift(4);
        if(dwThemeVersion === 124226) return;
        if(!opts.cellStyles || !jszip) { blob.l = end; return; }
        var data = blob.slice(blob.l);
        blob.l = end;
        var zip; try { zip = new jszip(data); } catch(e) { return; }
        var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
        if(!themeXML) return;
        return parse_theme_xml(themeXML, opts);
    }
    
    /* 2.5.49 */
    function parse_ColorTheme(blob, length) { return blob.read_shift(4); }
    
    /* 2.5.155 */
    function parse_FullColorExt(blob, length) {
        var o = {};
        o.xclrType = blob.read_shift(2);
        o.nTintShade = blob.read_shift(2);
        switch(o.xclrType) {
            case 0: blob.l += 4; break;
            case 1: o.xclrValue = parse_IcvXF(blob, 4); break;
            case 2: o.xclrValue = parse_LongRGBA(blob, 4); break;
            case 3: o.xclrValue = parse_ColorTheme(blob, 4); break;
            case 4: blob.l += 4; break;
        }
        blob.l += 8;
        return o;
    }
    
    /* 2.5.164 TODO: read 7 bits*/
    function parse_IcvXF(blob, length) {
        return parsenoop(blob, length);
    }
    
    /* 2.5.280 */
    function parse_XFExtGradient(blob, length) {
        return parsenoop(blob, length);
    }
    
    /* 2.5.108 */
    function parse_ExtProp(blob, length) {
        var extType = blob.read_shift(2);
        var cb = blob.read_shift(2);
        var o = [extType];
        switch(extType) {
            case 0x04: case 0x05: case 0x07: case 0x08:
            case 0x09: case 0x0A: case 0x0B: case 0x0D:
                o[1] = parse_FullColorExt(blob, cb); break;
            case 0x06: o[1] = parse_XFExtGradient(blob, cb); break;
            case 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 5 ? 1 : 2); break;
            default: throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
        }
        return o;
    }
    
    /* 2.4.355 */
    function parse_XFExt(blob, length) {
        var end = blob.l + length;
        blob.l += 2;
        var ixfe = blob.read_shift(2);
        blob.l += 2;
        var cexts = blob.read_shift(2);
        var ext = [];
        while(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));
        return {ixfe:ixfe, ext:ext};
    }
    
    /* xf is an XF, see parse_XFExt for xfext */
    function update_xfext(xf, xfext) {
        xfext.forEach(function(xfe) {
            switch(xfe[0]) { /* 2.5.108 extPropData */
                case 0x04: break; /* foreground color */
                case 0x05: break; /* background color */
                case 0x06: break; /* gradient fill */
                case 0x07: break; /* top cell border color */
                case 0x08: break; /* bottom cell border color */
                case 0x09: break; /* left cell border color */
                case 0x0a: break; /* right cell border color */
                case 0x0b: break; /* diagonal cell border color */
                case 0x0d: break; /* text color */
                case 0x0e: break; /* font scheme */
                case 0x0f: break; /* indentation level */
            }
        });
    }
    
    /* 18.6 Calculation Chain */
    function parse_cc_xml(data, name, opts) {
        var d = [];
        if(!data) return d;
        var l = 0, i = 1;
        (data.match(tagregex)||[]).forEach(function(x) {
            var y = parsexmltag(x);
            switch(y[0]) {
                case '<?xml': break;
                /* 18.6.2  calcChain CT_CalcChain 1 */
                case '<calcChain': case '<calcChain>': case '</calcChain>': break;
                /* 18.6.1  c CT_CalcCell 1 */
                case '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;
            }
        });
        return d;
    }
    
    function write_cc_xml(data, opts) { }
    
    /* [MS-XLSB] 2.6.4.1 */
    function parse_BrtCalcChainItem$(data, length) {
        var out = {};
        out.i = data.read_shift(4);
        var cell = {};
        cell.r = data.read_shift(4);
        cell.c = data.read_shift(4);
        out.r = encode_cell(cell);
        var flags = data.read_shift(1);
        if(flags & 0x2) out.l = '1';
        if(flags & 0x8) out.a = '1';
        return out;
    }
    
    /* 18.6 Calculation Chain */
    function parse_cc_bin(data, name, opts) {
        var out = [];
        var pass = false;
        recordhopper(data, function hopper_cc(val, R_n, RT) {
            switch(RT) {
                case 0x003F: /* 'BrtCalcChainItem$' */
                    out.push(val); break;
    
                default:
                    if((R_n||"").indexOf("Begin") > 0){/* empty */}
                    else if((R_n||"").indexOf("End") > 0){/* empty */}
                    else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
            }
        });
        return out;
    }
    
    function write_cc_bin(data, opts) { }
    /* 18.14 Supplementary Workbook Data */
    function parse_xlink_xml(data, name, _opts) {
        var opts = _opts || {};
        //if(opts.WTF) throw "XLSX External Link";
    }
    
    /* [MS-XLSB] 2.1.7.25 External Link */
    function parse_xlink_bin(data, name, _opts) {
        if(!data) return data;
        var opts = _opts || {};
    
        var pass = false, end = false;
    
        recordhopper(data, function xlink_parse(val, R_n, RT) {
            if(end) return;
            switch(RT) {
                case 0x0167: /* 'BrtSupTabs' */
                case 0x016B: /* 'BrtExternTableStart' */
                case 0x016C: /* 'BrtExternTableEnd' */
                case 0x016E: /* 'BrtExternRowHdr' */
                case 0x016F: /* 'BrtExternCellBlank' */
                case 0x0170: /* 'BrtExternCellReal' */
                case 0x0171: /* 'BrtExternCellBool' */
                case 0x0172: /* 'BrtExternCellError' */
                case 0x0173: /* 'BrtExternCellString' */
                case 0x01D8: /* 'BrtExternValueMeta' */
                case 0x0241: /* 'BrtSupNameStart' */
                case 0x0242: /* 'BrtSupNameValueStart' */
                case 0x0243: /* 'BrtSupNameValueEnd' */
                case 0x0244: /* 'BrtSupNameNum' */
                case 0x0245: /* 'BrtSupNameErr' */
                case 0x0246: /* 'BrtSupNameSt' */
                case 0x0247: /* 'BrtSupNameNil' */
                case 0x0248: /* 'BrtSupNameBool' */
                case 0x0249: /* 'BrtSupNameFmla' */
                case 0x024A: /* 'BrtSupNameBits' */
                case 0x024B: /* 'BrtSupNameEnd' */
                    break;
    
                case 0x0023: /* 'BrtFRTBegin' */
                    pass = true; break;
                case 0x0024: /* 'BrtFRTEnd' */
                    pass = false; break;
    
                default:
                    if((R_n||"").indexOf("Begin") > 0){/* empty */}
                    else if((R_n||"").indexOf("End") > 0){/* empty */}
                    else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT.toString(16) + " " + R_n);
            }
        }, opts);
    }
    RELS.IMG = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
    RELS.DRAW = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing";
    /* 20.5 DrawingML - SpreadsheetML Drawing */
    function parse_drawing(data, rels) {
        if(!data) return "??";
        /*
          Chartsheet Drawing:
           - 20.5.2.35 wsDr CT_Drawing
            - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
             - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
              - 20.1.2.2.16 graphic CT_GraphicalObject
               - 20.1.2.2.17 graphicData CT_GraphicalObjectData
              - chart reference
           the actual type is based on the URI of the graphicData
            TODO: handle embedded charts and other types of graphics
        */
        var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/)||["",""])[1];
    
        return rels['!id'][id].Target;
    }
    
    /* L.5.5.2 SpreadsheetML Comments + VML Schema */
    var _shapeid = 1024;
    function write_comments_vml(rId, comments) {
        var csize = [21600, 21600];
        /* L.5.2.1.2 Path Attribute */
        var bbox = ["m0,0l0",csize[1],csize[0],csize[1],csize[0],"0xe"].join(",");
        var o = [
            writextag("xml", null, { 'xmlns:v': XLMLNS.v, 'xmlns:o': XLMLNS.o, 'xmlns:x': XLMLNS.x, 'xmlns:mv': XLMLNS.mv }).replace(/\/>/,">"),
            writextag("o:shapelayout", writextag("o:idmap", null, {'v:ext':"edit", 'data':rId}), {'v:ext':"edit"}),
            writextag("v:shapetype", [
                writextag("v:stroke", null, {joinstyle:"miter"}),
                writextag("v:path", null, {gradientshapeok:"t", 'o:connecttype':"rect"})
            ].join(""), {id:"_x0000_t202", 'o:spt':202, coordsize:csize.join(","),path:bbox})
        ];
        while(_shapeid < rId * 1000) _shapeid += 1000;
    
        comments.map(function(x) { return decode_cell(x[0]); }).forEach(function(c,i) { o = o.concat([
        '<v:shape' + wxt_helper({
            id:'_x0000_s' + (++_shapeid),
            type:"#_x0000_t202",
            style:"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10;visibility:hidden",
            fillcolor:"#ECFAD4",
            strokecolor:"#edeaa1"
        }) + '>',
            writextag('v:fill', writextag("o:fill", null, {type:"gradientUnscaled", 'v:ext':"view"}), {'color2':"#BEFF82", 'angle':"-180", 'type':"gradient"}),
            writextag("v:shadow", null, {on:"t", 'obscured':"t"}),
            writextag("v:path", null, {'o:connecttype':"none"}),
            '<v:textbox><div style="text-align:left"></div></v:textbox>',
            '<x:ClientData ObjectType="Note">',
                '<x:MoveWithCells/>',
                '<x:SizeWithCells/>',
                /* Part 4 19.4.2.3 Anchor (Anchor) */
                writetag('x:Anchor', [c.c, 0, c.r, 0, c.c+3, 100, c.r+5, 100].join(",")),
                writetag('x:AutoFill', "False"),
                writetag('x:Row', String(c.r)),
                writetag('x:Column', String(c.c)),
                '<x:Visible/>',
            '</x:ClientData>',
        '</v:shape>'
        ]); });
        o.push('</xml>');
        return o.join("");
    }
    
    RELS.CMNT = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments";
    
    function parse_comments(zip, dirComments, sheets, sheetRels, opts) {
        for(var i = 0; i != dirComments.length; ++i) {
            var canonicalpath=dirComments[i];
            var comments=parse_cmnt(getzipdata(zip, canonicalpath.replace(/^\//,''), true), canonicalpath, opts);
            if(!comments || !comments.length) continue;
            // find the sheets targeted by these comments
            var sheetNames = keys(sheets);
            for(var j = 0; j != sheetNames.length; ++j) {
                var sheetName = sheetNames[j];
                var rels = sheetRels[sheetName];
                if(rels) {
                    var rel = rels[canonicalpath];
                    if(rel) insertCommentsIntoSheet(sheetName, sheets[sheetName], comments);
                }
            }
        }
    }
    
    function insertCommentsIntoSheet(sheetName, sheet, comments) {
        var dense = Array.isArray(sheet);
        var cell, r;
        comments.forEach(function(comment) {
            if(dense) {
                r = decode_cell(comment.ref);
                if(!sheet[r.r]) sheet[r.r] = [];
                cell = sheet[r.r][r.c];
            } else cell = sheet[comment.ref];
            if (!cell) {
                cell = {};
                if(dense) sheet[r.r][r.c] = cell;
                else sheet[comment.ref] = cell;
                var range = safe_decode_range(sheet["!ref"]||"BDWGO1000001:A1");
                var thisCell = decode_cell(comment.ref);
                if(range.s.r > thisCell.r) range.s.r = thisCell.r;
                if(range.e.r < thisCell.r) range.e.r = thisCell.r;
                if(range.s.c > thisCell.c) range.s.c = thisCell.c;
                if(range.e.c < thisCell.c) range.e.c = thisCell.c;
                var encoded = encode_range(range);
                if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
            }
    
            if (!cell.c) cell.c = [];
            var o = ({a: comment.author, t: comment.t, r: comment.r});
            if(comment.h) o.h = comment.h;
            cell.c.push(o);
        });
    }
    
    /* 18.7 Comments */
    function parse_comments_xml(data, opts) {
        /* 18.7.6 CT_Comments */
        if(data.match(/<(?:\w+:)?comments *\/>/)) return [];
        var authors = [];
        var commentList = [];
        var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
        if(authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
            if(x === "" || x.trim() === "") return;
            var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
            if(a) authors.push(a[1]);
        });
        var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
        if(cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x, index) {
            if(x === "" || x.trim() === "") return;
            var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
            if(!cm) return;
            var y = parsexmltag(cm[0]);
            var comment = ({ author: y.authorId && authors[y.authorId] || "sheetjsghost", ref: y.ref, guid: y.guid });
            var cell = decode_cell(y.ref);
            if(opts.sheetRows && opts.sheetRows <= cell.r) return;
            var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
            var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {r:"",t:"",h:""};
            comment.r = rt.r;
            if(rt.r == "<t></t>") rt.t = rt.h = "";
            comment.t = rt.t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");
            if(opts.cellHTML) comment.h = rt.h;
            commentList.push(comment);
        });
        return commentList;
    }
    
    var CMNT_XML_ROOT = writextag('comments', null, { 'xmlns': XMLNS.main[0] });
    function write_comments_xml(data, opts) {
        var o = [XML_HEADER, CMNT_XML_ROOT];
    
        var iauthor = [];
        o.push("<authors>");
        data.map(function(x) { return x[1]; }).forEach(function(comment) {
            comment.map(function(x) { return escapexml(x.a); }).forEach(function(a) {
                if(iauthor.indexOf(a) > -1) return;
                iauthor.push(a);
                o.push("<author>" + a + "</author>");
            });
        });
        o.push("</authors>");
        o.push("<commentList>");
        data.forEach(function(d) {
            d[1].forEach(function(c) {
                /* 18.7.3 CT_Comment */
                o.push('<comment ref="' + d[0] + '" authorId="' + iauthor.indexOf(escapexml(c.a)) + '"><text>');
                o.push(writetag("t", c.t == null ? "" : c.t));
                o.push('</text></comment>');
            });
        });
        o.push("</commentList>");
        if(o.length>2) { o[o.length] = ('</comments>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.28 BrtBeginComment */
    function parse_BrtBeginComment(data, length) {
        var out = {};
        out.iauthor = data.read_shift(4);
        var rfx = parse_UncheckedRfX(data, 16);
        out.rfx = rfx.s;
        out.ref = encode_cell(rfx.s);
        data.l += 16; /*var guid = parse_GUID(data); */
        return out;
    }
    function write_BrtBeginComment(data, o) {
        if(o == null) o = new_buf(36);
        o.write_shift(4, data[1].iauthor);
        write_UncheckedRfX((data[0]), o);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
    }
    
    /* [MS-XLSB] 2.4.324 BrtCommentAuthor */
    var parse_BrtCommentAuthor = parse_XLWideString;
    function write_BrtCommentAuthor(data) { return write_XLWideString(data.slice(0, 54)); }
    
    /* [MS-XLSB] 2.1.7.8 Comments */
    function parse_comments_bin(data, opts) {
        var out = [];
        var authors = [];
        var c = {};
        var pass = false;
        recordhopper(data, function hopper_cmnt(val, R_n, RT) {
            switch(RT) {
                case 0x0278: /* 'BrtCommentAuthor' */
                    authors.push(val); break;
                case 0x027B: /* 'BrtBeginComment' */
                    c = val; break;
                case 0x027D: /* 'BrtCommentText' */
                    c.t = val.t; c.h = val.h; c.r = val.r; break;
                case 0x027C: /* 'BrtEndComment' */
                    c.author = authors[c.iauthor];
                    delete c.iauthor;
                    if(opts.sheetRows && opts.sheetRows <= c.rfx.r) break;
                    if(!c.t) c.t = "";
                    delete c.rfx; out.push(c); break;
    
                /* case 'BrtUid': */
    
                case 0x0023: /* 'BrtFRTBegin' */
                    pass = true; break;
                case 0x0024: /* 'BrtFRTEnd' */
                    pass = false; break;
                case 0x0025: /* 'BrtACBegin' */ break;
                case 0x0026: /* 'BrtACEnd' */ break;
    
    
                default:
                    if((R_n||"").indexOf("Begin") > 0){/* empty */}
                    else if((R_n||"").indexOf("End") > 0){/* empty */}
                    else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
            }
        });
        return out;
    }
    
    function write_comments_bin(data, opts) {
        var ba = buf_array();
        var iauthor = [];
        write_record(ba, "BrtBeginComments");
    
        write_record(ba, "BrtBeginCommentAuthors");
        data.forEach(function(comment) {
            comment[1].forEach(function(c) {
                if(iauthor.indexOf(c.a) > -1) return;
                iauthor.push(c.a.slice(0,54));
                write_record(ba, "BrtCommentAuthor", write_BrtCommentAuthor(c.a));
            });
        });
        write_record(ba, "BrtEndCommentAuthors");
    
        write_record(ba, "BrtBeginCommentList");
        data.forEach(function(comment) {
            comment[1].forEach(function(c) {
                c.iauthor = iauthor.indexOf(c.a);
                var range = {s:decode_cell(comment[0]),e:decode_cell(comment[0])};
                write_record(ba, "BrtBeginComment", write_BrtBeginComment([range, c]));
                if(c.t && c.t.length > 0) write_record(ba, "BrtCommentText", write_BrtCommentText(c));
                write_record(ba, "BrtEndComment");
                delete c.iauthor;
            });
        });
        write_record(ba, "BrtEndCommentList");
    
        write_record(ba, "BrtEndComments");
        return ba.end();
    }
    function make_vba_xls(cfb) {
        var newcfb = CFB.utils.cfb_new({root:"R"});
        cfb.FullPaths.forEach(function(p, i) {
            if(p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/)) return;
            var newpath = p.replace(/^[^/]*/,"R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
            CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
        });
        return CFB.write(newcfb);
    }
    
    function fill_vba_xls(cfb, vba) {
        vba.FullPaths.forEach(function(p, i) {
            if(i == 0) return;
            var newpath = p.replace(/[^/]*[/]/, "/_VBA_PROJECT_CUR/");
            if(newpath.slice(-1) !== "/") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);
        });
    }
    
    var VBAFMTS = [ "xlsb", "xlsm", "xlam", "biff8", "xla" ];
    
    RELS.DS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet";
    RELS.MS = "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet";
    
    /* macro and dialog sheet stubs */
    function parse_ds_bin(data, opts, idx, rels, wb, themes, styles) { return {'!type':'dialog'}; }
    function parse_ds_xml(data, opts, idx, rels, wb, themes, styles) { return {'!type':'dialog'}; }
    function parse_ms_bin(data, opts, idx, rels, wb, themes, styles) { return {'!type':'macro'}; }
    function parse_ms_xml(data, opts, idx, rels, wb, themes, styles) { return {'!type':'macro'}; }
    /* TODO: it will be useful to parse the function str */
    var rc_to_a1 = (function(){
        var rcregex = /(^|[^A-Za-z])R(\[?)(-?\d+|)\]?C(\[?)(-?\d+|)\]?/g;
        var rcbase = ({r:0,c:0});
        function rcfunc($$,$1,$2,$3,$4,$5) {
            var R = $3.length>0?parseInt($3,10)|0:0, C = $5.length>0?parseInt($5,10)|0:0;
            if(C<0 && $4.length === 0) C=0;
            var cRel = false, rRel = false;
            if($4.length > 0 || $5.length == 0) cRel = true; if(cRel) C += rcbase.c; else --C;
            if($2.length > 0 || $3.length == 0) rRel = true; if(rRel) R += rcbase.r; else --R;
            return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
        }
        return function rc_to_a1(fstr, base) {
            rcbase = base;
            return fstr.replace(rcregex, rcfunc);
        };
    })();
    
    var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)([1-9]\d{0,5}|10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6])(?![_.\(A-Za-z0-9])/g;
    var a1_to_rc =(function(){
        return function a1_to_rc(fstr, base) {
            return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5, off, str) {
                var c = decode_col($3) - ($2 ? 0 : base.c);
                var r = decode_row($5) - ($4 ? 0 : base.r);
                var R = (r == 0 ? "" : !$4 ? "[" + r + "]" : (r+1));
                var C = (c == 0 ? "" : !$2 ? "[" + c + "]" : (c+1));
                return $1 + "R" + R + "C" + C;
            });
        };
    })();
    
    /* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */
    function shift_formula_str(f, delta) {
        return f.replace(crefregex, function($0, $1, $2, $3, $4, $5, off, str) {
            return $1+($2=="$" ? $2+$3 : encode_col(decode_col($3)+delta.c))+($4=="$" ? $4+$5 : encode_row(decode_row($5) + delta.r));
        });
    }
    
    function shift_formula_xlsx(f, range, cell) {
        var r = decode_range(range), s = r.s, c = decode_cell(cell);
        var delta = {r:c.r - s.r, c:c.c - s.c};
        return shift_formula_str(f, delta);
    }
    
    /* TODO: parse formula */
    function fuzzyfmla(f) {
        if(f.length == 1) return false;
        return true;
    }
    
    function _xlfn(f) {
        return f.replace(/_xlfn\./g,"");
    }
    /* --- formula references point to MS-XLS --- */
    /* Small helpers */
    function parseread(l) { return function(blob, length) { blob.l+=l; return; }; }
    function parseread1(blob) { blob.l+=1; return; }
    
    /* Rgce Helpers */
    
    /* 2.5.51 */
    function parse_ColRelU(blob, length) {
        var c = blob.read_shift(length == 1 ? 1 : 2);
        return [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];
    }
    
    /* [MS-XLS] 2.5.198.105 */
    /* [MS-XLSB] 2.5.97.89 */
    function parse_RgceArea(blob, length, opts) {
        var w = 2;
        if(opts) {
            if(opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);
            else if(opts.biff == 12) w = 4;
        }
        var r=blob.read_shift(w), R=blob.read_shift(w);
        var c=parse_ColRelU(blob, 2);
        var C=parse_ColRelU(blob, 2);
        return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
    }
    /* BIFF 2-5 encodes flags in the row field */
    function parse_RgceArea_BIFF2(blob) {
        var r=parse_ColRelU(blob, 2), R=parse_ColRelU(blob, 2);
        var c=blob.read_shift(1);
        var C=blob.read_shift(1);
        return { s:{r:r[0], c:c, cRel:r[1], rRel:r[2]}, e:{r:R[0], c:C, cRel:R[1], rRel:R[2]} };
    }
    
    /* 2.5.198.105 TODO */
    function parse_RgceAreaRel(blob, length) {
        var r=blob.read_shift(length == 12 ? 4 : 2), R=blob.read_shift(length == 12 ? 4 : 2);
        var c=parse_ColRelU(blob, 2);
        var C=parse_ColRelU(blob, 2);
        return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
    }
    
    /* 2.5.198.109 */
    function parse_RgceLoc(blob, length, opts) {
        if(opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);
        var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
        var c = parse_ColRelU(blob, 2);
        return {r:r, c:c[0], cRel:c[1], rRel:c[2]};
    }
    function parse_RgceLoc_BIFF2(blob, length, opts) {
        var r = parse_ColRelU(blob, 2);
        var c = blob.read_shift(1);
        return {r:r[0], c:c, cRel:r[1], rRel:r[2]};
    }
    
    /* 2.5.198.107 , 2.5.47 */
    function parse_RgceElfLoc(blob, length, opts) {
        var r = blob.read_shift(2);
        var c = blob.read_shift(2);
        return {r:r, c:c & 0xFF, fQuoted:!!(c & 0x4000), cRel:c>>15, rRel:c>>15 };
    }
    
    /* [MS-XLS] 2.5.198.111 TODO */
    /* [MS-XLSB] 2.5.97.92 TODO */
    function parse_RgceLocRel(blob, length, opts) {
        var biff = opts && opts.biff ? opts.biff : 8;
        if(biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);
        var r = blob.read_shift(biff >= 12 ? 4 : 2);
        var cl = blob.read_shift(2);
        var cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;
        cl &= 0x3FFF;
        if(rRel == 1) while(r > 0x7FFFF) r -= 0x100000;
        if(cRel == 1) while(cl > 0x1FFF) cl = cl - 0x4000;
        return {r:r,c:cl,cRel:cRel,rRel:rRel};
    }
    function parse_RgceLocRel_BIFF2(blob, length) {
        var rl = blob.read_shift(2);
        var c = blob.read_shift(1);
        var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;
        rl &= 0x3FFF;
        if(rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
        if(cRel == 1 && c >= 0x80) c = c - 0x100;
        return {r:rl,c:c,cRel:cRel,rRel:rRel};
    }
    
    /* Ptg Tokens */
    
    /* 2.5.198.27 */
    function parse_PtgArea(blob, length, opts) {
        var type = (blob[blob.l++] & 0x60) >> 5;
        var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
        return [type, area];
    }
    
    /* [MS-XLS] 2.5.198.28 */
    /* [MS-XLSB] 2.5.97.19 */
    function parse_PtgArea3d(blob, length, opts) {
        var type = (blob[blob.l++] & 0x60) >> 5;
        var ixti = blob.read_shift(2, 'i');
        var w = 8;
        if(opts) switch(opts.biff) {
            case 5: blob.l += 12; w = 6; break;
            case 12: w = 12; break;
        }
        var area = parse_RgceArea(blob, w, opts);
        return [type, ixti, area];
    }
    
    /* 2.5.198.29 */
    function parse_PtgAreaErr(blob, length, opts) {
        var type = (blob[blob.l++] & 0x60) >> 5;
        blob.l += opts && opts.biff > 8 ? 12 : 8;
        return [type];
    }
    /* 2.5.198.30 */
    function parse_PtgAreaErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 0x60) >> 5;
        var ixti = blob.read_shift(2);
        var w = 8;
        if(opts) switch(opts.biff) {
            case 5: blob.l += 12; w = 6; break;
            case 12: w = 12; break;
        }
        blob.l += w;
        return [type, ixti];
    }
    
    /* 2.5.198.31 */
    function parse_PtgAreaN(blob, length, opts) {
        var type = (blob[blob.l++] & 0x60) >> 5;
        var area = parse_RgceAreaRel(blob, opts && opts.biff > 8 ? 12 : 8, opts);
        return [type, area];
    }
    
    /* [MS-XLS] 2.5.198.32 */
    /* [MS-XLSB] 2.5.97.23 */
    function parse_PtgArray(blob, length, opts) {
        var type = (blob[blob.l++] & 0x60) >> 5;
        blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
        return [type];
    }
    
    /* 2.5.198.33 */
    function parse_PtgAttrBaxcel(blob, length) {
        var bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */
        var bitBaxcel = 1;
        blob.l += 4;
        return [bitSemi, bitBaxcel];
    }
    
    /* 2.5.198.34 */
    function parse_PtgAttrChoose(blob, length, opts) {
        blob.l +=2;
        var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var o = [];
        /* offset is 1 less than the number of elements */
        for(var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
        return o;
    }
    
    /* 2.5.198.35 */
    function parse_PtgAttrGoto(blob, length, opts) {
        var bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;
        blob.l += 2;
        return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
    }
    
    /* 2.5.198.36 */
    function parse_PtgAttrIf(blob, length, opts) {
        var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
    }
    
    /* [MS-XLSB] 2.5.97.28 */
    function parse_PtgAttrIfError(blob, length) {
        var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(2)];
    }
    
    /* 2.5.198.37 */
    function parse_PtgAttrSemi(blob, length, opts) {
        var bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        return [bitSemi];
    }
    
    /* 2.5.198.40 (used by PtgAttrSpace and PtgAttrSpaceSemi) */
    function parse_PtgAttrSpaceType(blob, length) {
        var type = blob.read_shift(1), cch = blob.read_shift(1);
        return [type, cch];
    }
    
    /* 2.5.198.38 */
    function parse_PtgAttrSpace(blob, length) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
    }
    
    /* 2.5.198.39 */
    function parse_PtgAttrSpaceSemi(blob, length) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
    }
    
    /* 2.5.198.84 TODO */
    function parse_PtgRef(blob, length, opts) {
        var ptg = blob[blob.l] & 0x1F;
        var type = (blob[blob.l] & 0x60)>>5;
        blob.l += 1;
        var loc = parse_RgceLoc(blob, 0, opts);
        return [type, loc];
    }
    
    /* 2.5.198.88 TODO */
    function parse_PtgRefN(blob, length, opts) {
        var type = (blob[blob.l] & 0x60)>>5;
        blob.l += 1;
        var loc = parse_RgceLocRel(blob, 0, opts);
        return [type, loc];
    }
    
    /* 2.5.198.85 TODO */
    function parse_PtgRef3d(blob, length, opts) {
        var type = (blob[blob.l] & 0x60)>>5;
        blob.l += 1;
        var ixti = blob.read_shift(2); // XtiIndex
        var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel
        return [type, ixti, loc];
    }
    
    
    /* 2.5.198.62 TODO */
    function parse_PtgFunc(blob, length, opts) {
        var ptg = blob[blob.l] & 0x1F;
        var type = (blob[blob.l] & 0x60)>>5;
        blob.l += 1;
        var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
        return [FtabArgc[iftab], Ftab[iftab], type];
    }
    /* 2.5.198.63 TODO */
    function parse_PtgFuncVar(blob, length, opts) {
        blob.l++;
        var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [0, blob.read_shift(1)]: parsetab(blob);
        return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
    }
    
    function parsetab(blob, length) {
        return [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];
    }
    
    /* 2.5.198.41 */
    function parse_PtgAttrSum(blob, length, opts) {
        blob.l += opts && opts.biff == 2 ? 3 : 4; return;
    }
    
    /* 2.5.198.43 */
    var parse_PtgConcat = parseread1;
    
    /* 2.5.198.58 */
    function parse_PtgExp(blob, length, opts) {
        blob.l++;
        if(opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];
        var row = blob.read_shift(2);
        var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [row, col];
    }
    
    /* 2.5.198.57 */
    function parse_PtgErr(blob, length) { blob.l++; return BErr[blob.read_shift(1)]; }
    
    /* 2.5.198.66 */
    function parse_PtgInt(blob, length) { blob.l++; return blob.read_shift(2); }
    
    /* 2.5.198.42 */
    function parse_PtgBool(blob, length) { blob.l++; return blob.read_shift(1)!==0;}
    
    /* 2.5.198.79 */
    function parse_PtgNum(blob, length) { blob.l++; return parse_Xnum(blob, 8); }
    
    /* 2.5.198.89 */
    function parse_PtgStr(blob, length, opts) { blob.l++; return parse_ShortXLUnicodeString(blob, length-1, opts); }
    
    /* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */
    /* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */
    function parse_SerAr(blob, biff) {
        var val = [blob.read_shift(1)];
        if(biff == 12) switch(val[0]) {
            case 0x02: val[0] = 0x04; break; /* SerBool */
            case 0x04: val[0] = 0x10; break; /* SerErr */
            case 0x00: val[0] = 0x01; break; /* SerNum */
            case 0x01: val[0] = 0x02; break; /* SerStr */
        }
        switch(val[0]) {
            /* 2.5.192.113 */
            case 0x04: /* SerBool -- boolean */
                val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
                blob.l += 7; break;
            /* 2.5.192.114 */
            case 0x10: /* SerErr -- error */
                val[1] = BErr[blob[blob.l]];
                blob.l += 8; break;
            /* 2.5.192.115 */
            case 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */
                blob.l += 8; break;
            /* 2.5.192.116 */
            case 0x01: /* SerNum -- Xnum */
                val[1] = parse_Xnum(blob, 8); break;
            /* 2.5.192.117 */
            case 0x02: /* SerStr -- XLUnicodeString (<256 chars) */
                val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;
            // default: throw "Bad SerAr: " + val[0]; /* Unreachable */
        }
        return val;
    }
    
    /* 2.5.198.61 */
    function parse_PtgExtraMem(blob, cce) {
        var count = blob.read_shift(2);
        var out = [];
        for(var i = 0; i != count; ++i) out.push(parse_Ref8U(blob, 8));
        return out;
    }
    
    /* 2.5.198.59 */
    function parse_PtgExtraArray(blob, length, opts) {
        var rows = 0, cols = 0;
        if(opts.biff == 12) {
            rows = blob.read_shift(4); // DRw
            cols = blob.read_shift(4); // DCol
        } else {
            cols = 1 + blob.read_shift(1); //DColByteU
            rows = 1 + blob.read_shift(2); //DRw
        }
        if(opts.biff >= 2 && opts.biff < 8) { --rows; if(--cols == 0) cols = 0x100; }
        // $FlowIgnore
        for(var i = 0, o = []; i != rows && (o[i] = []); ++i)
            for(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);
        return o;
    }
    
    /* 2.5.198.76 */
    function parse_PtgName(blob, length, opts) {
        var type = (blob.read_shift(1) >>> 5) & 0x03;
        var w = (!opts || (opts.biff >= 8)) ? 4 : 2;
        var nameindex = blob.read_shift(w);
        switch(opts.biff) {
            case 2: blob.l += 5; break;
            case 3: case 4: blob.l += 8; break;
            case 5: blob.l += 12; break;
        }
        return [type, 0, nameindex];
    }
    
    /* 2.5.198.77 */
    function parse_PtgNameX(blob, length, opts) {
        if(opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);
        var type = (blob.read_shift(1) >>> 5) & 0x03;
        var ixti = blob.read_shift(2); // XtiIndex
        var nameindex = blob.read_shift(4);
        return [type, ixti, nameindex];
    }
    function parse_PtgNameX_BIFF5(blob, length, opts) {
        var type = (blob.read_shift(1) >>> 5) & 0x03;
        var ixti = blob.read_shift(2, 'i'); // XtiIndex
        blob.l += 8;
        var nameindex = blob.read_shift(2);
        blob.l += 12;
        return [type, ixti, nameindex];
    }
    
    /* 2.5.198.70 */
    function parse_PtgMemArea(blob, length, opts) {
        var type = (blob.read_shift(1) >>> 5) & 0x03;
        blob.l += (opts && opts.biff == 2 ? 3 : 4);
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
    }
    
    /* 2.5.198.72 */
    function parse_PtgMemFunc(blob, length, opts) {
        var type = (blob.read_shift(1) >>> 5) & 0x03;
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
    }
    
    
    /* 2.5.198.86 */
    function parse_PtgRefErr(blob, length, opts) {
        var type = (blob.read_shift(1) >>> 5) & 0x03;
        blob.l += 4;
        if(opts.biff == 12) blob.l += 2;
        return [type];
    }
    
    /* 2.5.198.87 */
    function parse_PtgRefErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 0x60) >> 5;
        var ixti = blob.read_shift(2);
        var w = 4;
        if(opts) switch(opts.biff) {
            case 5: throw new Error("PtgRefErr3d -- 5"); // TODO: find test case
            case 12: w = 6; break;
        }
        blob.l += w;
        return [type, ixti];
    }
    
    /* 2.5.198.26 */
    var parse_PtgAdd = parseread1;
    /* 2.5.198.45 */
    var parse_PtgDiv = parseread1;
    /* 2.5.198.56 */
    var parse_PtgEq = parseread1;
    /* 2.5.198.64 */
    var parse_PtgGe = parseread1;
    /* 2.5.198.65 */
    var parse_PtgGt = parseread1;
    /* 2.5.198.67 */
    var parse_PtgIsect = parseread1;
    /* 2.5.198.68 */
    var parse_PtgLe = parseread1;
    /* 2.5.198.69 */
    var parse_PtgLt = parseread1;
    /* 2.5.198.74 */
    var parse_PtgMissArg = parseread1;
    /* 2.5.198.75 */
    var parse_PtgMul = parseread1;
    /* 2.5.198.78 */
    var parse_PtgNe = parseread1;
    /* 2.5.198.80 */
    var parse_PtgParen = parseread1;
    /* 2.5.198.81 */
    var parse_PtgPercent = parseread1;
    /* 2.5.198.82 */
    var parse_PtgPower = parseread1;
    /* 2.5.198.83 */
    var parse_PtgRange = parseread1;
    /* 2.5.198.90 */
    var parse_PtgSub = parseread1;
    /* 2.5.198.93 */
    var parse_PtgUminus = parseread1;
    /* 2.5.198.94 */
    var parse_PtgUnion = parseread1;
    /* 2.5.198.95 */
    var parse_PtgUplus = parseread1;
    
    /* 2.5.198.71 */
    var parse_PtgMemErr = parsenoop;
    /* 2.5.198.73 */
    var parse_PtgMemNoMem = parsenoop;
    /* 2.5.198.92 */
    var parse_PtgTbl = parsenoop;
    
    function parse_PtgElfLoc(blob, length, opts) {
        blob.l += 2;
        return [parse_RgceElfLoc(blob, 4, opts)];
    }
    function parse_PtgElfNoop(blob, length, opts) {
        blob.l += 6;
        return [];
    }
    /* 2.5.198.46 */
    var parse_PtgElfCol = parse_PtgElfLoc;
    /* 2.5.198.47 */
    var parse_PtgElfColS = parse_PtgElfNoop;
    /* 2.5.198.48 */
    var parse_PtgElfColSV = parse_PtgElfNoop;
    /* 2.5.198.49 */
    var parse_PtgElfColV = parse_PtgElfLoc;
    /* 2.5.198.50 */
    function parse_PtgElfLel(blob, length, opts) {
        blob.l += 2;
        return [parseuint16(blob), blob.read_shift(2) & 0x01];
    }
    /* 2.5.198.51 */
    var parse_PtgElfRadical = parse_PtgElfLoc;
    /* 2.5.198.52 */
    var parse_PtgElfRadicalLel = parse_PtgElfLel;
    /* 2.5.198.53 */
    var parse_PtgElfRadicalS = parse_PtgElfNoop;
    /* 2.5.198.54 */
    var parse_PtgElfRw = parse_PtgElfLoc;
    /* 2.5.198.55 */
    var parse_PtgElfRwV = parse_PtgElfLoc;
    
    /* [MS-XLSB] 2.5.97.52 */
    function parse_PtgList(blob, length, opts) {
        blob.l += 2;
        var ixti = blob.read_shift(2);
        blob.l += 10;
        return {};
    }
    /* 2.5.198.91 */
    function parse_PtgSxName(blob, length, opts) {
        blob.l += 2;
        return [blob.read_shift(4)];
    }
    
    /* 2.5.198.25 */
    var PtgTypes = {
    0x01: { n:'PtgExp', f:parse_PtgExp },
    0x02: { n:'PtgTbl', f:parse_PtgTbl },
    0x03: { n:'PtgAdd', f:parse_PtgAdd },
    0x04: { n:'PtgSub', f:parse_PtgSub },
    0x05: { n:'PtgMul', f:parse_PtgMul },
    0x06: { n:'PtgDiv', f:parse_PtgDiv },
    0x07: { n:'PtgPower', f:parse_PtgPower },
    0x08: { n:'PtgConcat', f:parse_PtgConcat },
    0x09: { n:'PtgLt', f:parse_PtgLt },
    0x0A: { n:'PtgLe', f:parse_PtgLe },
    0x0B: { n:'PtgEq', f:parse_PtgEq },
    0x0C: { n:'PtgGe', f:parse_PtgGe },
    0x0D: { n:'PtgGt', f:parse_PtgGt },
    0x0E: { n:'PtgNe', f:parse_PtgNe },
    0x0F: { n:'PtgIsect', f:parse_PtgIsect },
    0x10: { n:'PtgUnion', f:parse_PtgUnion },
    0x11: { n:'PtgRange', f:parse_PtgRange },
    0x12: { n:'PtgUplus', f:parse_PtgUplus },
    0x13: { n:'PtgUminus', f:parse_PtgUminus },
    0x14: { n:'PtgPercent', f:parse_PtgPercent },
    0x15: { n:'PtgParen', f:parse_PtgParen },
    0x16: { n:'PtgMissArg', f:parse_PtgMissArg },
    0x17: { n:'PtgStr', f:parse_PtgStr },
    0x1C: { n:'PtgErr', f:parse_PtgErr },
    0x1D: { n:'PtgBool', f:parse_PtgBool },
    0x1E: { n:'PtgInt', f:parse_PtgInt },
    0x1F: { n:'PtgNum', f:parse_PtgNum },
    0x20: { n:'PtgArray', f:parse_PtgArray },
    0x21: { n:'PtgFunc', f:parse_PtgFunc },
    0x22: { n:'PtgFuncVar', f:parse_PtgFuncVar },
    0x23: { n:'PtgName', f:parse_PtgName },
    0x24: { n:'PtgRef', f:parse_PtgRef },
    0x25: { n:'PtgArea', f:parse_PtgArea },
    0x26: { n:'PtgMemArea', f:parse_PtgMemArea },
    0x27: { n:'PtgMemErr', f:parse_PtgMemErr },
    0x28: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },
    0x29: { n:'PtgMemFunc', f:parse_PtgMemFunc },
    0x2A: { n:'PtgRefErr', f:parse_PtgRefErr },
    0x2B: { n:'PtgAreaErr', f:parse_PtgAreaErr },
    0x2C: { n:'PtgRefN', f:parse_PtgRefN },
    0x2D: { n:'PtgAreaN', f:parse_PtgAreaN },
    0x39: { n:'PtgNameX', f:parse_PtgNameX },
    0x3A: { n:'PtgRef3d', f:parse_PtgRef3d },
    0x3B: { n:'PtgArea3d', f:parse_PtgArea3d },
    0x3C: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },
    0x3D: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },
    0xFF: {}
    };
    /* These are duplicated in the PtgTypes table */
    var PtgDupes = {
    0x40: 0x20, 0x60: 0x20,
    0x41: 0x21, 0x61: 0x21,
    0x42: 0x22, 0x62: 0x22,
    0x43: 0x23, 0x63: 0x23,
    0x44: 0x24, 0x64: 0x24,
    0x45: 0x25, 0x65: 0x25,
    0x46: 0x26, 0x66: 0x26,
    0x47: 0x27, 0x67: 0x27,
    0x48: 0x28, 0x68: 0x28,
    0x49: 0x29, 0x69: 0x29,
    0x4A: 0x2A, 0x6A: 0x2A,
    0x4B: 0x2B, 0x6B: 0x2B,
    0x4C: 0x2C, 0x6C: 0x2C,
    0x4D: 0x2D, 0x6D: 0x2D,
    0x59: 0x39, 0x79: 0x39,
    0x5A: 0x3A, 0x7A: 0x3A,
    0x5B: 0x3B, 0x7B: 0x3B,
    0x5C: 0x3C, 0x7C: 0x3C,
    0x5D: 0x3D, 0x7D: 0x3D
    };
    (function(){for(var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]];})();
    
    var Ptg18 = {
    0x01: { n:'PtgElfLel', f:parse_PtgElfLel },
    0x02: { n:'PtgElfRw', f:parse_PtgElfRw },
    0x03: { n:'PtgElfCol', f:parse_PtgElfCol },
    0x06: { n:'PtgElfRwV', f:parse_PtgElfRwV },
    0x07: { n:'PtgElfColV', f:parse_PtgElfColV },
    0x0A: { n:'PtgElfRadical', f:parse_PtgElfRadical },
    0x0B: { n:'PtgElfRadicalS', f:parse_PtgElfRadicalS },
    0x0D: { n:'PtgElfColS', f:parse_PtgElfColS },
    0x0F: { n:'PtgElfColSV', f:parse_PtgElfColSV },
    0x10: { n:'PtgElfRadicalLel', f:parse_PtgElfRadicalLel },
    0x19: { n:'PtgList', f:parse_PtgList },
    0x1D: { n:'PtgSxName', f:parse_PtgSxName },
    0xFF: {}
    };
    var Ptg19 = {
    0x01: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },
    0x02: { n:'PtgAttrIf', f:parse_PtgAttrIf },
    0x04: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },
    0x08: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },
    0x10: { n:'PtgAttrSum', f:parse_PtgAttrSum },
    0x20: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
    0x40: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },
    0x41: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },
    0x80: { n:'PtgAttrIfError', f:parse_PtgAttrIfError },
    0xFF: {}
    };
    Ptg19[0x21] = Ptg19[0x20];
    
    /* 2.5.198.103 */
    function parse_RgbExtra(blob, length, rgce, opts) {
        if(opts.biff < 8) return parsenoop(blob, length);
        var target = blob.l + length;
        var o = [];
        for(var i = 0; i !== rgce.length; ++i) {
            switch(rgce[i][0]) {
                case 'PtgArray': /* PtgArray -> PtgExtraArray */
                    rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
                    o.push(rgce[i][1]);
                    break;
                case 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */
                    rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1]);
                    o.push(rgce[i][2]);
                    break;
                case 'PtgExp': /* PtgExp -> PtgExtraCol */
                    if(opts && opts.biff == 12) {
                        rgce[i][1][1] = blob.read_shift(4);
                        o.push(rgce[i][1]);
                    } break;
                case 'PtgList': /* TODO: PtgList -> PtgExtraList */
                case 'PtgElfRadicalS': /* TODO: PtgElfRadicalS -> PtgExtraElf */
                case 'PtgElfColS': /* TODO: PtgElfColS -> PtgExtraElf */
                case 'PtgElfColSV': /* TODO: PtgElfColSV -> PtgExtraElf */
                    throw "Unsupported " + rgce[i][0];
                default: break;
            }
        }
        length = target - blob.l;
        /* note: this is technically an error but Excel disregards */
        //if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);
        if(length !== 0) o.push(parsenoop(blob, length));
        return o;
    }
    
    /* 2.5.198.104 */
    function parse_Rgce(blob, length, opts) {
        var target = blob.l + length;
        var R, id, ptgs = [];
        while(target != blob.l) {
            length = target - blob.l;
            id = blob[blob.l];
            R = PtgTypes[id];
            if(id === 0x18 || id === 0x19) {
                id = blob[blob.l + 1];
                R = (id === 0x18 ? Ptg18 : Ptg19)[id];
            }
            if(!R || !R.f) { /*ptgs.push*/(parsenoop(blob, length)); }
            // $FlowIgnore
            else { ptgs.push([R.n, R.f(blob, length, opts)]); }
        }
        return ptgs;
    }
    
    function stringify_array(f) {
        var o = [];
        for(var i = 0; i < f.length; ++i) {
            var x = f[i], r = [];
            for(var j = 0; j < x.length; ++j) {
                var y = x[j];
                if(y) switch(y[0]) {
                    // TODO: handle embedded quotes
                    case 0x02:
    r.push('"' + y[1].replace(/"/g,'""') + '"'); break;
                    default: r.push(y[1]);
                } else r.push("");
            }
            o.push(r.join(","));
        }
        return o.join(";");
    }
    
    /* [MS-XLS] 2.2.2 TODO */
    /* [MS-XLSB] 2.2.2 */
    var PtgBinOp = {
        PtgAdd: "+",
        PtgConcat: "&",
        PtgDiv: "/",
        PtgEq: "=",
        PtgGe: ">=",
        PtgGt: ">",
        PtgLe: "<=",
        PtgLt: "<",
        PtgMul: "*",
        PtgNe: "<>",
        PtgPower: "^",
        PtgSub: "-"
    };
    function formula_quote_sheet_name(sname) {
        if(!sname) throw new Error("empty sheet name");
        if(sname.indexOf(" ") > -1) return "'" + sname + "'";
        return sname;
    }
    function get_ixti_raw(supbooks, ixti, opts) {
        if(!supbooks) return "SH33TJSERR0";
        if(!supbooks.XTI) return "SH33TJSERR6";
        var XTI = supbooks.XTI[ixti];
        if(opts.biff > 8 && !supbooks.XTI[ixti]) return supbooks.SheetNames[ixti];
        if(opts.biff < 8) {
            if(ixti > 10000) ixti-= 65536;
            if(ixti < 0) ixti = -ixti;
            return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
        }
        if(!XTI) return "SH33TJSERR1";
        var o = "";
        if(opts.biff > 8) switch(supbooks[XTI[0]][0]) {
            case 0x0165: /* 'BrtSupSelf' */
                o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
                return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
            case 0x0166: /* 'BrtSupSame' */
                if(opts.SID != null) return supbooks.SheetNames[opts.SID];
                return "SH33TJSSAME" + supbooks[XTI[0]][0];
            case 0x0163: /* 'BrtSupBookSrc' */
                /* falls through */
            default: return "SH33TJSSRC" + supbooks[XTI[0]][0];
        }
        switch(supbooks[XTI[0]][0][0]) {
            case 0x0401:
                o = XTI[1] == -1 ? "#REF" : (supbooks.SheetNames[XTI[1]] || "SH33TJSERR3");
                return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
            case 0x3A01: return "SH33TJSERR8";
            default:
                if(!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
                o = XTI[1] == -1 ? "#REF" : (supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4");
                return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
        }
    }
    function get_ixti(supbooks, ixti, opts) {
        return formula_quote_sheet_name(get_ixti_raw(supbooks, ixti, opts));
    }
    function stringify_formula(formula/*Array<any>*/, range, cell, supbooks, opts) {
        var _range = /*range != null ? range :*/ {s:{c:0, r:0},e:{c:0, r:0}};
        var stack = [], e1, e2, type, c, ixti=0, nameidx=0, r, sname="";
        if(!formula[0] || !formula[0][0]) return "";
        var last_sp = -1, sp = "";
        for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
            var f = formula[0][ff];
            switch(f[0]) {
                case 'PtgUminus': /* 2.5.198.93 */
                    stack.push("-" + stack.pop()); break;
                case 'PtgUplus': /* 2.5.198.95 */
                    stack.push("+" + stack.pop()); break;
                case 'PtgPercent': /* 2.5.198.81 */
                    stack.push(stack.pop() + "%"); break;
    
                case 'PtgAdd':    /* 2.5.198.26 */
                case 'PtgConcat': /* 2.5.198.43 */
                case 'PtgDiv':    /* 2.5.198.45 */
                case 'PtgEq':     /* 2.5.198.56 */
                case 'PtgGe':     /* 2.5.198.64 */
                case 'PtgGt':     /* 2.5.198.65 */
                case 'PtgLe':     /* 2.5.198.68 */
                case 'PtgLt':     /* 2.5.198.69 */
                case 'PtgMul':    /* 2.5.198.75 */
                case 'PtgNe':     /* 2.5.198.78 */
                case 'PtgPower':  /* 2.5.198.82 */
                case 'PtgSub':    /* 2.5.198.90 */
                    e1 = stack.pop(); e2 = stack.pop();
                    if(last_sp >= 0) {
                        switch(formula[0][last_sp][1][0]) {
                            case 0:
                                // $FlowIgnore
                                sp = fill(" ", formula[0][last_sp][1][1]); break;
                            case 1:
                                // $FlowIgnore
                                sp = fill("\r", formula[0][last_sp][1][1]); break;
                            default:
                                sp = "";
                                // $FlowIgnore
                                if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                        }
                        e2 = e2 + sp;
                        last_sp = -1;
                    }
                    stack.push(e2+PtgBinOp[f[0]]+e1);
                    break;
    
                case 'PtgIsect': /* 2.5.198.67 */
                    e1 = stack.pop(); e2 = stack.pop();
                    stack.push(e2+" "+e1);
                    break;
                case 'PtgUnion': /* 2.5.198.94 */
                    e1 = stack.pop(); e2 = stack.pop();
                    stack.push(e2+","+e1);
                    break;
                case 'PtgRange': /* 2.5.198.83 */
                    e1 = stack.pop(); e2 = stack.pop();
                    stack.push(e2+":"+e1);
                    break;
    
                case 'PtgAttrChoose': /* 2.5.198.34 */
                    break;
                case 'PtgAttrGoto': /* 2.5.198.35 */
                    break;
                case 'PtgAttrIf': /* 2.5.198.36 */
                    break;
                case 'PtgAttrIfError': /* [MS-XLSB] 2.5.97.28 */
                    break;
    
    
                case 'PtgRef': /* 2.5.198.84 */
                    type = f[1][0]; c = shift_cell_xls((f[1][1]), _range, opts);
                    stack.push(encode_cell_xls(c));
                    break;
                case 'PtgRefN': /* 2.5.198.88 */
                    type = f[1][0]; c = cell ? shift_cell_xls((f[1][1]), cell, opts) : (f[1][1]);
                    stack.push(encode_cell_xls(c));
                    break;
                case 'PtgRef3d': /* 2.5.198.85 */
                    type = f[1][0]; ixti = f[1][1]; c = shift_cell_xls((f[1][2]), _range, opts);
                    sname = get_ixti(supbooks, ixti, opts);
                    var w = sname; /* IE9 fails on defined names */
                    stack.push(sname + "!" + encode_cell_xls(c));
                    break;
    
                case 'PtgFunc': /* 2.5.198.62 */
                case 'PtgFuncVar': /* 2.5.198.63 */
                    /* f[1] = [argc, func, type] */
                    var argc = (f[1][0]), func = (f[1][1]);
                    if(!argc) argc = 0;
                    var args = argc == 0 ? [] : stack.slice(-argc);
                    stack.length -= argc;
                    if(func === 'User') func = args.shift();
                    stack.push(func + "(" + args.join(",") + ")");
                    break;
    
                case 'PtgBool': /* 2.5.198.42 */
                    stack.push(f[1] ? "TRUE" : "FALSE"); break;
                case 'PtgInt': /* 2.5.198.66 */
                    stack.push(f[1]); break;
                case 'PtgNum': /* 2.5.198.79 TODO: precision? */
                    stack.push(String(f[1])); break;
                case 'PtgStr': /* 2.5.198.89 */
                    // $FlowIgnore
                    stack.push('"' + f[1] + '"'); break;
                case 'PtgErr': /* 2.5.198.57 */
                    stack.push(f[1]); break;
                case 'PtgAreaN': /* 2.5.198.31 TODO */
                    type = f[1][0]; r = shift_range_xls(f[1][1], cell ? {s:cell} : _range, opts);
                    stack.push(encode_range_xls((r), opts));
                    break;
                case 'PtgArea': /* 2.5.198.27 TODO: fixed points */
                    type = f[1][0]; r = shift_range_xls(f[1][1], _range, opts);
                    stack.push(encode_range_xls((r), opts));
                    break;
                case 'PtgArea3d': /* 2.5.198.28 TODO */
                    type = f[1][0]; ixti = f[1][1]; r = f[1][2];
                    sname = get_ixti(supbooks, ixti, opts);
                    stack.push(sname + "!" + encode_range_xls((r), opts));
                    break;
                case 'PtgAttrSum': /* 2.5.198.41 */
                    stack.push("SUM(" + stack.pop() + ")");
                    break;
    
                case 'PtgAttrSemi': /* 2.5.198.37 */
                    break;
    
                case 'PtgName': /* 2.5.97.60 TODO: revisions */
                    /* f[1] = type, 0, nameindex */
                    nameidx = (f[1][2]);
                    var lbl = (supbooks.names||[])[nameidx-1] || (supbooks[0]||[])[nameidx];
                    var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
                    if(name in XLSXFutureFunctions) name = XLSXFutureFunctions[name];
                    stack.push(name);
                    break;
    
                case 'PtgNameX': /* 2.5.97.61 TODO: revisions */
                    /* f[1] = type, ixti, nameindex */
                    var bookidx = (f[1][1]); nameidx = (f[1][2]); var externbook;
                    /* TODO: Properly handle missing values */
                    if(opts.biff <= 5) {
                        if(bookidx < 0) bookidx = -bookidx;
                        if(supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
                    } else {
                        var o = "";
                        if(((supbooks[bookidx]||[])[0]||[])[0] == 0x3A01){/* empty */}
                        else if(((supbooks[bookidx]||[])[0]||[])[0] == 0x0401){
                            if(supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
                                o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab-1] + "!";
                            }
                        }
                        else o = supbooks.SheetNames[nameidx-1]+ "!";
                        if(supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
                        else if(supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
                        else o += "SH33TJSERRX";
                        stack.push(o);
                        break;
                    }
                    if(!externbook) externbook = {Name: "SH33TJSERRY"};
                    stack.push(externbook.Name);
                    break;
    
                case 'PtgParen': /* 2.5.198.80 */
                    var lp = '(', rp = ')';
                    if(last_sp >= 0) {
                        sp = "";
                        switch(formula[0][last_sp][1][0]) {
                            // $FlowIgnore
                            case 2: lp = fill(" ", formula[0][last_sp][1][1]) + lp; break;
                            // $FlowIgnore
                            case 3: lp = fill("\r", formula[0][last_sp][1][1]) + lp; break;
                            // $FlowIgnore
                            case 4: rp = fill(" ", formula[0][last_sp][1][1]) + rp; break;
                            // $FlowIgnore
                            case 5: rp = fill("\r", formula[0][last_sp][1][1]) + rp; break;
                            default:
                                // $FlowIgnore
                                if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                        }
                        last_sp = -1;
                    }
                    stack.push(lp + stack.pop() + rp); break;
    
                case 'PtgRefErr': /* 2.5.198.86 */
                    stack.push('#REF!'); break;
    
                case 'PtgRefErr3d': /* 2.5.198.87 */
                    stack.push('#REF!'); break;
    
                case 'PtgExp': /* 2.5.198.58 TODO */
                    c = {c:(f[1][1]),r:(f[1][0])};
                    var q = ({c: cell.c, r:cell.r});
                    if(supbooks.sharedf[encode_cell(c)]) {
                        var parsedf = (supbooks.sharedf[encode_cell(c)]);
                        stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
                    }
                    else {
                        var fnd = false;
                        for(e1=0;e1!=supbooks.arrayf.length; ++e1) {
                            /* TODO: should be something like range_has */
                            e2 = supbooks.arrayf[e1];
                            if(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
                            if(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
                            stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
                            fnd = true;
                            break;
                        }
                        if(!fnd) stack.push(f[1]);
                    }
                    break;
    
                case 'PtgArray': /* 2.5.198.32 TODO */
                    stack.push("{" + stringify_array(f[1]) + "}");
                    break;
    
                case 'PtgMemArea': /* 2.5.198.70 TODO: confirm this is a non-display */
                    //stack.push("(" + f[2].map(encode_range).join(",") + ")");
                    break;
    
                case 'PtgAttrSpace': /* 2.5.198.38 */
                case 'PtgAttrSpaceSemi': /* 2.5.198.39 */
                    last_sp = ff;
                    break;
    
                case 'PtgTbl': /* 2.5.198.92 TODO */
                    break;
    
                case 'PtgMemErr': /* 2.5.198.71 */
                    break;
    
                case 'PtgMissArg': /* 2.5.198.74 */
                    stack.push("");
                    break;
    
                case 'PtgAreaErr': /* 2.5.198.29 */
                    stack.push("#REF!"); break;
    
                case 'PtgAreaErr3d': /* 2.5.198.30 */
                    stack.push("#REF!"); break;
    
                case 'PtgMemFunc': /* 2.5.198.72 TODO */
                    break;
                case 'PtgMemNoMem': /* 2.5.198.73 TODO -- find a test case */
                    throw new Error('Unrecognized Formula Token: ' + String(f));
    
                case 'PtgElfCol': /* 2.5.198.46 */
                case 'PtgElfColS': /* 2.5.198.47 */
                case 'PtgElfColSV': /* 2.5.198.48 */
                case 'PtgElfColV': /* 2.5.198.49 */
                case 'PtgElfLel': /* 2.5.198.50 */
                case 'PtgElfRadical': /* 2.5.198.51 */
                case 'PtgElfRadicalLel': /* 2.5.198.52 */
                case 'PtgElfRadicalS': /* 2.5.198.53 */
                case 'PtgElfRw': /* 2.5.198.54 */
                case 'PtgElfRwV': /* 2.5.198.55 */
                    throw new Error("Unsupported ELFs");
    
                case 'PtgAttrBaxcel': /* 2.5.198.33 TODO -- find a test case*/
                    throw new Error('Unrecognized Formula Token: ' + String(f));
                case 'PtgSxName': /* 2.5.198.91 TODO -- find a test case */
                    throw new Error('Unrecognized Formula Token: ' + String(f));
                case 'PtgList': /* [MS-XLSB] 2.5.97.52 TODO -- find a test case */
                    throw new Error('Unrecognized Formula Token: ' + String(f));
    
                default: throw new Error('Unrecognized Formula Token: ' + String(f));
            }
            var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];
            if(last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
                f = formula[0][last_sp];
                var _left = true;
                switch(f[1][0]) {
                    /* note: some bad XLSB files omit the PtgParen */
                    case 4: _left = false;
                    /* falls through */
                    case 0:
                        // $FlowIgnore
                        sp = fill(" ", f[1][1]); break;
                    case 5: _left = false;
                    /* falls through */
                    case 1:
                        // $FlowIgnore
                        sp = fill("\r", f[1][1]); break;
                    default:
                        sp = "";
                        // $FlowIgnore
                        if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
                }
                stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
                last_sp = -1;
            }
        }
        if(stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
        return stack[0];
    }
    
    /* [MS-XLS] 2.5.198.1 TODO */
    function parse_ArrayParsedFormula(blob, length, opts, ref) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len); // length of rgce
        if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        return [rgce, rgcb];
    }
    
    /* [MS-XLS] 2.5.198.3 TODO */
    function parse_XLSCellParsedFormula(blob, length, opts) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len); // length of rgce
        if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        return [rgce, rgcb];
    }
    
    /* [MS-XLS] 2.5.198.21 */
    function parse_NameParsedFormula(blob, length, opts, cce) {
        var target = blob.l + length;
        var rgce = parse_Rgce(blob, cce, opts);
        var rgcb;
        if(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
        return [rgce, rgcb];
    }
    
    /* [MS-XLS] 2.5.198.118 TODO */
    function parse_SharedParsedFormula(blob, length, opts) {
        var target = blob.l + length;
        var rgcb, cce = blob.read_shift(2); // length of rgce
        var rgce = parse_Rgce(blob, cce, opts);
        if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
        if(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
        return [rgce, rgcb];
    }
    
    /* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */
    function parse_FormulaValue(blob) {
        var b;
        if(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];
        switch(blob[blob.l]) {
            case 0x00: blob.l += 8; return ["String", 's'];
            case 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];
            case 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];
            case 0x03: blob.l += 8; return ["",'s'];
        }
        return [];
    }
    
    /* [MS-XLS] 2.4.127 TODO */
    function parse_Formula(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if(opts.biff == 2) ++blob.l;
        var val = parse_FormulaValue(blob,8);
        var flags = blob.read_shift(1);
        if(opts.biff != 2) {
            blob.read_shift(1);
            if(opts.biff >= 5) {
                var chn = blob.read_shift(4);
            }
        }
        var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
        return {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};
    }
    
    /* XLSB Parsed Formula records have the same shape */
    function parse_XLSBParsedFormula(data, length, opts) {
        var end = data.l + length;
        var cce = data.read_shift(4);
        var rgce = parse_Rgce(data, cce, opts);
        var cb = data.read_shift(4);
        var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
        return [rgce, rgcb];
    }
    
    /* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */
    var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.4 CellParsedFormula */
    var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.12 NameParsedFormula */
    var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.98 SharedParsedFormula */
    var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLS] 2.5.198.44 */
    var PtgDataType = {
    0x1: "REFERENCE", // reference to range
    0x2: "VALUE", // single value
    0x3: "ARRAY" // array of values
    };
    
    /* [MS-XLS] 2.5.198.4 */
    var Cetab = {
    0x0000: 'BEEP',
    0x0001: 'OPEN',
    0x0002: 'OPEN.LINKS',
    0x0003: 'CLOSE.ALL',
    0x0004: 'SAVE',
    0x0005: 'SAVE.AS',
    0x0006: 'FILE.DELETE',
    0x0007: 'PAGE.SETUP',
    0x0008: 'PRINT',
    0x0009: 'PRINTER.SETUP',
    0x000A: 'QUIT',
    0x000B: 'NEW.WINDOW',
    0x000C: 'ARRANGE.ALL',
    0x000D: 'WINDOW.SIZE',
    0x000E: 'WINDOW.MOVE',
    0x000F: 'FULL',
    0x0010: 'CLOSE',
    0x0011: 'RUN',
    0x0016: 'SET.PRINT.AREA',
    0x0017: 'SET.PRINT.TITLES',
    0x0018: 'SET.PAGE.BREAK',
    0x0019: 'REMOVE.PAGE.BREAK',
    0x001A: 'FONT',
    0x001B: 'DISPLAY',
    0x001C: 'PROTECT.DOCUMENT',
    0x001D: 'PRECISION',
    0x001E: 'A1.R1C1',
    0x001F: 'CALCULATE.NOW',
    0x0020: 'CALCULATION',
    0x0022: 'DATA.FIND',
    0x0023: 'EXTRACT',
    0x0024: 'DATA.DELETE',
    0x0025: 'SET.DATABASE',
    0x0026: 'SET.CRITERIA',
    0x0027: 'SORT',
    0x0028: 'DATA.SERIES',
    0x0029: 'TABLE',
    0x002A: 'FORMAT.NUMBER',
    0x002B: 'ALIGNMENT',
    0x002C: 'STYLE',
    0x002D: 'BORDER',
    0x002E: 'CELL.PROTECTION',
    0x002F: 'COLUMN.WIDTH',
    0x0030: 'UNDO',
    0x0031: 'CUT',
    0x0032: 'COPY',
    0x0033: 'PASTE',
    0x0034: 'CLEAR',
    0x0035: 'PASTE.SPECIAL',
    0x0036: 'EDIT.DELETE',
    0x0037: 'INSERT',
    0x0038: 'FILL.RIGHT',
    0x0039: 'FILL.DOWN',
    0x003D: 'DEFINE.NAME',
    0x003E: 'CREATE.NAMES',
    0x003F: 'FORMULA.GOTO',
    0x0040: 'FORMULA.FIND',
    0x0041: 'SELECT.LAST.CELL',
    0x0042: 'SHOW.ACTIVE.CELL',
    0x0043: 'GALLERY.AREA',
    0x0044: 'GALLERY.BAR',
    0x0045: 'GALLERY.COLUMN',
    0x0046: 'GALLERY.LINE',
    0x0047: 'GALLERY.PIE',
    0x0048: 'GALLERY.SCATTER',
    0x0049: 'COMBINATION',
    0x004A: 'PREFERRED',
    0x004B: 'ADD.OVERLAY',
    0x004C: 'GRIDLINES',
    0x004D: 'SET.PREFERRED',
    0x004E: 'AXES',
    0x004F: 'LEGEND',
    0x0050: 'ATTACH.TEXT',
    0x0051: 'ADD.ARROW',
    0x0052: 'SELECT.CHART',
    0x0053: 'SELECT.PLOT.AREA',
    0x0054: 'PATTERNS',
    0x0055: 'MAIN.CHART',
    0x0056: 'OVERLAY',
    0x0057: 'SCALE',
    0x0058: 'FORMAT.LEGEND',
    0x0059: 'FORMAT.TEXT',
    0x005A: 'EDIT.REPEAT',
    0x005B: 'PARSE',
    0x005C: 'JUSTIFY',
    0x005D: 'HIDE',
    0x005E: 'UNHIDE',
    0x005F: 'WORKSPACE',
    0x0060: 'FORMULA',
    0x0061: 'FORMULA.FILL',
    0x0062: 'FORMULA.ARRAY',
    0x0063: 'DATA.FIND.NEXT',
    0x0064: 'DATA.FIND.PREV',
    0x0065: 'FORMULA.FIND.NEXT',
    0x0066: 'FORMULA.FIND.PREV',
    0x0067: 'ACTIVATE',
    0x0068: 'ACTIVATE.NEXT',
    0x0069: 'ACTIVATE.PREV',
    0x006A: 'UNLOCKED.NEXT',
    0x006B: 'UNLOCKED.PREV',
    0x006C: 'COPY.PICTURE',
    0x006D: 'SELECT',
    0x006E: 'DELETE.NAME',
    0x006F: 'DELETE.FORMAT',
    0x0070: 'VLINE',
    0x0071: 'HLINE',
    0x0072: 'VPAGE',
    0x0073: 'HPAGE',
    0x0074: 'VSCROLL',
    0x0075: 'HSCROLL',
    0x0076: 'ALERT',
    0x0077: 'NEW',
    0x0078: 'CANCEL.COPY',
    0x0079: 'SHOW.CLIPBOARD',
    0x007A: 'MESSAGE',
    0x007C: 'PASTE.LINK',
    0x007D: 'APP.ACTIVATE',
    0x007E: 'DELETE.ARROW',
    0x007F: 'ROW.HEIGHT',
    0x0080: 'FORMAT.MOVE',
    0x0081: 'FORMAT.SIZE',
    0x0082: 'FORMULA.REPLACE',
    0x0083: 'SEND.KEYS',
    0x0084: 'SELECT.SPECIAL',
    0x0085: 'APPLY.NAMES',
    0x0086: 'REPLACE.FONT',
    0x0087: 'FREEZE.PANES',
    0x0088: 'SHOW.INFO',
    0x0089: 'SPLIT',
    0x008A: 'ON.WINDOW',
    0x008B: 'ON.DATA',
    0x008C: 'DISABLE.INPUT',
    0x008E: 'OUTLINE',
    0x008F: 'LIST.NAMES',
    0x0090: 'FILE.CLOSE',
    0x0091: 'SAVE.WORKBOOK',
    0x0092: 'DATA.FORM',
    0x0093: 'COPY.CHART',
    0x0094: 'ON.TIME',
    0x0095: 'WAIT',
    0x0096: 'FORMAT.FONT',
    0x0097: 'FILL.UP',
    0x0098: 'FILL.LEFT',
    0x0099: 'DELETE.OVERLAY',
    0x009B: 'SHORT.MENUS',
    0x009F: 'SET.UPDATE.STATUS',
    0x00A1: 'COLOR.PALETTE',
    0x00A2: 'DELETE.STYLE',
    0x00A3: 'WINDOW.RESTORE',
    0x00A4: 'WINDOW.MAXIMIZE',
    0x00A6: 'CHANGE.LINK',
    0x00A7: 'CALCULATE.DOCUMENT',
    0x00A8: 'ON.KEY',
    0x00A9: 'APP.RESTORE',
    0x00AA: 'APP.MOVE',
    0x00AB: 'APP.SIZE',
    0x00AC: 'APP.MINIMIZE',
    0x00AD: 'APP.MAXIMIZE',
    0x00AE: 'BRING.TO.FRONT',
    0x00AF: 'SEND.TO.BACK',
    0x00B9: 'MAIN.CHART.TYPE',
    0x00BA: 'OVERLAY.CHART.TYPE',
    0x00BB: 'SELECT.END',
    0x00BC: 'OPEN.MAIL',
    0x00BD: 'SEND.MAIL',
    0x00BE: 'STANDARD.FONT',
    0x00BF: 'CONSOLIDATE',
    0x00C0: 'SORT.SPECIAL',
    0x00C1: 'GALLERY.3D.AREA',
    0x00C2: 'GALLERY.3D.COLUMN',
    0x00C3: 'GALLERY.3D.LINE',
    0x00C4: 'GALLERY.3D.PIE',
    0x00C5: 'VIEW.3D',
    0x00C6: 'GOAL.SEEK',
    0x00C7: 'WORKGROUP',
    0x00C8: 'FILL.GROUP',
    0x00C9: 'UPDATE.LINK',
    0x00CA: 'PROMOTE',
    0x00CB: 'DEMOTE',
    0x00CC: 'SHOW.DETAIL',
    0x00CE: 'UNGROUP',
    0x00CF: 'OBJECT.PROPERTIES',
    0x00D0: 'SAVE.NEW.OBJECT',
    0x00D1: 'SHARE',
    0x00D2: 'SHARE.NAME',
    0x00D3: 'DUPLICATE',
    0x00D4: 'APPLY.STYLE',
    0x00D5: 'ASSIGN.TO.OBJECT',
    0x00D6: 'OBJECT.PROTECTION',
    0x00D7: 'HIDE.OBJECT',
    0x00D8: 'SET.EXTRACT',
    0x00D9: 'CREATE.PUBLISHER',
    0x00DA: 'SUBSCRIBE.TO',
    0x00DB: 'ATTRIBUTES',
    0x00DC: 'SHOW.TOOLBAR',
    0x00DE: 'PRINT.PREVIEW',
    0x00DF: 'EDIT.COLOR',
    0x00E0: 'SHOW.LEVELS',
    0x00E1: 'FORMAT.MAIN',
    0x00E2: 'FORMAT.OVERLAY',
    0x00E3: 'ON.RECALC',
    0x00E4: 'EDIT.SERIES',
    0x00E5: 'DEFINE.STYLE',
    0x00F0: 'LINE.PRINT',
    0x00F3: 'ENTER.DATA',
    0x00F9: 'GALLERY.RADAR',
    0x00FA: 'MERGE.STYLES',
    0x00FB: 'EDITION.OPTIONS',
    0x00FC: 'PASTE.PICTURE',
    0x00FD: 'PASTE.PICTURE.LINK',
    0x00FE: 'SPELLING',
    0x0100: 'ZOOM',
    0x0103: 'INSERT.OBJECT',
    0x0104: 'WINDOW.MINIMIZE',
    0x0109: 'SOUND.NOTE',
    0x010A: 'SOUND.PLAY',
    0x010B: 'FORMAT.SHAPE',
    0x010C: 'EXTEND.POLYGON',
    0x010D: 'FORMAT.AUTO',
    0x0110: 'GALLERY.3D.BAR',
    0x0111: 'GALLERY.3D.SURFACE',
    0x0112: 'FILL.AUTO',
    0x0114: 'CUSTOMIZE.TOOLBAR',
    0x0115: 'ADD.TOOL',
    0x0116: 'EDIT.OBJECT',
    0x0117: 'ON.DOUBLECLICK',
    0x0118: 'ON.ENTRY',
    0x0119: 'WORKBOOK.ADD',
    0x011A: 'WORKBOOK.MOVE',
    0x011B: 'WORKBOOK.COPY',
    0x011C: 'WORKBOOK.OPTIONS',
    0x011D: 'SAVE.WORKSPACE',
    0x0120: 'CHART.WIZARD',
    0x0121: 'DELETE.TOOL',
    0x0122: 'MOVE.TOOL',
    0x0123: 'WORKBOOK.SELECT',
    0x0124: 'WORKBOOK.ACTIVATE',
    0x0125: 'ASSIGN.TO.TOOL',
    0x0127: 'COPY.TOOL',
    0x0128: 'RESET.TOOL',
    0x0129: 'CONSTRAIN.NUMERIC',
    0x012A: 'PASTE.TOOL',
    0x012E: 'WORKBOOK.NEW',
    0x0131: 'SCENARIO.CELLS',
    0x0132: 'SCENARIO.DELETE',
    0x0133: 'SCENARIO.ADD',
    0x0134: 'SCENARIO.EDIT',
    0x0135: 'SCENARIO.SHOW',
    0x0136: 'SCENARIO.SHOW.NEXT',
    0x0137: 'SCENARIO.SUMMARY',
    0x0138: 'PIVOT.TABLE.WIZARD',
    0x0139: 'PIVOT.FIELD.PROPERTIES',
    0x013A: 'PIVOT.FIELD',
    0x013B: 'PIVOT.ITEM',
    0x013C: 'PIVOT.ADD.FIELDS',
    0x013E: 'OPTIONS.CALCULATION',
    0x013F: 'OPTIONS.EDIT',
    0x0140: 'OPTIONS.VIEW',
    0x0141: 'ADDIN.MANAGER',
    0x0142: 'MENU.EDITOR',
    0x0143: 'ATTACH.TOOLBARS',
    0x0144: 'VBAActivate',
    0x0145: 'OPTIONS.CHART',
    0x0148: 'VBA.INSERT.FILE',
    0x014A: 'VBA.PROCEDURE.DEFINITION',
    0x0150: 'ROUTING.SLIP',
    0x0152: 'ROUTE.DOCUMENT',
    0x0153: 'MAIL.LOGON',
    0x0156: 'INSERT.PICTURE',
    0x0157: 'EDIT.TOOL',
    0x0158: 'GALLERY.DOUGHNUT',
    0x015E: 'CHART.TREND',
    0x0160: 'PIVOT.ITEM.PROPERTIES',
    0x0162: 'WORKBOOK.INSERT',
    0x0163: 'OPTIONS.TRANSITION',
    0x0164: 'OPTIONS.GENERAL',
    0x0172: 'FILTER.ADVANCED',
    0x0175: 'MAIL.ADD.MAILER',
    0x0176: 'MAIL.DELETE.MAILER',
    0x0177: 'MAIL.REPLY',
    0x0178: 'MAIL.REPLY.ALL',
    0x0179: 'MAIL.FORWARD',
    0x017A: 'MAIL.NEXT.LETTER',
    0x017B: 'DATA.LABEL',
    0x017C: 'INSERT.TITLE',
    0x017D: 'FONT.PROPERTIES',
    0x017E: 'MACRO.OPTIONS',
    0x017F: 'WORKBOOK.HIDE',
    0x0180: 'WORKBOOK.UNHIDE',
    0x0181: 'WORKBOOK.DELETE',
    0x0182: 'WORKBOOK.NAME',
    0x0184: 'GALLERY.CUSTOM',
    0x0186: 'ADD.CHART.AUTOFORMAT',
    0x0187: 'DELETE.CHART.AUTOFORMAT',
    0x0188: 'CHART.ADD.DATA',
    0x0189: 'AUTO.OUTLINE',
    0x018A: 'TAB.ORDER',
    0x018B: 'SHOW.DIALOG',
    0x018C: 'SELECT.ALL',
    0x018D: 'UNGROUP.SHEETS',
    0x018E: 'SUBTOTAL.CREATE',
    0x018F: 'SUBTOTAL.REMOVE',
    0x0190: 'RENAME.OBJECT',
    0x019C: 'WORKBOOK.SCROLL',
    0x019D: 'WORKBOOK.NEXT',
    0x019E: 'WORKBOOK.PREV',
    0x019F: 'WORKBOOK.TAB.SPLIT',
    0x01A0: 'FULL.SCREEN',
    0x01A1: 'WORKBOOK.PROTECT',
    0x01A4: 'SCROLLBAR.PROPERTIES',
    0x01A5: 'PIVOT.SHOW.PAGES',
    0x01A6: 'TEXT.TO.COLUMNS',
    0x01A7: 'FORMAT.CHARTTYPE',
    0x01A8: 'LINK.FORMAT',
    0x01A9: 'TRACER.DISPLAY',
    0x01AE: 'TRACER.NAVIGATE',
    0x01AF: 'TRACER.CLEAR',
    0x01B0: 'TRACER.ERROR',
    0x01B1: 'PIVOT.FIELD.GROUP',
    0x01B2: 'PIVOT.FIELD.UNGROUP',
    0x01B3: 'CHECKBOX.PROPERTIES',
    0x01B4: 'LABEL.PROPERTIES',
    0x01B5: 'LISTBOX.PROPERTIES',
    0x01B6: 'EDITBOX.PROPERTIES',
    0x01B7: 'PIVOT.REFRESH',
    0x01B8: 'LINK.COMBO',
    0x01B9: 'OPEN.TEXT',
    0x01BA: 'HIDE.DIALOG',
    0x01BB: 'SET.DIALOG.FOCUS',
    0x01BC: 'ENABLE.OBJECT',
    0x01BD: 'PUSHBUTTON.PROPERTIES',
    0x01BE: 'SET.DIALOG.DEFAULT',
    0x01BF: 'FILTER',
    0x01C0: 'FILTER.SHOW.ALL',
    0x01C1: 'CLEAR.OUTLINE',
    0x01C2: 'FUNCTION.WIZARD',
    0x01C3: 'ADD.LIST.ITEM',
    0x01C4: 'SET.LIST.ITEM',
    0x01C5: 'REMOVE.LIST.ITEM',
    0x01C6: 'SELECT.LIST.ITEM',
    0x01C7: 'SET.CONTROL.VALUE',
    0x01C8: 'SAVE.COPY.AS',
    0x01CA: 'OPTIONS.LISTS.ADD',
    0x01CB: 'OPTIONS.LISTS.DELETE',
    0x01CC: 'SERIES.AXES',
    0x01CD: 'SERIES.X',
    0x01CE: 'SERIES.Y',
    0x01CF: 'ERRORBAR.X',
    0x01D0: 'ERRORBAR.Y',
    0x01D1: 'FORMAT.CHART',
    0x01D2: 'SERIES.ORDER',
    0x01D3: 'MAIL.LOGOFF',
    0x01D4: 'CLEAR.ROUTING.SLIP',
    0x01D5: 'APP.ACTIVATE.MICROSOFT',
    0x01D6: 'MAIL.EDIT.MAILER',
    0x01D7: 'ON.SHEET',
    0x01D8: 'STANDARD.WIDTH',
    0x01D9: 'SCENARIO.MERGE',
    0x01DA: 'SUMMARY.INFO',
    0x01DB: 'FIND.FILE',
    0x01DC: 'ACTIVE.CELL.FONT',
    0x01DD: 'ENABLE.TIPWIZARD',
    0x01DE: 'VBA.MAKE.ADDIN',
    0x01E0: 'INSERTDATATABLE',
    0x01E1: 'WORKGROUP.OPTIONS',
    0x01E2: 'MAIL.SEND.MAILER',
    0x01E5: 'AUTOCORRECT',
    0x01E9: 'POST.DOCUMENT',
    0x01EB: 'PICKLIST',
    0x01ED: 'VIEW.SHOW',
    0x01EE: 'VIEW.DEFINE',
    0x01EF: 'VIEW.DELETE',
    0x01FD: 'SHEET.BACKGROUND',
    0x01FE: 'INSERT.MAP.OBJECT',
    0x01FF: 'OPTIONS.MENONO',
    0x0205: 'MSOCHECKS',
    0x0206: 'NORMAL',
    0x0207: 'LAYOUT',
    0x0208: 'RM.PRINT.AREA',
    0x0209: 'CLEAR.PRINT.AREA',
    0x020A: 'ADD.PRINT.AREA',
    0x020B: 'MOVE.BRK',
    0x0221: 'HIDECURR.NOTE',
    0x0222: 'HIDEALL.NOTES',
    0x0223: 'DELETE.NOTE',
    0x0224: 'TRAVERSE.NOTES',
    0x0225: 'ACTIVATE.NOTES',
    0x026C: 'PROTECT.REVISIONS',
    0x026D: 'UNPROTECT.REVISIONS',
    0x0287: 'OPTIONS.ME',
    0x028D: 'WEB.PUBLISH',
    0x029B: 'NEWWEBQUERY',
    0x02A1: 'PIVOT.TABLE.CHART',
    0x02F1: 'OPTIONS.SAVE',
    0x02F3: 'OPTIONS.SPELL',
    0x0328: 'HIDEALL.INKANNOTS'
    };
    
    /* [MS-XLS] 2.5.198.17 */
    /* [MS-XLSB] 2.5.97.10 */
    var Ftab = {
    0x0000: 'COUNT',
    0x0001: 'IF',
    0x0002: 'ISNA',
    0x0003: 'ISERROR',
    0x0004: 'SUM',
    0x0005: 'AVERAGE',
    0x0006: 'MIN',
    0x0007: 'MAX',
    0x0008: 'ROW',
    0x0009: 'COLUMN',
    0x000A: 'NA',
    0x000B: 'NPV',
    0x000C: 'STDEV',
    0x000D: 'DOLLAR',
    0x000E: 'FIXED',
    0x000F: 'SIN',
    0x0010: 'COS',
    0x0011: 'TAN',
    0x0012: 'ATAN',
    0x0013: 'PI',
    0x0014: 'SQRT',
    0x0015: 'EXP',
    0x0016: 'LN',
    0x0017: 'LOG10',
    0x0018: 'ABS',
    0x0019: 'INT',
    0x001A: 'SIGN',
    0x001B: 'ROUND',
    0x001C: 'LOOKUP',
    0x001D: 'INDEX',
    0x001E: 'REPT',
    0x001F: 'MID',
    0x0020: 'LEN',
    0x0021: 'VALUE',
    0x0022: 'TRUE',
    0x0023: 'FALSE',
    0x0024: 'AND',
    0x0025: 'OR',
    0x0026: 'NOT',
    0x0027: 'MOD',
    0x0028: 'DCOUNT',
    0x0029: 'DSUM',
    0x002A: 'DAVERAGE',
    0x002B: 'DMIN',
    0x002C: 'DMAX',
    0x002D: 'DSTDEV',
    0x002E: 'VAR',
    0x002F: 'DVAR',
    0x0030: 'TEXT',
    0x0031: 'LINEST',
    0x0032: 'TREND',
    0x0033: 'LOGEST',
    0x0034: 'GROWTH',
    0x0035: 'GOTO',
    0x0036: 'HALT',
    0x0037: 'RETURN',
    0x0038: 'PV',
    0x0039: 'FV',
    0x003A: 'NPER',
    0x003B: 'PMT',
    0x003C: 'RATE',
    0x003D: 'MIRR',
    0x003E: 'IRR',
    0x003F: 'RAND',
    0x0040: 'MATCH',
    0x0041: 'DATE',
    0x0042: 'TIME',
    0x0043: 'DAY',
    0x0044: 'MONTH',
    0x0045: 'YEAR',
    0x0046: 'WEEKDAY',
    0x0047: 'HOUR',
    0x0048: 'MINUTE',
    0x0049: 'SECOND',
    0x004A: 'NOW',
    0x004B: 'AREAS',
    0x004C: 'ROWS',
    0x004D: 'COLUMNS',
    0x004E: 'OFFSET',
    0x004F: 'ABSREF',
    0x0050: 'RELREF',
    0x0051: 'ARGUMENT',
    0x0052: 'SEARCH',
    0x0053: 'TRANSPOSE',
    0x0054: 'ERROR',
    0x0055: 'STEP',
    0x0056: 'TYPE',
    0x0057: 'ECHO',
    0x0058: 'SET.NAME',
    0x0059: 'CALLER',
    0x005A: 'DEREF',
    0x005B: 'WINDOWS',
    0x005C: 'SERIES',
    0x005D: 'DOCUMENTS',
    0x005E: 'ACTIVE.CELL',
    0x005F: 'SELECTION',
    0x0060: 'RESULT',
    0x0061: 'ATAN2',
    0x0062: 'ASIN',
    0x0063: 'ACOS',
    0x0064: 'CHOOSE',
    0x0065: 'HLOOKUP',
    0x0066: 'VLOOKUP',
    0x0067: 'LINKS',
    0x0068: 'INPUT',
    0x0069: 'ISREF',
    0x006A: 'GET.FORMULA',
    0x006B: 'GET.NAME',
    0x006C: 'SET.VALUE',
    0x006D: 'LOG',
    0x006E: 'EXEC',
    0x006F: 'CHAR',
    0x0070: 'LOWER',
    0x0071: 'UPPER',
    0x0072: 'PROPER',
    0x0073: 'LEFT',
    0x0074: 'RIGHT',
    0x0075: 'EXACT',
    0x0076: 'TRIM',
    0x0077: 'REPLACE',
    0x0078: 'SUBSTITUTE',
    0x0079: 'CODE',
    0x007A: 'NAMES',
    0x007B: 'DIRECTORY',
    0x007C: 'FIND',
    0x007D: 'CELL',
    0x007E: 'ISERR',
    0x007F: 'ISTEXT',
    0x0080: 'ISNUMBER',
    0x0081: 'ISBLANK',
    0x0082: 'T',
    0x0083: 'N',
    0x0084: 'FOPEN',
    0x0085: 'FCLOSE',
    0x0086: 'FSIZE',
    0x0087: 'FREADLN',
    0x0088: 'FREAD',
    0x0089: 'FWRITELN',
    0x008A: 'FWRITE',
    0x008B: 'FPOS',
    0x008C: 'DATEVALUE',
    0x008D: 'TIMEVALUE',
    0x008E: 'SLN',
    0x008F: 'SYD',
    0x0090: 'DDB',
    0x0091: 'GET.DEF',
    0x0092: 'REFTEXT',
    0x0093: 'TEXTREF',
    0x0094: 'INDIRECT',
    0x0095: 'REGISTER',
    0x0096: 'CALL',
    0x0097: 'ADD.BAR',
    0x0098: 'ADD.MENU',
    0x0099: 'ADD.COMMAND',
    0x009A: 'ENABLE.COMMAND',
    0x009B: 'CHECK.COMMAND',
    0x009C: 'RENAME.COMMAND',
    0x009D: 'SHOW.BAR',
    0x009E: 'DELETE.MENU',
    0x009F: 'DELETE.COMMAND',
    0x00A0: 'GET.CHART.ITEM',
    0x00A1: 'DIALOG.BOX',
    0x00A2: 'CLEAN',
    0x00A3: 'MDETERM',
    0x00A4: 'MINVERSE',
    0x00A5: 'MMULT',
    0x00A6: 'FILES',
    0x00A7: 'IPMT',
    0x00A8: 'PPMT',
    0x00A9: 'COUNTA',
    0x00AA: 'CANCEL.KEY',
    0x00AB: 'FOR',
    0x00AC: 'WHILE',
    0x00AD: 'BREAK',
    0x00AE: 'NEXT',
    0x00AF: 'INITIATE',
    0x00B0: 'REQUEST',
    0x00B1: 'POKE',
    0x00B2: 'EXECUTE',
    0x00B3: 'TERMINATE',
    0x00B4: 'RESTART',
    0x00B5: 'HELP',
    0x00B6: 'GET.BAR',
    0x00B7: 'PRODUCT',
    0x00B8: 'FACT',
    0x00B9: 'GET.CELL',
    0x00BA: 'GET.WORKSPACE',
    0x00BB: 'GET.WINDOW',
    0x00BC: 'GET.DOCUMENT',
    0x00BD: 'DPRODUCT',
    0x00BE: 'ISNONTEXT',
    0x00BF: 'GET.NOTE',
    0x00C0: 'NOTE',
    0x00C1: 'STDEVP',
    0x00C2: 'VARP',
    0x00C3: 'DSTDEVP',
    0x00C4: 'DVARP',
    0x00C5: 'TRUNC',
    0x00C6: 'ISLOGICAL',
    0x00C7: 'DCOUNTA',
    0x00C8: 'DELETE.BAR',
    0x00C9: 'UNREGISTER',
    0x00CC: 'USDOLLAR',
    0x00CD: 'FINDB',
    0x00CE: 'SEARCHB',
    0x00CF: 'REPLACEB',
    0x00D0: 'LEFTB',
    0x00D1: 'RIGHTB',
    0x00D2: 'MIDB',
    0x00D3: 'LENB',
    0x00D4: 'ROUNDUP',
    0x00D5: 'ROUNDDOWN',
    0x00D6: 'ASC',
    0x00D7: 'DBCS',
    0x00D8: 'RANK',
    0x00DB: 'ADDRESS',
    0x00DC: 'DAYS360',
    0x00DD: 'TODAY',
    0x00DE: 'VDB',
    0x00DF: 'ELSE',
    0x00E0: 'ELSE.IF',
    0x00E1: 'END.IF',
    0x00E2: 'FOR.CELL',
    0x00E3: 'MEDIAN',
    0x00E4: 'SUMPRODUCT',
    0x00E5: 'SINH',
    0x00E6: 'COSH',
    0x00E7: 'TANH',
    0x00E8: 'ASINH',
    0x00E9: 'ACOSH',
    0x00EA: 'ATANH',
    0x00EB: 'DGET',
    0x00EC: 'CREATE.OBJECT',
    0x00ED: 'VOLATILE',
    0x00EE: 'LAST.ERROR',
    0x00EF: 'CUSTOM.UNDO',
    0x00F0: 'CUSTOM.REPEAT',
    0x00F1: 'FORMULA.CONVERT',
    0x00F2: 'GET.LINK.INFO',
    0x00F3: 'TEXT.BOX',
    0x00F4: 'INFO',
    0x00F5: 'GROUP',
    0x00F6: 'GET.OBJECT',
    0x00F7: 'DB',
    0x00F8: 'PAUSE',
    0x00FB: 'RESUME',
    0x00FC: 'FREQUENCY',
    0x00FD: 'ADD.TOOLBAR',
    0x00FE: 'DELETE.TOOLBAR',
    0x00FF: 'User',
    0x0100: 'RESET.TOOLBAR',
    0x0101: 'EVALUATE',
    0x0102: 'GET.TOOLBAR',
    0x0103: 'GET.TOOL',
    0x0104: 'SPELLING.CHECK',
    0x0105: 'ERROR.TYPE',
    0x0106: 'APP.TITLE',
    0x0107: 'WINDOW.TITLE',
    0x0108: 'SAVE.TOOLBAR',
    0x0109: 'ENABLE.TOOL',
    0x010A: 'PRESS.TOOL',
    0x010B: 'REGISTER.ID',
    0x010C: 'GET.WORKBOOK',
    0x010D: 'AVEDEV',
    0x010E: 'BETADIST',
    0x010F: 'GAMMALN',
    0x0110: 'BETAINV',
    0x0111: 'BINOMDIST',
    0x0112: 'CHIDIST',
    0x0113: 'CHIINV',
    0x0114: 'COMBIN',
    0x0115: 'CONFIDENCE',
    0x0116: 'CRITBINOM',
    0x0117: 'EVEN',
    0x0118: 'EXPONDIST',
    0x0119: 'FDIST',
    0x011A: 'FINV',
    0x011B: 'FISHER',
    0x011C: 'FISHERINV',
    0x011D: 'FLOOR',
    0x011E: 'GAMMADIST',
    0x011F: 'GAMMAINV',
    0x0120: 'CEILING',
    0x0121: 'HYPGEOMDIST',
    0x0122: 'LOGNORMDIST',
    0x0123: 'LOGINV',
    0x0124: 'NEGBINOMDIST',
    0x0125: 'NORMDIST',
    0x0126: 'NORMSDIST',
    0x0127: 'NORMINV',
    0x0128: 'NORMSINV',
    0x0129: 'STANDARDIZE',
    0x012A: 'ODD',
    0x012B: 'PERMUT',
    0x012C: 'POISSON',
    0x012D: 'TDIST',
    0x012E: 'WEIBULL',
    0x012F: 'SUMXMY2',
    0x0130: 'SUMX2MY2',
    0x0131: 'SUMX2PY2',
    0x0132: 'CHITEST',
    0x0133: 'CORREL',
    0x0134: 'COVAR',
    0x0135: 'FORECAST',
    0x0136: 'FTEST',
    0x0137: 'INTERCEPT',
    0x0138: 'PEARSON',
    0x0139: 'RSQ',
    0x013A: 'STEYX',
    0x013B: 'SLOPE',
    0x013C: 'TTEST',
    0x013D: 'PROB',
    0x013E: 'DEVSQ',
    0x013F: 'GEOMEAN',
    0x0140: 'HARMEAN',
    0x0141: 'SUMSQ',
    0x0142: 'KURT',
    0x0143: 'SKEW',
    0x0144: 'ZTEST',
    0x0145: 'LARGE',
    0x0146: 'SMALL',
    0x0147: 'QUARTILE',
    0x0148: 'PERCENTILE',
    0x0149: 'PERCENTRANK',
    0x014A: 'MODE',
    0x014B: 'TRIMMEAN',
    0x014C: 'TINV',
    0x014E: 'MOVIE.COMMAND',
    0x014F: 'GET.MOVIE',
    0x0150: 'CONCATENATE',
    0x0151: 'POWER',
    0x0152: 'PIVOT.ADD.DATA',
    0x0153: 'GET.PIVOT.TABLE',
    0x0154: 'GET.PIVOT.FIELD',
    0x0155: 'GET.PIVOT.ITEM',
    0x0156: 'RADIANS',
    0x0157: 'DEGREES',
    0x0158: 'SUBTOTAL',
    0x0159: 'SUMIF',
    0x015A: 'COUNTIF',
    0x015B: 'COUNTBLANK',
    0x015C: 'SCENARIO.GET',
    0x015D: 'OPTIONS.LISTS.GET',
    0x015E: 'ISPMT',
    0x015F: 'DATEDIF',
    0x0160: 'DATESTRING',
    0x0161: 'NUMBERSTRING',
    0x0162: 'ROMAN',
    0x0163: 'OPEN.DIALOG',
    0x0164: 'SAVE.DIALOG',
    0x0165: 'VIEW.GET',
    0x0166: 'GETPIVOTDATA',
    0x0167: 'HYPERLINK',
    0x0168: 'PHONETIC',
    0x0169: 'AVERAGEA',
    0x016A: 'MAXA',
    0x016B: 'MINA',
    0x016C: 'STDEVPA',
    0x016D: 'VARPA',
    0x016E: 'STDEVA',
    0x016F: 'VARA',
    0x0170: 'BAHTTEXT',
    0x0171: 'THAIDAYOFWEEK',
    0x0172: 'THAIDIGIT',
    0x0173: 'THAIMONTHOFYEAR',
    0x0174: 'THAINUMSOUND',
    0x0175: 'THAINUMSTRING',
    0x0176: 'THAISTRINGLENGTH',
    0x0177: 'ISTHAIDIGIT',
    0x0178: 'ROUNDBAHTDOWN',
    0x0179: 'ROUNDBAHTUP',
    0x017A: 'THAIYEAR',
    0x017B: 'RTD',
    
    0x017C: 'CUBEVALUE',
    0x017D: 'CUBEMEMBER',
    0x017E: 'CUBEMEMBERPROPERTY',
    0x017F: 'CUBERANKEDMEMBER',
    0x0180: 'HEX2BIN',
    0x0181: 'HEX2DEC',
    0x0182: 'HEX2OCT',
    0x0183: 'DEC2BIN',
    0x0184: 'DEC2HEX',
    0x0185: 'DEC2OCT',
    0x0186: 'OCT2BIN',
    0x0187: 'OCT2HEX',
    0x0188: 'OCT2DEC',
    0x0189: 'BIN2DEC',
    0x018A: 'BIN2OCT',
    0x018B: 'BIN2HEX',
    0x018C: 'IMSUB',
    0x018D: 'IMDIV',
    0x018E: 'IMPOWER',
    0x018F: 'IMABS',
    0x0190: 'IMSQRT',
    0x0191: 'IMLN',
    0x0192: 'IMLOG2',
    0x0193: 'IMLOG10',
    0x0194: 'IMSIN',
    0x0195: 'IMCOS',
    0x0196: 'IMEXP',
    0x0197: 'IMARGUMENT',
    0x0198: 'IMCONJUGATE',
    0x0199: 'IMAGINARY',
    0x019A: 'IMREAL',
    0x019B: 'COMPLEX',
    0x019C: 'IMSUM',
    0x019D: 'IMPRODUCT',
    0x019E: 'SERIESSUM',
    0x019F: 'FACTDOUBLE',
    0x01A0: 'SQRTPI',
    0x01A1: 'QUOTIENT',
    0x01A2: 'DELTA',
    0x01A3: 'GESTEP',
    0x01A4: 'ISEVEN',
    0x01A5: 'ISODD',
    0x01A6: 'MROUND',
    0x01A7: 'ERF',
    0x01A8: 'ERFC',
    0x01A9: 'BESSELJ',
    0x01AA: 'BESSELK',
    0x01AB: 'BESSELY',
    0x01AC: 'BESSELI',
    0x01AD: 'XIRR',
    0x01AE: 'XNPV',
    0x01AF: 'PRICEMAT',
    0x01B0: 'YIELDMAT',
    0x01B1: 'INTRATE',
    0x01B2: 'RECEIVED',
    0x01B3: 'DISC',
    0x01B4: 'PRICEDISC',
    0x01B5: 'YIELDDISC',
    0x01B6: 'TBILLEQ',
    0x01B7: 'TBILLPRICE',
    0x01B8: 'TBILLYIELD',
    0x01B9: 'PRICE',
    0x01BA: 'YIELD',
    0x01BB: 'DOLLARDE',
    0x01BC: 'DOLLARFR',
    0x01BD: 'NOMINAL',
    0x01BE: 'EFFECT',
    0x01BF: 'CUMPRINC',
    0x01C0: 'CUMIPMT',
    0x01C1: 'EDATE',
    0x01C2: 'EOMONTH',
    0x01C3: 'YEARFRAC',
    0x01C4: 'COUPDAYBS',
    0x01C5: 'COUPDAYS',
    0x01C6: 'COUPDAYSNC',
    0x01C7: 'COUPNCD',
    0x01C8: 'COUPNUM',
    0x01C9: 'COUPPCD',
    0x01CA: 'DURATION',
    0x01CB: 'MDURATION',
    0x01CC: 'ODDLPRICE',
    0x01CD: 'ODDLYIELD',
    0x01CE: 'ODDFPRICE',
    0x01CF: 'ODDFYIELD',
    0x01D0: 'RANDBETWEEN',
    0x01D1: 'WEEKNUM',
    0x01D2: 'AMORDEGRC',
    0x01D3: 'AMORLINC',
    0x01D4: 'CONVERT',
    0x02D4: 'SHEETJS',
    0x01D5: 'ACCRINT',
    0x01D6: 'ACCRINTM',
    0x01D7: 'WORKDAY',
    0x01D8: 'NETWORKDAYS',
    0x01D9: 'GCD',
    0x01DA: 'MULTINOMIAL',
    0x01DB: 'LCM',
    0x01DC: 'FVSCHEDULE',
    0x01DD: 'CUBEKPIMEMBER',
    0x01DE: 'CUBESET',
    0x01DF: 'CUBESETCOUNT',
    0x01E0: 'IFERROR',
    0x01E1: 'COUNTIFS',
    0x01E2: 'SUMIFS',
    0x01E3: 'AVERAGEIF',
    0x01E4: 'AVERAGEIFS'
    };
    var FtabArgc = {
    0x0002: 1, /* ISNA */
    0x0003: 1, /* ISERROR */
    0x000F: 1, /* SIN */
    0x0010: 1, /* COS */
    0x0011: 1, /* TAN */
    0x0012: 1, /* ATAN */
    0x0013: 0, /* PI */
    0x0014: 1, /* SQRT */
    0x0015: 1, /* EXP */
    0x0016: 1, /* LN */
    0x0017: 1, /* LOG10 */
    0x0018: 1, /* ABS */
    0x0019: 1, /* INT */
    0x001A: 1, /* SIGN */
    0x001B: 2, /* ROUND */
    0x001E: 2, /* REPT */
    0x001F: 3, /* MID */
    0x0020: 1, /* LEN */
    0x0021: 1, /* VALUE */
    0x0026: 1, /* NOT */
    0x0027: 2, /* MOD */
    0x0028: 3, /* DCOUNT */
    0x0029: 3, /* DSUM */
    0x002A: 3, /* DAVERAGE */
    0x002B: 3, /* DMIN */
    0x002C: 3, /* DMAX */
    0x002D: 3, /* DSTDEV */
    0x002F: 3, /* DVAR */
    0x0030: 2, /* TEXT */
    0x0035: 1, /* GOTO */
    0x003D: 3, /* MIRR */
    0x0041: 3, /* DATE */
    0x0042: 3, /* TIME */
    0x0043: 1, /* DAY */
    0x0044: 1, /* MONTH */
    0x0045: 1, /* YEAR */
    0x0046: 1, /* WEEKDAY */
    0x0047: 1, /* HOUR */
    0x0048: 1, /* MINUTE */
    0x0049: 1, /* SECOND */
    0x004B: 1, /* AREAS */
    0x004C: 1, /* ROWS */
    0x004D: 1, /* COLUMNS */
    0x004F: 2, /* ABSREF */
    0x0050: 2, /* RELREF */
    0x0053: 1, /* TRANSPOSE */
    0x0055: 0, /* STEP */
    0x0056: 1, /* TYPE */
    0x005A: 1, /* DEREF */
    0x0061: 2, /* ATAN2 */
    0x0062: 1, /* ASIN */
    0x0063: 1, /* ACOS */
    0x0065: 3, /* HLOOKUP */
    0x0066: 3, /* VLOOKUP */
    0x0069: 1, /* ISREF */
    0x006F: 1, /* CHAR */
    0x0070: 1, /* LOWER */
    0x0071: 1, /* UPPER */
    0x0072: 1, /* PROPER */
    0x0075: 2, /* EXACT */
    0x0076: 1, /* TRIM */
    0x0077: 4, /* REPLACE */
    0x0079: 1, /* CODE */
    0x007E: 1, /* ISERR */
    0x007F: 1, /* ISTEXT */
    0x0080: 1, /* ISNUMBER */
    0x0081: 1, /* ISBLANK */
    0x0082: 1, /* T */
    0x0083: 1, /* N */
    0x0085: 1, /* FCLOSE */
    0x0086: 1, /* FSIZE */
    0x0087: 1, /* FREADLN */
    0x0088: 2, /* FREAD */
    0x0089: 2, /* FWRITELN */
    0x008A: 2, /* FWRITE */
    0x008C: 1, /* DATEVALUE */
    0x008D: 1, /* TIMEVALUE */
    0x008E: 3, /* SLN */
    0x008F: 4, /* SYD */
    0x0090: 4, /* DDB */
    0x00A2: 1, /* CLEAN */
    0x00A3: 1, /* MDETERM */
    0x00A4: 1, /* MINVERSE */
    0x00A5: 2, /* MMULT */
    0x00AC: 1, /* WHILE */
    0x00AF: 2, /* INITIATE */
    0x00B0: 2, /* REQUEST */
    0x00B1: 3, /* POKE */
    0x00B2: 2, /* EXECUTE */
    0x00B3: 1, /* TERMINATE */
    0x00B8: 1, /* FACT */
    0x00BD: 3, /* DPRODUCT */
    0x00BE: 1, /* ISNONTEXT */
    0x00C3: 3, /* DSTDEVP */
    0x00C4: 3, /* DVARP */
    0x00C5: 1, /* TRUNC */
    0x00C6: 1, /* ISLOGICAL */
    0x00C7: 3, /* DCOUNTA */
    0x00C9: 1, /* UNREGISTER */
    0x00CF: 4, /* REPLACEB */
    0x00D2: 3, /* MIDB */
    0x00D3: 1, /* LENB */
    0x00D4: 2, /* ROUNDUP */
    0x00D5: 2, /* ROUNDDOWN */
    0x00D6: 1, /* ASC */
    0x00D7: 1, /* DBCS */
    0x00E5: 1, /* SINH */
    0x00E6: 1, /* COSH */
    0x00E7: 1, /* TANH */
    0x00E8: 1, /* ASINH */
    0x00E9: 1, /* ACOSH */
    0x00EA: 1, /* ATANH */
    0x00EB: 3, /* DGET */
    0x00F4: 1, /* INFO */
    0x00F7: 4, /* DB */
    0x00FC: 2, /* FREQUENCY */
    0x0101: 1, /* EVALUATE */
    0x0105: 1, /* ERROR.TYPE */
    0x010F: 1, /* GAMMALN */
    0x0111: 4, /* BINOMDIST */
    0x0112: 2, /* CHIDIST */
    0x0113: 2, /* CHIINV */
    0x0114: 2, /* COMBIN */
    0x0115: 3, /* CONFIDENCE */
    0x0116: 3, /* CRITBINOM */
    0x0117: 1, /* EVEN */
    0x0118: 3, /* EXPONDIST */
    0x0119: 3, /* FDIST */
    0x011A: 3, /* FINV */
    0x011B: 1, /* FISHER */
    0x011C: 1, /* FISHERINV */
    0x011D: 2, /* FLOOR */
    0x011E: 4, /* GAMMADIST */
    0x011F: 3, /* GAMMAINV */
    0x0120: 2, /* CEILING */
    0x0121: 4, /* HYPGEOMDIST */
    0x0122: 3, /* LOGNORMDIST */
    0x0123: 3, /* LOGINV */
    0x0124: 3, /* NEGBINOMDIST */
    0x0125: 4, /* NORMDIST */
    0x0126: 1, /* NORMSDIST */
    0x0127: 3, /* NORMINV */
    0x0128: 1, /* NORMSINV */
    0x0129: 3, /* STANDARDIZE */
    0x012A: 1, /* ODD */
    0x012B: 2, /* PERMUT */
    0x012C: 3, /* POISSON */
    0x012D: 3, /* TDIST */
    0x012E: 4, /* WEIBULL */
    0x012F: 2, /* SUMXMY2 */
    0x0130: 2, /* SUMX2MY2 */
    0x0131: 2, /* SUMX2PY2 */
    0x0132: 2, /* CHITEST */
    0x0133: 2, /* CORREL */
    0x0134: 2, /* COVAR */
    0x0135: 3, /* FORECAST */
    0x0136: 2, /* FTEST */
    0x0137: 2, /* INTERCEPT */
    0x0138: 2, /* PEARSON */
    0x0139: 2, /* RSQ */
    0x013A: 2, /* STEYX */
    0x013B: 2, /* SLOPE */
    0x013C: 4, /* TTEST */
    0x0145: 2, /* LARGE */
    0x0146: 2, /* SMALL */
    0x0147: 2, /* QUARTILE */
    0x0148: 2, /* PERCENTILE */
    0x014B: 2, /* TRIMMEAN */
    0x014C: 2, /* TINV */
    0x0151: 2, /* POWER */
    0x0156: 1, /* RADIANS */
    0x0157: 1, /* DEGREES */
    0x015A: 2, /* COUNTIF */
    0x015B: 1, /* COUNTBLANK */
    0x015E: 4, /* ISPMT */
    0x015F: 3, /* DATEDIF */
    0x0160: 1, /* DATESTRING */
    0x0161: 2, /* NUMBERSTRING */
    0x0168: 1, /* PHONETIC */
    0x0170: 1, /* BAHTTEXT */
    0x0171: 1, /* THAIDAYOFWEEK */
    0x0172: 1, /* THAIDIGIT */
    0x0173: 1, /* THAIMONTHOFYEAR */
    0x0174: 1, /* THAINUMSOUND */
    0x0175: 1, /* THAINUMSTRING */
    0x0176: 1, /* THAISTRINGLENGTH */
    0x0177: 1, /* ISTHAIDIGIT */
    0x0178: 1, /* ROUNDBAHTDOWN */
    0x0179: 1, /* ROUNDBAHTUP */
    0x017A: 1, /* THAIYEAR */
    0x017E: 3, /* CUBEMEMBERPROPERTY */
    0x0181: 1, /* HEX2DEC */
    0x0188: 1, /* OCT2DEC */
    0x0189: 1, /* BIN2DEC */
    0x018C: 2, /* IMSUB */
    0x018D: 2, /* IMDIV */
    0x018E: 2, /* IMPOWER */
    0x018F: 1, /* IMABS */
    0x0190: 1, /* IMSQRT */
    0x0191: 1, /* IMLN */
    0x0192: 1, /* IMLOG2 */
    0x0193: 1, /* IMLOG10 */
    0x0194: 1, /* IMSIN */
    0x0195: 1, /* IMCOS */
    0x0196: 1, /* IMEXP */
    0x0197: 1, /* IMARGUMENT */
    0x0198: 1, /* IMCONJUGATE */
    0x0199: 1, /* IMAGINARY */
    0x019A: 1, /* IMREAL */
    0x019E: 4, /* SERIESSUM */
    0x019F: 1, /* FACTDOUBLE */
    0x01A0: 1, /* SQRTPI */
    0x01A1: 2, /* QUOTIENT */
    0x01A4: 1, /* ISEVEN */
    0x01A5: 1, /* ISODD */
    0x01A6: 2, /* MROUND */
    0x01A8: 1, /* ERFC */
    0x01A9: 2, /* BESSELJ */
    0x01AA: 2, /* BESSELK */
    0x01AB: 2, /* BESSELY */
    0x01AC: 2, /* BESSELI */
    0x01AE: 3, /* XNPV */
    0x01B6: 3, /* TBILLEQ */
    0x01B7: 3, /* TBILLPRICE */
    0x01B8: 3, /* TBILLYIELD */
    0x01BB: 2, /* DOLLARDE */
    0x01BC: 2, /* DOLLARFR */
    0x01BD: 2, /* NOMINAL */
    0x01BE: 2, /* EFFECT */
    0x01BF: 6, /* CUMPRINC */
    0x01C0: 6, /* CUMIPMT */
    0x01C1: 2, /* EDATE */
    0x01C2: 2, /* EOMONTH */
    0x01D0: 2, /* RANDBETWEEN */
    0x01D4: 3, /* CONVERT */
    0x01DC: 2, /* FVSCHEDULE */
    0x01DF: 1, /* CUBESETCOUNT */
    0x01E0: 2, /* IFERROR */
    0xFFFF: 0
    };
    /* [MS-XLSX] 2.2.3 Functions */
    /* [MS-XLSB] 2.5.97.10 Ftab */
    var XLSXFutureFunctions = {
        "_xlfn.ACOT": "ACOT",
        "_xlfn.ACOTH": "ACOTH",
        "_xlfn.AGGREGATE": "AGGREGATE",
        "_xlfn.ARABIC": "ARABIC",
        "_xlfn.AVERAGEIF": "AVERAGEIF",
        "_xlfn.AVERAGEIFS": "AVERAGEIFS",
        "_xlfn.BASE": "BASE",
        "_xlfn.BETA.DIST": "BETA.DIST",
        "_xlfn.BETA.INV": "BETA.INV",
        "_xlfn.BINOM.DIST": "BINOM.DIST",
        "_xlfn.BINOM.DIST.RANGE": "BINOM.DIST.RANGE",
        "_xlfn.BINOM.INV": "BINOM.INV",
        "_xlfn.BITAND": "BITAND",
        "_xlfn.BITLSHIFT": "BITLSHIFT",
        "_xlfn.BITOR": "BITOR",
        "_xlfn.BITRSHIFT": "BITRSHIFT",
        "_xlfn.BITXOR": "BITXOR",
        "_xlfn.CEILING.MATH": "CEILING.MATH",
        "_xlfn.CEILING.PRECISE": "CEILING.PRECISE",
        "_xlfn.CHISQ.DIST": "CHISQ.DIST",
        "_xlfn.CHISQ.DIST.RT": "CHISQ.DIST.RT",
        "_xlfn.CHISQ.INV": "CHISQ.INV",
        "_xlfn.CHISQ.INV.RT": "CHISQ.INV.RT",
        "_xlfn.CHISQ.TEST": "CHISQ.TEST",
        "_xlfn.COMBINA": "COMBINA",
        "_xlfn.CONCAT": "CONCAT",
        "_xlfn.CONFIDENCE.NORM": "CONFIDENCE.NORM",
        "_xlfn.CONFIDENCE.T": "CONFIDENCE.T",
        "_xlfn.COT": "COT",
        "_xlfn.COTH": "COTH",
        "_xlfn.COUNTIFS": "COUNTIFS",
        "_xlfn.COVARIANCE.P": "COVARIANCE.P",
        "_xlfn.COVARIANCE.S": "COVARIANCE.S",
        "_xlfn.CSC": "CSC",
        "_xlfn.CSCH": "CSCH",
        "_xlfn.DAYS": "DAYS",
        "_xlfn.DECIMAL": "DECIMAL",
        "_xlfn.ECMA.CEILING": "ECMA.CEILING",
        "_xlfn.ERF.PRECISE": "ERF.PRECISE",
        "_xlfn.ERFC.PRECISE": "ERFC.PRECISE",
        "_xlfn.EXPON.DIST": "EXPON.DIST",
        "_xlfn.F.DIST": "F.DIST",
        "_xlfn.F.DIST.RT": "F.DIST.RT",
        "_xlfn.F.INV": "F.INV",
        "_xlfn.F.INV.RT": "F.INV.RT",
        "_xlfn.F.TEST": "F.TEST",
        "_xlfn.FILTERXML": "FILTERXML",
        "_xlfn.FLOOR.MATH": "FLOOR.MATH",
        "_xlfn.FLOOR.PRECISE": "FLOOR.PRECISE",
        "_xlfn.FORECAST.ETS": "FORECAST.ETS",
        "_xlfn.FORECAST.ETS.CONFINT": "FORECAST.ETS.CONFINT",
        "_xlfn.FORECAST.ETS.SEASONALITY": "FORECAST.ETS.SEASONALITY",
        "_xlfn.FORECAST.ETS.STAT": "FORECAST.ETS.STAT",
        "_xlfn.FORECAST.LINEAR": "FORECAST.LINEAR",
        "_xlfn.FORMULATEXT": "FORMULATEXT",
        "_xlfn.GAMMA": "GAMMA",
        "_xlfn.GAMMA.DIST": "GAMMA.DIST",
        "_xlfn.GAMMA.INV": "GAMMA.INV",
        "_xlfn.GAMMALN.PRECISE": "GAMMALN.PRECISE",
        "_xlfn.GAUSS": "GAUSS",
        "_xlfn.HYPGEOM.DIST": "HYPGEOM.DIST",
        "_xlfn.IFERROR": "IFERROR",
        "_xlfn.IFNA": "IFNA",
        "_xlfn.IMCOSH": "IMCOSH",
        "_xlfn.IMCOT": "IMCOT",
        "_xlfn.IMCSC": "IMCSC",
        "_xlfn.IMCSCH": "IMCSCH",
        "_xlfn.IMSEC": "IMSEC",
        "_xlfn.IMSECH": "IMSECH",
        "_xlfn.IMSINH": "IMSINH",
        "_xlfn.IMTAN": "IMTAN",
        "_xlfn.ISFORMULA": "ISFORMULA",
        "_xlfn.ISO.CEILING": "ISO.CEILING",
        "_xlfn.ISOWEEKNUM": "ISOWEEKNUM",
        "_xlfn.LOGNORM.DIST": "LOGNORM.DIST",
        "_xlfn.LOGNORM.INV": "LOGNORM.INV",
        "_xlfn.MAXIFS": "MAXIFS",
        "_xlfn.MINIFS": "MINIFS",
        "_xlfn.MODE.MULT": "MODE.MULT",
        "_xlfn.MODE.SNGL": "MODE.SNGL",
        "_xlfn.MUNIT": "MUNIT",
        "_xlfn.NEGBINOM.DIST": "NEGBINOM.DIST",
        "_xlfn.NETWORKDAYS.INTL": "NETWORKDAYS.INTL",
        "_xlfn.NIGBINOM": "NIGBINOM",
        "_xlfn.NORM.DIST": "NORM.DIST",
        "_xlfn.NORM.INV": "NORM.INV",
        "_xlfn.NORM.S.DIST": "NORM.S.DIST",
        "_xlfn.NORM.S.INV": "NORM.S.INV",
        "_xlfn.NUMBERVALUE": "NUMBERVALUE",
        "_xlfn.PDURATION": "PDURATION",
        "_xlfn.PERCENTILE.EXC": "PERCENTILE.EXC",
        "_xlfn.PERCENTILE.INC": "PERCENTILE.INC",
        "_xlfn.PERCENTRANK.EXC": "PERCENTRANK.EXC",
        "_xlfn.PERCENTRANK.INC": "PERCENTRANK.INC",
        "_xlfn.PERMUTATIONA": "PERMUTATIONA",
        "_xlfn.PHI": "PHI",
        "_xlfn.POISSON.DIST": "POISSON.DIST",
        "_xlfn.QUARTILE.EXC": "QUARTILE.EXC",
        "_xlfn.QUARTILE.INC": "QUARTILE.INC",
        "_xlfn.QUERYSTRING": "QUERYSTRING",
        "_xlfn.RANK.AVG": "RANK.AVG",
        "_xlfn.RANK.EQ": "RANK.EQ",
        "_xlfn.RRI": "RRI",
        "_xlfn.SEC": "SEC",
        "_xlfn.SECH": "SECH",
        "_xlfn.SHEET": "SHEET",
        "_xlfn.SHEETS": "SHEETS",
        "_xlfn.SKEW.P": "SKEW.P",
        "_xlfn.STDEV.P": "STDEV.P",
        "_xlfn.STDEV.S": "STDEV.S",
        "_xlfn.SUMIFS": "SUMIFS",
        "_xlfn.T.DIST": "T.DIST",
        "_xlfn.T.DIST.2T": "T.DIST.2T",
        "_xlfn.T.DIST.RT": "T.DIST.RT",
        "_xlfn.T.INV": "T.INV",
        "_xlfn.T.INV.2T": "T.INV.2T",
        "_xlfn.T.TEST": "T.TEST",
        "_xlfn.TEXTJOIN": "TEXTJOIN",
        "_xlfn.UNICHAR": "UNICHAR",
        "_xlfn.UNICODE": "UNICODE",
        "_xlfn.VAR.P": "VAR.P",
        "_xlfn.VAR.S": "VAR.S",
        "_xlfn.WEBSERVICE": "WEBSERVICE",
        "_xlfn.WEIBULL.DIST": "WEIBULL.DIST",
        "_xlfn.WORKDAY.INTL": "WORKDAY.INTL",
        "_xlfn.XOR": "XOR",
        "_xlfn.Z.TEST": "Z.TEST"
    };
    
    /* Part 3 TODO: actually parse formulae */
    function ods_to_csf_formula(f) {
        if(f.substr(0,3) == "of:") f = f.substr(3);
        /* 5.2 Basic Expressions */
        if(f.charCodeAt(0) == 61) {
            f = f.substr(1);
            if(f.charCodeAt(0) == 61) f = f.substr(1);
        }
        f = f.replace(/COM\.MICROSOFT\./g, "");
        /* Part 3 Section 5.8 References */
        f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) { return $1.replace(/\./g,""); });
        /* TODO: something other than this */
        f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
        return f.replace(/[;~]/g,",").replace(/\|/g,";");
    }
    
    function csf_to_ods_formula(f) {
        var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g,":");
        /* TODO: something other than this */
        return o.replace(/;/g, "|").replace(/,/g,";");
    }
    
    function ods_to_csf_3D(r) {
        var a = r.split(":");
        var s = a[0].split(".")[0];
        return [s, a[0].split(".")[1] + (a.length > 1 ? (":" + (a[1].split(".")[1] || a[1].split(".")[0])) : "")];
    }
    
    function csf_to_ods_3D(r) {
        return r.replace(/\./,"!");
    }
    
    var strs = {}; // shared strings
    var _ssfopts = {}; // spreadsheet formatting options
    
    RELS.WS = [
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
        "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
    ];
    
    function get_sst_id(sst, str) {
        for(var i = 0, len = sst.length; i < len; ++i) if(sst[i].t === str) { sst.Count ++; return i; }
        sst[len] = {t:str}; sst.Count ++; sst.Unique ++; return len;
    }
    
    function col_obj_w(C, col) {
        var p = ({min:C+1,max:C+1});
        /* wch (chars), wpx (pixels) */
        var wch = -1;
        if(col.MDW) MDW = col.MDW;
        if(col.width != null) p.customWidth = 1;
        else if(col.wpx != null) wch = px2char(col.wpx);
        else if(col.wch != null) wch = col.wch;
        if(wch > -1) { p.width = char2width(wch); p.customWidth = 1; }
        else if(col.width != null) p.width = col.width;
        if(col.hidden) p.hidden = true;
        return p;
    }
    
    function default_margins(margins, mode) {
        if(!margins) return;
        var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
        if(mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];
        if(margins.left   == null) margins.left   = defs[0];
        if(margins.right  == null) margins.right  = defs[1];
        if(margins.top    == null) margins.top    = defs[2];
        if(margins.bottom == null) margins.bottom = defs[3];
        if(margins.header == null) margins.header = defs[4];
        if(margins.footer == null) margins.footer = defs[5];
    }
    
    function get_cell_style(styles, cell, opts) {
        var z = opts.revssf[cell.z != null ? cell.z : "General"];
        var i = 0x3c, len = styles.length;
        if(z == null && opts.ssf) {
            for(; i < 0x188; ++i) if(opts.ssf[i] == null) {
                SSF.load(cell.z, i);
                // $FlowIgnore
                opts.ssf[i] = cell.z;
                opts.revssf[cell.z] = z = i;
                break;
            }
        }
        for(i = 0; i != len; ++i) if(styles[i].numFmtId === z) return i;
        styles[len] = {
            numFmtId:z,
            fontId:0,
            fillId:0,
            borderId:0,
            xfId:0,
            applyNumberFormat:1
        };
        return len;
    }
    
    function safe_format(p, fmtid, fillid, opts, themes, styles) {
        if(p.t === 'z') return;
        if(p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);
        try {
            if(opts.cellNF) p.z = SSF._table[fmtid];
        } catch(e) { if(opts.WTF) throw e; }
        if(!opts || opts.cellText !== false) try {
            if(p.t === 'e') p.w = p.w || BErr[p.v];
            else if(fmtid === 0) {
                if(p.t === 'n') {
                    if((p.v|0) === p.v) p.w = SSF._general_int(p.v);
                    else p.w = SSF._general_num(p.v);
                }
                else if(p.t === 'd') {
                    var dd = datenum(p.v);
                    if((dd|0) === dd) p.w = SSF._general_int(dd);
                    else p.w = SSF._general_num(dd);
                }
                else if(p.v === undefined) return "";
                else p.w = SSF._general(p.v,_ssfopts);
            }
            else if(p.t === 'd') p.w = SSF.format(fmtid,datenum(p.v),_ssfopts);
            else p.w = SSF.format(fmtid,p.v,_ssfopts);
        } catch(e) { if(opts.WTF) throw e; }
        if(!opts.cellStyles) return;
        if(fillid != null) try {
            p.s = styles.Fills[fillid];
            if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
                p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
                if(opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
            }
            if (p.s.bgColor && p.s.bgColor.theme) {
                p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
                if(opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
            }
        } catch(e) { if(opts.WTF && styles.Fills) throw e; }
    }
    function parse_ws_xml_dim(ws, s) {
        var d = safe_decode_range(s);
        if(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws["!ref"] = encode_range(d);
    }
    var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
    var sheetdataregex = /<(?:\w+:)?sheetData>([\s\S]*)<\/(?:\w+:)?sheetData>/;
    var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
    var dimregex = /"(\w*:\w*)"/;
    var colregex = /<(?:\w:)?col[^>]*[\/]?>/g;
    var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
    var marginregex= /<(?:\w:)?pageMargins[^>]*\/>/g;
    var sheetprregex = /<(?:\w:)?sheetPr(?:[^>a-z][^>]*)?\/>/;
    var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
    /* 18.3 Worksheets */
    function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
        if(!data) return data;
        if(DENSE != null && opts.dense == null) opts.dense = DENSE;
    
        /* 18.3.1.99 worksheet CT_Worksheet */
        var s = opts.dense ? ([]) : ({});
        var refguess = ({s: {r:2000000, c:2000000}, e: {r:0, c:0} });
    
        var data1 = "", data2 = "";
        var mtch = data.match(sheetdataregex);
        if(mtch) {
            data1 = data.substr(0, mtch.index);
            data2 = data.substr(mtch.index + mtch[0].length);
        } else data1 = data2 = data;
    
        /* 18.3.1.82 sheetPr CT_SheetPr */
        var sheetPr = data1.match(sheetprregex);
        if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    
        /* 18.3.1.35 dimension CT_SheetDimension */
        // $FlowIgnore
        var ridx = (data1.match(/<(?:\w*:)?dimension/)||{index:-1}).index;
        if(ridx > 0) {
            var ref = data1.substr(ridx,50).match(dimregex);
            if(ref) parse_ws_xml_dim(s, ref[1]);
        }
    
        /* 18.3.1.88 sheetViews CT_SheetViews */
        var svs = data1.match(svsregex);
        if(svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
    
        /* 18.3.1.17 cols CT_Cols */
        var columns = [];
        if(opts.cellStyles) {
            /* 18.3.1.13 col CT_Col */
            var cols = data1.match(colregex);
            if(cols) parse_ws_xml_cols(columns, cols);
        }
    
        /* 18.3.1.80 sheetData CT_SheetData ? */
        if(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);
    
        /* 18.3.1.2  autoFilter CT_AutoFilter */
        var afilter = data2.match(afregex);
        if(afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);
    
        /* 18.3.1.55 mergeCells CT_MergeCells */
        var merges = [];
        var _merge = data2.match(mergecregex);
        if(_merge) for(ridx = 0; ridx != _merge.length; ++ridx)
            merges[ridx] = safe_decode_range(_merge[ridx].substr(_merge[ridx].indexOf("\"")+1));
    
        /* 18.3.1.48 hyperlinks CT_Hyperlinks */
        var hlink = data2.match(hlinkregex);
        if(hlink) parse_ws_xml_hlinks(s, hlink, rels);
    
        /* 18.3.1.62 pageMargins CT_PageMargins */
        var margins = data2.match(marginregex);
        if(margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));
    
        if(!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
        if(opts.sheetRows > 0 && s["!ref"]) {
            var tmpref = safe_decode_range(s["!ref"]);
            if(opts.sheetRows < +tmpref.e.r) {
                tmpref.e.r = opts.sheetRows - 1;
                if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
                if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
                if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
                if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
                s["!fullref"] = s["!ref"];
                s["!ref"] = encode_range(tmpref);
            }
        }
        if(columns.length > 0) s["!cols"] = columns;
        if(merges.length > 0) s["!merges"] = merges;
        return s;
    }
    
    function write_ws_xml_merges(merges) {
        if(merges.length === 0) return "";
        var o = '<mergeCells count="' + merges.length + '">';
        for(var i = 0; i != merges.length; ++i) o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';
        return o + '</mergeCells>';
    }
    
    /* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */
    function parse_ws_xml_sheetpr(sheetPr, s, wb, idx) {
        var data = parsexmltag(sheetPr);
        if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
        if(data.codeName) wb.Sheets[idx].CodeName = data.codeName;
    }
    
    /* 18.3.1.85 sheetProtection CT_SheetProtection */
    function write_ws_xml_protection(sp) {
        // algorithmName, hashValue, saltValue, spinCountpassword
        var o = ({sheet:1});
        var deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
        var deftrue = [
            "formatColumns", "formatRows", "formatCells",
            "insertColumns", "insertRows", "insertHyperlinks",
            "deleteColumns", "deleteRows",
            "sort", "autoFilter", "pivotTables"
        ];
        deffalse.forEach(function(n) { if(sp[n] != null && sp[n]) o[n] = "1"; });
        deftrue.forEach(function(n) { if(sp[n] != null && !sp[n]) o[n] = "0"; });
        /* TODO: algorithm */
        if(sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
        return writextag('sheetProtection', null, o);
    }
    
    function parse_ws_xml_hlinks(s, data, rels) {
        var dense = Array.isArray(s);
        for(var i = 0; i != data.length; ++i) {
            var val = parsexmltag(utf8read(data[i]), true);
            if(!val.ref) return;
            var rel = ((rels || {})['!id']||[])[val.id];
            if(rel) {
                val.Target = rel.Target;
                if(val.location) val.Target += "#"+val.location;
            } else {
                val.Target = "#" + val.location;
                rel = {Target: val.Target, TargetMode: 'Internal'};
            }
            val.Rel = rel;
            if(val.tooltip) { val.Tooltip = val.tooltip; delete val.tooltip; }
            var rng = safe_decode_range(val.ref);
            for(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {
                var addr = encode_cell({c:C,r:R});
                if(dense) {
                    if(!s[R]) s[R] = [];
                    if(!s[R][C]) s[R][C] = {t:"z",v:undefined};
                    s[R][C].l = val;
                } else {
                    if(!s[addr]) s[addr] = {t:"z",v:undefined};
                    s[addr].l = val;
                }
            }
        }
    }
    
    function parse_ws_xml_margins(margin) {
        var o = {};
        ["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
            if(margin[k]) o[k] = parseFloat(margin[k]);
        });
        return o;
    }
    function write_ws_xml_margins(margin) {
        default_margins(margin);
        return writextag('pageMargins', null, margin);
    }
    
    function parse_ws_xml_cols(columns, cols) {
        var seencol = false;
        for(var coli = 0; coli != cols.length; ++coli) {
            var coll = parsexmltag(cols[coli], true);
            if(coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
            var colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;
            delete coll.min; delete coll.max; coll.width = +coll.width;
            if(!seencol && coll.width) { seencol = true; find_mdw_colw(coll.width); }
            process_col(coll);
            while(colm <= colM) columns[colm++] = dup(coll);
        }
    }
    
    function write_ws_xml_cols(ws, cols) {
        var o = ["<cols>"], col, width;
        for(var i = 0; i != cols.length; ++i) {
            if(!(col = cols[i])) continue;
            o[o.length] = (writextag('col', null, col_obj_w(i, col)));
        }
        o[o.length] = "</cols>";
        return o.join("");
    }
    
    function parse_ws_xml_autofilter(data) {
        var o = { ref: (data.match(/ref="([^"]*)"/)||[])[1]};
        return o;
    }
    function write_ws_xml_autofilter(data) {
        return writextag("autoFilter", null, {ref:data.ref});
    }
    
    /* 18.3.1.88 sheetViews CT_SheetViews */
    /* 18.3.1.87 sheetView CT_SheetView */
    var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/>/;
    function parse_ws_xml_sheetviews(data, wb) {
        (data.match(sviewregex)||[]).forEach(function(r) {
            var tag = parsexmltag(r);
            if(parsexmlbool(tag.rightToLeft)) {
                if(!wb.Views) wb.Views = [{}];
                if(!wb.Views[0]) wb.Views[0] = {};
                wb.Views[0].RTL = true;
            }
        });
    }
    function write_ws_xml_sheetviews(ws, opts, idx, wb) {
        var sview = {workbookViewId:"0"};
        // $FlowIgnore
        if( (((wb||{}).Workbook||{}).Views||[])[0] ) sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
        return writextag("sheetViews", writextag("sheetView", null, sview), {});
    }
    
    function write_ws_xml_cell(cell, ref, ws, opts, idx, wb) {
        if(cell.v === undefined && cell.f === undefined || cell.t === 'z') return "";
        var vv = "";
        var oldt = cell.t, oldv = cell.v;
        switch(cell.t) {
            case 'b': vv = cell.v ? "1" : "0"; break;
            case 'n': vv = ''+cell.v; break;
            case 'e': vv = BErr[cell.v]; break;
            case 'd':
                if(opts.cellDates) vv = parseDate(cell.v, -1).toISOString();
                else {
                    cell = dup(cell);
                    cell.t = 'n';
                    vv = ''+(cell.v = datenum(parseDate(cell.v)));
                }
                if(typeof cell.z === 'undefined') cell.z = SSF._table[14];
                break;
            default: vv = cell.v; break;
        }
        var v = writetag('v', escapexml(vv)), o = ({r:ref});
        /* TODO: cell style */
        var os = get_cell_style(opts.cellXfs, cell, opts);
        if(os !== 0) o.s = os;
        switch(cell.t) {
            case 'n': break;
            case 'd': o.t = "d"; break;
            case 'b': o.t = "b"; break;
            case 'e': o.t = "e"; break;
            default: if(cell.v == null) { delete cell.t; break; }
                if(opts.bookSST) {
                    v = writetag('v', ''+get_sst_id(opts.Strings, cell.v));
                    o.t = "s"; break;
                }
                o.t = "str"; break;
        }
        if(cell.t != oldt) { cell.t = oldt; cell.v = oldv; }
        if(cell.f) {
            var ff = cell.F && cell.F.substr(0, ref.length) == ref ? {t:"array", ref:cell.F} : null;
            v = writextag('f', escapexml(cell.f), ff) + (cell.v != null ? v : "");
        }
        if(cell.l) ws['!links'].push([ref, cell.l]);
        if(cell.c) ws['!comments'].push([ref, cell.c]);
        return writextag('c', v, o);
    }
    
    var parse_ws_xml_data = (function() {
        var cellregex = /<(?:\w+:)?c[ >]/, rowregex = /<\/(?:\w+:)?row>/;
        var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
        var refregex = /ref=["']([^"']*)["']/;
        var match_v = matchtag("v"), match_f = matchtag("f");
    
    return function parse_ws_xml_data(sdata, s, opts, guess, themes, styles) {
        var ri = 0, x = "", cells = [], cref = [], idx=0, i=0, cc=0, d="", p;
        var tag, tagr = 0, tagc = 0;
        var sstr, ftag;
        var fmtid = 0, fillid = 0;
        var do_format = Array.isArray(styles.CellXf), cf;
        var arrayf = [];
        var sharedf = [];
        var dense = Array.isArray(s);
        var rows = [], rowobj = {}, rowrite = false;
        for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
            x = marr[mt].trim();
            var xlen = x.length;
            if(xlen === 0) continue;
    
            /* 18.3.1.73 row CT_Row */
            for(ri = 0; ri < xlen; ++ri) if(x.charCodeAt(ri) === 62) break; ++ri;
            tag = parsexmltag(x.substr(0,ri), true);
            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
            if(opts.sheetRows && opts.sheetRows < tagr) continue;
            if(guess.s.r > tagr - 1) guess.s.r = tagr - 1;
            if(guess.e.r < tagr - 1) guess.e.r = tagr - 1;
    
            if(opts && opts.cellStyles) {
                rowobj = {}; rowrite = false;
                if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
                if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
                if(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }
                if(rowrite) rows[tagr-1] = rowobj;
            }
    
            /* 18.3.1.4 c CT_Cell */
            cells = x.substr(ri).split(cellregex);
            for(ri = 0; ri != cells.length; ++ri) {
                x = cells[ri].trim();
                if(x.length === 0) continue;
                cref = x.match(rregex); idx = ri; i=0; cc=0;
                x = "<c " + (x.substr(0,1)=="<"?">":"") + x;
                if(cref != null && cref.length === 2) {
                    idx = 0; d=cref[1];
                    for(i=0; i != d.length; ++i) {
                        if((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;
                        idx = 26*idx + cc;
                    }
                    --idx;
                    tagc = idx;
                } else ++tagc;
                for(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;
                tag = parsexmltag(x.substr(0,i), true);
                if(!tag.r) tag.r = encode_cell({r:tagr-1, c:tagc});
                d = x.substr(i);
                p = ({t:""});
    
                if((cref=d.match(match_v))!= null && cref[1] !== '') p.v=unescapexml(cref[1]);
                if(opts.cellFormula) {
                    if((cref=d.match(match_f))!= null && cref[1] !== '') {
                        /* TODO: match against XLSXFutureFunctions */
                        p.f=_xlfn(unescapexml(utf8read(cref[1])));
                        if(cref[0].indexOf('t="array"') > -1) {
                            p.F = (d.match(refregex)||[])[1];
                            if(p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
                        } else if(cref[0].indexOf('t="shared"') > -1) {
                            // TODO: parse formula
                            ftag = parsexmltag(cref[0]);
                            sharedf[parseInt(ftag.si, 10)] = [ftag, _xlfn(unescapexml(utf8read(cref[1])))];
                        }
                    } else if((cref=d.match(/<f[^>]*\/>/))) {
                        ftag = parsexmltag(cref[0]);
                        if(sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][0].ref, tag.r);
                    }
                    /* TODO: factor out contains logic */
                    var _tag = decode_cell(tag.r);
                    for(i = 0; i < arrayf.length; ++i)
                        if(_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r)
                            if(_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)
                                p.F = arrayf[i][1];
                }
    
                if(tag.t == null && p.v === undefined) {
                    if(p.f || p.F) {
                        p.v = 0; p.t = "n";
                    } else if(!opts.sheetStubs) continue;
                    else p.t = "z";
                }
                else p.t = tag.t || "n";
                if(guess.s.c > idx) guess.s.c = idx;
                if(guess.e.c < idx) guess.e.c = idx;
                /* 18.18.11 t ST_CellType */
                switch(p.t) {
                    case 'n':
                        if(p.v == "" || p.v == null) {
                            if(!opts.sheetStubs) continue;
                            p.t = 'z';
                        } else p.v = parseFloat(p.v);
                        break;
                    case 's':
                        if(typeof p.v == 'undefined') {
                            if(!opts.sheetStubs) continue;
                            p.t = 'z';
                        } else {
                            sstr = strs[parseInt(p.v, 10)];
                            p.v = sstr.t;
                            p.r = sstr.r;
                            if(opts.cellHTML) p.h = sstr.h;
                        }
                        break;
                    case 'str':
                        p.t = "s";
                        p.v = (p.v!=null) ? utf8read(p.v) : '';
                        if(opts.cellHTML) p.h = escapehtml(p.v);
                        break;
                    case 'inlineStr':
                        cref = d.match(isregex);
                        p.t = 's';
                        if(cref != null && (sstr = parse_si(cref[1]))) p.v = sstr.t; else p.v = "";
                        break;
                    case 'b': p.v = parsexmlbool(p.v); break;
                    case 'd':
                        if(opts.cellDates) p.v = parseDate(p.v, 1);
                        else { p.v = datenum(parseDate(p.v, 1)); p.t = 'n'; }
                        break;
                    /* error string in .w, number in .v */
                    case 'e':
                        if(!opts || opts.cellText !== false) p.w = p.v;
                        p.v = RBErr[p.v]; break;
                }
                /* formatting */
                fmtid = fillid = 0;
                if(do_format && tag.s !== undefined) {
                    cf = styles.CellXf[tag.s];
                    if(cf != null) {
                        if(cf.numFmtId != null) fmtid = cf.numFmtId;
                        if(opts.cellStyles) {
                            if(cf.fillId != null) fillid = cf.fillId;
                        }
                    }
                }
                safe_format(p, fmtid, fillid, opts, themes, styles);
                if(opts.cellDates && do_format && p.t == 'n' && SSF.is_date(SSF._table[fmtid])) { p.t = 'd'; p.v = numdate(p.v); }
                if(dense) {
                    var _r = decode_cell(tag.r);
                    if(!s[_r.r]) s[_r.r] = [];
                    s[_r.r][_r.c] = p;
                } else s[tag.r] = p;
            }
        }
        if(rows.length > 0) s['!rows'] = rows;
    }; })();
    
    function write_ws_xml_data(ws, opts, idx, wb, rels) {
        var o = [], r = [], range = safe_decode_range(ws['!ref']), cell="", ref, rr = "", cols = [], R=0, C=0, rows = ws['!rows'];
        var dense = Array.isArray(ws);
        var params = ({r:rr}), row, height = -1;
        for(C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
        for(R = range.s.r; R <= range.e.r; ++R) {
            r = [];
            rr = encode_row(R);
            for(C = range.s.c; C <= range.e.c; ++C) {
                ref = cols[C] + rr;
                var _cell = dense ? (ws[R]||[])[C]: ws[ref];
                if(_cell === undefined) continue;
                if((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);
            }
            if(r.length > 0 || rows && rows[R]) {
                params = ({r:rr});
                if(rows && rows[R]) {
                    row = rows[R];
                    if(row.hidden) params.hidden = 1;
                    height = -1;
                    if (row.hpx) height = px2pt(row.hpx);
                    else if (row.hpt) height = row.hpt;
                    if (height > -1) { params.ht = height; params.customHeight = 1; }
                    if (row.level) { params.outlineLevel = row.level; }
                }
                o[o.length] = (writextag('row', r.join(""), params));
            }
        }
        if(rows) for(; R < rows.length; ++R) {
            if(rows && rows[R]) {
                params = ({r:R+1});
                row = rows[R];
                if(row.hidden) params.hidden = 1;
                height = -1;
                if (row.hpx) height = px2pt(row.hpx);
                else if (row.hpt) height = row.hpt;
                if (height > -1) { params.ht = height; params.customHeight = 1; }
                if (row.level) { params.outlineLevel = row.level; }
                o[o.length] = (writextag('row', "", params));
            }
        }
        return o.join("");
    }
    
    var WS_XML_ROOT = writextag('worksheet', null, {
        'xmlns': XMLNS.main[0],
        'xmlns:r': XMLNS.r
    });
    
    function write_ws_xml(idx, opts, wb, rels) {
        var o = [XML_HEADER, WS_XML_ROOT];
        var s = wb.SheetNames[idx], sidx = 0, rdata = "";
        var ws = wb.Sheets[s];
        if(ws == null) ws = {};
        var ref = ws['!ref']; if(ref == null) ref = 'A1';
        if(!rels) rels = {};
        ws['!comments'] = [];
        ws['!drawing'] = [];
    
        var cname = wb.SheetNames[idx];
        try { if(wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname; } catch(e) {}
        o[o.length] = (writextag('sheetPr', null, {'codeName': escapexml(cname)}));
    
        o[o.length] = (writextag('dimension', null, {'ref': ref}));
    
        o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
    
        /* TODO: store in WB, process styles */
        if(opts.sheetFormat) o[o.length] = (writextag('sheetFormatPr', null, {
            defaultRowHeight:opts.sheetFormat.defaultRowHeight||'16',
            baseColWidth:opts.sheetFormat.baseColWidth||'10',
            outlineLevelRow:opts.sheetFormat.outlineLevelRow||'7'
        }));
    
        if(ws['!cols'] != null && ws['!cols'].length > 0) o[o.length] = (write_ws_xml_cols(ws, ws['!cols']));
    
        o[sidx = o.length] = '<sheetData/>';
        ws['!links'] = [];
        if(ws['!ref'] != null) {
            rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
            if(rdata.length > 0) o[o.length] = (rdata);
        }
        if(o.length>sidx+1) { o[o.length] = ('</sheetData>'); o[sidx]=o[sidx].replace("/>",">"); }
    
        /* sheetCalcPr */
    
        if(ws['!protect'] != null) o[o.length] = write_ws_xml_protection(ws['!protect']);
    
        /* protectedRanges */
        /* scenarios */
    
        if(ws['!autofilter'] != null) o[o.length] = write_ws_xml_autofilter(ws['!autofilter']);
    
        /* sortState */
        /* dataConsolidate */
        /* customSheetViews */
    
        if(ws['!merges'] != null && ws['!merges'].length > 0) o[o.length] = (write_ws_xml_merges(ws['!merges']));
    
        /* phoneticPr */
        /* conditionalFormatting */
        /* dataValidations */
    
        var relc = -1, rel, rId = -1;
        if(ws['!links'].length > 0) {
            o[o.length] = "<hyperlinks>";
            ws['!links'].forEach(function(l) {
                if(!l[1].Target) return;
                rel = ({"ref":l[0]});
                if(l[1].Target.charAt(0) != "#") {
                    rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
                    rel["r:id"] = "rId"+rId;
                }
                if((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.substr(relc+1));
                if(l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
                o[o.length] = writextag("hyperlink",null,rel);
            });
            o[o.length] = "</hyperlinks>";
        }
        delete ws['!links'];
    
        /* printOptions */
        if (ws['!margins'] != null) o[o.length] =  write_ws_xml_margins(ws['!margins']);
        /* pageSetup */
    
        var hfidx = o.length;
        o[o.length] = "";
    
        /* rowBreaks */
        /* colBreaks */
        /* customProperties */
        /* cellWatches */
        /* ignoredErrors */
        /* smartTags */
    
        if(ws['!drawing'].length > 0) {
            rId = add_rels(rels, -1, "../drawings/drawing" + (idx+1) + ".xml", RELS.DRAW);
            o[o.length] = writextag("drawing", null, {"r:id":"rId" + rId});
        }
        else delete ws['!drawing'];
    
        if(ws['!comments'].length > 0) {
            rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx+1) + ".vml", RELS.VML);
            o[o.length] = writextag("legacyDrawing", null, {"r:id":"rId" + rId});
            ws['!legacy'] = rId;
        }
    
        /* drawingHF */
        /* picture */
        /* oleObjects */
        /* controls */
        /* webPublishItems */
        /* tableParts */
        /* extList */
    
        if(o.length>2) { o[o.length] = ('</worksheet>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    
    /* [MS-XLSB] 2.4.718 BrtRowHdr */
    function parse_BrtRowHdr(data, length) {
        var z = ({});
        var tgt = data.l + length;
        z.r = data.read_shift(4);
        data.l += 4; // TODO: ixfe
        var miyRw = data.read_shift(2);
        data.l += 1; // TODO: top/bot padding
        var flags = data.read_shift(1);
        data.l = tgt;
        if(flags & 0x07) z.level = flags & 0x07;
        if(flags & 0x10) z.hidden = true;
        if(flags & 0x20) z.hpt = miyRw / 20;
        return z;
    }
    function write_BrtRowHdr(R, range, ws) {
        var o = new_buf(17+8*16);
        var row = (ws['!rows']||[])[R]||{};
        o.write_shift(4, R);
    
        o.write_shift(4, 0); /* TODO: ixfe */
    
        var miyRw = 0x0140;
        if(row.hpx) miyRw = px2pt(row.hpx) * 20;
        else if(row.hpt) miyRw = row.hpt * 20;
        o.write_shift(2, miyRw);
    
        o.write_shift(1, 0); /* top/bot padding */
    
        var flags = 0x0;
        if(row.level) flags |= row.level;
        if(row.hidden) flags |= 0x10;
        if(row.hpx || row.hpt) flags |= 0x20;
        o.write_shift(1, flags);
    
        o.write_shift(1, 0); /* phonetic guide */
    
        /* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */
        var ncolspan = 0, lcs = o.l;
        o.l += 4;
    
        var caddr = {r:R, c:0};
        for(var i = 0; i < 16; ++i) {
            if(range.s.c > ((i+1) << 10) || range.e.c < (i << 10)) continue;
            var first = -1, last = -1;
            for(var j = (i<<10); j < ((i+1)<<10); ++j) {
                caddr.c = j;
                var cell = Array.isArray(ws) ? (ws[caddr.r]||[])[caddr.c] : ws[encode_cell(caddr)];
                if(cell) { if(first < 0) first = j; last = j; }
            }
            if(first < 0) continue;
            ++ncolspan;
            o.write_shift(4, first);
            o.write_shift(4, last);
        }
    
        var l = o.l;
        o.l = lcs;
        o.write_shift(4, ncolspan);
        o.l = l;
    
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    function write_row_header(ba, ws, range, R) {
        var o = write_BrtRowHdr(R, range, ws);
        if(o.length > 17 || (ws['!rows']||[])[R]) write_record(ba, 'BrtRowHdr', o);
    }
    
    /* [MS-XLSB] 2.4.812 BrtWsDim */
    var parse_BrtWsDim = parse_UncheckedRfX;
    var write_BrtWsDim = write_UncheckedRfX;
    
    /* [MS-XLSB] 2.4.813 BrtWsFmtInfo */
    function parse_BrtWsFmtInfo(data, length) {
    }
    //function write_BrtWsFmtInfo(ws, o) { }
    
    /* [MS-XLSB] 2.4.815 BrtWsProp */
    function parse_BrtWsProp(data, length) {
        var z = {};
        /* TODO: pull flags */
        data.l += 19;
        z.name = parse_XLSBCodeName(data, length - 19);
        return z;
    }
    function write_BrtWsProp(str, o) {
        if(o == null) o = new_buf(84+4*str.length);
        for(var i = 0; i < 3; ++i) o.write_shift(1,0);
        write_BrtColor({auto:1}, o);
        o.write_shift(-4,-1);
        o.write_shift(-4,-1);
        write_XLSBCodeName(str, o);
        return o.slice(0, o.l);
    }
    
    /* [MS-XLSB] 2.4.303 BrtCellBlank */
    function parse_BrtCellBlank(data, length) {
        var cell = parse_XLSBCell(data);
        return [cell];
    }
    function write_BrtCellBlank(cell, ncell, o) {
        if(o == null) o = new_buf(8);
        return write_XLSBCell(ncell, o);
    }
    
    
    /* [MS-XLSB] 2.4.304 BrtCellBool */
    function parse_BrtCellBool(data, length) {
        var cell = parse_XLSBCell(data);
        var fBool = data.read_shift(1);
        return [cell, fBool, 'b'];
    }
    function write_BrtCellBool(cell, ncell, o) {
        if(o == null) o = new_buf(9);
        write_XLSBCell(ncell, o);
        o.write_shift(1, cell.v ? 1 : 0);
        return o;
    }
    
    /* [MS-XLSB] 2.4.305 BrtCellError */
    function parse_BrtCellError(data, length) {
        var cell = parse_XLSBCell(data);
        var bError = data.read_shift(1);
        return [cell, bError, 'e'];
    }
    
    /* [MS-XLSB] 2.4.308 BrtCellIsst */
    function parse_BrtCellIsst(data, length) {
        var cell = parse_XLSBCell(data);
        var isst = data.read_shift(4);
        return [cell, isst, 's'];
    }
    function write_BrtCellIsst(cell, ncell, o) {
        if(o == null) o = new_buf(12);
        write_XLSBCell(ncell, o);
        o.write_shift(4, ncell.v);
        return o;
    }
    
    /* [MS-XLSB] 2.4.310 BrtCellReal */
    function parse_BrtCellReal(data, length) {
        var cell = parse_XLSBCell(data);
        var value = parse_Xnum(data);
        return [cell, value, 'n'];
    }
    function write_BrtCellReal(cell, ncell, o) {
        if(o == null) o = new_buf(16);
        write_XLSBCell(ncell, o);
        write_Xnum(cell.v, o);
        return o;
    }
    
    /* [MS-XLSB] 2.4.311 BrtCellRk */
    function parse_BrtCellRk(data, length) {
        var cell = parse_XLSBCell(data);
        var value = parse_RkNumber(data);
        return [cell, value, 'n'];
    }
    function write_BrtCellRk(cell, ncell, o) {
        if(o == null) o = new_buf(12);
        write_XLSBCell(ncell, o);
        write_RkNumber(cell.v, o);
        return o;
    }
    
    
    /* [MS-XLSB] 2.4.314 BrtCellSt */
    function parse_BrtCellSt(data, length) {
        var cell = parse_XLSBCell(data);
        var value = parse_XLWideString(data);
        return [cell, value, 'str'];
    }
    function write_BrtCellSt(cell, ncell, o) {
        if(o == null) o = new_buf(12 + 4 * cell.v.length);
        write_XLSBCell(ncell, o);
        write_XLWideString(cell.v, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.647 BrtFmlaBool */
    function parse_BrtFmlaBool(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts['!row'];
        var value = data.read_shift(1);
        var o = [cell, value, 'b'];
        if(opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
        }
        else data.l = end;
        return o;
    }
    
    /* [MS-XLSB] 2.4.648 BrtFmlaError */
    function parse_BrtFmlaError(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts['!row'];
        var value = data.read_shift(1);
        var o = [cell, value, 'e'];
        if(opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
        }
        else data.l = end;
        return o;
    }
    
    /* [MS-XLSB] 2.4.649 BrtFmlaNum */
    function parse_BrtFmlaNum(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts['!row'];
        var value = parse_Xnum(data);
        var o = [cell, value, 'n'];
        if(opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
        }
        else data.l = end;
        return o;
    }
    
    /* [MS-XLSB] 2.4.650 BrtFmlaString */
    function parse_BrtFmlaString(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts['!row'];
        var value = parse_XLWideString(data);
        var o = [cell, value, 'str'];
        if(opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
        }
        else data.l = end;
        return o;
    }
    
    /* [MS-XLSB] 2.4.676 BrtMergeCell */
    var parse_BrtMergeCell = parse_UncheckedRfX;
    var write_BrtMergeCell = write_UncheckedRfX;
    /* [MS-XLSB] 2.4.108 BrtBeginMergeCells */
    function write_BrtBeginMergeCells(cnt, o) {
        if(o == null) o = new_buf(4);
        o.write_shift(4, cnt);
        return o;
    }
    
    /* [MS-XLSB] 2.4.656 BrtHLink */
    function parse_BrtHLink(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var relId = parse_XLNullableWideString(data);
        var loc = parse_XLWideString(data);
        var tooltip = parse_XLWideString(data);
        var display = parse_XLWideString(data);
        data.l = end;
        var o = ({rfx:rfx, relId:relId, loc:loc, display:display});
        if(tooltip) o.Tooltip = tooltip;
        return o;
    }
    function write_BrtHLink(l, rId) {
        var o = new_buf(50+4*(l[1].Target.length + (l[1].Tooltip || "").length));
        write_UncheckedRfX({s:decode_cell(l[0]), e:decode_cell(l[0])}, o);
        write_RelID("rId" + rId, o);
        var locidx = l[1].Target.indexOf("#");
        var loc = locidx == -1 ? "" : l[1].Target.substr(locidx+1);
        write_XLWideString(loc || "", o);
        write_XLWideString(l[1].Tooltip || "", o);
        write_XLWideString("", o);
        return o.slice(0, o.l);
    }
    
    /* [MS-XLSB] 2.4.6 BrtArrFmla */
    function parse_BrtArrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_RfX(data, 16);
        var fAlwaysCalc = data.read_shift(1);
        var o = [rfx]; o[2] = fAlwaysCalc;
        if(opts.cellFormula) {
            var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
            o[1] = formula;
        } else data.l = end;
        return o;
    }
    
    /* [MS-XLSB] 2.4.742 BrtShrFmla */
    function parse_BrtShrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var o = [rfx];
        if(opts.cellFormula) {
            var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
            o[1] = formula;
            data.l = end;
        } else data.l = end;
        return o;
    }
    
    /* [MS-XLSB] 2.4.323 BrtColInfo */
    /* TODO: once XLS ColInfo is set, combine the functions */
    function write_BrtColInfo(C, col, o) {
        if(o == null) o = new_buf(18);
        var p = col_obj_w(C, col);
        o.write_shift(-4, C);
        o.write_shift(-4, C);
        o.write_shift(4, (p.width || 10) * 256);
        o.write_shift(4, 0/*ixfe*/); // style
        var flags = 0;
        if(col.hidden) flags |= 0x01;
        if(typeof p.width == 'number') flags |= 0x02;
        o.write_shift(1, flags); // bit flag
        o.write_shift(1, 0); // bit flag
        return o;
    }
    
    /* [MS-XLSB] 2.4.672 BrtMargins */
    var BrtMarginKeys = ["left","right","top","bottom","header","footer"];
    function parse_BrtMargins(data, length, opts) {
        var margins = ({});
        BrtMarginKeys.forEach(function(k) { margins[k] = parse_Xnum(data, 8); });
        return margins;
    }
    function write_BrtMargins(margins, o) {
        if(o == null) o = new_buf(6*8);
        default_margins(margins);
        BrtMarginKeys.forEach(function(k) { write_Xnum((margins)[k], o); });
        return o;
    }
    
    /* [MS-XLSB] 2.4.292 BrtBeginWsView */
    function parse_BrtBeginWsView(data, length, opts) {
        var f = data.read_shift(2);
        data.l += 28;
        return { RTL: f & 0x20 };
    }
    function write_BrtBeginWsView(ws, Workbook, o) {
        if(o == null) o = new_buf(30);
        var f = 0x39c;
        // $FlowIgnore
        if((((Workbook||{}).Views||[])[0]||{}).RTL) f |= 0x20;
        o.write_shift(2, f); // bit flag
        o.write_shift(4, 0);
        o.write_shift(4, 0); // view first row
        o.write_shift(4, 0); // view first col
        o.write_shift(1, 0); // gridline color ICV
        o.write_shift(1, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 100); // zoom scale
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(4, 0); // workbook view id
        return o;
    }
    
    /* [MS-XLSB] 2.4.740 BrtSheetProtection */
    function write_BrtSheetProtection(sp, o) {
        if(o == null) o = new_buf(16*4+2);
        o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
        o.write_shift(4, 1); // this record should not be written if no protection
        [
            ["objects",             false], // fObjects
            ["scenarios",           false], // fScenarios
            ["formatCells",          true], // fFormatCells
            ["formatColumns",        true], // fFormatColumns
            ["formatRows",           true], // fFormatRows
            ["insertColumns",        true], // fInsertColumns
            ["insertRows",           true], // fInsertRows
            ["insertHyperlinks",     true], // fInsertHyperlinks
            ["deleteColumns",        true], // fDeleteColumns
            ["deleteRows",           true], // fDeleteRows
            ["selectLockedCells",   false], // fSelLockedCells
            ["sort",                 true], // fSort
            ["autoFilter",           true], // fAutoFilter
            ["pivotTables",          true], // fPivotTables
            ["selectUnlockedCells", false]  // fSelUnlockedCells
        ].forEach(function(n) {
    if(n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
            else      o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
        });
        return o;
    }
    
    /* [MS-XLSB] 2.1.7.61 Worksheet */
    function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
        if(!data) return data;
        var opts = _opts || {};
        if(!rels) rels = {'!id':{}};
        if(DENSE != null && opts.dense == null) opts.dense = DENSE;
        var s = (opts.dense ? [] : {});
    
        var ref;
        var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    
        var pass = false, end = false;
        var row, p, cf, R, C, addr, sstr, rr, cell;
        var merges = [];
        opts.biff = 12;
        opts['!row'] = 0;
    
        var ai = 0, af = false;
    
        var arrayf = [];
        var sharedf = {};
        var supbooks = opts.supbooks || ([[]]);
        supbooks.sharedf = sharedf;
        supbooks.arrayf = arrayf;
        supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) { return x.name; });
        if(!opts.supbooks) {
            opts.supbooks = supbooks;
            if(wb.Names) for(var i = 0; i < wb.Names.length; ++i) supbooks[0][i+1] = wb.Names[i];
        }
    
        var colinfo = [], rowinfo = [];
        var seencol = false;
    
        recordhopper(data, function ws_parse(val, R_n, RT) {
            if(end) return;
            switch(RT) {
                case 0x0094: /* 'BrtWsDim' */
                    ref = val; break;
                case 0x0000: /* 'BrtRowHdr' */
                    row = val;
                    if(opts.sheetRows && opts.sheetRows <= row.r) end=true;
                    rr = encode_row(R = row.r);
                    opts['!row'] = row.r;
                    if(val.hidden || val.hpt || val.level != null) {
                        if(val.hpt) val.hpx = pt2px(val.hpt);
                        rowinfo[val.r] = val;
                    }
                    break;
    
                case 0x0002: /* 'BrtCellRk' */
                case 0x0003: /* 'BrtCellError' */
                case 0x0004: /* 'BrtCellBool' */
                case 0x0005: /* 'BrtCellReal' */
                case 0x0006: /* 'BrtCellSt' */
                case 0x0007: /* 'BrtCellIsst' */
                case 0x0008: /* 'BrtFmlaString' */
                case 0x0009: /* 'BrtFmlaNum' */
                case 0x000A: /* 'BrtFmlaBool' */
                case 0x000B: /* 'BrtFmlaError' */
                    p = ({t:val[2]});
                    switch(val[2]) {
                        case 'n': p.v = val[1]; break;
                        case 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;
                        case 'b': p.v = val[1] ? true : false; break;
                        case 'e': p.v = val[1]; if(opts.cellText !== false) p.w = BErr[p.v]; break;
                        case 'str': p.t = 's'; p.v = val[1]; break;
                    }
                    if((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.numFmtId,null,opts, themes, styles);
                    C = val[0].c;
                    if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
                    else s[encode_col(C) + rr] = p;
                    if(opts.cellFormula) {
                        af = false;
                        for(ai = 0; ai < arrayf.length; ++ai) {
                            var aii = arrayf[ai];
                            if(row.r >= aii[0].s.r && row.r <= aii[0].e.r)
                                if(C >= aii[0].s.c && C <= aii[0].e.c) {
                                    p.F = encode_range(aii[0]); af = true;
                                }
                        }
                        if(!af && val.length > 3) p.f = val[3];
                    }
                    if(refguess.s.r > row.r) refguess.s.r = row.r;
                    if(refguess.s.c > C) refguess.s.c = C;
                    if(refguess.e.r < row.r) refguess.e.r = row.r;
                    if(refguess.e.c < C) refguess.e.c = C;
                    if(opts.cellDates && cf && p.t == 'n' && SSF.is_date(SSF._table[cf.numFmtId])) {
                        var _d = SSF.parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
                    }
                    break;
    
                case 0x0001: /* 'BrtCellBlank' */
                    if(!opts.sheetStubs || pass) break;
                    p = ({t:'z',v:undefined});
                    C = val[0].c;
                    if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
                    else s[encode_col(C) + rr] = p;
                    if(refguess.s.r > row.r) refguess.s.r = row.r;
                    if(refguess.s.c > C) refguess.s.c = C;
                    if(refguess.e.r < row.r) refguess.e.r = row.r;
                    if(refguess.e.c < C) refguess.e.c = C;
                    break;
    
                case 0x00B0: /* 'BrtMergeCell' */
                    merges.push(val); break;
    
                case 0x01EE: /* 'BrtHLink' */
                    var rel = rels['!id'][val.relId];
                    if(rel) {
                        val.Target = rel.Target;
                        if(val.loc) val.Target += "#"+val.loc;
                        val.Rel = rel;
                    } else if(val.relId == '') {
                        val.Target = "#" + val.loc;
                    }
                    for(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {
                        if(opts.dense) {
                            if(!s[R]) s[R] = [];
                            if(!s[R][C]) s[R][C] = {t:'z',v:undefined};
                            s[R][C].l = val;
                        } else {
                            addr = encode_cell({c:C,r:R});
                            if(!s[addr]) s[addr] = {t:'z',v:undefined};
                            s[addr].l = val;
                        }
                    }
                    break;
    
                case 0x01AA: /* 'BrtArrFmla' */
                    if(!opts.cellFormula) break;
                    arrayf.push(val);
                    cell = ((opts.dense ? s[R][C] : s[encode_col(C) + rr]));
                    cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
                    cell.F = encode_range(val[0]);
                    break;
                case 0x01AB: /* 'BrtShrFmla' */
                    if(!opts.cellFormula) break;
                    sharedf[encode_cell(val[0].s)] = val[1];
                    cell = (opts.dense ? s[R][C] : s[encode_col(C) + rr]);
                    cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
                    break;
    
                /* identical to 'ColInfo' in XLS */
                case 0x003C: /* 'BrtColInfo' */
                    if(!opts.cellStyles) break;
                    while(val.e >= val.s) {
                        colinfo[val.e--] = { width: val.w/256, hidden: !!(val.flags & 0x01) };
                        if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
                        process_col(colinfo[val.e+1]);
                    }
                    break;
    
                case 0x00A1: /* 'BrtBeginAFilter' */
                    s['!autofilter'] = { ref:encode_range(val) };
                    break;
    
                case 0x01DC: /* 'BrtMargins' */
                    s['!margins'] = val;
                    break;
    
                case 0x0093: /* 'BrtWsProp' */
                    if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
                    if(val.name) wb.Sheets[idx].CodeName = val.name;
                    break;
    
                case 0x0089: /* 'BrtBeginWsView' */
                    if(!wb.Views) wb.Views = [{}];
                    if(!wb.Views[0]) wb.Views[0] = {};
                    if(val.RTL) wb.Views[0].RTL = true;
                    break;
    
                case 0x01E5: /* 'BrtWsFmtInfo' */
                /* case 'BrtUid' */
                case 0x00AF: /* 'BrtAFilterDateGroupItem' */
                case 0x0284: /* 'BrtActiveX' */
                case 0x0271: /* 'BrtBigName' */
                case 0x0232: /* 'BrtBkHim' */
                case 0x018C: /* 'BrtBrk' */
                case 0x0458: /* 'BrtCFIcon' */
                case 0x047A: /* 'BrtCFRuleExt' */
                case 0x01D7: /* 'BrtCFVO' */
                case 0x041A: /* 'BrtCFVO14' */
                case 0x0289: /* 'BrtCellIgnoreEC' */
                case 0x0451: /* 'BrtCellIgnoreEC14' */
                case 0x0031: /* 'BrtCellMeta' */
                case 0x024D: /* 'BrtCellSmartTagProperty' */
                case 0x025F: /* 'BrtCellWatch' */
                case 0x0234: /* 'BrtColor' */
                case 0x041F: /* 'BrtColor14' */
                case 0x00A8: /* 'BrtColorFilter' */
                case 0x00AE: /* 'BrtCustomFilter' */
                case 0x049C: /* 'BrtCustomFilter14' */
                case 0x01F3: /* 'BrtDRef' */
                case 0x0040: /* 'BrtDVal' */
                case 0x041D: /* 'BrtDVal14' */
                case 0x0226: /* 'BrtDrawing' */
                case 0x00AB: /* 'BrtDynamicFilter' */
                case 0x00A7: /* 'BrtFilter' */
                case 0x0499: /* 'BrtFilter14' */
                case 0x00A9: /* 'BrtIconFilter' */
                case 0x049D: /* 'BrtIconFilter14' */
                case 0x0227: /* 'BrtLegacyDrawing' */
                case 0x0228: /* 'BrtLegacyDrawingHF' */
                case 0x0295: /* 'BrtListPart' */
                case 0x027F: /* 'BrtOleObject' */
                case 0x01DE: /* 'BrtPageSetup' */
                case 0x0097: /* 'BrtPane' */
                case 0x0219: /* 'BrtPhoneticInfo' */
                case 0x01DD: /* 'BrtPrintOptions' */
                case 0x0218: /* 'BrtRangeProtection' */
                case 0x044F: /* 'BrtRangeProtection14' */
                case 0x02A8: /* 'BrtRangeProtectionIso' */
                case 0x0450: /* 'BrtRangeProtectionIso14' */
                case 0x0400: /* 'BrtRwDescent' */
                case 0x0098: /* 'BrtSel' */
                case 0x0297: /* 'BrtSheetCalcProp' */
                case 0x0217: /* 'BrtSheetProtection' */
                case 0x02A6: /* 'BrtSheetProtectionIso' */
                case 0x01F8: /* 'BrtSlc' */
                case 0x0413: /* 'BrtSparkline' */
                case 0x01AC: /* 'BrtTable' */
                case 0x00AA: /* 'BrtTop10Filter' */
                case 0x0032: /* 'BrtValueMeta' */
                case 0x0816: /* 'BrtWebExtension' */
                case 0x0415: /* 'BrtWsFmtInfoEx14' */
                    break;
    
                case 0x0023: /* 'BrtFRTBegin' */
                    pass = true; break;
                case 0x0024: /* 'BrtFRTEnd' */
                    pass = false; break;
                case 0x0025: /* 'BrtACBegin' */ break;
                case 0x0026: /* 'BrtACEnd' */ break;
    
                default:
                    if((R_n||"").indexOf("Begin") > 0){/* empty */}
                    else if((R_n||"").indexOf("End") > 0){/* empty */}
                    else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
            }
        }, opts);
    
        delete opts.supbooks;
        delete opts['!row'];
    
        if(!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
        if(opts.sheetRows && s["!ref"]) {
            var tmpref = safe_decode_range(s["!ref"]);
            if(opts.sheetRows < +tmpref.e.r) {
                tmpref.e.r = opts.sheetRows - 1;
                if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
                if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
                if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
                if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
                s["!fullref"] = s["!ref"];
                s["!ref"] = encode_range(tmpref);
            }
        }
        if(merges.length > 0) s["!merges"] = merges;
        if(colinfo.length > 0) s["!cols"] = colinfo;
        if(rowinfo.length > 0) s["!rows"] = rowinfo;
        return s;
    }
    
    /* TODO: something useful -- this is a stub */
    function write_ws_bin_cell(ba, cell, R, C, opts, ws) {
        if(cell.v === undefined) return "";
        var vv = "";
        switch(cell.t) {
            case 'b': vv = cell.v ? "1" : "0"; break;
            case 'd': // no BrtCellDate :(
                cell = dup(cell);
                cell.z = cell.z || SSF._table[14];
                cell.v = datenum(parseDate(cell.v)); cell.t = 'n';
                break;
            /* falls through */
            case 'n': case 'e': vv = ''+cell.v; break;
            default: vv = cell.v; break;
        }
        var o = ({r:R, c:C});
        /* TODO: cell style */
        o.s = get_cell_style(opts.cellXfs, cell, opts);
        if(cell.l) ws['!links'].push([encode_cell(o), cell.l]);
        if(cell.c) ws['!comments'].push([encode_cell(o), cell.c]);
        switch(cell.t) {
            case 's': case 'str':
                if(opts.bookSST) {
                    vv = get_sst_id(opts.Strings, (cell.v));
                    o.t = "s"; o.v = vv;
                    write_record(ba, "BrtCellIsst", write_BrtCellIsst(cell, o));
                } else {
                    o.t = "str";
                    write_record(ba, "BrtCellSt", write_BrtCellSt(cell, o));
                }
                return;
            case 'n':
                /* TODO: determine threshold for Real vs RK */
                if(cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) write_record(ba, "BrtCellRk", write_BrtCellRk(cell, o));
                else write_record(ba, "BrtCellReal", write_BrtCellReal(cell, o));
                return;
            case 'b':
                o.t = "b";
                write_record(ba, "BrtCellBool", write_BrtCellBool(cell, o));
                return;
            case 'e': /* TODO: error */ o.t = "e"; break;
        }
        write_record(ba, "BrtCellBlank", write_BrtCellBlank(cell, o));
    }
    
    function write_CELLTABLE(ba, ws, idx, opts, wb) {
        var range = safe_decode_range(ws['!ref'] || "A1"), ref, rr = "", cols = [];
        write_record(ba, 'BrtBeginSheetData');
        var dense = Array.isArray(ws);
        var cap = range.e.r;
        if(ws['!rows']) cap = Math.max(range.e.r, ws['!rows'].length - 1);
        for(var R = range.s.r; R <= cap; ++R) {
            rr = encode_row(R);
            /* [ACCELLTABLE] */
            /* BrtRowHdr */
            write_row_header(ba, ws, range, R);
            if(R <= range.e.r) for(var C = range.s.c; C <= range.e.c; ++C) {
                /* *16384CELL */
                if(R === range.s.r) cols[C] = encode_col(C);
                ref = cols[C] + rr;
                var cell = dense ? (ws[R]||[])[C] : ws[ref];
                if(!cell) continue;
                /* write cell */
                write_ws_bin_cell(ba, cell, R, C, opts, ws);
            }
        }
        write_record(ba, 'BrtEndSheetData');
    }
    
    function write_MERGECELLS(ba, ws) {
        if(!ws || !ws['!merges']) return;
        write_record(ba, 'BrtBeginMergeCells', write_BrtBeginMergeCells(ws['!merges'].length));
        ws['!merges'].forEach(function(m) { write_record(ba, 'BrtMergeCell', write_BrtMergeCell(m)); });
        write_record(ba, 'BrtEndMergeCells');
    }
    
    function write_COLINFOS(ba, ws, idx, opts, wb) {
        if(!ws || !ws['!cols']) return;
        write_record(ba, 'BrtBeginColInfos');
        ws['!cols'].forEach(function(m, i) { if(m) write_record(ba, 'BrtColInfo', write_BrtColInfo(i, m)); });
        write_record(ba, 'BrtEndColInfos');
    }
    
    function write_HLINKS(ba, ws, rels) {
        /* *BrtHLink */
        ws['!links'].forEach(function(l) {
            if(!l[1].Target) return;
            var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
            write_record(ba, "BrtHLink", write_BrtHLink(l, rId));
        });
        delete ws['!links'];
    }
    function write_LEGACYDRAWING(ba, ws, idx, rels) {
        /* [BrtLegacyDrawing] */
        if(ws['!comments'].length > 0) {
            var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx+1) + ".vml", RELS.VML);
            write_record(ba, "BrtLegacyDrawing", write_RelID("rId" + rId));
            ws['!legacy'] = rId;
        }
    }
    
    function write_AUTOFILTER(ba, ws) {
        if(!ws['!autofilter']) return;
        write_record(ba, "BrtBeginAFilter", write_UncheckedRfX(decode_range(ws['!autofilter'].ref)));
        /* *FILTERCOLUMN */
        /* [SORTSTATE] */
        /* BrtEndAFilter */
        write_record(ba, "BrtEndAFilter");
    }
    
    function write_WSVIEWS2(ba, ws, Workbook) {
        write_record(ba, "BrtBeginWsViews");
        { /* 1*WSVIEW2 */
            /* [ACUID] */
            write_record(ba, "BrtBeginWsView", write_BrtBeginWsView(ws, Workbook));
            /* [BrtPane] */
            /* *4BrtSel */
            /* *4SXSELECT */
            /* *FRT */
            write_record(ba, "BrtEndWsView");
        }
        /* *FRT */
        write_record(ba, "BrtEndWsViews");
    }
    
    function write_WSFMTINFO(ba, ws) {
        /* [ACWSFMTINFO] */
        //write_record(ba, "BrtWsFmtInfo", write_BrtWsFmtInfo(ws));
    }
    
    function write_SHEETPROTECT(ba, ws) {
        if(!ws['!protect']) return;
        /* [BrtSheetProtectionIso] */
        write_record(ba, "BrtSheetProtection", write_BrtSheetProtection(ws['!protect']));
    }
    
    function write_ws_bin(idx, opts, wb, rels) {
        var ba = buf_array();
        var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
        var c = s; try { if(wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c; } catch(e) {}
        var r = safe_decode_range(ws['!ref'] || "A1");
        ws['!links'] = [];
        /* passed back to write_zip and removed there */
        ws['!comments'] = [];
        write_record(ba, "BrtBeginSheet");
        write_record(ba, "BrtWsProp", write_BrtWsProp(c));
        write_record(ba, "BrtWsDim", write_BrtWsDim(r));
        write_WSVIEWS2(ba, ws, wb.Workbook);
        write_WSFMTINFO(ba, ws);
        write_COLINFOS(ba, ws, idx, opts, wb);
        write_CELLTABLE(ba, ws, idx, opts, wb);
        /* [BrtSheetCalcProp] */
        write_SHEETPROTECT(ba, ws);
        /* *([BrtRangeProtectionIso] BrtRangeProtection) */
        /* [SCENMAN] */
        write_AUTOFILTER(ba, ws);
        /* [SORTSTATE] */
        /* [DCON] */
        /* [USERSHVIEWS] */
        write_MERGECELLS(ba, ws);
        /* [BrtPhoneticInfo] */
        /* *CONDITIONALFORMATTING */
        /* [DVALS] */
        write_HLINKS(ba, ws, rels);
        /* [BrtPrintOptions] */
        if(ws['!margins']) write_record(ba, "BrtMargins", write_BrtMargins(ws['!margins']));
        /* [BrtPageSetup] */
        /* [HEADERFOOTER] */
        /* [RWBRK] */
        /* [COLBRK] */
        /* *BrtBigName */
        /* [CELLWATCHES] */
        /* [IGNOREECS] */
        /* [SMARTTAGS] */
        /* [BrtDrawing] */
        write_LEGACYDRAWING(ba, ws, idx, rels);
        /* [BrtLegacyDrawingHF] */
        /* [BrtBkHim] */
        /* [OLEOBJECTS] */
        /* [ACTIVEXCONTROLS] */
        /* [WEBPUBITEMS] */
        /* [LISTPARTS] */
        /* FRTWORKSHEET */
        write_record(ba, "BrtEndSheet");
        return ba.end();
    }
    function parse_numCache(data) {
        var col = [];
    
        /* 21.2.2.150 pt CT_NumVal */
        (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg)||[]).forEach(function(pt) {
            var q = pt.match(/<c:pt idx="(.*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
            if(!q) return;
            col[+q[1]] = +q[2];
        });
    
        /* 21.2.2.71 formatCode CT_Xstring */
        var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["","General"])[1]);
    
        return [col, nf];
    }
    
    /* 21.2 DrawingML - Charts */
    function parse_chart(data, name, opts, rels, wb, csheet) {
        var cs = ((csheet || {"!type":"chart"}));
        if(!data) return csheet;
        /* 21.2.2.27 chart CT_Chart */
    
        var C = 0, R = 0, col = "A";
        var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    
        /* 21.2.2.120 numCache CT_NumData */
        (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm)||[]).forEach(function(nc) {
            var cache = parse_numCache(nc);
            refguess.s.r = refguess.s.c = 0;
            refguess.e.c = C;
            col = encode_col(C);
            cache[0].forEach(function(n,i) {
                cs[col + encode_row(i)] = {t:'n', v:n, z:cache[1] };
                R = i;
            });
            if(refguess.e.r < R) refguess.e.r = R;
            ++C;
        });
        if(C > 0) cs["!ref"] = encode_range(refguess);
        return cs;
    }
    RELS.CS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet";
    
    var CS_XML_ROOT = writextag('chartsheet', null, {
        'xmlns': XMLNS.main[0],
        'xmlns:r': XMLNS.r
    });
    
    /* 18.3 Worksheets also covers Chartsheets */
    function parse_cs_xml(data, opts, idx, rels, wb, themes, styles) {
        if(!data) return data;
        /* 18.3.1.12 chartsheet CT_ChartSheet */
        if(!rels) rels = {'!id':{}};
        var s = {'!type':"chart", '!chart':null, '!rel':""};
        var m;
    
        /* 18.3.1.83 sheetPr CT_ChartsheetPr */
        var sheetPr = data.match(sheetprregex);
        if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    
        /* 18.3.1.36 drawing CT_Drawing */
        if((m = data.match(/drawing r:id="(.*?)"/))) s['!rel'] = m[1];
    
        if(rels['!id'][s['!rel']]) s['!chart'] = rels['!id'][s['!rel']];
        return s;
    }
    function write_cs_xml(idx, opts, wb, rels) {
        var o = [XML_HEADER, CS_XML_ROOT];
        o[o.length] = writextag("drawing", null, {"r:id": "rId1"});
        add_rels(rels, -1, "../drawings/drawing" + (idx+1) + ".xml", RELS.DRAW);
        if(o.length>2) { o[o.length] = ('</chartsheet>'); o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    
    /* [MS-XLSB] 2.4.331 BrtCsProp */
    function parse_BrtCsProp(data, length) {
        data.l += 10;
        var name = parse_XLWideString(data, length - 10);
        return { name: name };
    }
    
    /* [MS-XLSB] 2.1.7.7 Chart Sheet */
    function parse_cs_bin(data, opts, idx, rels, wb, themes, styles) {
        if(!data) return data;
        if(!rels) rels = {'!id':{}};
        var s = {'!type':"chart", '!chart':null, '!rel':""};
        var state = [];
        var pass = false;
        recordhopper(data, function cs_parse(val, R_n, RT) {
            switch(RT) {
    
                case 0x0226: /* 'BrtDrawing' */
                    s['!rel'] = val; break;
    
                case 0x028B: /* 'BrtCsProp' */
                    if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
                    if(val.name) wb.Sheets[idx].CodeName = val.name;
                    break;
    
                /* case 'BrtUid': */
                case 0x0232: /* 'BrtBkHim' */
                case 0x028C: /* 'BrtCsPageSetup' */
                case 0x029D: /* 'BrtCsProtection' */
                case 0x02A7: /* 'BrtCsProtectionIso' */
                case 0x0227: /* 'BrtLegacyDrawing' */
                case 0x0228: /* 'BrtLegacyDrawingHF' */
                case 0x01DC: /* 'BrtMargins' */
                    break;
    
                case 0x0023: /* 'BrtFRTBegin' */
                    pass = true; break;
                case 0x0024: /* 'BrtFRTEnd' */
                    pass = false; break;
                case 0x0025: /* 'BrtACBegin' */
                    state.push(R_n); break;
                case 0x0026: /* 'BrtACEnd' */
                    state.pop(); break;
    
                default:
                    if((R_n||"").indexOf("Begin") > 0) state.push(R_n);
                    else if((R_n||"").indexOf("End") > 0) state.pop();
                    else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
            }
        }, opts);
    
        if(rels['!id'][s['!rel']]) s['!chart'] = rels['!id'][s['!rel']];
        return s;
    }
    function write_cs_bin(idx, opts, wb, rels) {
        var ba = buf_array();
        write_record(ba, "BrtBeginSheet");
        /* [BrtCsProp] */
        /* CSVIEWS */
        /* [[BrtCsProtectionIso] BrtCsProtection] */
        /* [USERCSVIEWS] */
        /* [BrtMargins] */
        /* [BrtCsPageSetup] */
        /* [HEADERFOOTER] */
        /* BrtDrawing */
        /* [BrtLegacyDrawing] */
        /* [BrtLegacyDrawingHF] */
        /* [BrtBkHim] */
        /* [WEBPUBITEMS] */
        /* FRTCHARTSHEET */
        write_record(ba, "BrtEndSheet");
        return ba.end();
    }
    /* 18.2.28 (CT_WorkbookProtection) Defaults */
    var WBPropsDef = [
        ['allowRefreshQuery',           false, "bool"],
        ['autoCompressPictures',        true,  "bool"],
        ['backupFile',                  false, "bool"],
        ['checkCompatibility',          false, "bool"],
        ['CodeName',                    ''],
        ['date1904',                    false, "bool"],
        ['defaultThemeVersion',         0,      "int"],
        ['filterPrivacy',               false, "bool"],
        ['hidePivotFieldList',          false, "bool"],
        ['promptedSolutions',           false, "bool"],
        ['publishItems',                false, "bool"],
        ['refreshAllConnections',       false, "bool"],
        ['saveExternalLinkValues',      true,  "bool"],
        ['showBorderUnselectedTables',  true,  "bool"],
        ['showInkAnnotation',           true,  "bool"],
        ['showObjects',                 'all'],
        ['showPivotChartFilter',        false, "bool"],
        ['updateLinks', 'userSet']
    ];
    
    /* 18.2.30 (CT_BookView) Defaults */
    var WBViewDef = [
        ['activeTab',                   0,      "int"],
        ['autoFilterDateGrouping',      true,  "bool"],
        ['firstSheet',                  0,      "int"],
        ['minimized',                   false, "bool"],
        ['showHorizontalScroll',        true,  "bool"],
        ['showSheetTabs',               true,  "bool"],
        ['showVerticalScroll',          true,  "bool"],
        ['tabRatio',                    600,    "int"],
        ['visibility',                  'visible']
        //window{Height,Width}, {x,y}Window
    ];
    
    /* 18.2.19 (CT_Sheet) Defaults */
    var SheetDef = [
        //['state', 'visible']
    ];
    
    /* 18.2.2  (CT_CalcPr) Defaults */
    var CalcPrDef = [
        ['calcCompleted', 'true'],
        ['calcMode', 'auto'],
        ['calcOnSave', 'true'],
        ['concurrentCalc', 'true'],
        ['fullCalcOnLoad', 'false'],
        ['fullPrecision', 'true'],
        ['iterate', 'false'],
        ['iterateCount', '100'],
        ['iterateDelta', '0.001'],
        ['refMode', 'A1']
    ];
    
    /* 18.2.3 (CT_CustomWorkbookView) Defaults */
    var CustomWBViewDef = [
        ['autoUpdate', 'false'],
        ['changesSavedWin', 'false'],
        ['includeHiddenRowCol', 'true'],
        ['includePrintSettings', 'true'],
        ['maximized', 'false'],
        ['minimized', 'false'],
        ['onlySync', 'false'],
        ['personalView', 'false'],
        ['showComments', 'commIndicator'],
        ['showFormulaBar', 'true'],
        ['showHorizontalScroll', 'true'],
        ['showObjects', 'all'],
        ['showSheetTabs', 'true'],
        ['showStatusbar', 'true'],
        ['showVerticalScroll', 'true'],
        ['tabRatio', '600'],
        ['xWindow', '0'],
        ['yWindow', '0']
    ];
    
    function push_defaults_array(target, defaults) {
        for(var j = 0; j != target.length; ++j) { var w = target[j];
            for(var i=0; i != defaults.length; ++i) { var z = defaults[i];
                if(w[z[0]] == null) w[z[0]] = z[1];
                else switch(z[2]) {
                case "bool": if(typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]], z[0]); break;
                case "int": if(typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10); break;
                }
            }
        }
    }
    function push_defaults(target, defaults) {
        for(var i = 0; i != defaults.length; ++i) { var z = defaults[i];
            if(target[z[0]] == null) target[z[0]] = z[1];
            else switch(z[2]) {
                case "bool": if(typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]], z[0]); break;
                case "int": if(typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10); break;
            }
        }
    }
    
    function parse_wb_defaults(wb) {
        push_defaults(wb.WBProps, WBPropsDef);
        push_defaults(wb.CalcPr, CalcPrDef);
    
        push_defaults_array(wb.WBView, WBViewDef);
        push_defaults_array(wb.Sheets, SheetDef);
    
        _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904, 'date1904');
    }
    
    function safe1904(wb) {
        /* TODO: store date1904 somewhere else */
        if(!wb.Workbook) return "false";
        if(!wb.Workbook.WBProps) return "false";
        return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
    }
    
    var badchars = "][*?\/\\".split("");
    function check_ws_name(n, safe) {
        if(n.length > 31) { if(safe) return false; throw new Error("Sheet names cannot exceed 31 chars"); }
        var _good = true;
        badchars.forEach(function(c) {
            if(n.indexOf(c) == -1) return;
            if(!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
            _good = false;
        });
        return _good;
    }
    function check_wb_names(N) {
        N.forEach(function(n,i) {
            check_ws_name(n);
            for(var j = 0; j < i; ++j) if(n == N[j]) throw new Error("Duplicate Sheet Name: " + n);
        });
    }
    function check_wb(wb) {
        if(!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
        check_wb_names(wb.SheetNames);
        /* TODO: validate workbook */
    }
    /* 18.2 Workbook */
    var wbnsregex = /<\w+:workbook/;
    function parse_wb_xml(data, opts) {
        if(!data) throw new Error("Could not find file");
        var wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, Names:[], xmlns: "" };
        var pass = false, xmlns = "xmlns";
        var dname = {}, dnstart = 0;
        data.replace(tagregex, function xml_wb(x, idx) {
            var y = parsexmltag(x);
            switch(strip_ns(y[0])) {
                case '<?xml': break;
    
                /* 18.2.27 workbook CT_Workbook 1 */
                case '<workbook':
                    if(x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
                    wb.xmlns = y[xmlns];
                    break;
                case '</workbook>': break;
    
                /* 18.2.13 fileVersion CT_FileVersion ? */
                case '<fileVersion': delete y[0]; wb.AppVersion = y; break;
                case '<fileVersion/>': case '</fileVersion>': break;
    
                /* 18.2.12 fileSharing CT_FileSharing ? */
                case '<fileSharing': case '<fileSharing/>': break;
    
                /* 18.2.28 workbookPr CT_WorkbookPr ? */
                case '<workbookPr':
                case '<workbookPr/>':
                    WBPropsDef.forEach(function(w) {
                        if(y[w[0]] == null) return;
                        switch(w[2]) {
                            case "bool": wb.WBProps[w[0]] = parsexmlbool(y[w[0]], w[0]); break;
                            case "int": wb.WBProps[w[0]] = parseInt(y[w[0]], 10); break;
                            default: wb.WBProps[w[0]] = y[w[0]];
                        }
                    });
                    if(y.codeName) wb.WBProps.CodeName = y.codeName;
                    break;
                case '</workbookPr>': break;
    
                /* 18.2.29 workbookProtection CT_WorkbookProtection ? */
                case '<workbookProtection': break;
                case '<workbookProtection/>': break;
    
                /* 18.2.1  bookViews CT_BookViews ? */
                case '<bookViews': case '<bookViews>': case '</bookViews>': break;
                /* 18.2.30   workbookView CT_BookView + */
                case '<workbookView': delete y[0]; wb.WBView.push(y); break;
                case '</workbookView>': break;
    
                /* 18.2.20 sheets CT_Sheets 1 */
                case '<sheets': case '<sheets>': case '</sheets>': break; // aggregate sheet
                /* 18.2.19   sheet CT_Sheet + */
                case '<sheet':
                    switch(y.state) {
                        case "hidden": y.Hidden = 1; break;
                        case "veryHidden": y.Hidden = 2; break;
                        default: y.Hidden = 0;
                    }
                    delete y.state;
                    y.name = unescapexml(utf8read(y.name));
                    delete y[0]; wb.Sheets.push(y); break;
                case '</sheet>': break;
    
                /* 18.2.15 functionGroups CT_FunctionGroups ? */
                case '<functionGroups': case '<functionGroups/>': break;
                /* 18.2.14   functionGroup CT_FunctionGroup + */
                case '<functionGroup': break;
    
                /* 18.2.9  externalReferences CT_ExternalReferences ? */
                case '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;
                /* 18.2.8    externalReference CT_ExternalReference + */
                case '<externalReference': break;
    
                /* 18.2.6  definedNames CT_DefinedNames ? */
                case '<definedNames/>': break;
                case '<definedNames>': case '<definedNames': pass=true; break;
                case '</definedNames>': pass=false; break;
                /* 18.2.5    definedName CT_DefinedName + */
                case '<definedName': {
                    dname = {};
                    dname.Name = y.name;
                    if(y.comment) dname.Comment = y.comment;
                    if(y.localSheetId) dname.Sheet = +y.localSheetId;
                    dnstart = idx + x.length;
                }	break;
                case '</definedName>': {
                    dname.Ref = data.slice(dnstart, idx);
                    wb.Names.push(dname);
                } break;
                case '<definedName/>': break;
    
                /* 18.2.2  calcPr CT_CalcPr ? */
                case '<calcPr': delete y[0]; wb.CalcPr = y; break;
                case '<calcPr/>': delete y[0]; wb.CalcPr = y; break;
                case '</calcPr>': break;
    
                /* 18.2.16 oleSize CT_OleSize ? (ref required) */
                case '<oleSize': break;
    
                /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
                case '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;
                /* 18.2.3    customWorkbookView CT_CustomWorkbookView + */
                case '<customWorkbookView': case '</customWorkbookView>': break;
    
                /* 18.2.18 pivotCaches CT_PivotCaches ? */
                case '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;
                /* 18.2.17 pivotCache CT_PivotCache ? */
                case '<pivotCache': break;
    
                /* 18.2.21 smartTagPr CT_SmartTagPr ? */
                case '<smartTagPr': case '<smartTagPr/>': break;
    
                /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
                case '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;
                /* 18.2.22   smartTagType CT_SmartTagType ? */
                case '<smartTagType': break;
    
                /* 18.2.24 webPublishing CT_WebPublishing ? */
                case '<webPublishing': case '<webPublishing/>': break;
    
                /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
                case '<fileRecoveryPr': case '<fileRecoveryPr/>': break;
    
                /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
                case '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;
                /* 18.2.25 webPublishObject CT_WebPublishObject ? */
                case '<webPublishObject': break;
    
                /* 18.2.10 extLst CT_ExtensionList ? */
                case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
                /* 18.2.7    ext CT_Extension + */
                case '<ext': pass=true; break; //TODO: check with versions of excel
                case '</ext>': pass=false; break;
    
                /* Others */
                case '<ArchID': break;
                case '<AlternateContent':
                case '<AlternateContent>': pass=true; break;
                case '</AlternateContent>': pass=false; break;
    
                /* TODO */
                case '<revisionPtr': break;
    
                default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');
            }
            return x;
        });
        if(XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);
    
        parse_wb_defaults(wb);
    
        return wb;
    }
    
    var WB_XML_ROOT = writextag('workbook', null, {
        'xmlns': XMLNS.main[0],
        //'xmlns:mx': XMLNS.mx,
        //'xmlns:s': XMLNS.main[0],
        'xmlns:r': XMLNS.r
    });
    
    function write_wb_xml(wb, opts) {
        var o = [XML_HEADER];
        o[o.length] = WB_XML_ROOT;
    
        var write_names = (wb.Workbook && (wb.Workbook.Names||[]).length > 0);
    
        /* fileVersion */
        /* fileSharing */
    
        var workbookPr = ({codeName:"ThisWorkbook"});
        if(wb.Workbook && wb.Workbook.WBProps) {
            WBPropsDef.forEach(function(x) {
    if((wb.Workbook.WBProps[x[0]]) == null) return;
                if((wb.Workbook.WBProps[x[0]]) == x[1]) return;
                workbookPr[x[0]] = (wb.Workbook.WBProps[x[0]]);
            });
    if(wb.Workbook.WBProps.CodeName) { workbookPr.codeName = wb.Workbook.WBProps.CodeName; delete workbookPr.CodeName; }
        }
        o[o.length] = (writextag('workbookPr', null, workbookPr));
    
        /* workbookProtection */
        /* bookViews */
    
        o[o.length] = "<sheets>";
        var sheets = wb.Workbook && wb.Workbook.Sheets || [];
        for(var i = 0; i != wb.SheetNames.length; ++i) {
            var sht = ({name:escapexml(wb.SheetNames[i].substr(0,31))});
            sht.sheetId = ""+(i+1);
            sht["r:id"] = "rId"+(i+1);
            if(sheets[i]) switch(sheets[i].Hidden) {
                case 1: sht.state = "hidden"; break;
                case 2: sht.state = "veryHidden"; break;
            }
            o[o.length] = (writextag('sheet',null,sht));
        }
        o[o.length] = "</sheets>";
    
        /* functionGroups */
        /* externalReferences */
    
        if(write_names) {
            o[o.length] = "<definedNames>";
            if(wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n) {
                var d = {name:n.Name};
                if(n.Comment) d.comment = n.Comment;
                if(n.Sheet != null) d.localSheetId = ""+n.Sheet;
                if(!n.Ref) return;
                o[o.length] = writextag('definedName', String(n.Ref), d);
            });
            o[o.length] = "</definedNames>";
        }
    
        /* calcPr */
        /* oleSize */
        /* customWorkbookViews */
        /* pivotCaches */
        /* smartTagPr */
        /* smartTagTypes */
        /* webPublishing */
        /* fileRecoveryPr */
        /* webPublishObjects */
        /* extLst */
    
        if(o.length>2){ o[o.length] = '</workbook>'; o[1]=o[1].replace("/>",">"); }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.301 BrtBundleSh */
    function parse_BrtBundleSh(data, length) {
        var z = {};
        z.Hidden = data.read_shift(4); //hsState ST_SheetState
        z.iTabID = data.read_shift(4);
        z.strRelID = parse_RelID(data,length-8);
        z.name = parse_XLWideString(data);
        return z;
    }
    function write_BrtBundleSh(data, o) {
        if(!o) o = new_buf(127);
        o.write_shift(4, data.Hidden);
        o.write_shift(4, data.iTabID);
        write_RelID(data.strRelID, o);
        write_XLWideString(data.name.substr(0,31), o);
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.807 BrtWbProp */
    function parse_BrtWbProp(data, length) {
        var o = ({});
        var flags = data.read_shift(4);
        o.defaultThemeVersion = data.read_shift(4);
        var strName = (length > 8) ? parse_XLWideString(data) : "";
        if(strName.length > 0) o.CodeName = strName;
        o.autoCompressPictures = !!(flags & 0x10000);
        o.backupFile = !!(flags & 0x40);
        o.checkCompatibility = !!(flags & 0x1000);
        o.date1904 = !!(flags & 0x01);
        o.filterPrivacy = !!(flags & 0x08);
        o.hidePivotFieldList = !!(flags & 0x400);
        o.promptedSolutions = !!(flags & 0x10);
        o.publishItems = !!(flags & 0x800);
        o.refreshAllConnections = !!(flags & 0x40000);
        o.saveExternalLinkValues = !!(flags & 0x80);
        o.showBorderUnselectedTables = !!(flags & 0x04);
        o.showInkAnnotation = !!(flags & 0x20);
        o.showObjects = ["all", "placeholders", "none"][(flags >> 13) & 0x03];
        o.showPivotChartFilter = !!(flags & 0x8000);
        o.updateLinks = ["userSet", "never", "always"][(flags >> 8) & 0x03];
        return o;
    }
    function write_BrtWbProp(data, o) {
        if(!o) o = new_buf(72);
        var flags = 0;
        if(data) {
            /* TODO: mirror parse_BrtWbProp fields */
            if(data.filterPrivacy) flags |= 0x08;
        }
        o.write_shift(4, flags);
        o.write_shift(4, 0);
        write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
        return o.slice(0, o.l);
    }
    
    function parse_BrtFRTArchID$(data, length) {
        var o = {};
        data.read_shift(4);
        o.ArchID = data.read_shift(4);
        data.l += length - 8;
        return o;
    }
    
    /* [MS-XLSB] 2.4.680 BrtName */
    function parse_BrtName(data, length, opts) {
        var end = data.l + length;
        var flags = data.read_shift(4);
        var chKey = data.read_shift(1);
        var itab = data.read_shift(4);
        var name = parse_XLNameWideString(data);
        var formula = parse_XLSBNameParsedFormula(data, 0, opts);
        var comment = parse_XLNullableWideString(data);
        //if(0 /* fProc */) {
            // unusedstring1: XLNullableWideString
            // description: XLNullableWideString
            // helpTopic: XLNullableWideString
            // unusedstring2: XLNullableWideString
        //}
        data.l = end;
        var out = ({Name:name, Ptg:formula});
        if(itab < 0xFFFFFFF) out.Sheet = itab;
        if(comment) out.Comment = comment;
        return out;
    }
    
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function parse_wb_bin(data, opts) {
        var wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: "" };
        var pass = false, z;
    
        if(!opts) opts = {};
        opts.biff = 12;
    
        var Names = [];
        var supbooks = ([[]]);
        supbooks.SheetNames = [];
        supbooks.XTI = [];
    
        recordhopper(data, function hopper_wb(val, R_n, RT) {
            switch(RT) {
                case 0x009C: /* 'BrtBundleSh' */
                    supbooks.SheetNames.push(val.name);
                    wb.Sheets.push(val); break;
    
                case 0x0099: /* 'BrtWbProp' */
                    wb.WBProps = val; break;
    
                case 0x0027: /* 'BrtName' */
                    if(val.Sheet != null) opts.SID = val.Sheet;
                    val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
                    delete opts.SID;
                    delete val.Ptg;
                    Names.push(val);
                    break;
                case 0x040C: /* 'BrtNameExt' */ break;
    
                case 0x0165: /* 'BrtSupSelf' */
                case 0x0166: /* 'BrtSupSame' */
                case 0x0163: /* 'BrtSupBookSrc' */
                case 0x029B: /* 'BrtSupAddin' */
                    if(!supbooks[0].length) supbooks[0] = [RT, val];
                    else supbooks.push([RT, val]);
                    supbooks[supbooks.length - 1].XTI = [];
                    break;
                case 0x016A: /* 'BrtExternSheet' */
                    if(supbooks.length === 0) { supbooks[0] = []; supbooks[0].XTI = []; }
                    supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                    supbooks.XTI = supbooks.XTI.concat(val);
                    break;
                case 0x0169: /* 'BrtPlaceholderName' */
                    break;
    
                /* case 'BrtModelTimeGroupingCalcCol' */
                /* case 'BrtRevisionPtr' */
                /* case 'BrtUid' */
                case 0x0817: /* 'BrtAbsPath15' */
                case 0x0216: /* 'BrtBookProtection' */
                case 0x02A5: /* 'BrtBookProtectionIso' */
                case 0x009E: /* 'BrtBookView' */
                case 0x009D: /* 'BrtCalcProp' */
                case 0x0262: /* 'BrtCrashRecErr' */
                case 0x0802: /* 'BrtDecoupledPivotCacheID' */
                case 0x009B: /* 'BrtFileRecover' */
                case 0x0224: /* 'BrtFileSharing' */
                case 0x02A4: /* 'BrtFileSharingIso' */
                case 0x0080: /* 'BrtFileVersion' */
                case 0x0299: /* 'BrtFnGroup' */
                case 0x0850: /* 'BrtModelRelationship' */
                case 0x084D: /* 'BrtModelTable' */
                case 0x0225: /* 'BrtOleSize' */
                case 0x0805: /* 'BrtPivotTableRef' */
                case 0x0254: /* 'BrtSmartTagType' */
                case 0x081C: /* 'BrtTableSlicerCacheID' */
                case 0x081B: /* 'BrtTableSlicerCacheIDs' */
                case 0x0822: /* 'BrtTimelineCachePivotCacheID' */
                case 0x018D: /* 'BrtUserBookView' */
                case 0x009A: /* 'BrtWbFactoid' */
                case 0x045D: /* 'BrtWbProp14' */
                case 0x0229: /* 'BrtWebOpt' */
                case 0x082B: /* 'BrtWorkBookPr15' */
                    break;
    
                case 0x0023: /* 'BrtFRTBegin' */
                    pass = true; break;
                case 0x0024: /* 'BrtFRTEnd' */
                    pass = false; break;
                case 0x0025: /* 'BrtACBegin' */ break;
                case 0x0026: /* 'BrtACEnd' */ break;
    
                case 0x0010: /* 'BrtFRTArchID$' */ break;
    
                default:
                    if((R_n||"").indexOf("Begin") > 0){/* empty */}
                    else if((R_n||"").indexOf("End") > 0){/* empty */}
                    else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
            }
        }, opts);
    
        parse_wb_defaults(wb);
    
        // $FlowIgnore
        wb.Names = Names;
    
        (wb).supbooks = supbooks;
        return wb;
    }
    
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function write_BUNDLESHS(ba, wb, opts) {
        write_record(ba, "BrtBeginBundleShs");
        for(var idx = 0; idx != wb.SheetNames.length; ++idx) {
            var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
            var d = { Hidden: viz, iTabID: idx+1, strRelID: 'rId' + (idx+1), name: wb.SheetNames[idx] };
            write_record(ba, "BrtBundleSh", write_BrtBundleSh(d));
        }
        write_record(ba, "BrtEndBundleShs");
    }
    
    /* [MS-XLSB] 2.4.643 BrtFileVersion */
    function write_BrtFileVersion(data, o) {
        if(!o) o = new_buf(127);
        for(var i = 0; i != 4; ++i) o.write_shift(4, 0);
        write_XLWideString("SheetJS", o);
        write_XLWideString(XLSX.version, o);
        write_XLWideString(XLSX.version, o);
        write_XLWideString("7262", o);
        o.length = o.l;
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.4.298 BrtBookView */
    function write_BrtBookView(idx, o) {
        if(!o) o = new_buf(29);
        o.write_shift(-4, 0);
        o.write_shift(-4, 460);
        o.write_shift(4,  28800);
        o.write_shift(4,  17600);
        o.write_shift(4,  500);
        o.write_shift(4,  idx);
        o.write_shift(4,  idx);
        var flags = 0x78;
        o.write_shift(1,  flags);
        return o.length > o.l ? o.slice(0, o.l) : o;
    }
    
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function write_BOOKVIEWS(ba, wb, opts) {
        /* required if hidden tab appears before visible tab */
        if(!wb.Workbook || !wb.Workbook.Sheets) return;
        var sheets = wb.Workbook.Sheets;
        var i = 0, vistab = -1, hidden = -1;
        for(; i < sheets.length; ++i) {
            if(!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;
            else if(sheets[i].Hidden == 1 && hidden == -1) hidden = i;
        }
        if(hidden > vistab) return;
        write_record(ba, "BrtBeginBookViews");
        write_record(ba, "BrtBookView", write_BrtBookView(vistab));
        /* 1*(BrtBookView *FRT) */
        write_record(ba, "BrtEndBookViews");
    }
    
    /* [MS-XLSB] 2.4.302 BrtCalcProp */
    function write_BrtCalcProp(data, o) {
        if(!o) o = new_buf(26);
        o.write_shift(4,0); /* force recalc */
        o.write_shift(4,1);
        o.write_shift(4,0);
        write_Xnum(0, o);
        o.write_shift(-4, 1023);
        o.write_shift(1, 0x33);
        o.write_shift(1, 0x00);
        return o;
    }
    
    /* [MS-XLSB] 2.4.640 BrtFileRecover */
    function write_BrtFileRecover(data, o) {
        if(!o) o = new_buf(1);
        o.write_shift(1,0);
        return o;
    }
    
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function write_wb_bin(wb, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginBook");
        write_record(ba, "BrtFileVersion", write_BrtFileVersion());
        /* [[BrtFileSharingIso] BrtFileSharing] */
        write_record(ba, "BrtWbProp", write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
        /* [ACABSPATH] */
        /* [[BrtBookProtectionIso] BrtBookProtection] */
        write_BOOKVIEWS(ba, wb, opts);
        write_BUNDLESHS(ba, wb, opts);
        /* [FNGROUP] */
        /* [EXTERNALS] */
        /* *BrtName */
        /* write_record(ba, "BrtCalcProp", write_BrtCalcProp()); */
        /* [BrtOleSize] */
        /* *(BrtUserBookView *FRT) */
        /* [PIVOTCACHEIDS] */
        /* [BrtWbFactoid] */
        /* [SMARTTAGTYPES] */
        /* [BrtWebOpt] */
        /* write_record(ba, "BrtFileRecover", write_BrtFileRecover()); */
        /* [WEBPUBITEMS] */
        /* [CRERRS] */
        /* FRTWORKBOOK */
        write_record(ba, "BrtEndBook");
    
        return ba.end();
    }
    function parse_wb(data, name, opts) {
        if(name.slice(-4)===".bin") return parse_wb_bin((data), opts);
        return parse_wb_xml((data), opts);
    }
    
    function parse_ws(data, name, idx, opts, rels, wb, themes, styles) {
        if(name.slice(-4)===".bin") return parse_ws_bin((data), opts, idx, rels, wb, themes, styles);
        return parse_ws_xml((data), opts, idx, rels, wb, themes, styles);
    }
    
    function parse_cs(data, name, idx, opts, rels, wb, themes, styles) {
        if(name.slice(-4)===".bin") return parse_cs_bin((data), opts, idx, rels, wb, themes, styles);
        return parse_cs_xml((data), opts, idx, rels, wb, themes, styles);
    }
    
    function parse_ms(data, name, idx, opts, rels, wb, themes, styles) {
        if(name.slice(-4)===".bin") return parse_ms_bin((data), opts, idx, rels, wb, themes, styles);
        return parse_ms_xml((data), opts, idx, rels, wb, themes, styles);
    }
    
    function parse_ds(data, name, idx, opts, rels, wb, themes, styles) {
        if(name.slice(-4)===".bin") return parse_ds_bin((data), opts, idx, rels, wb, themes, styles);
        return parse_ds_xml((data), opts, idx, rels, wb, themes, styles);
    }
    
    function parse_sty(data, name, themes, opts) {
        if(name.slice(-4)===".bin") return parse_sty_bin((data), themes, opts);
        return parse_sty_xml((data), themes, opts);
    }
    
    function parse_theme(data, name, opts) {
        return parse_theme_xml(data, opts);
    }
    
    function parse_sst(data, name, opts) {
        if(name.slice(-4)===".bin") return parse_sst_bin((data), opts);
        return parse_sst_xml((data), opts);
    }
    
    function parse_cmnt(data, name, opts) {
        if(name.slice(-4)===".bin") return parse_comments_bin((data), opts);
        return parse_comments_xml((data), opts);
    }
    
    function parse_cc(data, name, opts) {
        if(name.slice(-4)===".bin") return parse_cc_bin((data), name, opts);
        return parse_cc_xml((data), name, opts);
    }
    
    function parse_xlink(data, name, opts) {
        if(name.slice(-4)===".bin") return parse_xlink_bin((data), name, opts);
        return parse_xlink_xml((data), name, opts);
    }
    
    function write_wb(wb, name, opts) {
        return (name.slice(-4)===".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
    }
    
    function write_ws(data, name, opts, wb, rels) {
        return (name.slice(-4)===".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
    }
    
    function write_cs(data, name, opts, wb, rels) {
        return (name.slice(-4)===".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
    }
    
    function write_sty(data, name, opts) {
        return (name.slice(-4)===".bin" ? write_sty_bin : write_sty_xml)(data, opts);
    }
    
    function write_sst(data, name, opts) {
        return (name.slice(-4)===".bin" ? write_sst_bin : write_sst_xml)(data, opts);
    }
    
    function write_cmnt(data, name, opts) {
        return (name.slice(-4)===".bin" ? write_comments_bin : write_comments_xml)(data, opts);
    }
    /*
    function write_cc(data, name:string, opts) {
        return (name.slice(-4)===".bin" ? write_cc_bin : write_cc_xml)(data, opts);
    }
    */
    var attregexg2=/([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
    var attregex2=/([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
    var _chr = function(c) { return String.fromCharCode(c); };
    function xlml_parsexmltag(tag, skip_root) {
        var words = tag.split(/\s+/);
        var z = ([]); if(!skip_root) z[0] = words[0];
        if(words.length === 1) return z;
        var m = tag.match(attregexg2), y, j, w, i;
        if(m) for(i = 0; i != m.length; ++i) {
            y = m[i].match(attregex2);
    if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);
            else {
                if(y[1].substr(0,6) === "xmlns:") w = "xmlns"+y[1].substr(6);
                else w = y[1].substr(j+1);
                z[w] = y[2].substr(1,y[2].length-2);
            }
        }
        return z;
    }
    function xlml_parsexmltagobj(tag) {
        var words = tag.split(/\s+/);
        var z = {};
        if(words.length === 1) return z;
        var m = tag.match(attregexg2), y, j, w, i;
        if(m) for(i = 0; i != m.length; ++i) {
            y = m[i].match(attregex2);
    if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);
            else {
                if(y[1].substr(0,6) === "xmlns:") w = "xmlns"+y[1].substr(6);
                else w = y[1].substr(j+1);
                z[w] = y[2].substr(1,y[2].length-2);
            }
        }
        return z;
    }
    
    // ----
    
    function xlml_format(format, value) {
        var fmt = XLMLFormatMap[format] || unescapexml(format);
        if(fmt === "General") return SSF._general(value);
        return SSF.format(fmt, value);
    }
    
    function xlml_set_custprop(Custprops, key, cp, val) {
        var oval = val;
        switch((cp[0].match(/dt:dt="([\w.]+)"/)||["",""])[1]) {
            case "boolean": oval = parsexmlbool(val); break;
            case "i2": case "int": oval = parseInt(val, 10); break;
            case "r4": case "float": oval = parseFloat(val); break;
            case "date": case "dateTime.tz": oval = parseDate(val); break;
            case "i8": case "string": case "fixed": case "uuid": case "bin.base64": break;
            default: throw new Error("bad custprop:" + cp[0]);
        }
        Custprops[unescapexml(key)] = oval;
    }
    
    function safe_format_xlml(cell, nf, o) {
        if(cell.t === 'z') return;
        if(!o || o.cellText !== false) try {
            if(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }
            else if(nf === "General") {
                if(cell.t === 'n') {
                    if((cell.v|0) === cell.v) cell.w = SSF._general_int(cell.v);
                    else cell.w = SSF._general_num(cell.v);
                }
                else cell.w = SSF._general(cell.v);
            }
            else cell.w = xlml_format(nf||"General", cell.v);
        } catch(e) { if(o.WTF) throw e; }
        try {
            var z = XLMLFormatMap[nf]||nf||"General";
            if(o.cellNF) cell.z = z;
            if(o.cellDates && cell.t == 'n' && SSF.is_date(z)) {
                var _d = SSF.parse_date_code(cell.v); if(_d) { cell.t = 'd'; cell.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
            }
        } catch(e) { if(o.WTF) throw e; }
    }
    
    function process_style_xlml(styles, stag, opts) {
        if(opts.cellStyles) {
            if(stag.Interior) {
                var I = stag.Interior;
                if(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
            }
        }
        styles[stag.ID] = stag;
    }
    
    /* TODO: there must exist some form of OSP-blessed spec */
    function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) {
        var nf = "General", sid = cell.StyleID, S = {}; o = o || {};
        var interiors = [];
        var i = 0;
        if(sid === undefined && row) sid = row.StyleID;
        if(sid === undefined && csty) sid = csty.StyleID;
        while(styles[sid] !== undefined) {
            if(styles[sid].nf) nf = styles[sid].nf;
            if(styles[sid].Interior) interiors.push(styles[sid].Interior);
            if(!styles[sid].Parent) break;
            sid = styles[sid].Parent;
        }
        switch(data.Type) {
            case 'Boolean':
                cell.t = 'b';
                cell.v = parsexmlbool(xml);
                break;
            case 'String':
                cell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));
                cell.v = xml.indexOf("<") > -1 ? unescapexml(ss) : cell.r;
                break;
            case 'DateTime':
                if(xml.slice(-1) != "Z") xml += "Z";
                cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                if(cell.v !== cell.v) cell.v = unescapexml(xml);
                else if(cell.v<60) cell.v = cell.v -1;
                if(!nf || nf == "General") nf = "yyyy-mm-dd";
                /* falls through */
            case 'Number':
                if(cell.v === undefined) cell.v=+xml;
                if(!cell.t) cell.t = 'n';
                break;
            case 'Error': cell.t = 'e'; cell.v = RBErr[xml]; if(o.cellText !== false) cell.w = xml; break;
            default: cell.t = 's'; cell.v = xlml_fixstr(ss||xml); break;
        }
        safe_format_xlml(cell, nf, o);
        if(o.cellFormula !== false) {
            if(cell.Formula) {
                var fstr = unescapexml(cell.Formula);
                /* strictly speaking, the leading = is required but some writers omit */
                if(fstr.charCodeAt(0) == 61 /* = */) fstr = fstr.substr(1);
                cell.f = rc_to_a1(fstr, base);
                delete cell.Formula;
                if(cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
                else if(cell.ArrayRange) {
                    cell.F = rc_to_a1(cell.ArrayRange, base);
                    arrayf.push([safe_decode_range(cell.F), cell.F]);
                }
            } else {
                for(i = 0; i < arrayf.length; ++i)
                    if(base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r)
                        if(base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)
                            cell.F = arrayf[i][1];
            }
        }
        if(o.cellStyles) {
            interiors.forEach(function(x) {
                if(!S.patternType && x.patternType) S.patternType = x.patternType;
            });
            cell.s = S;
        }
        if(cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
    }
    
    function xlml_clean_comment(comment) {
        comment.t = comment.v || "";
        comment.t = comment.t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");
        comment.v = comment.w = comment.ixfe = undefined;
    }
    
    function xlml_normalize(d) {
        if(has_buf && Buffer.isBuffer(d)) return d.toString('utf8');
        if(typeof d === 'string') return d;
        throw new Error("Bad input format: expected Buffer or string");
    }
    
    /* TODO: Everything */
    /* UOS uses CJK in tags */
    var xlmlregex = /<(\/?)([^\s?>!\/:]*:|)([^\s?>]*[^\s?>\/])[^>]*>/mg;
    //var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;
    function parse_xlml_xml(d, _opts) {
        var opts = _opts || {};
        make_ssf(SSF);
        var str = debom(xlml_normalize(d));
        if(opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {
            if(typeof cptable !== 'undefined') str = cptable.utils.decode(65001, char_codes(str));
            else str = utf8read(str);
        }
        var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
        if(opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) { if(opening.indexOf("<" + tag) >= 0) ishtml = true; });
        if(ishtml) return HTML_.to_workbook(str, opts);
        var Rn;
        var state = [], tmp;
        if(DENSE != null && opts.dense == null) opts.dense = DENSE;
        var sheets = {}, sheetnames = [], cursheet = (opts.dense ? [] : {}), sheetname = "";
        var table = {}, cell = ({}), row = {};
        var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
        var c = 0, r = 0;
        var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
        var styles = {}, stag = {};
        var ss = "", fidx = 0;
        var merges = [];
        var Props = {}, Custprops = {}, pidx = 0, cp = [];
        var comments = [], comment = ({});
        var cstys = [], csty, seencol = false;
        var arrayf = [];
        var rowinfo = [], rowobj = {}, cc = 0, rr = 0;
        var Workbook = ({ Sheets:[], WBProps:{date1904:false} }), wsprops = {};
        xlmlregex.lastIndex = 0;
        str = str.replace(/<!--([\s\S]*?)-->/mg,"");
        while((Rn = xlmlregex.exec(str))) switch(Rn[3]) {
            case 'Data':
                if(state[state.length-1][1]) break;
                if(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]=="Comment"?comment:cell, {c:c,r:r}, styles, cstys[c], row, arrayf, opts);
                else { ss = ""; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }
                break;
            case 'Cell':
                if(Rn[1]==='/'){
                    if(comments.length > 0) cell.c = comments;
                    if((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
                        if(opts.dense) {
                            if(!cursheet[r]) cursheet[r] = [];
                            cursheet[r][c] = cell;
                        } else cursheet[encode_col(c) + encode_row(r)] = cell;
                    }
                    if(cell.HRef) {
                        cell.l = ({Target:cell.HRef});
                        if(cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
                        delete cell.HRef; delete cell.HRefScreenTip;
                    }
                    if(cell.MergeAcross || cell.MergeDown) {
                        cc = c + (parseInt(cell.MergeAcross,10)|0);
                        rr = r + (parseInt(cell.MergeDown,10)|0);
                        merges.push({s:{c:c,r:r},e:{c:cc,r:rr}});
                    }
                    if(!opts.sheetStubs) { if(cell.MergeAcross) c = cc + 1; else ++c; }
                    else if(cell.MergeAcross || cell.MergeDown) {
    for(var cma = c; cma <= cc; ++cma) {
                            for(var cmd = r; cmd <= rr; ++cmd) {
                                if(cma > c || cmd > r) {
                                    if(opts.dense) {
                                        if(!cursheet[cmd]) cursheet[cmd] = [];
                                        cursheet[cmd][cma] = {t:'z'};
                                    } else cursheet[encode_col(cma) + encode_row(cmd)] = {t:'z'};
                                }
                            }
                        }
                        c = cc + 1;
                    }
                    else ++c;
                } else {
                    cell = xlml_parsexmltagobj(Rn[0]);
                    if(cell.Index) c = +cell.Index - 1;
                    if(c < refguess.s.c) refguess.s.c = c;
                    if(c > refguess.e.c) refguess.e.c = c;
                    if(Rn[0].slice(-2) === "/>") ++c;
                    comments = [];
                }
                break;
            case 'Row':
                if(Rn[1]==='/' || Rn[0].slice(-2) === "/>") {
                    if(r < refguess.s.r) refguess.s.r = r;
                    if(r > refguess.e.r) refguess.e.r = r;
                    if(Rn[0].slice(-2) === "/>") {
                        row = xlml_parsexmltag(Rn[0]);
                        if(row.Index) r = +row.Index - 1;
                    }
                    c = 0; ++r;
                } else {
                    row = xlml_parsexmltag(Rn[0]);
                    if(row.Index) r = +row.Index - 1;
                    rowobj = {};
                    if(row.AutoFitHeight == "0" || row.Height) {
                        rowobj.hpx = parseInt(row.Height, 10); rowobj.hpt = px2pt(rowobj.hpx);
                        rowinfo[r] = rowobj;
                    }
                    if(row.Hidden == "1") { rowobj.hidden = true; rowinfo[r] = rowobj; }
                }
                break;
            case 'Worksheet': /* TODO: read range from FullRows/FullColumns */
                if(Rn[1]==='/'){
                    if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
                    sheetnames.push(sheetname);
                    if(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) cursheet["!ref"] = encode_range(refguess);
                    if(merges.length) cursheet["!merges"] = merges;
                    if(cstys.length > 0) cursheet["!cols"] = cstys;
                    if(rowinfo.length > 0) cursheet["!rows"] = rowinfo;
                    sheets[sheetname] = cursheet;
                } else {
                    refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
                    r = c = 0;
                    state.push([Rn[3], false]);
                    tmp = xlml_parsexmltag(Rn[0]);
                    sheetname = unescapexml(tmp.Name);
                    cursheet = (opts.dense ? [] : {});
                    merges = [];
                    arrayf = [];
                    rowinfo = [];
                    wsprops = {name:sheetname, Hidden:0};
                    Workbook.Sheets.push(wsprops);
                }
                break;
            case 'Table':
                if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
                else if(Rn[0].slice(-2) == "/>") break;
                else {
                    table = xlml_parsexmltag(Rn[0]);
                    state.push([Rn[3], false]);
                    cstys = []; seencol = false;
                }
                break;
    
            case 'Style':
                if(Rn[1]==='/') process_style_xlml(styles, stag, opts);
                else stag = xlml_parsexmltag(Rn[0]);
                break;
    
            case 'NumberFormat':
                stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
                if(XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
                for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx) if(SSF._table[ssfidx] == stag.nf) break;
                if(ssfidx == 0x188) for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) if(SSF._table[ssfidx] == null) { SSF.load(stag.nf, ssfidx); break; }
                break;
    
            case 'Column':
                if(state[state.length-1][0] !== 'Table') break;
                csty = xlml_parsexmltag(Rn[0]);
                if(csty.Hidden) { csty.hidden = true; delete csty.Hidden; }
                if(csty.Width) csty.wpx = parseInt(csty.Width, 10);
                if(!seencol && csty.wpx > 10) {
                    seencol = true; MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);
                    for(var _col = 0; _col < cstys.length; ++_col) if(cstys[_col]) process_col(cstys[_col]);
                }
                if(seencol) process_col(csty);
                cstys[(csty.Index-1||cstys.length)] = csty;
                for(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);
                break;
    
            case 'NamedRange':
                if(!Workbook.Names) Workbook.Names = [];
                var _NamedRange = parsexmltag(Rn[0]);
                var _DefinedName = ({
                    Name: _NamedRange.Name,
                    Ref: rc_to_a1(_NamedRange.RefersTo.substr(1), {r:0, c:0})
                });
                if(Workbook.Sheets.length>0) _DefinedName.Sheet=Workbook.Sheets.length-1;
    Workbook.Names.push(_DefinedName);
                break;
    
            case 'NamedCell': break;
            case 'B': break;
            case 'I': break;
            case 'U': break;
            case 'S': break;
            case 'Sub': break;
            case 'Sup': break;
            case 'Span': break;
            case 'Border': break;
            case 'Alignment': break;
            case 'Borders': break;
            case 'Font':
                if(Rn[0].slice(-2) === "/>") break;
                else if(Rn[1]==="/") ss += str.slice(fidx, Rn.index);
                else fidx = Rn.index + Rn[0].length;
                break;
            case 'Interior':
                if(!opts.cellStyles) break;
                stag.Interior = xlml_parsexmltag(Rn[0]);
                break;
            case 'Protection': break;
    
            case 'Author':
            case 'Title':
            case 'Description':
            case 'Created':
            case 'Keywords':
            case 'Subject':
            case 'Category':
            case 'Company':
            case 'LastAuthor':
            case 'LastSaved':
            case 'LastPrinted':
            case 'Version':
            case 'Revision':
            case 'TotalTime':
            case 'HyperlinkBase':
            case 'Manager':
            case 'ContentStatus':
            case 'Identifier':
            case 'Language':
            case 'AppName':
                if(Rn[0].slice(-2) === "/>") break;
                else if(Rn[1]==="/") xlml_set_prop(Props, Rn[3], str.slice(pidx, Rn.index));
                else pidx = Rn.index + Rn[0].length;
                break;
            case 'Paragraphs': break;
    
            case 'Styles':
            case 'Workbook':
                if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
                else state.push([Rn[3], false]);
                break;
    
            case 'Comment':
                if(Rn[1]==='/'){
                    if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
                    xlml_clean_comment(comment);
                    comments.push(comment);
                } else {
                    state.push([Rn[3], false]);
                    tmp = xlml_parsexmltag(Rn[0]);
                    comment = ({a:tmp.Author});
                }
                break;
    
            case 'AutoFilter':
                if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
                else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
                    var AutoFilter = xlml_parsexmltag(Rn[0]);
                    cursheet['!autofilter'] = { ref:rc_to_a1(AutoFilter.Range).replace(/\$/g,"") };
                    state.push([Rn[3], true]);
                }
                break;
    
            case 'Name': break;
    
            case 'ComponentOptions':
            case 'DocumentProperties':
            case 'CustomDocumentProperties':
            case 'OfficeDocumentSettings':
            case 'PivotTable':
            case 'PivotCache':
            case 'Names':
            case 'MapInfo':
            case 'PageBreaks':
            case 'QueryTable':
            case 'DataValidation':
            case 'Sorting':
            case 'Schema':
            case 'data':
            case 'ConditionalFormatting':
            case 'SmartTagType':
            case 'SmartTags':
            case 'ExcelWorkbook':
            case 'WorkbookOptions':
            case 'WorksheetOptions':
                if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
                else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
                break;
    
            default:
                /* FODS file root is <office:document> */
                if(state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
                /* UOS file root is <uof:UOF> */
                if(state.length == 0 && Rn[3] == "UOF") return parse_fods(str, opts);
    
                var seen = true;
                switch(state[state.length-1][0]) {
                    /* OfficeDocumentSettings */
                    case 'OfficeDocumentSettings': switch(Rn[3]) {
                        case 'AllowPNG': break;
                        case 'RemovePersonalInformation': break;
                        case 'DownloadComponents': break;
                        case 'LocationOfComponents': break;
                        case 'Colors': break;
                        case 'Color': break;
                        case 'Index': break;
                        case 'RGB': break;
                        case 'PixelsPerInch': break; // TODO: set PPI
                        case 'TargetScreenSize': break;
                        case 'ReadOnlyRecommended': break;
                        default: seen = false;
                    } break;
    
                    /* ComponentOptions */
                    case 'ComponentOptions': switch(Rn[3]) {
                        case 'Toolbar': break;
                        case 'HideOfficeLogo': break;
                        case 'SpreadsheetAutoFit': break;
                        case 'Label': break;
                        case 'Caption': break;
                        case 'MaxHeight': break;
                        case 'MaxWidth': break;
                        case 'NextSheetNumber': break;
                        default: seen = false;
                    } break;
    
                    /* ExcelWorkbook */
                    case 'ExcelWorkbook': switch(Rn[3]) {
                        case 'Date1904':
    Workbook.WBProps.date1904 = true;
                            break;
                        case 'WindowHeight': break;
                        case 'WindowWidth': break;
                        case 'WindowTopX': break;
                        case 'WindowTopY': break;
                        case 'TabRatio': break;
                        case 'ProtectStructure': break;
                        case 'ProtectWindows': break;
                        case 'ActiveSheet': break;
                        case 'DisplayInkNotes': break;
                        case 'FirstVisibleSheet': break;
                        case 'SupBook': break;
                        case 'SheetName': break;
                        case 'SheetIndex': break;
                        case 'SheetIndexFirst': break;
                        case 'SheetIndexLast': break;
                        case 'Dll': break;
                        case 'AcceptLabelsInFormulas': break;
                        case 'DoNotSaveLinkValues': break;
                        case 'Iteration': break;
                        case 'MaxIterations': break;
                        case 'MaxChange': break;
                        case 'Path': break;
                        case 'Xct': break;
                        case 'Count': break;
                        case 'SelectedSheets': break;
                        case 'Calculation': break;
                        case 'Uncalced': break;
                        case 'StartupPrompt': break;
                        case 'Crn': break;
                        case 'ExternName': break;
                        case 'Formula': break;
                        case 'ColFirst': break;
                        case 'ColLast': break;
                        case 'WantAdvise': break;
                        case 'Boolean': break;
                        case 'Error': break;
                        case 'Text': break;
                        case 'OLE': break;
                        case 'NoAutoRecover': break;
                        case 'PublishObjects': break;
                        case 'DoNotCalculateBeforeSave': break;
                        case 'Number': break;
                        case 'RefModeR1C1': break;
                        case 'EmbedSaveSmartTags': break;
                        default: seen = false;
                    } break;
    
                    /* WorkbookOptions */
                    case 'WorkbookOptions': switch(Rn[3]) {
                        case 'OWCVersion': break;
                        case 'Height': break;
                        case 'Width': break;
                        default: seen = false;
                    } break;
    
                    /* WorksheetOptions */
                    case 'WorksheetOptions': switch(Rn[3]) {
                        case 'Visible':
                            if(Rn[0].slice(-2) === "/>"){/* empty */}
                            else if(Rn[1]==="/") switch(str.slice(pidx, Rn.index)) {
                                case "SheetHidden": wsprops.Hidden = 1; break;
                                case "SheetVeryHidden": wsprops.Hidden = 2; break;
                            }
                            else pidx = Rn.index + Rn[0].length;
                            break;
                        case 'Header':
                            if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
                            cursheet['!margins'].header = parsexmltag(Rn[0]).Margin;
                            break;
                        case 'Footer':
                            if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
                            cursheet['!margins'].footer = parsexmltag(Rn[0]).Margin;
                            break;
                        case 'PageMargins':
                            var pagemargins = parsexmltag(Rn[0]);
                            if(!cursheet['!margins']) default_margins(cursheet['!margins']={},'xlml');
                            if(pagemargins.Top) cursheet['!margins'].top = pagemargins.Top;
                            if(pagemargins.Left) cursheet['!margins'].left = pagemargins.Left;
                            if(pagemargins.Right) cursheet['!margins'].right = pagemargins.Right;
                            if(pagemargins.Bottom) cursheet['!margins'].bottom = pagemargins.Bottom;
                            break;
                        case 'DisplayRightToLeft':
                            if(!Workbook.Views) Workbook.Views = [];
                            if(!Workbook.Views[0]) Workbook.Views[0] = {};
                            Workbook.Views[0].RTL = true;
                            break;
    
                        case 'Unsynced': break;
                        case 'Print': break;
                        case 'Panes': break;
                        case 'Scale': break;
                        case 'Pane': break;
                        case 'Number': break;
                        case 'Layout': break;
                        case 'PageSetup': break;
                        case 'Selected': break;
                        case 'ProtectObjects': break;
                        case 'EnableSelection': break;
                        case 'ProtectScenarios': break;
                        case 'ValidPrinterInfo': break;
                        case 'HorizontalResolution': break;
                        case 'VerticalResolution': break;
                        case 'NumberofCopies': break;
                        case 'ActiveRow': break;
                        case 'ActiveCol': break;
                        case 'ActivePane': break;
                        case 'TopRowVisible': break;
                        case 'TopRowBottomPane': break;
                        case 'LeftColumnVisible': break;
                        case 'LeftColumnRightPane': break;
                        case 'FitToPage': break;
                        case 'RangeSelection': break;
                        case 'PaperSizeIndex': break;
                        case 'PageLayoutZoom': break;
                        case 'PageBreakZoom': break;
                        case 'FilterOn': break;
                        case 'DoNotDisplayGridlines': break;
                        case 'SplitHorizontal': break;
                        case 'SplitVertical': break;
                        case 'FreezePanes': break;
                        case 'FrozenNoSplit': break;
                        case 'FitWidth': break;
                        case 'FitHeight': break;
                        case 'CommentsLayout': break;
                        case 'Zoom': break;
                        case 'LeftToRight': break;
                        case 'Gridlines': break;
                        case 'AllowSort': break;
                        case 'AllowFilter': break;
                        case 'AllowInsertRows': break;
                        case 'AllowDeleteRows': break;
                        case 'AllowInsertCols': break;
                        case 'AllowDeleteCols': break;
                        case 'AllowInsertHyperlinks': break;
                        case 'AllowFormatCells': break;
                        case 'AllowSizeCols': break;
                        case 'AllowSizeRows': break;
                        case 'NoSummaryRowsBelowDetail': break;
                        case 'TabColorIndex': break;
                        case 'DoNotDisplayHeadings': break;
                        case 'ShowPageLayoutZoom': break;
                        case 'NoSummaryColumnsRightDetail': break;
                        case 'BlackAndWhite': break;
                        case 'DoNotDisplayZeros': break;
                        case 'DisplayPageBreak': break;
                        case 'RowColHeadings': break;
                        case 'DoNotDisplayOutline': break;
                        case 'NoOrientation': break;
                        case 'AllowUsePivotTables': break;
                        case 'ZeroHeight': break;
                        case 'ViewableRange': break;
                        case 'Selection': break;
                        case 'ProtectContents': break;
                        default: seen = false;
                    } break;
    
                    /* PivotTable */
                    case 'PivotTable': case 'PivotCache': switch(Rn[3]) {
                        case 'ImmediateItemsOnDrop': break;
                        case 'ShowPageMultipleItemLabel': break;
                        case 'CompactRowIndent': break;
                        case 'Location': break;
                        case 'PivotField': break;
                        case 'Orientation': break;
                        case 'LayoutForm': break;
                        case 'LayoutSubtotalLocation': break;
                        case 'LayoutCompactRow': break;
                        case 'Position': break;
                        case 'PivotItem': break;
                        case 'DataType': break;
                        case 'DataField': break;
                        case 'SourceName': break;
                        case 'ParentField': break;
                        case 'PTLineItems': break;
                        case 'PTLineItem': break;
                        case 'CountOfSameItems': break;
                        case 'Item': break;
                        case 'ItemType': break;
                        case 'PTSource': break;
                        case 'CacheIndex': break;
                        case 'ConsolidationReference': break;
                        case 'FileName': break;
                        case 'Reference': break;
                        case 'NoColumnGrand': break;
                        case 'NoRowGrand': break;
                        case 'BlankLineAfterItems': break;
                        case 'Hidden': break;
                        case 'Subtotal': break;
                        case 'BaseField': break;
                        case 'MapChildItems': break;
                        case 'Function': break;
                        case 'RefreshOnFileOpen': break;
                        case 'PrintSetTitles': break;
                        case 'MergeLabels': break;
                        case 'DefaultVersion': break;
                        case 'RefreshName': break;
                        case 'RefreshDate': break;
                        case 'RefreshDateCopy': break;
                        case 'VersionLastRefresh': break;
                        case 'VersionLastUpdate': break;
                        case 'VersionUpdateableMin': break;
                        case 'VersionRefreshableMin': break;
                        case 'Calculation': break;
                        default: seen = false;
                    } break;
    
                    /* PageBreaks */
                    case 'PageBreaks': switch(Rn[3]) {
                        case 'ColBreaks': break;
                        case 'ColBreak': break;
                        case 'RowBreaks': break;
                        case 'RowBreak': break;
                        case 'ColStart': break;
                        case 'ColEnd': break;
                        case 'RowEnd': break;
                        default: seen = false;
                    } break;
    
                    /* AutoFilter */
                    case 'AutoFilter': switch(Rn[3]) {
                        case 'AutoFilterColumn': break;
                        case 'AutoFilterCondition': break;
                        case 'AutoFilterAnd': break;
                        case 'AutoFilterOr': break;
                        default: seen = false;
                    } break;
    
                    /* QueryTable */
                    case 'QueryTable': switch(Rn[3]) {
                        case 'Id': break;
                        case 'AutoFormatFont': break;
                        case 'AutoFormatPattern': break;
                        case 'QuerySource': break;
                        case 'QueryType': break;
                        case 'EnableRedirections': break;
                        case 'RefreshedInXl9': break;
                        case 'URLString': break;
                        case 'HTMLTables': break;
                        case 'Connection': break;
                        case 'CommandText': break;
                        case 'RefreshInfo': break;
                        case 'NoTitles': break;
                        case 'NextId': break;
                        case 'ColumnInfo': break;
                        case 'OverwriteCells': break;
                        case 'DoNotPromptForFile': break;
                        case 'TextWizardSettings': break;
                        case 'Source': break;
                        case 'Number': break;
                        case 'Decimal': break;
                        case 'ThousandSeparator': break;
                        case 'TrailingMinusNumbers': break;
                        case 'FormatSettings': break;
                        case 'FieldType': break;
                        case 'Delimiters': break;
                        case 'Tab': break;
                        case 'Comma': break;
                        case 'AutoFormatName': break;
                        case 'VersionLastEdit': break;
                        case 'VersionLastRefresh': break;
                        default: seen = false;
                    } break;
    
                    case 'Sorting':
                    case 'ConditionalFormatting':
                    case 'DataValidation':
                    switch(Rn[3]) {
                        case 'Range': break;
                        case 'Type': break;
                        case 'Min': break;
                        case 'Max': break;
                        case 'Sort': break;
                        case 'Descending': break;
                        case 'Order': break;
                        case 'CaseSensitive': break;
                        case 'Value': break;
                        case 'ErrorStyle': break;
                        case 'ErrorMessage': break;
                        case 'ErrorTitle': break;
                        case 'CellRangeList': break;
                        case 'InputMessage': break;
                        case 'InputTitle': break;
                        case 'ComboHide': break;
                        case 'InputHide': break;
                        case 'Condition': break;
                        case 'Qualifier': break;
                        case 'UseBlank': break;
                        case 'Value1': break;
                        case 'Value2': break;
                        case 'Format': break;
                        default: seen = false;
                    } break;
    
                    /* MapInfo (schema) */
                    case 'MapInfo': case 'Schema': case 'data': switch(Rn[3]) {
                        case 'Map': break;
                        case 'Entry': break;
                        case 'Range': break;
                        case 'XPath': break;
                        case 'Field': break;
                        case 'XSDType': break;
                        case 'FilterOn': break;
                        case 'Aggregate': break;
                        case 'ElementType': break;
                        case 'AttributeType': break;
                    /* These are from xsd (XML Schema Definition) */
                        case 'schema':
                        case 'element':
                        case 'complexType':
                        case 'datatype':
                        case 'all':
                        case 'attribute':
                        case 'extends': break;
    
                        case 'row': break;
                        default: seen = false;
                    } break;
    
                    /* SmartTags (can be anything) */
                    case 'SmartTags': break;
    
                    default: seen = false; break;
                }
                if(seen) break;
                /* CustomDocumentProperties */
                if(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
                if(state[state.length-1][0]==='CustomDocumentProperties') {
                    if(Rn[0].slice(-2) === "/>") break;
                    else if(Rn[1]==="/") xlml_set_custprop(Custprops, Rn[3], cp, str.slice(pidx, Rn.index));
                    else { cp = Rn; pidx = Rn.index + Rn[0].length; }
                    break;
                }
                if(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
        }
        var out = ({});
        if(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
        out.SheetNames = sheetnames;
        out.Workbook = Workbook;
        out.SSF = SSF.get_table();
        out.Props = Props;
        out.Custprops = Custprops;
        return out;
    }
    
    function parse_xlml(data, opts) {
        fix_read_opts(opts=opts||{});
        switch(opts.type||"base64") {
            case "base64": return parse_xlml_xml(Base64.decode(data), opts);
            case "binary": case "buffer": case "file": return parse_xlml_xml(data, opts);
            case "array": return parse_xlml_xml(arr2str(data), opts);
        }
    }
    
    /* TODO */
    function write_props_xlml(wb, opts) {
        var o = [];
        /* DocumentProperties */
        if(wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
        /* CustomDocumentProperties */
        if(wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
        return o.join("");
    }
    /* TODO */
    function write_wb_xlml(wb, opts) {
        /* OfficeDocumentSettings */
        /* ExcelWorkbook */
        return "";
    }
    /* TODO */
    function write_sty_xlml(wb, opts) {
        /* Styles */
        var styles = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
        opts.cellXfs.forEach(function(xf, id) {
            var payload = [];
            payload.push(writextag('NumberFormat', null, {"ss:Format": escapexml(SSF._table[xf.numFmtId])}));
            styles.push(writextag('Style', payload.join(""), {"ss:ID": "s" + (21+id)}));
        });
        return writextag("Styles", styles.join(""));
    }
    function write_name_xlml(n) { return writextag("NamedRange", null, {"ss:Name": n.Name, "ss:RefersTo":"=" + a1_to_rc(n.Ref, {r:0,c:0})}); }
    function write_names_xlml(wb, opts) {
        if(!((wb||{}).Workbook||{}).Names) return "";
    var names = wb.Workbook.Names;
        var out = [];
        for(var i = 0; i < names.length; ++i) {
            var n = names[i];
            if(n.Sheet != null) continue;
            if(n.Name.match(/^_xlfn\./)) continue;
            out.push(write_name_xlml(n));
        }
        return writextag("Names", out.join(""));
    }
    function write_ws_xlml_names(ws, opts, idx, wb) {
        if(!ws) return "";
        if(!((wb||{}).Workbook||{}).Names) return "";
    var names = wb.Workbook.Names;
        var out = [];
        outer: for(var i = 0; i < names.length; ++i) {
            var n = names[i];
            if(n.Sheet != idx) continue;
            /*switch(n.Name) {
                case "_": continue;
            }*/
            if(n.Name.match(/^_xlfn\./)) continue;
            out.push(write_name_xlml(n));
        }
        return out.join("");
    }
    /* WorksheetOptions */
    function write_ws_xlml_wsopts(ws, opts, idx, wb) {
        if(!ws) return "";
        var o = [];
        /* NOTE: spec technically allows any order, but stick with implied order */
    
        /* FitToPage */
        /* DoNotDisplayColHeaders */
        /* DoNotDisplayRowHeaders */
        /* ViewableRange */
        /* Selection */
        /* GridlineColor */
        /* Name */
        /* ExcelWorksheetType */
        /* IntlMacro */
        /* Unsynced */
        /* Selected */
        /* CodeName */
    
        if(ws['!margins']) {
            o.push("<PageSetup>");
            if(ws['!margins'].header) o.push(writextag("Header", null, {'x:Margin':ws['!margins'].header}));
            if(ws['!margins'].footer) o.push(writextag("Footer", null, {'x:Margin':ws['!margins'].footer}));
            o.push(writextag("PageMargins", null, {
                'x:Bottom': ws['!margins'].bottom || "0.75",
                'x:Left': ws['!margins'].left || "0.7",
                'x:Right': ws['!margins'].right || "0.7",
                'x:Top': ws['!margins'].top || "0.75"
            }));
            o.push("</PageSetup>");
        }
    
        /* PageSetup */
        /* DisplayPageBreak */
        /* TransitionExpressionEvaluation */
        /* TransitionFormulaEntry */
        /* Print */
        /* Zoom */
        /* PageLayoutZoom */
        /* PageBreakZoom */
        /* ShowPageBreakZoom */
        /* DefaultRowHeight */
        /* DefaultColumnWidth */
        /* StandardWidth */
    
        if(wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
            /* Visible */
            if(wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", (wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden"), {}));
            else {
                /* Selected */
                for(var i = 0; i < idx; ++i) if(wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;
                if(i == idx) o.push("<Selected/>");
            }
        }
    
        /* LeftColumnVisible */
    
        // $FlowIgnore
        if(((((wb||{}).Workbook||{}).Views||[])[0]||{}).RTL) o.push("<DisplayRightToLeft/>");
    
        /* GridlineColorIndex */
        /* DisplayFormulas */
        /* DoNotDisplayGridlines */
        /* DoNotDisplayHeadings */
        /* DoNotDisplayOutline */
        /* ApplyAutomaticOutlineStyles */
        /* NoSummaryRowsBelowDetail */
        /* NoSummaryColumnsRightDetail */
        /* DoNotDisplayZeros */
        /* ActiveRow */
        /* ActiveColumn */
        /* FilterOn */
        /* RangeSelection */
        /* TopRowVisible */
        /* TopRowBottomPane */
        /* LeftColumnRightPane */
        /* ActivePane */
        /* SplitHorizontal */
        /* SplitVertical */
        /* FreezePanes */
        /* FrozenNoSplit */
        /* TabColorIndex */
        /* Panes */
    
        /* NOTE: Password not supported in XLML Format */
        if(ws['!protect']) {
            o.push(writetag("ProtectContents", "True"));
            if(ws['!protect'].objects) o.push(writetag("ProtectObjects", "True"));
            if(ws['!protect'].scenarios) o.push(writetag("ProtectScenarios", "True"));
            if(ws['!protect'].selectLockedCells != null && !ws['!protect'].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection"));
            else if(ws['!protect'].selectUnlockedCells != null && !ws['!protect'].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));
        [
            [ "formatCells", "AllowFormatCells" ],
            [ "formatColumns", "AllowSizeCols" ],
            [ "formatRows", "AllowSizeRows" ],
            [ "insertColumns", "AllowInsertCols" ],
            [ "insertRows", "AllowInsertRows" ],
            [ "insertHyperlinks", "AllowInsertHyperlinks" ],
            [ "deleteColumns", "AllowDeleteCols" ],
            [ "deleteRows", "AllowDeleteRows" ],
            [ "sort", "AllowSort" ],
            [ "autoFilter", "AllowFilter" ],
            [ "pivotTables", "AllowUsePivotTables" ]
        ].forEach(function(x) { if(ws['!protect'][x[0]]) o.push("<"+x[1]+"/>"); });
        }
    
        if(o.length == 0) return "";
        return writextag("WorksheetOptions", o.join(""), {xmlns:XLMLNS.x});
    }
    function write_ws_xlml_comment(comments) {
        return comments.map(function(c) {
            // TODO: formatted text
            var t = xlml_unfixstr(c.t||"");
            var d =writextag("ss:Data", t, {"xmlns":"http://www.w3.org/TR/REC-html40"});
            return writextag("Comment", d, {"ss:Author":c.a});
        }).join("");
    }
    function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr){
        if(!cell || cell.v == undefined && cell.f == undefined) return "";
    
        var attr = {};
        if(cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
        if(cell.F && cell.F.substr(0, ref.length) == ref) {
            var end = decode_cell(cell.F.substr(ref.length + 1));
            attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
        }
    
        if(cell.l && cell.l.Target) {
            attr["ss:HRef"] = escapexml(cell.l.Target);
            if(cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
        }
    
        if(ws['!merges']) {
            var marr = ws['!merges'];
            for(var mi = 0; mi != marr.length; ++mi) {
                if(marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
                if(marr[mi].e.c > marr[mi].s.c) attr['ss:MergeAcross'] = marr[mi].e.c - marr[mi].s.c;
                if(marr[mi].e.r > marr[mi].s.r) attr['ss:MergeDown'] = marr[mi].e.r - marr[mi].s.r;
            }
        }
    
        var t = "", p = "";
        switch(cell.t) {
            case 'z': return "";
            case 'n': t = 'Number'; p = String(cell.v); break;
            case 'b': t = 'Boolean'; p = (cell.v ? "1" : "0"); break;
            case 'e': t = 'Error'; p = BErr[cell.v]; break;
            case 'd': t = 'DateTime'; p = new Date(cell.v).toISOString(); if(cell.z == null) cell.z = cell.z || SSF._table[14]; break;
            case 's': t = 'String'; p = escapexlml(cell.v||""); break;
        }
        /* TODO: cell style */
        var os = get_cell_style(opts.cellXfs, cell, opts);
        attr["ss:StyleID"] = "s" + (21+os);
        attr["ss:Index"] = addr.c + 1;
        var _v = (cell.v != null ? p : "");
        var m = '<Data ss:Type="' + t + '">' + _v + '</Data>';
    
        if((cell.c||[]).length > 0) m += write_ws_xlml_comment(cell.c);
    
        return writextag("Cell", m, attr);
    }
    function write_ws_xlml_row(R, row) {
        var o = '<Row ss:Index="' + (R+1) + '"';
        if(row) {
            if(row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
            if(row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
            if(row.hidden) o += ' ss:Hidden="1"';
        }
        return o + '>';
    }
    /* TODO */
    function write_ws_xlml_table(ws, opts, idx, wb) {
        if(!ws['!ref']) return "";
        var range = safe_decode_range(ws['!ref']);
        var marr = ws['!merges'] || [], mi = 0;
        var o = [];
        if(ws['!cols']) ws['!cols'].forEach(function(n, i) {
            process_col(n);
            var w = !!n.width;
            var p = col_obj_w(i, n);
            var k = {"ss:Index":i+1};
            if(w) k['ss:Width'] = width2px(p.width);
            if(n.hidden) k['ss:Hidden']="1";
            o.push(writextag("Column",null,k));
        });
        var dense = Array.isArray(ws);
        for(var R = range.s.r; R <= range.e.r; ++R) {
            var row = [write_ws_xlml_row(R, (ws['!rows']||[])[R])];
            for(var C = range.s.c; C <= range.e.c; ++C) {
                var skip = false;
                for(mi = 0; mi != marr.length; ++mi) {
                    if(marr[mi].s.c > C) continue;
                    if(marr[mi].s.r > R) continue;
                    if(marr[mi].e.c < C) continue;
                    if(marr[mi].e.r < R) continue;
                    if(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                    break;
                }
                if(skip) continue;
                var addr = {r:R,c:C};
                var ref = encode_cell(addr), cell = dense ? (ws[R]||[])[C] : ws[ref];
                row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
            }
            row.push("</Row>");
            if(row.length > 2) o.push(row.join(""));
        }
        return o.join("");
    }
    function write_ws_xlml(idx, opts, wb) {
        var o = [];
        var s = wb.SheetNames[idx];
        var ws = wb.Sheets[s];
    
        var t = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
        if(t.length > 0) o.push("<Names>" + t + "</Names>");
    
        /* Table */
        t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
        if(t.length > 0) o.push("<Table>" + t + "</Table>");
    
        /* WorksheetOptions */
        o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
    
        return o.join("");
    }
    function write_xlml(wb, opts) {
        if(!opts) opts = {};
        if(!wb.SSF) wb.SSF = SSF.get_table();
        if(wb.SSF) {
            make_ssf(SSF); SSF.load_table(wb.SSF);
            // $FlowIgnore
            opts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;
            opts.ssf = wb.SSF;
            opts.cellXfs = [];
            get_cell_style(opts.cellXfs, {}, {revssf:{"General":0}});
        }
        var d = [];
        d.push(write_props_xlml(wb, opts));
        d.push(write_wb_xlml(wb, opts));
        d.push("");
        d.push("");
        for(var i = 0; i < wb.SheetNames.length; ++i)
            d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), {"ss:Name":escapexml(wb.SheetNames[i])}));
        d[2] = write_sty_xlml(wb, opts);
        d[3] = write_names_xlml(wb, opts);
        return XML_HEADER + writextag("Workbook", d.join(""), {
            'xmlns':      XLMLNS.ss,
            'xmlns:o':    XLMLNS.o,
            'xmlns:x':    XLMLNS.x,
            'xmlns:ss':   XLMLNS.ss,
            'xmlns:dt':   XLMLNS.dt,
            'xmlns:html': XLMLNS.html
        });
    }
    /* [MS-OLEDS] 2.3.8 CompObjStream */
    function parse_compobj(obj) {
        var v = {};
        var o = obj.content;
    /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */
        o.l = 28;
    
        v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
        v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
    
        if(o.length - o.l <= 4) return v;
    
        var m = o.read_shift(4);
        if(m == 0 || m > 40) return v;
        o.l-=4; v.Reserved1 = o.read_shift(0, "lpstr-ansi");
    
        if(o.length - o.l <= 4) return v;
        m = o.read_shift(4);
        if(m !== 0x71b239f4) return v;
        v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
    
        m = o.read_shift(4);
        if(m == 0 || m > 40) return v;
        o.l-=4; v.Reserved2 = o.read_shift(0, "lpwstr");
    }
    
    /*
        Continue logic for:
        - 2.4.58 Continue
        - 2.4.59 ContinueBigName
        - 2.4.60 ContinueFrt
        - 2.4.61 ContinueFrt11
        - 2.4.62 ContinueFrt12
    */
    function slurp(R, blob, length, opts) {
        var l = length;
        var bufs = [];
        var d = blob.slice(blob.l,blob.l+l);
        if(opts && opts.enc && opts.enc.insitu) switch(R.n) {
        case 'BOF': case 'FilePass': case 'FileLock': case 'InterfaceHdr': case 'RRDInfo': case 'RRDHead': case 'UsrExcl': break;
        default:
            if(d.length === 0) break;
            opts.enc.insitu(d);
        }
        bufs.push(d);
        blob.l += l;
        var next = (XLSRecordEnum[__readUInt16LE(blob,blob.l)]);
        var start = 0;
        while(next != null && next.n.slice(0,8) === 'Continue') {
            l = __readUInt16LE(blob,blob.l+2);
            start = blob.l + 4;
            if(next.n == 'ContinueFrt') start += 4;
            else if(next.n.slice(0,11) == 'ContinueFrt') start += 12;
            bufs.push(blob.slice(start,blob.l+4+l));
            blob.l += 4+l;
            next = (XLSRecordEnum[__readUInt16LE(blob, blob.l)]);
        }
        var b = (bconcat(bufs));
        prep_blob(b, 0);
        var ll = 0; b.lens = [];
        for(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }
        return R.f(b, b.length, opts);
    }
    
    function safe_format_xf(p, opts, date1904) {
        if(p.t === 'z') return;
        if(!p.XF) return;
        var fmtid = 0;
        try {
            fmtid = p.z || p.XF.numFmtId || 0;
            if(opts.cellNF) p.z = SSF._table[fmtid];
        } catch(e) { if(opts.WTF) throw e; }
        if(!opts || opts.cellText !== false) try {
            if(p.t === 'e') { p.w = p.w || BErr[p.v]; }
            else if(fmtid === 0 || fmtid == "General") {
                if(p.t === 'n') {
                    if((p.v|0) === p.v) p.w = SSF._general_int(p.v);
                    else p.w = SSF._general_num(p.v);
                }
                else p.w = SSF._general(p.v);
            }
            else p.w = SSF.format(fmtid,p.v, {date1904:!!date1904});
        } catch(e) { if(opts.WTF) throw e; }
        if(opts.cellDates && fmtid && p.t == 'n' && SSF.is_date(SSF._table[fmtid] || String(fmtid))) {
            var _d = SSF.parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
        }
    }
    
    function make_cell(val, ixfe, t) {
        return ({v:val, ixfe:ixfe, t:t});
    }
    
    // 2.3.2
    function parse_workbook(blob, options) {
        var wb = ({opts:{}});
        var Sheets = {};
        if(DENSE != null && options.dense == null) options.dense = DENSE;
        var out = ((options.dense ? [] : {}));
        var Directory = {};
        var range = ({});
        var last_formula = null;
        var sst = ([]);
        var cur_sheet = "";
        var Preamble = {};
        var lastcell, last_cell = "", cc, cmnt, rngC, rngR;
        var sharedf = {};
        var arrayf = [];
        var temp_val;
        var country;
        var cell_valid = true;
        var XFs = []; /* XF records */
        var palette = [];
        var Workbook = ({ Sheets:[], WBProps:{date1904:false}, Views:[{}] }), wsprops = {};
        var get_rgb = function getrgb(icv) {
            if(icv < 8) return XLSIcv[icv];
            if(icv < 64) return palette[icv-8] || XLSIcv[icv];
            return XLSIcv[icv];
        };
        var process_cell_style = function pcs(cell, line, options) {
            var xfd = line.XF.data;
            if(!xfd || !xfd.patternType || !options || !options.cellStyles) return;
            line.s = ({});
            line.s.patternType = xfd.patternType;
            var t;
            if((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }
            if((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }
        };
        var addcell = function addcell(cell, line, options) {
            if(file_depth > 1) return;
            if(!cell_valid) return;
            if(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
            delete line.ixfe; delete line.XF;
            lastcell = cell;
            last_cell = encode_cell(cell);
            if(range.s) {
                if(cell.r < range.s.r) range.s.r = cell.r;
                if(cell.c < range.s.c) range.s.c = cell.c;
            }
            if(range.e) {
                if(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
                if(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
            }
            if(options.cellFormula && line.f) {
                for(var afi = 0; afi < arrayf.length; ++afi) {
                    if(arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
                    if(arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
                    line.F = encode_range(arrayf[afi][0]);
                    if(arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
                    if(line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
                    break;
                }
            }
            if(options.sheetRows && lastcell.r >= options.sheetRows) cell_valid = false;
            else {
                if(options.dense) {
                    if(!out[cell.r]) out[cell.r] = [];
                    out[cell.r][cell.c] = line;
                } else out[last_cell] = line;
            }
        };
        var opts = ({
            enc: false, // encrypted
            sbcch: 0, // cch in the preceding SupBook
            snames: [], // sheetnames
            sharedf: sharedf, // shared formulae by address
            arrayf: arrayf, // array formulae array
            rrtabid: [], // RRTabId
            lastuser: "", // Last User from WriteAccess
            biff: 8, // BIFF version
            codepage: 0, // CP from CodePage record
            winlocked: 0, // fLockWn from WinProtect
            cellStyles: !!options && !!options.cellStyles,
            WTF: !!options && !!options.wtf
        });
        if(options.password) opts.password = options.password;
        var themes;
        var merges = [];
        var objects = [];
        var colinfo = [], rowinfo = [];
        var defwidth = 0, defheight = 0; // twips / MDW respectively
        var seencol = false;
        var supbooks = ([]); // 1-indexed, will hold extern names
        supbooks.SheetNames = opts.snames;
        supbooks.sharedf = opts.sharedf;
        supbooks.arrayf = opts.arrayf;
        supbooks.names = [];
        supbooks.XTI = [];
        var last_Rn = '';
        var file_depth = 0; /* TODO: make a real stack */
        var BIFF2Fmt = 0, BIFF2FmtTable = [];
        var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */
        var last_lbl;
    
        /* explicit override for some broken writers */
        opts.codepage = 1200;
        set_cp(1200);
        var seen_codepage = false;
        while(blob.l < blob.length - 1) {
            var s = blob.l;
            var RecordType = blob.read_shift(2);
            if(RecordType === 0 && last_Rn === 'EOF') break;
            var length = (blob.l === blob.length ? 0 : blob.read_shift(2)), y;
            var R = XLSRecordEnum[RecordType];
            //console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
            //if(!R) console.log(blob.slice(blob.l, blob.l + length));
            if(R && R.f) {
                if(options.bookSheets) {
                    if(last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8') break;
                }
                last_Rn = R.n;
                if(R.r === 2 || R.r == 12) {
                    var rt = blob.read_shift(2); length -= 2;
                    if(!opts.enc && rt !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
                    if(R.r == 12){ blob.l += 10; length -= 10; } // skip FRT
                }
                //console.error(R,blob.l,length,blob.length);
                var val;
                if(R.n === 'EOF') val = R.f(blob, length, opts);
                else val = slurp(R, blob, length, opts);
                var Rn = R.n;
                if(file_depth == 0 && Rn != 'BOF') continue;
                /* nested switch statements to workaround V8 128 limit */
                switch(Rn) {
                    /* Workbook Options */
                    case 'Date1904':
    wb.opts.Date1904 = Workbook.WBProps.date1904 = val; break;
                    case 'WriteProtect': wb.opts.WriteProtect = true; break;
                    case 'FilePass':
                        if(!opts.enc) blob.l = 0;
                        opts.enc = val;
                        if(opts.WTF) console.error(val);
                        if(!options.password) throw new Error("File is password-protected");
                        if(val.valid == null) throw new Error("Encryption scheme unsupported");
                        if(!val.valid) throw new Error("Password is incorrect");
                        break;
                    case 'WriteAccess': opts.lastuser = val; break;
                    case 'FileSharing': break; //TODO
                    case 'CodePage':
                        /* overrides based on test cases */
                        switch(val) {
                            case 0x5212: val =  1200; break;
                            case 0x8000: val = 10000; break;
                            case 0x8001: val =  1252; break;
                        }
                        set_cp(opts.codepage = val);
                        seen_codepage = true;
                        break;
                    case 'RRTabId': opts.rrtabid = val; break;
                    case 'WinProtect': opts.winlocked = val; break;
                    case 'Template': break; // TODO
                    case 'BookBool': break; // TODO
                    case 'UsesELFs': break;
                    case 'MTRSettings': break;
                    case 'RefreshAll':
                    case 'CalcCount':
                    case 'CalcDelta':
                    case 'CalcIter':
                    case 'CalcMode':
                    case 'CalcPrecision':
                    case 'CalcSaveRecalc':
                        wb.opts[Rn] = val; break;
                    case 'CalcRefMode': opts.CalcRefMode = val; break; // TODO: implement R1C1
                    case 'Uncalced': break;
                    case 'ForceFullCalculation': wb.opts.FullCalc = val; break;
                    case 'WsBool':
                        if(val.fDialog) out["!type"] = "dialog";
                        break; // TODO
                    case 'XF': XFs.push(val); break;
                    case 'ExtSST': break; // TODO
                    case 'BookExt': break; // TODO
                    case 'RichTextStream': break;
                    case 'BkHim': break;
    
                    case 'SupBook':
                        supbooks.push([val]);
                        supbooks[supbooks.length-1].XTI = [];
                        break;
                    case 'ExternName':
                        supbooks[supbooks.length-1].push(val);
                        break;
                    case 'Index': break; // TODO
                    case 'Lbl':
                        last_lbl = ({
                            Name: val.Name,
                            Ref: stringify_formula(val.rgce,range,null,supbooks,opts)
                        });
                        if(val.itab > 0) last_lbl.Sheet = val.itab - 1;
                        supbooks.names.push(last_lbl);
                        if(!supbooks[0]) { supbooks[0] = []; supbooks[0].XTI = []; }
                        supbooks[supbooks.length-1].push(val);
                        if(val.Name == "_xlnm._FilterDatabase" && val.itab > 0)
                            if(val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d')
                                FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
                        break;
                    case 'ExternCount': opts.ExternCount = val; break;
                    case 'ExternSheet':
                        if(supbooks.length == 0) { supbooks[0] = []; supbooks[0].XTI = []; }
                        supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val); supbooks.XTI = supbooks.XTI.concat(val); break;
                    case 'NameCmt':
                        /* TODO: search for correct name */
                        if(opts.biff < 8) break;
                        if(last_lbl != null) last_lbl.Comment = val[1];
                        break;
    
                    case 'Protect': out["!protect"] = val; break; /* for sheet or book */
                    case 'Password': if(val !== 0 && opts.WTF) console.error("Password verifier: " + val); break;
                    case 'Prot4Rev': case 'Prot4RevPass': break; /*TODO: Revision Control*/
    
                    case 'BoundSheet8': {
                        Directory[val.pos] = val;
                        opts.snames.push(val.name);
                    } break;
                    case 'EOF': {
                        if(--file_depth) break;
                        if(range.e) {
                            if(range.e.r > 0 && range.e.c > 0) {
                                range.e.r--; range.e.c--;
                                out["!ref"] = encode_range(range);
                                range.e.r++; range.e.c++;
                            }
                            if(merges.length > 0) out["!merges"] = merges;
                            if(objects.length > 0) out["!objects"] = objects;
                            if(colinfo.length > 0) out["!cols"] = colinfo;
                            if(rowinfo.length > 0) out["!rows"] = rowinfo;
                            Workbook.Sheets.push(wsprops);
                        }
                        if(cur_sheet === "") Preamble = out; else Sheets[cur_sheet] = out;
                        out = ((options.dense ? [] : {}));
                    } break;
                    case 'BOF': {
                        if(opts.biff === 8) opts.biff = {
    0x0009:2,
    0x0209:3,
    0x0409:4
                        }[RecordType] || {
    0x0500:5,
    0x0600:8,
    0x0002:2,
    0x0007:2
                        }[val.BIFFVer] || 8;
                        if(file_depth++) break;
                        cell_valid = true;
                        out = ((options.dense ? [] : {}));
    
                        if(opts.biff < 8 && !seen_codepage) { seen_codepage = true; set_cp(opts.codepage = options.codepage || 1252); }
                        if(opts.biff < 5) {
                            if(cur_sheet === "") cur_sheet = "Sheet1";
                            range = {s:{r:0,c:0},e:{r:0,c:0}};
                            /* fake BoundSheet8 */
                            var fakebs8 = {pos: blob.l - length, name:cur_sheet};
                            Directory[fakebs8.pos] = fakebs8;
                            opts.snames.push(cur_sheet);
                        }
                        else cur_sheet = (Directory[s] || {name:""}).name;
                        if(val.dt == 0x20) out["!type"] = "chart";
                        if(val.dt == 0x40) out["!type"] = "macro";
                        merges = [];
                        objects = [];
                        opts.arrayf = arrayf = [];
                        colinfo = []; rowinfo = [];
                        defwidth = defheight = 0;
                        seencol = false;
                        wsprops = {Hidden:(Directory[s]||{hs:0}).hs, name:cur_sheet };
                    } break;
    
                    case 'Number': case 'BIFF2NUM': case 'BIFF2INT': {
                        if(out["!type"] == "chart") if(options.dense ? (out[val.r]||[])[val.c]: out[encode_cell({c:val.c, r:val.r})]) ++val.c;
                        temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe]||{}, v:val.val, t:'n'});
                        if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({c:val.c, r:val.r}, temp_val, options);
                    } break;
                    case 'BoolErr': {
                        temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t});
                        if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({c:val.c, r:val.r}, temp_val, options);
                    } break;
                    case 'RK': {
                        temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'});
                        if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({c:val.c, r:val.r}, temp_val, options);
                    } break;
                    case 'MulRk': {
                        for(var j = val.c; j <= val.C; ++j) {
                            var ixfe = val.rkrec[j-val.c][0];
                            temp_val= ({ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'});
                            if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                            safe_format_xf(temp_val, options, wb.opts.Date1904);
                            addcell({c:j, r:val.r}, temp_val, options);
                        }
                    } break;
                    case 'Formula': {
                        if(val.val == 'String') { last_formula = val; break; }
                        temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
                        temp_val.XF = XFs[temp_val.ixfe];
                        if(options.cellFormula) {
                            var _f = val.formula;
                            if(_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {
                                var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                                var _fe = encode_cell({r:_fr, c:_fc});
                                if(sharedf[_fe]) temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
                                else temp_val.F = ((options.dense ? (out[_fr]||[])[_fc]: out[_fe]) || {}).F;
                            } else temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
                        }
                        if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell(val.cell, temp_val, options);
                        last_formula = val;
                    } break;
                    case 'String': {
                        if(last_formula) { /* technically always true */
                            last_formula.val = val;
                            temp_val = make_cell(val, last_formula.cell.ixfe, 's');
                            temp_val.XF = XFs[temp_val.ixfe];
                            if(options.cellFormula) {
                                temp_val.f = ""+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                            }
                            if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                            safe_format_xf(temp_val, options, wb.opts.Date1904);
                            addcell(last_formula.cell, temp_val, options);
                            last_formula = null;
                        } else throw new Error("String record expects Formula");
                    } break;
                    case 'Array': {
                        arrayf.push(val);
                        var _arraystart = encode_cell(val[0].s);
                        cc = options.dense ? (out[val[0].s.r]||[])[val[0].s.c] : out[_arraystart];
                        if(options.cellFormula && cc) {
                            if(!last_formula) break; /* technically unreachable */
                            if(!_arraystart || !cc) break;
                            cc.f = ""+stringify_formula(val[1], range, val[0], supbooks, opts);
                            cc.F = encode_range(val[0]);
                        }
                    } break;
                    case 'ShrFmla': {
                        if(!cell_valid) break;
                        if(!options.cellFormula) break;
                        if(last_cell) {
                            /* TODO: capture range */
                            if(!last_formula) break; /* technically unreachable */
                            sharedf[encode_cell(last_formula.cell)]= val[0];
                            cc = options.dense ? (out[last_formula.cell.r]||[])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                            (cc||{}).f = ""+stringify_formula(val[0], range, lastcell, supbooks, opts);
                        }
                    } break;
                    case 'LabelSst':
                        temp_val=make_cell(sst[val.isst].t, val.ixfe, 's');
                        temp_val.XF = XFs[temp_val.ixfe];
                        if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({c:val.c, r:val.r}, temp_val, options);
                        break;
                    case 'Blank': if(options.sheetStubs) {
                        temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], t:'z'});
                        if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({c:val.c, r:val.r}, temp_val, options);
                    } break;
                    case 'MulBlank': if(options.sheetStubs) {
                        for(var _j = val.c; _j <= val.C; ++_j) {
                            var _ixfe = val.ixfe[_j-val.c];
                            temp_val= ({ixfe:_ixfe, XF:XFs[_ixfe], t:'z'});
                            if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                            safe_format_xf(temp_val, options, wb.opts.Date1904);
                            addcell({c:_j, r:val.r}, temp_val, options);
                        }
                    } break;
                    case 'RString':
                    case 'Label': case 'BIFF2STR':
                        temp_val=make_cell(val.val, val.ixfe, 's');
                        temp_val.XF = XFs[temp_val.ixfe];
                        if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({c:val.c, r:val.r}, temp_val, options);
                        break;
    
                    case 'Dimensions': {
                        if(file_depth === 1) range = val; /* TODO: stack */
                    } break;
                    case 'SST': {
                        sst = val;
                    } break;
                    case 'Format': { /* val = [id, fmt] */
                        if(opts.biff == 4) {
                            BIFF2FmtTable[BIFF2Fmt++] = val[1];
                            for(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if(SSF._table[b4idx] == val[1]) break;
                            if(b4idx >= 163) SSF.load(val[1], BIFF2Fmt + 163);
                        }
                        else SSF.load(val[1], val[0]);
                    } break;
                    case 'BIFF2FORMAT': {
                        BIFF2FmtTable[BIFF2Fmt++] = val;
                        for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if(SSF._table[b2idx] == val) break;
                        if(b2idx >= 163) SSF.load(val, BIFF2Fmt + 163);
                    } break;
    
                    case 'MergeCells': merges = merges.concat(val); break;
    
                    case 'Obj': objects[val.cmo[0]] = opts.lastobj = val; break;
                    case 'TxO': opts.lastobj.TxO = val; break;
                    case 'ImData': opts.lastobj.ImData = val; break;
    
                    case 'HLink': {
                        for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                            for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                                cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
                                if(cc) cc.l = val[1];
                            }
                    } break;
                    case 'HLinkTooltip': {
                        for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                            for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                                cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
                                if(cc) cc.l.Tooltip = val[1];
                                }
                    } break;
    
                    /* Comments */
                    case 'Note': {
                        if(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */
                        cc = options.dense ? (out[val[0].r]||[])[val[0].c] : out[encode_cell(val[0])];
                        var noteobj = objects[val[2]];
                        if(!cc) break;
                        if(!cc.c) cc.c = [];
                        cmnt = {a:val[1],t:noteobj.TxO.t};
                        cc.c.push(cmnt);
                    } break;
    
                    default: switch(R.n) { /* nested */
                    case 'ClrtClient': break;
                    case 'XFExt': update_xfext(XFs[val.ixfe], val.ext); break;
    
                    case 'DefColWidth': defwidth = val; break;
                    case 'DefaultRowHeight': defheight = val[1]; break; // TODO: flags
    
                    case 'ColInfo': {
                        if(!opts.cellStyles) break;
                        while(val.e >= val.s) {
                            colinfo[val.e--] = { width: val.w/256 };
                            if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
                            process_col(colinfo[val.e+1]);
                        }
                    } break;
                    case 'Row': {
                        var rowobj = {};
                        if(val.level != null) { rowinfo[val.r] = rowobj; rowobj.level = val.level; }
                        if(val.hidden) { rowinfo[val.r] = rowobj; rowobj.hidden = true; }
                        if(val.hpt) {
                            rowinfo[val.r] = rowobj;
                            rowobj.hpt = val.hpt; rowobj.hpx = pt2px(val.hpt);
                        }
                    } break;
    
                    case 'LeftMargin':
                    case 'RightMargin':
                    case 'TopMargin':
                    case 'BottomMargin':
                        if(!out['!margins']) default_margins(out['!margins'] = {});
                        out['!margins'][Rn.slice(0,-6).toLowerCase()] = val;
                        break;
    
                    case 'Setup': // TODO
                        if(!out['!margins']) default_margins(out['!margins'] = {});
                        out['!margins'].header = val.header;
                        out['!margins'].footer = val.footer;
                        break;
    
                    case 'Window2': // TODO
                        // $FlowIgnore
                        if(val.RTL) Workbook.Views[0].RTL = true;
                        break;
    
                    case 'Header': break; // TODO
                    case 'Footer': break; // TODO
                    case 'HCenter': break; // TODO
                    case 'VCenter': break; // TODO
                    case 'Pls': break; // TODO
                    case 'GCW': break;
                    case 'LHRecord': break;
                    case 'DBCell': break; // TODO
                    case 'EntExU2': break; // TODO
                    case 'SxView': break; // TODO
                    case 'Sxvd': break; // TODO
                    case 'SXVI': break; // TODO
                    case 'SXVDEx': break; // TODO
                    case 'SxIvd': break; // TODO
                    case 'SXString': break; // TODO
                    case 'Sync': break;
                    case 'Addin': break;
                    case 'SXDI': break; // TODO
                    case 'SXLI': break; // TODO
                    case 'SXEx': break; // TODO
                    case 'QsiSXTag': break; // TODO
                    case 'Selection': break;
                    case 'Feat': break;
                    case 'FeatHdr': case 'FeatHdr11': break;
                    case 'Feature11': case 'Feature12': case 'List12': break;
                    case 'Country': country = val; break;
                    case 'RecalcId': break;
                    case 'DxGCol': break; // TODO: htmlify
                    case 'Fbi': case 'Fbi2': case 'GelFrame': break;
                    case 'Font': break; // TODO
                    case 'XFCRC': break; // TODO
                    case 'Style': break; // TODO
                    case 'StyleExt': break; // TODO
                    case 'Palette': palette = val; break;
                    case 'Theme': themes = val; break;
                    /* Protection */
                    case 'ScenarioProtect': break;
                    case 'ObjProtect': break;
    
                    /* Conditional Formatting */
                    case 'CondFmt12': break;
    
                    /* Table */
                    case 'Table': break; // TODO
                    case 'TableStyles': break; // TODO
                    case 'TableStyle': break; // TODO
                    case 'TableStyleElement': break; // TODO
    
                    /* PivotTable */
                    case 'SXStreamID': break; // TODO
                    case 'SXVS': break; // TODO
                    case 'DConRef': break; // TODO
                    case 'SXAddl': break; // TODO
                    case 'DConBin': break; // TODO
                    case 'DConName': break; // TODO
                    case 'SXPI': break; // TODO
                    case 'SxFormat': break; // TODO
                    case 'SxSelect': break; // TODO
                    case 'SxRule': break; // TODO
                    case 'SxFilt': break; // TODO
                    case 'SxItm': break; // TODO
                    case 'SxDXF': break; // TODO
    
                    /* Scenario Manager */
                    case 'ScenMan': break;
    
                    /* Data Consolidation */
                    case 'DCon': break;
    
                    /* Watched Cell */
                    case 'CellWatch': break;
    
                    /* Print Settings */
                    case 'PrintRowCol': break;
                    case 'PrintGrid': break;
                    case 'PrintSize': break;
    
                    case 'XCT': break;
                    case 'CRN': break;
    
                    case 'Scl': {
                        //console.log("Zoom Level:", val[0]/val[1],val);
                    } break;
                    case 'SheetExt': {
                        /* empty */
                    } break;
                    case 'SheetExtOptional': {
                        /* empty */
                    } break;
    
                    /* VBA */
                    case 'ObNoMacros': {
                        /* empty */
                    } break;
                    case 'ObProj': {
                        /* empty */
                    } break;
                    case 'CodeName': {
    if(!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
                        else wsprops.CodeName = val || wsprops.name;
                    } break;
                    case 'GUIDTypeLib': {
                        /* empty */
                    } break;
    
                    case 'WOpt': break; // TODO: WTF?
                    case 'PhoneticInfo': break;
    
                    case 'OleObjectSize': break;
    
                    /* Differential Formatting */
                    case 'DXF': case 'DXFN': case 'DXFN12': case 'DXFN12List': case 'DXFN12NoCB': break;
    
                    /* Data Validation */
                    case 'Dv': case 'DVal': break;
    
                    /* Data Series */
                    case 'BRAI': case 'Series': case 'SeriesText': break;
    
                    /* Data Connection */
                    case 'DConn': break;
                    case 'DbOrParamQry': break;
                    case 'DBQueryExt': break;
    
                    case 'OleDbConn': break;
                    case 'ExtString': break;
    
                    /* Formatting */
                    case 'IFmtRecord': break;
                    case 'CondFmt': case 'CF': case 'CF12': case 'CFEx': break;
    
                    /* Explicitly Ignored */
                    case 'Excel9File': break;
                    case 'Units': break;
                    case 'InterfaceHdr': case 'Mms': case 'InterfaceEnd': case 'DSF': break;
                    case 'BuiltInFnGroupCount': /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */ break;
                    /* View Stuff */
                    case 'Window1': case 'HideObj': case 'GridSet': case 'Guts':
                    case 'UserBView': case 'UserSViewBegin': case 'UserSViewEnd':
                    case 'Pane': break;
                    default: switch(R.n) { /* nested */
                    /* Chart */
                    case 'Dat':
                    case 'Begin': case 'End':
                    case 'StartBlock': case 'EndBlock':
                    case 'Frame': case 'Area':
                    case 'Axis': case 'AxisLine': case 'Tick': break;
                    case 'AxesUsed':
                    case 'CrtLayout12': case 'CrtLayout12A': case 'CrtLink': case 'CrtLine': case 'CrtMlFrt': case 'CrtMlFrtContinue': break;
                    case 'LineFormat': case 'AreaFormat':
                    case 'Chart': case 'Chart3d': case 'Chart3DBarShape': case 'ChartFormat': case 'ChartFrtInfo': break;
                    case 'PlotArea': case 'PlotGrowth': break;
                    case 'SeriesList': case 'SerParent': case 'SerAuxTrend': break;
                    case 'DataFormat': case 'SerToCrt': case 'FontX': break;
                    case 'CatSerRange': case 'AxcExt': case 'SerFmt': break;
                    case 'ShtProps': break;
                    case 'DefaultText': case 'Text': case 'CatLab': break;
                    case 'DataLabExtContents': break;
                    case 'Legend': case 'LegendException': break;
                    case 'Pie': case 'Scatter': break;
                    case 'PieFormat': case 'MarkerFormat': break;
                    case 'StartObject': case 'EndObject': break;
                    case 'AlRuns': case 'ObjectLink': break;
                    case 'SIIndex': break;
                    case 'AttachedLabel': case 'YMult': break;
    
                    /* Chart Group */
                    case 'Line': case 'Bar': break;
                    case 'Surf': break;
    
                    /* Axis Group */
                    case 'AxisParent': break;
                    case 'Pos': break;
                    case 'ValueRange': break;
    
                    /* Pivot Chart */
                    case 'SXViewEx9': break; // TODO
                    case 'SXViewLink': break;
                    case 'PivotChartBits': break;
                    case 'SBaseRef': break;
                    case 'TextPropsStream': break;
    
                    /* Chart Misc */
                    case 'LnExt': break;
                    case 'MkrExt': break;
                    case 'CrtCoopt': break;
    
                    /* Query Table */
                    case 'Qsi': case 'Qsif': case 'Qsir': case 'QsiSXTag': break;
                    case 'TxtQry': break;
    
                    /* Filter */
                    case 'FilterMode': break;
                    case 'AutoFilter': case 'AutoFilterInfo': break;
                    case 'AutoFilter12': break;
                    case 'DropDownObjIds': break;
                    case 'Sort': break;
                    case 'SortData': break;
    
                    /* Drawing */
                    case 'ShapePropsStream': break;
                    case 'MsoDrawing': case 'MsoDrawingGroup': case 'MsoDrawingSelection': break;
                    /* Pub Stuff */
                    case 'WebPub': case 'AutoWebPub': break;
    
                    /* Print Stuff */
                    case 'HeaderFooter': case 'HFPicture': case 'PLV':
                    case 'HorizontalPageBreaks': case 'VerticalPageBreaks': break;
                    /* Behavioral */
                    case 'Backup': case 'CompressPictures': case 'Compat12': break;
    
                    /* Should not Happen */
                    case 'Continue': case 'ContinueFrt12': break;
    
                    /* Future Records */
                    case 'FrtFontList': case 'FrtWrapper': break;
    
                    default: switch(R.n) { /* nested */
                    /* BIFF5 records */
                    case 'TabIdConf': case 'Radar': case 'RadarArea': case 'DropBar': case 'Intl': case 'CoordList': case 'SerAuxErrBar': break;
    
                    /* BIFF2-4 records */
                    case 'BIFF2FONTCLR': case 'BIFF2FMTCNT': case 'BIFF2FONTXTRA': break;
                    case 'BIFF2XF': case 'BIFF3XF': case 'BIFF4XF': break;
                    case 'BIFF4FMTCNT': case 'BIFF2ROW': case 'BIFF2WINDOW2': break;
    
                    /* Miscellaneous */
                    case 'SCENARIO': case 'DConBin': case 'PicF': case 'DataLabExt':
                    case 'Lel': case 'BopPop': case 'BopPopCustom': case 'RealTimeData':
                    case 'Name': break;
                    case 'LHNGraph': case 'FnGroupName': case 'AddMenu': case 'LPr': break;
                    case 'ListObj': case 'ListField': break;
                    case 'RRSort': break;
                    case 'BigName': break;
                    case 'ToolbarHdr': case 'ToolbarEnd': break;
                    case 'DDEObjName': break;
                    case 'FRTArchId$': break;
                    default: if(options.WTF) throw 'Unrecognized Record ' + R.n;
                }}}}
            } else blob.l += length;
        }
        var sheetnamesraw = Object.keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});
        var sheetnames = sheetnamesraw.slice();
        wb.Directory=sheetnamesraw;
        wb.SheetNames=sheetnamesraw;
        if(!options.bookSheets) wb.Sheets=Sheets;
        if(wb.Sheets) FilterDatabases.forEach(function(r,i) { wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r; });
        wb.Preamble=Preamble;
        wb.Strings = sst;
        wb.SSF = SSF.get_table();
        if(opts.enc) wb.Encryption = opts.enc;
        if(themes) wb.Themes = themes;
        wb.Metadata = {};
        if(country !== undefined) wb.Metadata.Country = country;
        if(supbooks.names.length > 0) Workbook.Names = supbooks.names;
        wb.Workbook = Workbook;
        return wb;
    }
    
    /* TODO: WTF */
    function parse_props(cfb, props, o) {
        /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */
        var DSI = CFB.find(cfb, '!DocumentSummaryInformation');
        if(DSI) try {
            var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI);
            for(var d in DocSummary) props[d] = DocSummary[d];
        } catch(e) {if(o.WTF) throw e;/* empty */}
    
        /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/
        var SI = CFB.find(cfb, '!SummaryInformation');
        if(SI) try {
            var Summary = parse_PropertySetStream(SI, SummaryPIDSI);
            for(var s in Summary) if(props[s] == null) props[s] = Summary[s];
        } catch(e) {if(o.WTF) throw e;/* empty */}
    }
    
    function parse_xlscfb(cfb, options) {
    if(!options) options = {};
    fix_read_opts(options);
    reset_cp();
    if(options.codepage) set_ansi(options.codepage);
    var CompObj, Summary, WB;
    if(cfb.FullPaths) {
        if(CFB.find(cfb, '/encryption')) throw new Error("File is password-protected");
        CompObj = CFB.find(cfb, '!CompObj');
        Summary = CFB.find(cfb, '!SummaryInformation');
        WB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');
    } else {
        switch(options.type) {
            case 'base64': cfb = s2a(Base64.decode(cfb)); break;
            case 'binary': cfb = s2a(cfb); break;
            case 'buffer': break;
            case 'array': if(!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb); break;
        }
        prep_blob(cfb, 0);
        WB = ({content: cfb});
    }
    var CompObjP, SummaryP, WorkbookP;
    
    var _data;
    if(CompObj) CompObjP = parse_compobj(CompObj);
    if(options.bookProps && !options.bookSheets) WorkbookP = ({});
    else {
        var T = has_buf ? 'buffer' : 'array';
        if(WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
        /* Quattro Pro 7-8 */
        else if((_data=CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
        /* Quattro Pro 9 */
        else if((_data=CFB.find(cfb, 'NativeContent_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
        else throw new Error("Cannot find Workbook stream");
        if(options.bookVBA && cfb.FullPaths && CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')) WorkbookP.vbaraw = make_vba_xls(cfb);
    }
    
    var props = {};
    if(cfb.FullPaths) parse_props(cfb, props, options);
    
    WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */
    if(options.bookFiles) WorkbookP.cfb = cfb;
    /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */
    return WorkbookP;
    }
    
    
    function write_xlscfb(wb, opts) {
        var o = opts || {};
        var cfb = CFB.utils.cfb_new({root:"R"});
        var wbpath = "/Workbook";
        switch(o.bookType || "xls") {
            case "xls": o.bookType = "biff8";
            /* falls through */
            case "xla": if(!o.bookType) o.bookType = "xla";
            /* falls through */
            case "biff8": wbpath = "/Workbook"; o.biff = 8; break;
            case "biff5": wbpath = "/Book"; o.biff = 5; break;
            default: throw new Error("invalid type " + o.bookType + " for XLS CFB");
        }
        CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
        // TODO: SI, DSI, CO
        if(o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {type: typeof wb.vbaraw == "string" ? "binary" : "buffer"}));
        return cfb;
    }
    /* [MS-XLSB] 2.3 Record Enumeration */
    var XLSBRecordEnum = {
    0x0000: { n:"BrtRowHdr", f:parse_BrtRowHdr },
    0x0001: { n:"BrtCellBlank", f:parse_BrtCellBlank },
    0x0002: { n:"BrtCellRk", f:parse_BrtCellRk },
    0x0003: { n:"BrtCellError", f:parse_BrtCellError },
    0x0004: { n:"BrtCellBool", f:parse_BrtCellBool },
    0x0005: { n:"BrtCellReal", f:parse_BrtCellReal },
    0x0006: { n:"BrtCellSt", f:parse_BrtCellSt },
    0x0007: { n:"BrtCellIsst", f:parse_BrtCellIsst },
    0x0008: { n:"BrtFmlaString", f:parse_BrtFmlaString },
    0x0009: { n:"BrtFmlaNum", f:parse_BrtFmlaNum },
    0x000A: { n:"BrtFmlaBool", f:parse_BrtFmlaBool },
    0x000B: { n:"BrtFmlaError", f:parse_BrtFmlaError },
    0x0010: { n:"BrtFRTArchID$", f:parse_BrtFRTArchID$ },
    0x0013: { n:"BrtSSTItem", f:parse_RichStr },
    0x0014: { n:"BrtPCDIMissing" },
    0x0015: { n:"BrtPCDINumber" },
    0x0016: { n:"BrtPCDIBoolean" },
    0x0017: { n:"BrtPCDIError" },
    0x0018: { n:"BrtPCDIString" },
    0x0019: { n:"BrtPCDIDatetime" },
    0x001A: { n:"BrtPCDIIndex" },
    0x001B: { n:"BrtPCDIAMissing" },
    0x001C: { n:"BrtPCDIANumber" },
    0x001D: { n:"BrtPCDIABoolean" },
    0x001E: { n:"BrtPCDIAError" },
    0x001F: { n:"BrtPCDIAString" },
    0x0020: { n:"BrtPCDIADatetime" },
    0x0021: { n:"BrtPCRRecord" },
    0x0022: { n:"BrtPCRRecordDt" },
    0x0023: { n:"BrtFRTBegin" },
    0x0024: { n:"BrtFRTEnd" },
    0x0025: { n:"BrtACBegin" },
    0x0026: { n:"BrtACEnd" },
    0x0027: { n:"BrtName", f:parse_BrtName },
    0x0028: { n:"BrtIndexRowBlock" },
    0x002A: { n:"BrtIndexBlock" },
    0x002B: { n:"BrtFont", f:parse_BrtFont },
    0x002C: { n:"BrtFmt", f:parse_BrtFmt },
    0x002D: { n:"BrtFill", f:parse_BrtFill },
    0x002E: { n:"BrtBorder", f:parse_BrtBorder },
    0x002F: { n:"BrtXF", f:parse_BrtXF },
    0x0030: { n:"BrtStyle" },
    0x0031: { n:"BrtCellMeta" },
    0x0032: { n:"BrtValueMeta" },
    0x0033: { n:"BrtMdb" },
    0x0034: { n:"BrtBeginFmd" },
    0x0035: { n:"BrtEndFmd" },
    0x0036: { n:"BrtBeginMdx" },
    0x0037: { n:"BrtEndMdx" },
    0x0038: { n:"BrtBeginMdxTuple" },
    0x0039: { n:"BrtEndMdxTuple" },
    0x003A: { n:"BrtMdxMbrIstr" },
    0x003B: { n:"BrtStr" },
    0x003C: { n:"BrtColInfo", f:parse_ColInfo },
    0x003E: { n:"BrtCellRString" },
    0x003F: { n:"BrtCalcChainItem$", f:parse_BrtCalcChainItem$ },
    0x0040: { n:"BrtDVal" },
    0x0041: { n:"BrtSxvcellNum" },
    0x0042: { n:"BrtSxvcellStr" },
    0x0043: { n:"BrtSxvcellBool" },
    0x0044: { n:"BrtSxvcellErr" },
    0x0045: { n:"BrtSxvcellDate" },
    0x0046: { n:"BrtSxvcellNil" },
    0x0080: { n:"BrtFileVersion" },
    0x0081: { n:"BrtBeginSheet" },
    0x0082: { n:"BrtEndSheet" },
    0x0083: { n:"BrtBeginBook", f:parsenoop, p:0 },
    0x0084: { n:"BrtEndBook" },
    0x0085: { n:"BrtBeginWsViews" },
    0x0086: { n:"BrtEndWsViews" },
    0x0087: { n:"BrtBeginBookViews" },
    0x0088: { n:"BrtEndBookViews" },
    0x0089: { n:"BrtBeginWsView", f:parse_BrtBeginWsView },
    0x008A: { n:"BrtEndWsView" },
    0x008B: { n:"BrtBeginCsViews" },
    0x008C: { n:"BrtEndCsViews" },
    0x008D: { n:"BrtBeginCsView" },
    0x008E: { n:"BrtEndCsView" },
    0x008F: { n:"BrtBeginBundleShs" },
    0x0090: { n:"BrtEndBundleShs" },
    0x0091: { n:"BrtBeginSheetData" },
    0x0092: { n:"BrtEndSheetData" },
    0x0093: { n:"BrtWsProp", f:parse_BrtWsProp },
    0x0094: { n:"BrtWsDim", f:parse_BrtWsDim, p:16 },
    0x0097: { n:"BrtPane" },
    0x0098: { n:"BrtSel" },
    0x0099: { n:"BrtWbProp", f:parse_BrtWbProp },
    0x009A: { n:"BrtWbFactoid" },
    0x009B: { n:"BrtFileRecover" },
    0x009C: { n:"BrtBundleSh", f:parse_BrtBundleSh },
    0x009D: { n:"BrtCalcProp" },
    0x009E: { n:"BrtBookView" },
    0x009F: { n:"BrtBeginSst", f:parse_BrtBeginSst },
    0x00A0: { n:"BrtEndSst" },
    0x00A1: { n:"BrtBeginAFilter", f:parse_UncheckedRfX },
    0x00A2: { n:"BrtEndAFilter" },
    0x00A3: { n:"BrtBeginFilterColumn" },
    0x00A4: { n:"BrtEndFilterColumn" },
    0x00A5: { n:"BrtBeginFilters" },
    0x00A6: { n:"BrtEndFilters" },
    0x00A7: { n:"BrtFilter" },
    0x00A8: { n:"BrtColorFilter" },
    0x00A9: { n:"BrtIconFilter" },
    0x00AA: { n:"BrtTop10Filter" },
    0x00AB: { n:"BrtDynamicFilter" },
    0x00AC: { n:"BrtBeginCustomFilters" },
    0x00AD: { n:"BrtEndCustomFilters" },
    0x00AE: { n:"BrtCustomFilter" },
    0x00AF: { n:"BrtAFilterDateGroupItem" },
    0x00B0: { n:"BrtMergeCell", f:parse_BrtMergeCell },
    0x00B1: { n:"BrtBeginMergeCells" },
    0x00B2: { n:"BrtEndMergeCells" },
    0x00B3: { n:"BrtBeginPivotCacheDef" },
    0x00B4: { n:"BrtEndPivotCacheDef" },
    0x00B5: { n:"BrtBeginPCDFields" },
    0x00B6: { n:"BrtEndPCDFields" },
    0x00B7: { n:"BrtBeginPCDField" },
    0x00B8: { n:"BrtEndPCDField" },
    0x00B9: { n:"BrtBeginPCDSource" },
    0x00BA: { n:"BrtEndPCDSource" },
    0x00BB: { n:"BrtBeginPCDSRange" },
    0x00BC: { n:"BrtEndPCDSRange" },
    0x00BD: { n:"BrtBeginPCDFAtbl" },
    0x00BE: { n:"BrtEndPCDFAtbl" },
    0x00BF: { n:"BrtBeginPCDIRun" },
    0x00C0: { n:"BrtEndPCDIRun" },
    0x00C1: { n:"BrtBeginPivotCacheRecords" },
    0x00C2: { n:"BrtEndPivotCacheRecords" },
    0x00C3: { n:"BrtBeginPCDHierarchies" },
    0x00C4: { n:"BrtEndPCDHierarchies" },
    0x00C5: { n:"BrtBeginPCDHierarchy" },
    0x00C6: { n:"BrtEndPCDHierarchy" },
    0x00C7: { n:"BrtBeginPCDHFieldsUsage" },
    0x00C8: { n:"BrtEndPCDHFieldsUsage" },
    0x00C9: { n:"BrtBeginExtConnection" },
    0x00CA: { n:"BrtEndExtConnection" },
    0x00CB: { n:"BrtBeginECDbProps" },
    0x00CC: { n:"BrtEndECDbProps" },
    0x00CD: { n:"BrtBeginECOlapProps" },
    0x00CE: { n:"BrtEndECOlapProps" },
    0x00CF: { n:"BrtBeginPCDSConsol" },
    0x00D0: { n:"BrtEndPCDSConsol" },
    0x00D1: { n:"BrtBeginPCDSCPages" },
    0x00D2: { n:"BrtEndPCDSCPages" },
    0x00D3: { n:"BrtBeginPCDSCPage" },
    0x00D4: { n:"BrtEndPCDSCPage" },
    0x00D5: { n:"BrtBeginPCDSCPItem" },
    0x00D6: { n:"BrtEndPCDSCPItem" },
    0x00D7: { n:"BrtBeginPCDSCSets" },
    0x00D8: { n:"BrtEndPCDSCSets" },
    0x00D9: { n:"BrtBeginPCDSCSet" },
    0x00DA: { n:"BrtEndPCDSCSet" },
    0x00DB: { n:"BrtBeginPCDFGroup" },
    0x00DC: { n:"BrtEndPCDFGroup" },
    0x00DD: { n:"BrtBeginPCDFGItems" },
    0x00DE: { n:"BrtEndPCDFGItems" },
    0x00DF: { n:"BrtBeginPCDFGRange" },
    0x00E0: { n:"BrtEndPCDFGRange" },
    0x00E1: { n:"BrtBeginPCDFGDiscrete" },
    0x00E2: { n:"BrtEndPCDFGDiscrete" },
    0x00E3: { n:"BrtBeginPCDSDTupleCache" },
    0x00E4: { n:"BrtEndPCDSDTupleCache" },
    0x00E5: { n:"BrtBeginPCDSDTCEntries" },
    0x00E6: { n:"BrtEndPCDSDTCEntries" },
    0x00E7: { n:"BrtBeginPCDSDTCEMembers" },
    0x00E8: { n:"BrtEndPCDSDTCEMembers" },
    0x00E9: { n:"BrtBeginPCDSDTCEMember" },
    0x00EA: { n:"BrtEndPCDSDTCEMember" },
    0x00EB: { n:"BrtBeginPCDSDTCQueries" },
    0x00EC: { n:"BrtEndPCDSDTCQueries" },
    0x00ED: { n:"BrtBeginPCDSDTCQuery" },
    0x00EE: { n:"BrtEndPCDSDTCQuery" },
    0x00EF: { n:"BrtBeginPCDSDTCSets" },
    0x00F0: { n:"BrtEndPCDSDTCSets" },
    0x00F1: { n:"BrtBeginPCDSDTCSet" },
    0x00F2: { n:"BrtEndPCDSDTCSet" },
    0x00F3: { n:"BrtBeginPCDCalcItems" },
    0x00F4: { n:"BrtEndPCDCalcItems" },
    0x00F5: { n:"BrtBeginPCDCalcItem" },
    0x00F6: { n:"BrtEndPCDCalcItem" },
    0x00F7: { n:"BrtBeginPRule" },
    0x00F8: { n:"BrtEndPRule" },
    0x00F9: { n:"BrtBeginPRFilters" },
    0x00FA: { n:"BrtEndPRFilters" },
    0x00FB: { n:"BrtBeginPRFilter" },
    0x00FC: { n:"BrtEndPRFilter" },
    0x00FD: { n:"BrtBeginPNames" },
    0x00FE: { n:"BrtEndPNames" },
    0x00FF: { n:"BrtBeginPName" },
    0x0100: { n:"BrtEndPName" },
    0x0101: { n:"BrtBeginPNPairs" },
    0x0102: { n:"BrtEndPNPairs" },
    0x0103: { n:"BrtBeginPNPair" },
    0x0104: { n:"BrtEndPNPair" },
    0x0105: { n:"BrtBeginECWebProps" },
    0x0106: { n:"BrtEndECWebProps" },
    0x0107: { n:"BrtBeginEcWpTables" },
    0x0108: { n:"BrtEndECWPTables" },
    0x0109: { n:"BrtBeginECParams" },
    0x010A: { n:"BrtEndECParams" },
    0x010B: { n:"BrtBeginECParam" },
    0x010C: { n:"BrtEndECParam" },
    0x010D: { n:"BrtBeginPCDKPIs" },
    0x010E: { n:"BrtEndPCDKPIs" },
    0x010F: { n:"BrtBeginPCDKPI" },
    0x0110: { n:"BrtEndPCDKPI" },
    0x0111: { n:"BrtBeginDims" },
    0x0112: { n:"BrtEndDims" },
    0x0113: { n:"BrtBeginDim" },
    0x0114: { n:"BrtEndDim" },
    0x0115: { n:"BrtIndexPartEnd" },
    0x0116: { n:"BrtBeginStyleSheet" },
    0x0117: { n:"BrtEndStyleSheet" },
    0x0118: { n:"BrtBeginSXView" },
    0x0119: { n:"BrtEndSXVI" },
    0x011A: { n:"BrtBeginSXVI" },
    0x011B: { n:"BrtBeginSXVIs" },
    0x011C: { n:"BrtEndSXVIs" },
    0x011D: { n:"BrtBeginSXVD" },
    0x011E: { n:"BrtEndSXVD" },
    0x011F: { n:"BrtBeginSXVDs" },
    0x0120: { n:"BrtEndSXVDs" },
    0x0121: { n:"BrtBeginSXPI" },
    0x0122: { n:"BrtEndSXPI" },
    0x0123: { n:"BrtBeginSXPIs" },
    0x0124: { n:"BrtEndSXPIs" },
    0x0125: { n:"BrtBeginSXDI" },
    0x0126: { n:"BrtEndSXDI" },
    0x0127: { n:"BrtBeginSXDIs" },
    0x0128: { n:"BrtEndSXDIs" },
    0x0129: { n:"BrtBeginSXLI" },
    0x012A: { n:"BrtEndSXLI" },
    0x012B: { n:"BrtBeginSXLIRws" },
    0x012C: { n:"BrtEndSXLIRws" },
    0x012D: { n:"BrtBeginSXLICols" },
    0x012E: { n:"BrtEndSXLICols" },
    0x012F: { n:"BrtBeginSXFormat" },
    0x0130: { n:"BrtEndSXFormat" },
    0x0131: { n:"BrtBeginSXFormats" },
    0x0132: { n:"BrtEndSxFormats" },
    0x0133: { n:"BrtBeginSxSelect" },
    0x0134: { n:"BrtEndSxSelect" },
    0x0135: { n:"BrtBeginISXVDRws" },
    0x0136: { n:"BrtEndISXVDRws" },
    0x0137: { n:"BrtBeginISXVDCols" },
    0x0138: { n:"BrtEndISXVDCols" },
    0x0139: { n:"BrtEndSXLocation" },
    0x013A: { n:"BrtBeginSXLocation" },
    0x013B: { n:"BrtEndSXView" },
    0x013C: { n:"BrtBeginSXTHs" },
    0x013D: { n:"BrtEndSXTHs" },
    0x013E: { n:"BrtBeginSXTH" },
    0x013F: { n:"BrtEndSXTH" },
    0x0140: { n:"BrtBeginISXTHRws" },
    0x0141: { n:"BrtEndISXTHRws" },
    0x0142: { n:"BrtBeginISXTHCols" },
    0x0143: { n:"BrtEndISXTHCols" },
    0x0144: { n:"BrtBeginSXTDMPS" },
    0x0145: { n:"BrtEndSXTDMPs" },
    0x0146: { n:"BrtBeginSXTDMP" },
    0x0147: { n:"BrtEndSXTDMP" },
    0x0148: { n:"BrtBeginSXTHItems" },
    0x0149: { n:"BrtEndSXTHItems" },
    0x014A: { n:"BrtBeginSXTHItem" },
    0x014B: { n:"BrtEndSXTHItem" },
    0x014C: { n:"BrtBeginMetadata" },
    0x014D: { n:"BrtEndMetadata" },
    0x014E: { n:"BrtBeginEsmdtinfo" },
    0x014F: { n:"BrtMdtinfo" },
    0x0150: { n:"BrtEndEsmdtinfo" },
    0x0151: { n:"BrtBeginEsmdb" },
    0x0152: { n:"BrtEndEsmdb" },
    0x0153: { n:"BrtBeginEsfmd" },
    0x0154: { n:"BrtEndEsfmd" },
    0x0155: { n:"BrtBeginSingleCells" },
    0x0156: { n:"BrtEndSingleCells" },
    0x0157: { n:"BrtBeginList" },
    0x0158: { n:"BrtEndList" },
    0x0159: { n:"BrtBeginListCols" },
    0x015A: { n:"BrtEndListCols" },
    0x015B: { n:"BrtBeginListCol" },
    0x015C: { n:"BrtEndListCol" },
    0x015D: { n:"BrtBeginListXmlCPr" },
    0x015E: { n:"BrtEndListXmlCPr" },
    0x015F: { n:"BrtListCCFmla" },
    0x0160: { n:"BrtListTrFmla" },
    0x0161: { n:"BrtBeginExternals" },
    0x0162: { n:"BrtEndExternals" },
    0x0163: { n:"BrtSupBookSrc", f:parse_RelID},
    0x0165: { n:"BrtSupSelf" },
    0x0166: { n:"BrtSupSame" },
    0x0167: { n:"BrtSupTabs" },
    0x0168: { n:"BrtBeginSupBook" },
    0x0169: { n:"BrtPlaceholderName" },
    0x016A: { n:"BrtExternSheet", f:parse_ExternSheet },
    0x016B: { n:"BrtExternTableStart" },
    0x016C: { n:"BrtExternTableEnd" },
    0x016E: { n:"BrtExternRowHdr" },
    0x016F: { n:"BrtExternCellBlank" },
    0x0170: { n:"BrtExternCellReal" },
    0x0171: { n:"BrtExternCellBool" },
    0x0172: { n:"BrtExternCellError" },
    0x0173: { n:"BrtExternCellString" },
    0x0174: { n:"BrtBeginEsmdx" },
    0x0175: { n:"BrtEndEsmdx" },
    0x0176: { n:"BrtBeginMdxSet" },
    0x0177: { n:"BrtEndMdxSet" },
    0x0178: { n:"BrtBeginMdxMbrProp" },
    0x0179: { n:"BrtEndMdxMbrProp" },
    0x017A: { n:"BrtBeginMdxKPI" },
    0x017B: { n:"BrtEndMdxKPI" },
    0x017C: { n:"BrtBeginEsstr" },
    0x017D: { n:"BrtEndEsstr" },
    0x017E: { n:"BrtBeginPRFItem" },
    0x017F: { n:"BrtEndPRFItem" },
    0x0180: { n:"BrtBeginPivotCacheIDs" },
    0x0181: { n:"BrtEndPivotCacheIDs" },
    0x0182: { n:"BrtBeginPivotCacheID" },
    0x0183: { n:"BrtEndPivotCacheID" },
    0x0184: { n:"BrtBeginISXVIs" },
    0x0185: { n:"BrtEndISXVIs" },
    0x0186: { n:"BrtBeginColInfos" },
    0x0187: { n:"BrtEndColInfos" },
    0x0188: { n:"BrtBeginRwBrk" },
    0x0189: { n:"BrtEndRwBrk" },
    0x018A: { n:"BrtBeginColBrk" },
    0x018B: { n:"BrtEndColBrk" },
    0x018C: { n:"BrtBrk" },
    0x018D: { n:"BrtUserBookView" },
    0x018E: { n:"BrtInfo" },
    0x018F: { n:"BrtCUsr" },
    0x0190: { n:"BrtUsr" },
    0x0191: { n:"BrtBeginUsers" },
    0x0193: { n:"BrtEOF" },
    0x0194: { n:"BrtUCR" },
    0x0195: { n:"BrtRRInsDel" },
    0x0196: { n:"BrtRREndInsDel" },
    0x0197: { n:"BrtRRMove" },
    0x0198: { n:"BrtRREndMove" },
    0x0199: { n:"BrtRRChgCell" },
    0x019A: { n:"BrtRREndChgCell" },
    0x019B: { n:"BrtRRHeader" },
    0x019C: { n:"BrtRRUserView" },
    0x019D: { n:"BrtRRRenSheet" },
    0x019E: { n:"BrtRRInsertSh" },
    0x019F: { n:"BrtRRDefName" },
    0x01A0: { n:"BrtRRNote" },
    0x01A1: { n:"BrtRRConflict" },
    0x01A2: { n:"BrtRRTQSIF" },
    0x01A3: { n:"BrtRRFormat" },
    0x01A4: { n:"BrtRREndFormat" },
    0x01A5: { n:"BrtRRAutoFmt" },
    0x01A6: { n:"BrtBeginUserShViews" },
    0x01A7: { n:"BrtBeginUserShView" },
    0x01A8: { n:"BrtEndUserShView" },
    0x01A9: { n:"BrtEndUserShViews" },
    0x01AA: { n:"BrtArrFmla", f:parse_BrtArrFmla },
    0x01AB: { n:"BrtShrFmla", f:parse_BrtShrFmla },
    0x01AC: { n:"BrtTable" },
    0x01AD: { n:"BrtBeginExtConnections" },
    0x01AE: { n:"BrtEndExtConnections" },
    0x01AF: { n:"BrtBeginPCDCalcMems" },
    0x01B0: { n:"BrtEndPCDCalcMems" },
    0x01B1: { n:"BrtBeginPCDCalcMem" },
    0x01B2: { n:"BrtEndPCDCalcMem" },
    0x01B3: { n:"BrtBeginPCDHGLevels" },
    0x01B4: { n:"BrtEndPCDHGLevels" },
    0x01B5: { n:"BrtBeginPCDHGLevel" },
    0x01B6: { n:"BrtEndPCDHGLevel" },
    0x01B7: { n:"BrtBeginPCDHGLGroups" },
    0x01B8: { n:"BrtEndPCDHGLGroups" },
    0x01B9: { n:"BrtBeginPCDHGLGroup" },
    0x01BA: { n:"BrtEndPCDHGLGroup" },
    0x01BB: { n:"BrtBeginPCDHGLGMembers" },
    0x01BC: { n:"BrtEndPCDHGLGMembers" },
    0x01BD: { n:"BrtBeginPCDHGLGMember" },
    0x01BE: { n:"BrtEndPCDHGLGMember" },
    0x01BF: { n:"BrtBeginQSI" },
    0x01C0: { n:"BrtEndQSI" },
    0x01C1: { n:"BrtBeginQSIR" },
    0x01C2: { n:"BrtEndQSIR" },
    0x01C3: { n:"BrtBeginDeletedNames" },
    0x01C4: { n:"BrtEndDeletedNames" },
    0x01C5: { n:"BrtBeginDeletedName" },
    0x01C6: { n:"BrtEndDeletedName" },
    0x01C7: { n:"BrtBeginQSIFs" },
    0x01C8: { n:"BrtEndQSIFs" },
    0x01C9: { n:"BrtBeginQSIF" },
    0x01CA: { n:"BrtEndQSIF" },
    0x01CB: { n:"BrtBeginAutoSortScope" },
    0x01CC: { n:"BrtEndAutoSortScope" },
    0x01CD: { n:"BrtBeginConditionalFormatting" },
    0x01CE: { n:"BrtEndConditionalFormatting" },
    0x01CF: { n:"BrtBeginCFRule" },
    0x01D0: { n:"BrtEndCFRule" },
    0x01D1: { n:"BrtBeginIconSet" },
    0x01D2: { n:"BrtEndIconSet" },
    0x01D3: { n:"BrtBeginDatabar" },
    0x01D4: { n:"BrtEndDatabar" },
    0x01D5: { n:"BrtBeginColorScale" },
    0x01D6: { n:"BrtEndColorScale" },
    0x01D7: { n:"BrtCFVO" },
    0x01D8: { n:"BrtExternValueMeta" },
    0x01D9: { n:"BrtBeginColorPalette" },
    0x01DA: { n:"BrtEndColorPalette" },
    0x01DB: { n:"BrtIndexedColor" },
    0x01DC: { n:"BrtMargins", f:parse_BrtMargins },
    0x01DD: { n:"BrtPrintOptions" },
    0x01DE: { n:"BrtPageSetup" },
    0x01DF: { n:"BrtBeginHeaderFooter" },
    0x01E0: { n:"BrtEndHeaderFooter" },
    0x01E1: { n:"BrtBeginSXCrtFormat" },
    0x01E2: { n:"BrtEndSXCrtFormat" },
    0x01E3: { n:"BrtBeginSXCrtFormats" },
    0x01E4: { n:"BrtEndSXCrtFormats" },
    0x01E5: { n:"BrtWsFmtInfo", f:parse_BrtWsFmtInfo },
    0x01E6: { n:"BrtBeginMgs" },
    0x01E7: { n:"BrtEndMGs" },
    0x01E8: { n:"BrtBeginMGMaps" },
    0x01E9: { n:"BrtEndMGMaps" },
    0x01EA: { n:"BrtBeginMG" },
    0x01EB: { n:"BrtEndMG" },
    0x01EC: { n:"BrtBeginMap" },
    0x01ED: { n:"BrtEndMap" },
    0x01EE: { n:"BrtHLink", f:parse_BrtHLink },
    0x01EF: { n:"BrtBeginDCon" },
    0x01F0: { n:"BrtEndDCon" },
    0x01F1: { n:"BrtBeginDRefs" },
    0x01F2: { n:"BrtEndDRefs" },
    0x01F3: { n:"BrtDRef" },
    0x01F4: { n:"BrtBeginScenMan" },
    0x01F5: { n:"BrtEndScenMan" },
    0x01F6: { n:"BrtBeginSct" },
    0x01F7: { n:"BrtEndSct" },
    0x01F8: { n:"BrtSlc" },
    0x01F9: { n:"BrtBeginDXFs" },
    0x01FA: { n:"BrtEndDXFs" },
    0x01FB: { n:"BrtDXF" },
    0x01FC: { n:"BrtBeginTableStyles" },
    0x01FD: { n:"BrtEndTableStyles" },
    0x01FE: { n:"BrtBeginTableStyle" },
    0x01FF: { n:"BrtEndTableStyle" },
    0x0200: { n:"BrtTableStyleElement" },
    0x0201: { n:"BrtTableStyleClient" },
    0x0202: { n:"BrtBeginVolDeps" },
    0x0203: { n:"BrtEndVolDeps" },
    0x0204: { n:"BrtBeginVolType" },
    0x0205: { n:"BrtEndVolType" },
    0x0206: { n:"BrtBeginVolMain" },
    0x0207: { n:"BrtEndVolMain" },
    0x0208: { n:"BrtBeginVolTopic" },
    0x0209: { n:"BrtEndVolTopic" },
    0x020A: { n:"BrtVolSubtopic" },
    0x020B: { n:"BrtVolRef" },
    0x020C: { n:"BrtVolNum" },
    0x020D: { n:"BrtVolErr" },
    0x020E: { n:"BrtVolStr" },
    0x020F: { n:"BrtVolBool" },
    0x0210: { n:"BrtBeginCalcChain$" },
    0x0211: { n:"BrtEndCalcChain$" },
    0x0212: { n:"BrtBeginSortState" },
    0x0213: { n:"BrtEndSortState" },
    0x0214: { n:"BrtBeginSortCond" },
    0x0215: { n:"BrtEndSortCond" },
    0x0216: { n:"BrtBookProtection" },
    0x0217: { n:"BrtSheetProtection" },
    0x0218: { n:"BrtRangeProtection" },
    0x0219: { n:"BrtPhoneticInfo" },
    0x021A: { n:"BrtBeginECTxtWiz" },
    0x021B: { n:"BrtEndECTxtWiz" },
    0x021C: { n:"BrtBeginECTWFldInfoLst" },
    0x021D: { n:"BrtEndECTWFldInfoLst" },
    0x021E: { n:"BrtBeginECTwFldInfo" },
    0x0224: { n:"BrtFileSharing" },
    0x0225: { n:"BrtOleSize" },
    0x0226: { n:"BrtDrawing", f:parse_RelID },
    0x0227: { n:"BrtLegacyDrawing" },
    0x0228: { n:"BrtLegacyDrawingHF" },
    0x0229: { n:"BrtWebOpt" },
    0x022A: { n:"BrtBeginWebPubItems" },
    0x022B: { n:"BrtEndWebPubItems" },
    0x022C: { n:"BrtBeginWebPubItem" },
    0x022D: { n:"BrtEndWebPubItem" },
    0x022E: { n:"BrtBeginSXCondFmt" },
    0x022F: { n:"BrtEndSXCondFmt" },
    0x0230: { n:"BrtBeginSXCondFmts" },
    0x0231: { n:"BrtEndSXCondFmts" },
    0x0232: { n:"BrtBkHim" },
    0x0234: { n:"BrtColor" },
    0x0235: { n:"BrtBeginIndexedColors" },
    0x0236: { n:"BrtEndIndexedColors" },
    0x0239: { n:"BrtBeginMRUColors" },
    0x023A: { n:"BrtEndMRUColors" },
    0x023C: { n:"BrtMRUColor" },
    0x023D: { n:"BrtBeginDVals" },
    0x023E: { n:"BrtEndDVals" },
    0x0241: { n:"BrtSupNameStart" },
    0x0242: { n:"BrtSupNameValueStart" },
    0x0243: { n:"BrtSupNameValueEnd" },
    0x0244: { n:"BrtSupNameNum" },
    0x0245: { n:"BrtSupNameErr" },
    0x0246: { n:"BrtSupNameSt" },
    0x0247: { n:"BrtSupNameNil" },
    0x0248: { n:"BrtSupNameBool" },
    0x0249: { n:"BrtSupNameFmla" },
    0x024A: { n:"BrtSupNameBits" },
    0x024B: { n:"BrtSupNameEnd" },
    0x024C: { n:"BrtEndSupBook" },
    0x024D: { n:"BrtCellSmartTagProperty" },
    0x024E: { n:"BrtBeginCellSmartTag" },
    0x024F: { n:"BrtEndCellSmartTag" },
    0x0250: { n:"BrtBeginCellSmartTags" },
    0x0251: { n:"BrtEndCellSmartTags" },
    0x0252: { n:"BrtBeginSmartTags" },
    0x0253: { n:"BrtEndSmartTags" },
    0x0254: { n:"BrtSmartTagType" },
    0x0255: { n:"BrtBeginSmartTagTypes" },
    0x0256: { n:"BrtEndSmartTagTypes" },
    0x0257: { n:"BrtBeginSXFilters" },
    0x0258: { n:"BrtEndSXFilters" },
    0x0259: { n:"BrtBeginSXFILTER" },
    0x025A: { n:"BrtEndSXFilter" },
    0x025B: { n:"BrtBeginFills" },
    0x025C: { n:"BrtEndFills" },
    0x025D: { n:"BrtBeginCellWatches" },
    0x025E: { n:"BrtEndCellWatches" },
    0x025F: { n:"BrtCellWatch" },
    0x0260: { n:"BrtBeginCRErrs" },
    0x0261: { n:"BrtEndCRErrs" },
    0x0262: { n:"BrtCrashRecErr" },
    0x0263: { n:"BrtBeginFonts" },
    0x0264: { n:"BrtEndFonts" },
    0x0265: { n:"BrtBeginBorders" },
    0x0266: { n:"BrtEndBorders" },
    0x0267: { n:"BrtBeginFmts" },
    0x0268: { n:"BrtEndFmts" },
    0x0269: { n:"BrtBeginCellXFs" },
    0x026A: { n:"BrtEndCellXFs" },
    0x026B: { n:"BrtBeginStyles" },
    0x026C: { n:"BrtEndStyles" },
    0x0271: { n:"BrtBigName" },
    0x0272: { n:"BrtBeginCellStyleXFs" },
    0x0273: { n:"BrtEndCellStyleXFs" },
    0x0274: { n:"BrtBeginComments" },
    0x0275: { n:"BrtEndComments" },
    0x0276: { n:"BrtBeginCommentAuthors" },
    0x0277: { n:"BrtEndCommentAuthors" },
    0x0278: { n:"BrtCommentAuthor", f:parse_BrtCommentAuthor },
    0x0279: { n:"BrtBeginCommentList" },
    0x027A: { n:"BrtEndCommentList" },
    0x027B: { n:"BrtBeginComment", f:parse_BrtBeginComment},
    0x027C: { n:"BrtEndComment" },
    0x027D: { n:"BrtCommentText", f:parse_BrtCommentText },
    0x027E: { n:"BrtBeginOleObjects" },
    0x027F: { n:"BrtOleObject" },
    0x0280: { n:"BrtEndOleObjects" },
    0x0281: { n:"BrtBeginSxrules" },
    0x0282: { n:"BrtEndSxRules" },
    0x0283: { n:"BrtBeginActiveXControls" },
    0x0284: { n:"BrtActiveX" },
    0x0285: { n:"BrtEndActiveXControls" },
    0x0286: { n:"BrtBeginPCDSDTCEMembersSortBy" },
    0x0288: { n:"BrtBeginCellIgnoreECs" },
    0x0289: { n:"BrtCellIgnoreEC" },
    0x028A: { n:"BrtEndCellIgnoreECs" },
    0x028B: { n:"BrtCsProp", f:parse_BrtCsProp },
    0x028C: { n:"BrtCsPageSetup" },
    0x028D: { n:"BrtBeginUserCsViews" },
    0x028E: { n:"BrtEndUserCsViews" },
    0x028F: { n:"BrtBeginUserCsView" },
    0x0290: { n:"BrtEndUserCsView" },
    0x0291: { n:"BrtBeginPcdSFCIEntries" },
    0x0292: { n:"BrtEndPCDSFCIEntries" },
    0x0293: { n:"BrtPCDSFCIEntry" },
    0x0294: { n:"BrtBeginListParts" },
    0x0295: { n:"BrtListPart" },
    0x0296: { n:"BrtEndListParts" },
    0x0297: { n:"BrtSheetCalcProp" },
    0x0298: { n:"BrtBeginFnGroup" },
    0x0299: { n:"BrtFnGroup" },
    0x029A: { n:"BrtEndFnGroup" },
    0x029B: { n:"BrtSupAddin" },
    0x029C: { n:"BrtSXTDMPOrder" },
    0x029D: { n:"BrtCsProtection" },
    0x029F: { n:"BrtBeginWsSortMap" },
    0x02A0: { n:"BrtEndWsSortMap" },
    0x02A1: { n:"BrtBeginRRSort" },
    0x02A2: { n:"BrtEndRRSort" },
    0x02A3: { n:"BrtRRSortItem" },
    0x02A4: { n:"BrtFileSharingIso" },
    0x02A5: { n:"BrtBookProtectionIso" },
    0x02A6: { n:"BrtSheetProtectionIso" },
    0x02A7: { n:"BrtCsProtectionIso" },
    0x02A8: { n:"BrtRangeProtectionIso" },
    0x0400: { n:"BrtRwDescent" },
    0x0401: { n:"BrtKnownFonts" },
    0x0402: { n:"BrtBeginSXTupleSet" },
    0x0403: { n:"BrtEndSXTupleSet" },
    0x0404: { n:"BrtBeginSXTupleSetHeader" },
    0x0405: { n:"BrtEndSXTupleSetHeader" },
    0x0406: { n:"BrtSXTupleSetHeaderItem" },
    0x0407: { n:"BrtBeginSXTupleSetData" },
    0x0408: { n:"BrtEndSXTupleSetData" },
    0x0409: { n:"BrtBeginSXTupleSetRow" },
    0x040A: { n:"BrtEndSXTupleSetRow" },
    0x040B: { n:"BrtSXTupleSetRowItem" },
    0x040C: { n:"BrtNameExt" },
    0x040D: { n:"BrtPCDH14" },
    0x040E: { n:"BrtBeginPCDCalcMem14" },
    0x040F: { n:"BrtEndPCDCalcMem14" },
    0x0410: { n:"BrtSXTH14" },
    0x0411: { n:"BrtBeginSparklineGroup" },
    0x0412: { n:"BrtEndSparklineGroup" },
    0x0413: { n:"BrtSparkline" },
    0x0414: { n:"BrtSXDI14" },
    0x0415: { n:"BrtWsFmtInfoEx14" },
    0x0416: { n:"BrtBeginConditionalFormatting14" },
    0x0417: { n:"BrtEndConditionalFormatting14" },
    0x0418: { n:"BrtBeginCFRule14" },
    0x0419: { n:"BrtEndCFRule14" },
    0x041A: { n:"BrtCFVO14" },
    0x041B: { n:"BrtBeginDatabar14" },
    0x041C: { n:"BrtBeginIconSet14" },
    0x041D: { n:"BrtDVal14" },
    0x041E: { n:"BrtBeginDVals14" },
    0x041F: { n:"BrtColor14" },
    0x0420: { n:"BrtBeginSparklines" },
    0x0421: { n:"BrtEndSparklines" },
    0x0422: { n:"BrtBeginSparklineGroups" },
    0x0423: { n:"BrtEndSparklineGroups" },
    0x0425: { n:"BrtSXVD14" },
    0x0426: { n:"BrtBeginSxview14" },
    0x0427: { n:"BrtEndSxview14" },
    0x042A: { n:"BrtBeginPCD14" },
    0x042B: { n:"BrtEndPCD14" },
    0x042C: { n:"BrtBeginExtConn14" },
    0x042D: { n:"BrtEndExtConn14" },
    0x042E: { n:"BrtBeginSlicerCacheIDs" },
    0x042F: { n:"BrtEndSlicerCacheIDs" },
    0x0430: { n:"BrtBeginSlicerCacheID" },
    0x0431: { n:"BrtEndSlicerCacheID" },
    0x0433: { n:"BrtBeginSlicerCache" },
    0x0434: { n:"BrtEndSlicerCache" },
    0x0435: { n:"BrtBeginSlicerCacheDef" },
    0x0436: { n:"BrtEndSlicerCacheDef" },
    0x0437: { n:"BrtBeginSlicersEx" },
    0x0438: { n:"BrtEndSlicersEx" },
    0x0439: { n:"BrtBeginSlicerEx" },
    0x043A: { n:"BrtEndSlicerEx" },
    0x043B: { n:"BrtBeginSlicer" },
    0x043C: { n:"BrtEndSlicer" },
    0x043D: { n:"BrtSlicerCachePivotTables" },
    0x043E: { n:"BrtBeginSlicerCacheOlapImpl" },
    0x043F: { n:"BrtEndSlicerCacheOlapImpl" },
    0x0440: { n:"BrtBeginSlicerCacheLevelsData" },
    0x0441: { n:"BrtEndSlicerCacheLevelsData" },
    0x0442: { n:"BrtBeginSlicerCacheLevelData" },
    0x0443: { n:"BrtEndSlicerCacheLevelData" },
    0x0444: { n:"BrtBeginSlicerCacheSiRanges" },
    0x0445: { n:"BrtEndSlicerCacheSiRanges" },
    0x0446: { n:"BrtBeginSlicerCacheSiRange" },
    0x0447: { n:"BrtEndSlicerCacheSiRange" },
    0x0448: { n:"BrtSlicerCacheOlapItem" },
    0x0449: { n:"BrtBeginSlicerCacheSelections" },
    0x044A: { n:"BrtSlicerCacheSelection" },
    0x044B: { n:"BrtEndSlicerCacheSelections" },
    0x044C: { n:"BrtBeginSlicerCacheNative" },
    0x044D: { n:"BrtEndSlicerCacheNative" },
    0x044E: { n:"BrtSlicerCacheNativeItem" },
    0x044F: { n:"BrtRangeProtection14" },
    0x0450: { n:"BrtRangeProtectionIso14" },
    0x0451: { n:"BrtCellIgnoreEC14" },
    0x0457: { n:"BrtList14" },
    0x0458: { n:"BrtCFIcon" },
    0x0459: { n:"BrtBeginSlicerCachesPivotCacheIDs" },
    0x045A: { n:"BrtEndSlicerCachesPivotCacheIDs" },
    0x045B: { n:"BrtBeginSlicers" },
    0x045C: { n:"BrtEndSlicers" },
    0x045D: { n:"BrtWbProp14" },
    0x045E: { n:"BrtBeginSXEdit" },
    0x045F: { n:"BrtEndSXEdit" },
    0x0460: { n:"BrtBeginSXEdits" },
    0x0461: { n:"BrtEndSXEdits" },
    0x0462: { n:"BrtBeginSXChange" },
    0x0463: { n:"BrtEndSXChange" },
    0x0464: { n:"BrtBeginSXChanges" },
    0x0465: { n:"BrtEndSXChanges" },
    0x0466: { n:"BrtSXTupleItems" },
    0x0468: { n:"BrtBeginSlicerStyle" },
    0x0469: { n:"BrtEndSlicerStyle" },
    0x046A: { n:"BrtSlicerStyleElement" },
    0x046B: { n:"BrtBeginStyleSheetExt14" },
    0x046C: { n:"BrtEndStyleSheetExt14" },
    0x046D: { n:"BrtBeginSlicerCachesPivotCacheID" },
    0x046E: { n:"BrtEndSlicerCachesPivotCacheID" },
    0x046F: { n:"BrtBeginConditionalFormattings" },
    0x0470: { n:"BrtEndConditionalFormattings" },
    0x0471: { n:"BrtBeginPCDCalcMemExt" },
    0x0472: { n:"BrtEndPCDCalcMemExt" },
    0x0473: { n:"BrtBeginPCDCalcMemsExt" },
    0x0474: { n:"BrtEndPCDCalcMemsExt" },
    0x0475: { n:"BrtPCDField14" },
    0x0476: { n:"BrtBeginSlicerStyles" },
    0x0477: { n:"BrtEndSlicerStyles" },
    0x0478: { n:"BrtBeginSlicerStyleElements" },
    0x0479: { n:"BrtEndSlicerStyleElements" },
    0x047A: { n:"BrtCFRuleExt" },
    0x047B: { n:"BrtBeginSXCondFmt14" },
    0x047C: { n:"BrtEndSXCondFmt14" },
    0x047D: { n:"BrtBeginSXCondFmts14" },
    0x047E: { n:"BrtEndSXCondFmts14" },
    0x0480: { n:"BrtBeginSortCond14" },
    0x0481: { n:"BrtEndSortCond14" },
    0x0482: { n:"BrtEndDVals14" },
    0x0483: { n:"BrtEndIconSet14" },
    0x0484: { n:"BrtEndDatabar14" },
    0x0485: { n:"BrtBeginColorScale14" },
    0x0486: { n:"BrtEndColorScale14" },
    0x0487: { n:"BrtBeginSxrules14" },
    0x0488: { n:"BrtEndSxrules14" },
    0x0489: { n:"BrtBeginPRule14" },
    0x048A: { n:"BrtEndPRule14" },
    0x048B: { n:"BrtBeginPRFilters14" },
    0x048C: { n:"BrtEndPRFilters14" },
    0x048D: { n:"BrtBeginPRFilter14" },
    0x048E: { n:"BrtEndPRFilter14" },
    0x048F: { n:"BrtBeginPRFItem14" },
    0x0490: { n:"BrtEndPRFItem14" },
    0x0491: { n:"BrtBeginCellIgnoreECs14" },
    0x0492: { n:"BrtEndCellIgnoreECs14" },
    0x0493: { n:"BrtDxf14" },
    0x0494: { n:"BrtBeginDxF14s" },
    0x0495: { n:"BrtEndDxf14s" },
    0x0499: { n:"BrtFilter14" },
    0x049A: { n:"BrtBeginCustomFilters14" },
    0x049C: { n:"BrtCustomFilter14" },
    0x049D: { n:"BrtIconFilter14" },
    0x049E: { n:"BrtPivotCacheConnectionName" },
    0x0800: { n:"BrtBeginDecoupledPivotCacheIDs" },
    0x0801: { n:"BrtEndDecoupledPivotCacheIDs" },
    0x0802: { n:"BrtDecoupledPivotCacheID" },
    0x0803: { n:"BrtBeginPivotTableRefs" },
    0x0804: { n:"BrtEndPivotTableRefs" },
    0x0805: { n:"BrtPivotTableRef" },
    0x0806: { n:"BrtSlicerCacheBookPivotTables" },
    0x0807: { n:"BrtBeginSxvcells" },
    0x0808: { n:"BrtEndSxvcells" },
    0x0809: { n:"BrtBeginSxRow" },
    0x080A: { n:"BrtEndSxRow" },
    0x080C: { n:"BrtPcdCalcMem15" },
    0x0813: { n:"BrtQsi15" },
    0x0814: { n:"BrtBeginWebExtensions" },
    0x0815: { n:"BrtEndWebExtensions" },
    0x0816: { n:"BrtWebExtension" },
    0x0817: { n:"BrtAbsPath15" },
    0x0818: { n:"BrtBeginPivotTableUISettings" },
    0x0819: { n:"BrtEndPivotTableUISettings" },
    0x081B: { n:"BrtTableSlicerCacheIDs" },
    0x081C: { n:"BrtTableSlicerCacheID" },
    0x081D: { n:"BrtBeginTableSlicerCache" },
    0x081E: { n:"BrtEndTableSlicerCache" },
    0x081F: { n:"BrtSxFilter15" },
    0x0820: { n:"BrtBeginTimelineCachePivotCacheIDs" },
    0x0821: { n:"BrtEndTimelineCachePivotCacheIDs" },
    0x0822: { n:"BrtTimelineCachePivotCacheID" },
    0x0823: { n:"BrtBeginTimelineCacheIDs" },
    0x0824: { n:"BrtEndTimelineCacheIDs" },
    0x0825: { n:"BrtBeginTimelineCacheID" },
    0x0826: { n:"BrtEndTimelineCacheID" },
    0x0827: { n:"BrtBeginTimelinesEx" },
    0x0828: { n:"BrtEndTimelinesEx" },
    0x0829: { n:"BrtBeginTimelineEx" },
    0x082A: { n:"BrtEndTimelineEx" },
    0x082B: { n:"BrtWorkBookPr15" },
    0x082C: { n:"BrtPCDH15" },
    0x082D: { n:"BrtBeginTimelineStyle" },
    0x082E: { n:"BrtEndTimelineStyle" },
    0x082F: { n:"BrtTimelineStyleElement" },
    0x0830: { n:"BrtBeginTimelineStylesheetExt15" },
    0x0831: { n:"BrtEndTimelineStylesheetExt15" },
    0x0832: { n:"BrtBeginTimelineStyles" },
    0x0833: { n:"BrtEndTimelineStyles" },
    0x0834: { n:"BrtBeginTimelineStyleElements" },
    0x0835: { n:"BrtEndTimelineStyleElements" },
    0x0836: { n:"BrtDxf15" },
    0x0837: { n:"BrtBeginDxfs15" },
    0x0838: { n:"brtEndDxfs15" },
    0x0839: { n:"BrtSlicerCacheHideItemsWithNoData" },
    0x083A: { n:"BrtBeginItemUniqueNames" },
    0x083B: { n:"BrtEndItemUniqueNames" },
    0x083C: { n:"BrtItemUniqueName" },
    0x083D: { n:"BrtBeginExtConn15" },
    0x083E: { n:"BrtEndExtConn15" },
    0x083F: { n:"BrtBeginOledbPr15" },
    0x0840: { n:"BrtEndOledbPr15" },
    0x0841: { n:"BrtBeginDataFeedPr15" },
    0x0842: { n:"BrtEndDataFeedPr15" },
    0x0843: { n:"BrtTextPr15" },
    0x0844: { n:"BrtRangePr15" },
    0x0845: { n:"BrtDbCommand15" },
    0x0846: { n:"BrtBeginDbTables15" },
    0x0847: { n:"BrtEndDbTables15" },
    0x0848: { n:"BrtDbTable15" },
    0x0849: { n:"BrtBeginDataModel" },
    0x084A: { n:"BrtEndDataModel" },
    0x084B: { n:"BrtBeginModelTables" },
    0x084C: { n:"BrtEndModelTables" },
    0x084D: { n:"BrtModelTable" },
    0x084E: { n:"BrtBeginModelRelationships" },
    0x084F: { n:"BrtEndModelRelationships" },
    0x0850: { n:"BrtModelRelationship" },
    0x0851: { n:"BrtBeginECTxtWiz15" },
    0x0852: { n:"BrtEndECTxtWiz15" },
    0x0853: { n:"BrtBeginECTWFldInfoLst15" },
    0x0854: { n:"BrtEndECTWFldInfoLst15" },
    0x0855: { n:"BrtBeginECTWFldInfo15" },
    0x0856: { n:"BrtFieldListActiveItem" },
    0x0857: { n:"BrtPivotCacheIdVersion" },
    0x0858: { n:"BrtSXDI15" },
    0xFFFF: { n:"" }
    };
    
    var XLSBRE = evert_key(XLSBRecordEnum, 'n');
    
    /* [MS-XLS] 2.3 Record Enumeration */
    var XLSRecordEnum = {
    0x0003: { n:"BIFF2NUM", f:parse_BIFF2NUM },
    0x0004: { n:"BIFF2STR", f:parse_BIFF2STR },
    0x0006: { n:"Formula", f:parse_Formula },
    0x0009: { n:'BOF', f:parse_BOF },
    0x000a: { n:'EOF', f:parsenoop2 },
    0x000c: { n:"CalcCount", f:parseuint16 },
    0x000d: { n:"CalcMode", f:parseuint16 },
    0x000e: { n:"CalcPrecision", f:parsebool },
    0x000f: { n:"CalcRefMode", f:parsebool },
    0x0010: { n:"CalcDelta", f:parse_Xnum },
    0x0011: { n:"CalcIter", f:parsebool },
    0x0012: { n:"Protect", f:parsebool },
    0x0013: { n:"Password", f:parseuint16 },
    0x0014: { n:"Header", f:parse_XLHeaderFooter },
    0x0015: { n:"Footer", f:parse_XLHeaderFooter },
    0x0017: { n:"ExternSheet", f:parse_ExternSheet },
    0x0018: { n:"Lbl", f:parse_Lbl },
    0x0019: { n:"WinProtect", f:parsebool },
    0x001a: { n:"VerticalPageBreaks" },
    0x001b: { n:"HorizontalPageBreaks" },
    0x001c: { n:"Note", f:parse_Note },
    0x001d: { n:"Selection" },
    0x0022: { n:"Date1904", f:parsebool },
    0x0023: { n:"ExternName", f:parse_ExternName },
    0x0026: { n:"LeftMargin", f:parse_Xnum },
    0x0027: { n:"RightMargin", f:parse_Xnum },
    0x0028: { n:"TopMargin", f:parse_Xnum },
    0x0029: { n:"BottomMargin", f:parse_Xnum },
    0x002a: { n:"PrintRowCol", f:parsebool },
    0x002b: { n:"PrintGrid", f:parsebool },
    0x002f: { n:"FilePass", f:parse_FilePass },
    0x0031: { n:"Font", f:parse_Font },
    0x0033: { n:"PrintSize", f:parseuint16 },
    0x003c: { n:"Continue" },
    0x003d: { n:"Window1", f:parse_Window1 },
    0x0040: { n:"Backup", f:parsebool },
    0x0041: { n:"Pane" },
    0x0042: { n:'CodePage', f:parseuint16 },
    0x004d: { n:"Pls" },
    0x0050: { n:"DCon" },
    0x0051: { n:"DConRef" },
    0x0052: { n:"DConName" },
    0x0055: { n:"DefColWidth", f:parseuint16 },
    0x0059: { n:"XCT" },
    0x005a: { n:"CRN" },
    0x005b: { n:"FileSharing" },
    0x005c: { n:'WriteAccess', f:parse_WriteAccess },
    0x005d: { n:"Obj", f:parse_Obj },
    0x005e: { n:"Uncalced" },
    0x005f: { n:"CalcSaveRecalc", f:parsebool },
    0x0060: { n:"Template" },
    0x0061: { n:"Intl" },
    0x0063: { n:"ObjProtect", f:parsebool },
    0x007d: { n:"ColInfo", f:parse_ColInfo },
    0x0080: { n:"Guts", f:parse_Guts },
    0x0081: { n:"WsBool", f:parse_WsBool },
    0x0082: { n:"GridSet", f:parseuint16 },
    0x0083: { n:"HCenter", f:parsebool },
    0x0084: { n:"VCenter", f:parsebool },
    0x0085: { n:'BoundSheet8', f:parse_BoundSheet8 },
    0x0086: { n:"WriteProtect" },
    0x008c: { n:"Country", f:parse_Country },
    0x008d: { n:"HideObj", f:parseuint16 },
    0x0090: { n:"Sort" },
    0x0092: { n:"Palette", f:parse_Palette },
    0x0097: { n:"Sync" },
    0x0098: { n:"LPr" },
    0x0099: { n:"DxGCol" },
    0x009a: { n:"FnGroupName" },
    0x009b: { n:"FilterMode" },
    0x009c: { n:"BuiltInFnGroupCount", f:parseuint16 },
    0x009d: { n:"AutoFilterInfo" },
    0x009e: { n:"AutoFilter" },
    0x00a0: { n:"Scl", f:parse_Scl },
    0x00a1: { n:"Setup", f:parse_Setup },
    0x00ae: { n:"ScenMan" },
    0x00af: { n:"SCENARIO" },
    0x00b0: { n:"SxView" },
    0x00b1: { n:"Sxvd" },
    0x00b2: { n:"SXVI" },
    0x00b4: { n:"SxIvd" },
    0x00b5: { n:"SXLI" },
    0x00b6: { n:"SXPI" },
    0x00b8: { n:"DocRoute" },
    0x00b9: { n:"RecipName" },
    0x00bd: { n:"MulRk", f:parse_MulRk },
    0x00be: { n:"MulBlank", f:parse_MulBlank },
    0x00c1: { n:'Mms', f:parsenoop2 },
    0x00c5: { n:"SXDI" },
    0x00c6: { n:"SXDB" },
    0x00c7: { n:"SXFDB" },
    0x00c8: { n:"SXDBB" },
    0x00c9: { n:"SXNum" },
    0x00ca: { n:"SxBool", f:parsebool },
    0x00cb: { n:"SxErr" },
    0x00cc: { n:"SXInt" },
    0x00cd: { n:"SXString" },
    0x00ce: { n:"SXDtr" },
    0x00cf: { n:"SxNil" },
    0x00d0: { n:"SXTbl" },
    0x00d1: { n:"SXTBRGIITM" },
    0x00d2: { n:"SxTbpg" },
    0x00d3: { n:"ObProj" },
    0x00d5: { n:"SXStreamID" },
    0x00d7: { n:"DBCell" },
    0x00d8: { n:"SXRng" },
    0x00d9: { n:"SxIsxoper" },
    0x00da: { n:"BookBool", f:parseuint16 },
    0x00dc: { n:"DbOrParamQry" },
    0x00dd: { n:"ScenarioProtect", f:parsebool },
    0x00de: { n:"OleObjectSize" },
    0x00e0: { n:"XF", f:parse_XF },
    0x00e1: { n:'InterfaceHdr', f:parse_InterfaceHdr },
    0x00e2: { n:'InterfaceEnd', f:parsenoop2 },
    0x00e3: { n:"SXVS" },
    0x00e5: { n:"MergeCells", f:parse_MergeCells },
    0x00e9: { n:"BkHim" },
    0x00eb: { n:"MsoDrawingGroup" },
    0x00ec: { n:"MsoDrawing" },
    0x00ed: { n:"MsoDrawingSelection" },
    0x00ef: { n:"PhoneticInfo" },
    0x00f0: { n:"SxRule" },
    0x00f1: { n:"SXEx" },
    0x00f2: { n:"SxFilt" },
    0x00f4: { n:"SxDXF" },
    0x00f5: { n:"SxItm" },
    0x00f6: { n:"SxName" },
    0x00f7: { n:"SxSelect" },
    0x00f8: { n:"SXPair" },
    0x00f9: { n:"SxFmla" },
    0x00fb: { n:"SxFormat" },
    0x00fc: { n:"SST", f:parse_SST },
    0x00fd: { n:"LabelSst", f:parse_LabelSst },
    0x00ff: { n:"ExtSST", f:parse_ExtSST },
    0x0100: { n:"SXVDEx" },
    0x0103: { n:"SXFormula" },
    0x0122: { n:"SXDBEx" },
    0x0137: { n:"RRDInsDel" },
    0x0138: { n:"RRDHead" },
    0x013b: { n:"RRDChgCell" },
    0x013d: { n:"RRTabId", f:parseuint16a },
    0x013e: { n:"RRDRenSheet" },
    0x013f: { n:"RRSort" },
    0x0140: { n:"RRDMove" },
    0x014a: { n:"RRFormat" },
    0x014b: { n:"RRAutoFmt" },
    0x014d: { n:"RRInsertSh" },
    0x014e: { n:"RRDMoveBegin" },
    0x014f: { n:"RRDMoveEnd" },
    0x0150: { n:"RRDInsDelBegin" },
    0x0151: { n:"RRDInsDelEnd" },
    0x0152: { n:"RRDConflict" },
    0x0153: { n:"RRDDefName" },
    0x0154: { n:"RRDRstEtxp" },
    0x015f: { n:"LRng" },
    0x0160: { n:"UsesELFs", f:parsebool },
    0x0161: { n:"DSF", f:parsenoop2 },
    0x0191: { n:"CUsr" },
    0x0192: { n:"CbUsr" },
    0x0193: { n:"UsrInfo" },
    0x0194: { n:"UsrExcl" },
    0x0195: { n:"FileLock" },
    0x0196: { n:"RRDInfo" },
    0x0197: { n:"BCUsrs" },
    0x0198: { n:"UsrChk" },
    0x01a9: { n:"UserBView" },
    0x01aa: { n:"UserSViewBegin" },
    0x01ab: { n:"UserSViewEnd" },
    0x01ac: { n:"RRDUserView" },
    0x01ad: { n:"Qsi" },
    0x01ae: { n:"SupBook", f:parse_SupBook },
    0x01af: { n:"Prot4Rev", f:parsebool },
    0x01b0: { n:"CondFmt" },
    0x01b1: { n:"CF" },
    0x01b2: { n:"DVal" },
    0x01b5: { n:"DConBin" },
    0x01b6: { n:"TxO", f:parse_TxO },
    0x01b7: { n:"RefreshAll", f:parsebool },
    0x01b8: { n:"HLink", f:parse_HLink },
    0x01b9: { n:"Lel" },
    0x01ba: { n:"CodeName", f:parse_XLUnicodeString },
    0x01bb: { n:"SXFDBType" },
    0x01bc: { n:"Prot4RevPass", f:parseuint16 },
    0x01bd: { n:"ObNoMacros" },
    0x01be: { n:"Dv" },
    0x01c0: { n:"Excel9File", f:parsenoop2 },
    0x01c1: { n:"RecalcId", f:parse_RecalcId, r:2},
    0x01c2: { n:"EntExU2", f:parsenoop2 },
    0x0200: { n:"Dimensions", f:parse_Dimensions },
    0x0201: { n:"Blank", f:parse_Blank },
    0x0203: { n:"Number", f:parse_Number },
    0x0204: { n:"Label", f:parse_Label },
    0x0205: { n:"BoolErr", f:parse_BoolErr },
    0x0206: { n:"Formula", f:parse_Formula },
    0x0207: { n:"String", f:parse_String },
    0x0208: { n:'Row', f:parse_Row },
    0x020b: { n:"Index" },
    0x0221: { n:"Array", f:parse_Array },
    0x0225: { n:"DefaultRowHeight", f:parse_DefaultRowHeight },
    0x0236: { n:"Table" },
    0x023e: { n:"Window2", f:parse_Window2 },
    0x027e: { n:"RK", f:parse_RK },
    0x0293: { n:"Style" },
    0x0406: { n:"Formula", f:parse_Formula },
    0x0418: { n:"BigName" },
    0x041e: { n:"Format", f:parse_Format },
    0x043c: { n:"ContinueBigName" },
    0x04bc: { n:"ShrFmla", f:parse_ShrFmla },
    0x0800: { n:"HLinkTooltip", f:parse_HLinkTooltip },
    0x0801: { n:"WebPub" },
    0x0802: { n:"QsiSXTag" },
    0x0803: { n:"DBQueryExt" },
    0x0804: { n:"ExtString" },
    0x0805: { n:"TxtQry" },
    0x0806: { n:"Qsir" },
    0x0807: { n:"Qsif" },
    0x0808: { n:"RRDTQSIF" },
    0x0809: { n:'BOF', f:parse_BOF },
    0x080a: { n:"OleDbConn" },
    0x080b: { n:"WOpt" },
    0x080c: { n:"SXViewEx" },
    0x080d: { n:"SXTH" },
    0x080e: { n:"SXPIEx" },
    0x080f: { n:"SXVDTEx" },
    0x0810: { n:"SXViewEx9" },
    0x0812: { n:"ContinueFrt" },
    0x0813: { n:"RealTimeData" },
    0x0850: { n:"ChartFrtInfo" },
    0x0851: { n:"FrtWrapper" },
    0x0852: { n:"StartBlock" },
    0x0853: { n:"EndBlock" },
    0x0854: { n:"StartObject" },
    0x0855: { n:"EndObject" },
    0x0856: { n:"CatLab" },
    0x0857: { n:"YMult" },
    0x0858: { n:"SXViewLink" },
    0x0859: { n:"PivotChartBits" },
    0x085a: { n:"FrtFontList" },
    0x0862: { n:"SheetExt" },
    0x0863: { n:"BookExt", r:12},
    0x0864: { n:"SXAddl" },
    0x0865: { n:"CrErr" },
    0x0866: { n:"HFPicture" },
    0x0867: { n:'FeatHdr', f:parsenoop2 },
    0x0868: { n:"Feat" },
    0x086a: { n:"DataLabExt" },
    0x086b: { n:"DataLabExtContents" },
    0x086c: { n:"CellWatch" },
    0x0871: { n:"FeatHdr11" },
    0x0872: { n:"Feature11" },
    0x0874: { n:"DropDownObjIds" },
    0x0875: { n:"ContinueFrt11" },
    0x0876: { n:"DConn" },
    0x0877: { n:"List12" },
    0x0878: { n:"Feature12" },
    0x0879: { n:"CondFmt12" },
    0x087a: { n:"CF12" },
    0x087b: { n:"CFEx" },
    0x087c: { n:"XFCRC", f:parse_XFCRC, r:12 },
    0x087d: { n:"XFExt", f:parse_XFExt, r:12 },
    0x087e: { n:"AutoFilter12" },
    0x087f: { n:"ContinueFrt12" },
    0x0884: { n:"MDTInfo" },
    0x0885: { n:"MDXStr" },
    0x0886: { n:"MDXTuple" },
    0x0887: { n:"MDXSet" },
    0x0888: { n:"MDXProp" },
    0x0889: { n:"MDXKPI" },
    0x088a: { n:"MDB" },
    0x088b: { n:"PLV" },
    0x088c: { n:"Compat12", f:parsebool, r:12 },
    0x088d: { n:"DXF" },
    0x088e: { n:"TableStyles", r:12 },
    0x088f: { n:"TableStyle" },
    0x0890: { n:"TableStyleElement" },
    0x0892: { n:"StyleExt" },
    0x0893: { n:"NamePublish" },
    0x0894: { n:"NameCmt", f:parse_NameCmt, r:12 },
    0x0895: { n:"SortData" },
    0x0896: { n:"Theme", f:parse_Theme, r:12 },
    0x0897: { n:"GUIDTypeLib" },
    0x0898: { n:"FnGrp12" },
    0x0899: { n:"NameFnGrp12" },
    0x089a: { n:"MTRSettings", f:parse_MTRSettings, r:12 },
    0x089b: { n:"CompressPictures", f:parsenoop2 },
    0x089c: { n:"HeaderFooter" },
    0x089d: { n:"CrtLayout12" },
    0x089e: { n:"CrtMlFrt" },
    0x089f: { n:"CrtMlFrtContinue" },
    0x08a3: { n:"ForceFullCalculation", f:parse_ForceFullCalculation },
    0x08a4: { n:"ShapePropsStream" },
    0x08a5: { n:"TextPropsStream" },
    0x08a6: { n:"RichTextStream" },
    0x08a7: { n:"CrtLayout12A" },
    0x1001: { n:"Units" },
    0x1002: { n:"Chart" },
    0x1003: { n:"Series" },
    0x1006: { n:"DataFormat" },
    0x1007: { n:"LineFormat" },
    0x1009: { n:"MarkerFormat" },
    0x100a: { n:"AreaFormat" },
    0x100b: { n:"PieFormat" },
    0x100c: { n:"AttachedLabel" },
    0x100d: { n:"SeriesText" },
    0x1014: { n:"ChartFormat" },
    0x1015: { n:"Legend" },
    0x1016: { n:"SeriesList" },
    0x1017: { n:"Bar" },
    0x1018: { n:"Line" },
    0x1019: { n:"Pie" },
    0x101a: { n:"Area" },
    0x101b: { n:"Scatter" },
    0x101c: { n:"CrtLine" },
    0x101d: { n:"Axis" },
    0x101e: { n:"Tick" },
    0x101f: { n:"ValueRange" },
    0x1020: { n:"CatSerRange" },
    0x1021: { n:"AxisLine" },
    0x1022: { n:"CrtLink" },
    0x1024: { n:"DefaultText" },
    0x1025: { n:"Text" },
    0x1026: { n:"FontX", f:parseuint16 },
    0x1027: { n:"ObjectLink" },
    0x1032: { n:"Frame" },
    0x1033: { n:"Begin" },
    0x1034: { n:"End" },
    0x1035: { n:"PlotArea" },
    0x103a: { n:"Chart3d" },
    0x103c: { n:"PicF" },
    0x103d: { n:"DropBar" },
    0x103e: { n:"Radar" },
    0x103f: { n:"Surf" },
    0x1040: { n:"RadarArea" },
    0x1041: { n:"AxisParent" },
    0x1043: { n:"LegendException" },
    0x1044: { n:"ShtProps", f:parse_ShtProps },
    0x1045: { n:"SerToCrt" },
    0x1046: { n:"AxesUsed" },
    0x1048: { n:"SBaseRef" },
    0x104a: { n:"SerParent" },
    0x104b: { n:"SerAuxTrend" },
    0x104e: { n:"IFmtRecord" },
    0x104f: { n:"Pos" },
    0x1050: { n:"AlRuns" },
    0x1051: { n:"BRAI" },
    0x105b: { n:"SerAuxErrBar" },
    0x105c: { n:"ClrtClient", f:parse_ClrtClient },
    0x105d: { n:"SerFmt" },
    0x105f: { n:"Chart3DBarShape" },
    0x1060: { n:"Fbi" },
    0x1061: { n:"BopPop" },
    0x1062: { n:"AxcExt" },
    0x1063: { n:"Dat" },
    0x1064: { n:"PlotGrowth" },
    0x1065: { n:"SIIndex" },
    0x1066: { n:"GelFrame" },
    0x1067: { n:"BopPopCustom" },
    0x1068: { n:"Fbi2" },
    
    0x0000: { n:"Dimensions", f:parse_Dimensions },
    0x0002: { n:"BIFF2INT", f:parse_BIFF2INT },
    0x0005: { n:"BoolErr", f:parse_BoolErr },
    0x0007: { n:"String", f:parse_BIFF2STRING },
    0x0008: { n:"BIFF2ROW" },
    0x000b: { n:"Index" },
    0x0016: { n:"ExternCount", f:parseuint16 },
    0x001e: { n:"BIFF2FORMAT", f:parse_BIFF2Format },
    0x001f: { n:"BIFF2FMTCNT" }, /* 16-bit cnt of BIFF2FORMAT records */
    0x0020: { n:"BIFF2COLINFO" },
    0x0021: { n:"Array", f:parse_Array },
    0x0025: { n:"DefaultRowHeight", f:parse_DefaultRowHeight },
    0x0032: { n:"BIFF2FONTXTRA", f:parse_BIFF2FONTXTRA },
    0x0034: { n:"DDEObjName" },
    0x003e: { n:"BIFF2WINDOW2" },
    0x0043: { n:"BIFF2XF" },
    0x0045: { n:"BIFF2FONTCLR" },
    0x0056: { n:"BIFF4FMTCNT" }, /* 16-bit cnt, similar to BIFF2 */
    0x007e: { n:"RK" }, /* Not necessarily same as 0x027e */
    0x007f: { n:"ImData", f:parse_ImData },
    0x0087: { n:"Addin" },
    0x0088: { n:"Edg" },
    0x0089: { n:"Pub" },
    0x0091: { n:"Sub" },
    0x0094: { n:"LHRecord" },
    0x0095: { n:"LHNGraph" },
    0x0096: { n:"Sound" },
    0x00a9: { n:"CoordList" },
    0x00ab: { n:"GCW" },
    0x00bc: { n:"ShrFmla" }, /* Not necessarily same as 0x04bc */
    0x00bf: { n:"ToolbarHdr" },
    0x00c0: { n:"ToolbarEnd" },
    0x00c2: { n:"AddMenu" },
    0x00c3: { n:"DelMenu" },
    0x00d6: { n:"RString", f:parse_RString },
    0x00df: { n:"UDDesc" },
    0x00ea: { n:"TabIdConf" },
    0x0162: { n:"XL5Modify" },
    0x01a5: { n:"FileSharing2" },
    0x0209: { n:'BOF', f:parse_BOF },
    0x0218: { n:"Lbl", f:parse_Lbl },
    0x0223: { n:"ExternName", f:parse_ExternName },
    0x0231: { n:"Font" },
    0x0243: { n:"BIFF3XF" },
    0x0409: { n:'BOF', f:parse_BOF },
    0x0443: { n:"BIFF4XF" },
    0x086d: { n:"FeatInfo" },
    0x0873: { n:"FeatInfo11" },
    0x0881: { n:"SXAddl12" },
    0x08c0: { n:"AutoWebPub" },
    0x08c1: { n:"ListObj" },
    0x08c2: { n:"ListField" },
    0x08c3: { n:"ListDV" },
    0x08c4: { n:"ListCondFmt" },
    0x08c5: { n:"ListCF" },
    0x08c6: { n:"FMQry" },
    0x08c7: { n:"FMSQry" },
    0x08c8: { n:"PLV" },
    0x08c9: { n:"LnExt" },
    0x08ca: { n:"MkrExt" },
    0x08cb: { n:"CrtCoopt" },
    0x08d6: { n:"FRTArchId$", r:12 },
    
    0x7262: {}
    };
    
    var XLSRE = evert_key(XLSRecordEnum, 'n');
    function write_biff_rec(ba, type, payload, length) {
        var t = +type || +XLSRE[type];
        if(isNaN(t)) return;
        var len = length || (payload||[]).length || 0;
        var o = ba.next(4);
        o.write_shift(2, t);
        o.write_shift(2, len);
        if(len > 0 && is_buf(payload)) ba.push(payload);
    }
    
    function write_BIFF2Cell(out, r, c) {
        if(!out) out = new_buf(7);
        out.write_shift(2, r);
        out.write_shift(2, c);
        out.write_shift(2, 0);
        out.write_shift(1, 0);
        return out;
    }
    
    function write_BIFF2BERR(r, c, val, t) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r, c);
        if(t == 'e') { out.write_shift(1, val); out.write_shift(1, 1); }
        else { out.write_shift(1, val?1:0); out.write_shift(1, 0); }
        return out;
    }
    
    /* TODO: codepage, large strings */
    function write_BIFF2LABEL(r, c, val) {
        var out = new_buf(8 + 2*val.length);
        write_BIFF2Cell(out, r, c);
        out.write_shift(1, val.length);
        out.write_shift(val.length, val, 'sbcs');
        return out.l < out.length ? out.slice(0, out.l) : out;
    }
    
    function write_ws_biff2_cell(ba, cell, R, C, opts) {
        if(cell.v != null) switch(cell.t) {
            case 'd': case 'n':
                var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
                if((v == (v|0)) && (v >= 0) && (v < 65536))
                    write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));
                else
                    write_biff_rec(ba, 0x0003, write_BIFF2NUM(R,C, v));
                return;
            case 'b': case 'e': write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t)); return;
            /* TODO: codepage, sst */
            case 's': case 'str':
                write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, cell.v));
                return;
        }
        write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));
    }
    
    function write_ws_biff2(ba, ws, idx, opts, wb) {
        var dense = Array.isArray(ws);
        var range = safe_decode_range(ws['!ref'] || "A1"), ref, rr = "", cols = [];
        for(var R = range.s.r; R <= range.e.r; ++R) {
            rr = encode_row(R);
            for(var C = range.s.c; C <= range.e.c; ++C) {
                if(R === range.s.r) cols[C] = encode_col(C);
                ref = cols[C] + rr;
                var cell = dense ? (ws[R]||[])[C] : ws[ref];
                if(!cell) continue;
                /* write cell */
                write_ws_biff2_cell(ba, cell, R, C, opts);
            }
        }
    }
    
    /* Based on test files */
    function write_biff2_buf(wb, opts) {
        var o = opts || {};
        if(DENSE != null && o.dense == null) o.dense = DENSE;
        var ba = buf_array();
        var idx = 0;
        for(var i=0;i<wb.SheetNames.length;++i) if(wb.SheetNames[i] == o.sheet) idx=i;
        if(idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
        write_biff_rec(ba, 0x0009, write_BOF(wb, 0x10, o));
        /* ... */
        write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
        /* ... */
        write_biff_rec(ba, 0x000A);
        return ba.end();
    }
    
    function write_ws_biff8_hlinks(ba, ws) {
        for(var R=0; R<ws['!links'].length; ++R) {
            var HL = ws['!links'][R];
            write_biff_rec(ba, "HLink", write_HLink(HL));
            if(HL[1].Tooltip) write_biff_rec(ba, "HLinkTooltip", write_HLinkTooltip(HL));
        }
        delete ws['!links'];
    }
    
    function write_ws_biff8_cell(ba, cell, R, C, opts) {
        if(cell.v != null) switch(cell.t) {
            case 'd': case 'n':
                var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
                /* TODO: emit RK as appropriate */
                write_biff_rec(ba, "Number", write_Number(R, C, v, opts));
                return;
            case 'b': case 'e': write_biff_rec(ba, "BoolErr", write_BoolErr(R, C, cell.v, opts, cell.t)); return;
            /* TODO: codepage, sst */
            case 's': case 'str':
                write_biff_rec(ba, "Label", write_Label(R, C, cell.v, opts));
                return;
        }
        write_biff_rec(ba, "Blank", write_XLSCell(R, C));
    }
    
    /* [MS-XLS] 2.1.7.20.5 */
    function write_ws_biff8(idx, opts, wb) {
        var ba = buf_array();
        var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
        var _WB = ((wb||{}).Workbook||{});
        var _sheet = ((_WB.Sheets||[])[idx]||{});
        var dense = Array.isArray(ws);
        var ref, rr = "", cols = [];
        var range = safe_decode_range(ws['!ref'] || "A1");
        var b8 = opts.biff == 8, b5 = opts.biff == 5;
        write_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));
        /* ... */
        write_biff_rec(ba, "CalcMode", writeuint16(1));
        write_biff_rec(ba, "CalcCount", writeuint16(100));
        write_biff_rec(ba, "CalcRefMode", writebool(true));
        write_biff_rec(ba, "CalcIter", writebool(false));
        write_biff_rec(ba, "CalcDelta", write_Xnum(0.001));
        write_biff_rec(ba, "CalcSaveRecalc", writebool(true));
        write_biff_rec(ba, "PrintRowCol", writebool(false));
        write_biff_rec(ba, "PrintGrid", writebool(false));
        write_biff_rec(ba, "GridSet", writeuint16(1));
        write_biff_rec(ba, "Guts", write_Guts([0,0]));
        /* ... */
        write_biff_rec(ba, "HCenter", writebool(false));
        write_biff_rec(ba, "VCenter", writebool(false));
        /* ... */
        write_biff_rec(ba, "Dimensions", write_Dimensions(range, opts));
        /* ... */
    
        if(b8) ws['!links'] = [];
        for(var R = range.s.r; R <= range.e.r; ++R) {
            rr = encode_row(R);
            for(var C = range.s.c; C <= range.e.c; ++C) {
                if(R === range.s.r) cols[C] = encode_col(C);
                ref = cols[C] + rr;
                var cell = dense ? (ws[R]||[])[C] : ws[ref];
                if(!cell) continue;
                /* write cell */
                write_ws_biff8_cell(ba, cell, R, C, opts);
                if(b8 && cell.l) ws['!links'].push([ref, cell.l]);
            }
        }
        var cname = _sheet.CodeName || _sheet.name || s;
        /* ... */
        if(b8 && _WB.Views) write_biff_rec(ba, "Window2", write_Window2(_WB.Views[0]));
        /* ... */
        if(b8) write_biff_rec(ba, "MergeCells", write_MergeCells(ws['!merges']||[]));
        /* ... */
        if(b8) write_ws_biff8_hlinks(ba, ws);
        /* ... */
        write_biff_rec(ba, "CodeName", write_XLUnicodeString(cname, opts));
        /* ... */
        write_biff_rec(ba, "EOF");
        return ba.end();
    }
    
    /* [MS-XLS] 2.1.7.20.3 */
    function write_biff8_global(wb, bufs, opts) {
        var A = buf_array();
        var _wb = (wb.Workbook||{}).WBProps||{};
        var b8 = opts.biff == 8, b5 = opts.biff == 5;
        write_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));
        if(opts.bookType == "xla") write_biff_rec(A, "Addin");
        write_biff_rec(A, "InterfaceHdr", b8 ? writeuint16(0x04b0) : null);
        write_biff_rec(A, "Mms", writezeroes(2));
        if(b5) write_biff_rec(A, "ToolbarHdr");
        if(b5) write_biff_rec(A, "ToolbarEnd");
        write_biff_rec(A, "InterfaceEnd");
        write_biff_rec(A, "WriteAccess", write_WriteAccess("SheetJS", opts));
        write_biff_rec(A, "CodePage", writeuint16(b8 ? 0x04b0 : 0x04E4));
        if(b8) write_biff_rec(A, "DSF", writeuint16(0));
        write_biff_rec(A, "RRTabId", write_RRTabId(wb.SheetNames.length));
        if(b8 && wb.vbaraw) {
            write_biff_rec(A, "ObProj");
            // $FlowIgnore
            var cname = _wb.CodeName || "ThisWorkbook";
            write_biff_rec(A, "CodeName", write_XLUnicodeString(cname, opts));
        }
        write_biff_rec(A, "BuiltInFnGroupCount", writeuint16(0x11));
        write_biff_rec(A, "WinProtect", writebool(false));
        write_biff_rec(A, "Protect", writebool(false));
        write_biff_rec(A, "Password", writeuint16(0));
        if(b8) write_biff_rec(A, "Prot4Rev", writebool(false));
        if(b8) write_biff_rec(A, "Prot4RevPass", writeuint16(0));
        write_biff_rec(A, "Window1", write_Window1(opts));
        write_biff_rec(A, "Backup", writebool(false));
        write_biff_rec(A, "HideObj", writeuint16(0));
        write_biff_rec(A, "Date1904", writebool(safe1904(wb)=="true"));
        write_biff_rec(A, "CalcPrecision", writebool(true));
        if(b8) write_biff_rec(A, "RefreshAll", writebool(false));
        write_biff_rec(A, "BookBool", writeuint16(0));
        /* ... */
        if(b8) write_biff_rec(A, "UsesELFs", writebool(false));
        var a = A.end();
    
        var C = buf_array();
        if(b8) write_biff_rec(C, "Country", write_Country());
        /* BIFF8: [SST *Continue] ExtSST */
        write_biff_rec(C, "EOF");
        var c = C.end();
    
        var B = buf_array();
        var blen = 0, j = 0;
        for(j = 0; j < wb.SheetNames.length; ++j) blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
        var start = a.length + blen + c.length;
        for(j = 0; j < wb.SheetNames.length; ++j) {
            write_biff_rec(B, "BoundSheet8", write_BoundSheet8({pos:start, hs:0, dt:0, name:wb.SheetNames[j]}, opts));
            start += bufs[j].length;
        }
        /* 1*BoundSheet8 */
        var b = B.end();
        if(blen != b.length) throw new Error("BS8 " + blen + " != " + b.length);
    
        var out = [];
        if(a.length) out.push(a);
        if(b.length) out.push(b);
        if(c.length) out.push(c);
        return __toBuffer([out]);
    }
    
    /* [MS-XLS] 2.1.7.20 Workbook Stream */
    function write_biff8_buf(wb, opts) {
        var o = opts || {};
        var bufs = [];
        for(var i = 0; i < wb.SheetNames.length; ++i) bufs[bufs.length] = write_ws_biff8(i, o, wb);
        bufs.unshift(write_biff8_global(wb, bufs, o));
        return __toBuffer([bufs]);
    }
    
    function write_biff_buf(wb, opts) {
        var o = opts || {};
        switch(o.biff || 2) {
            case 8: case 5: return write_biff8_buf(wb, opts);
            case 4: case 3: case 2: return write_biff2_buf(wb, opts);
        }
        throw new Error("invalid type " + o.bookType + " for BIFF");
    }
    /* note: browser DOM element cannot see mso- style attrs, must parse */
    var HTML_ = (function() {
        function html_to_sheet(str, _opts) {
            var opts = _opts || {};
            if(DENSE != null && opts.dense == null) opts.dense = DENSE;
            var ws = opts.dense ? ([]) : ({});
            var mtch = str.match(/<table/i);
            if(!mtch) throw new Error("Invalid HTML: could not find <table>");
            var mtch2 = str.match(/<\/table/i);
            var i = mtch.index, j = mtch2 && mtch2.index || str.length;
            var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
            var R = -1, C = 0, RS = 0, CS = 0;
            var range = {s:{r:10000000, c:10000000},e:{r:0,c:0}};
            var merges = [], midx = 0;
            for(i = 0; i < rows.length; ++i) {
                var row = rows[i].trim();
                var hd = row.substr(0,3).toLowerCase();
                if(hd == "<tr") { ++R; C = 0; continue; }
                if(hd != "<td") continue;
                var cells = row.split(/<\/td>/i);
                for(j = 0; j < cells.length; ++j) {
                    var cell = cells[j].trim();
                    if(cell.substr(0,3).toLowerCase() != "<td") continue;
                    var m = cell, cc = 0;
                    /* TODO: parse styles etc */
                    while(m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc+1);
                    var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
                    CS = tag.colspan ? +tag.colspan : 1;
                    if((RS = +tag.rowspan)>0 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});
                    var _t = tag.t || "";
                    /* TODO: generate stub cells */
                    if(!m.length) { C += CS; continue; }
                    m = htmldecode(unescapexml(m));
                    if(range.s.r > R) range.s.r = R; if(range.e.r < R) range.e.r = R;
                    if(range.s.c > C) range.s.c = C; if(range.e.c < C) range.e.c = C;
                    if(!m.length) continue;
                    var o = {t:'s', v:m};
                    if(opts.raw || !m.trim().length || _t == 's'){}
                    else if(m === 'TRUE') o = {t:'b', v:true};
                    else if(m === 'FALSE') o = {t:'b', v:false};
                    else if(!isNaN(fuzzynum(m))) o = {t:'n', v:fuzzynum(m)};
                    else if(!isNaN(fuzzydate(m).getDate())) {
                        o = ({t:'d', v:parseDate(m)});
                        if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)});
                        o.z = opts.dateNF || SSF._table[14];
                    }
                    if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = o; }
                    else ws[encode_cell({r:R, c:C})] = o;
                    C += CS;
                }
            }
            ws['!ref'] = encode_range(range);
            return ws;
        }
        function html_to_book(str, opts) {
            return sheet_to_workbook(html_to_sheet(str, opts), opts);
        }
        function make_html_row(ws, r, R, o) {
            var M = (ws['!merges'] ||[]);
            var oo = [];
            var nullcell = "<td>" + (o.editable ? '<span contenteditable="true"></span>' : "" ) + "</td>";
            for(var C = r.s.c; C <= r.e.c; ++C) {
                var RS = 0, CS = 0;
                for(var j = 0; j < M.length; ++j) {
                    if(M[j].s.r > R || M[j].s.c > C) continue;
                    if(M[j].e.r < R || M[j].e.c < C) continue;
                    if(M[j].s.r < R || M[j].s.c < C) { RS = -1; break; }
                    RS = M[j].e.r - M[j].s.r + 1; CS = M[j].e.c - M[j].s.c + 1; break;
                }
                if(RS < 0) continue;
                var coord = encode_cell({r:R,c:C});
                var cell = o.dense ? (ws[R]||[])[C] : ws[coord];
                if(!cell || cell.v == null) { oo.push(nullcell); continue; }
                /* TODO: html entities */
                var w = cell.h || escapexml(cell.w || (format_cell(cell), cell.w) || "");
                var sp = {};
                if(RS > 1) sp.rowspan = RS;
                if(CS > 1) sp.colspan = CS;
                sp.t = cell.t;
                if(o.editable) w = '<span contenteditable="true">' + w + '</span>';
                sp.id = "sjs-" + coord;
                oo.push(writextag('td', w, sp));
            }
            var preamble = "<tr>";
            return preamble + oo.join("") + "</tr>";
        }
        function make_html_preamble(ws, R, o) {
            var out = [];
            return out.join("") + '<table>';
        }
        var _BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
        var _END = '</body></html>';
        function sheet_to_html(ws, opts, wb) {
            var o = opts || {};
            var header = o.header != null ? o.header : _BEGIN;
            var footer = o.footer != null ? o.footer : _END;
            var out = [header];
            var r = decode_range(ws['!ref']);
            o.dense = Array.isArray(ws);
            out.push(make_html_preamble(ws, r, o));
            for(var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));
            out.push("</table>" + footer);
            return out.join("");
        }
    
        return {
            to_workbook: html_to_book,
            to_sheet: html_to_sheet,
            _row: make_html_row,
            BEGIN: _BEGIN,
            END: _END,
            _preamble: make_html_preamble,
            from_sheet: sheet_to_html
        };
    })();
    
    function parse_dom_table(table, _opts) {
        var opts = _opts || {};
        if(DENSE != null) opts.dense = DENSE;
        var ws = opts.dense ? ([]) : ({});
        var rows = table.getElementsByTagName('tr');
        var range = {s:{r:0,c:0},e:{r:rows.length - 1,c:0}};
        var merges = [], midx = 0;
        var R = 0, _C = 0, C = 0, RS = 0, CS = 0;
        for(; R < rows.length; ++R) {
            var row = rows[R];
            var elts = (row.children);
            for(_C = C = 0; _C < elts.length; ++_C) {
                var elt = elts[_C], v = htmldecode(elts[_C].innerHTML);
                for(midx = 0; midx < merges.length; ++midx) {
                    var m = merges[midx];
                    if(m.s.c == C && m.s.r <= R && R <= m.e.r) { C = m.e.c+1; midx = -1; }
                }
                /* TODO: figure out how to extract nonstandard mso- style */
                CS = +elt.getAttribute("colspan") || 1;
                if((RS = +elt.getAttribute("rowspan"))>0 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});
                var o = {t:'s', v:v};
                var _t = elt.getAttribute("t") || "";
                if(v != null) {
                    if(v.length == 0) o.t = _t || 'z';
                    else if(opts.raw || v.trim().length == 0 || _t == "s"){}
                    else if(v === 'TRUE') o = {t:'b', v:true};
                    else if(v === 'FALSE') o = {t:'b', v:false};
                    else if(!isNaN(fuzzynum(v))) o = {t:'n', v:fuzzynum(v)};
                    else if(!isNaN(fuzzydate(v).getDate())) {
                        o = ({t:'d', v:parseDate(v)});
                        if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)});
                        o.z = opts.dateNF || SSF._table[14];
                    }
                }
                if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = o; }
                else ws[encode_cell({c:C, r:R})] = o;
                if(range.e.c < C) range.e.c = C;
                C += CS;
            }
        }
        ws['!merges'] = merges;
        ws['!ref'] = encode_range(range);
        return ws;
    }
    
    function table_to_book(table, opts) {
        return sheet_to_workbook(parse_dom_table(table, opts), opts);
    }
    /* OpenDocument */
    var parse_content_xml = (function() {
    
        /* 6.1.2 White Space Characters */
        var parse_text_p = function(text, tag) {
            return unescapexml(text
                .replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ")
                .replace(/<text:s\/>/g," ")
                .replace(/<text:s text:c="(\d+)"\/>/g, function($$,$1) { return Array(parseInt($1,10)+1).join(" "); })
                .replace(/<text:tab[^>]*\/>/g,"\t")
                .replace(/<text:line-break\/>/g,"\n")
                .replace(/<[^>]*>/g,"")
            );
        };
    
        var number_formats = {
            /* ods name: [short ssf fmt, long ssf fmt] */
            day:           ["d",   "dd"],
            month:         ["m",   "mm"],
            year:          ["y",   "yy"],
            hours:         ["h",   "hh"],
            minutes:       ["m",   "mm"],
            seconds:       ["s",   "ss"],
            "am-pm":       ["A/P", "AM/PM"],
            "day-of-week": ["ddd", "dddd"],
            era:           ["e",   "ee"],
            /* there is no native representation of LO "Q" format */
            quarter:       ["\\Qm", "m\\\"th quarter\""]
        };
    
        return function pcx(d, _opts) {
            var opts = _opts || {};
            if(DENSE != null && opts.dense == null) opts.dense = DENSE;
            var str = xlml_normalize(d);
            var state = [], tmp;
            var tag;
            var NFtag = {name:""}, NF = "", pidx = 0;
            var sheetag;
            var rowtag;
            var Sheets = {}, SheetNames = [];
            var ws = opts.dense ? ([]) : ({});
            var Rn, q;
            var ctag = ({value:""});
            var textp = "", textpidx = 0, textptag;
            var R = -1, C = -1, range = {s: {r:1000000,c:10000000}, e: {r:0, c:0}};
            var row_ol = 0;
            var number_format_map = {};
            var merges = [], mrange = {}, mR = 0, mC = 0;
            var rowinfo = [], rowpeat = 1, colpeat = 1;
            var arrayf = [];
            var WB = {Names:[]};
            var atag = ({});
            var _Ref = ["", ""];
            var comments = [], comment = ({});
            var creator = "", creatoridx = 0;
            var isstub = false, intable = false;
            var i = 0;
            xlmlregex.lastIndex = 0;
            str = str.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
            while((Rn = xlmlregex.exec(str))) switch((Rn[3]=Rn[3].replace(/_.*$/,""))) {
    
                case 'table': case 'å·¥ä½œè¡¨': // 9.1.2 <table:table>
                    if(Rn[1]==='/') {
                        if(range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);
                        if(merges.length) ws['!merges'] = merges;
                        if(rowinfo.length) ws["!rows"] = rowinfo;
                        sheetag.name = utf8read(sheetag['åç§°'] || sheetag.name);
                        SheetNames.push(sheetag.name);
                        Sheets[sheetag.name] = ws;
                        intable = false;
                    }
                    else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
                        sheetag = parsexmltag(Rn[0], false);
                        R = C = -1;
                        range.s.r = range.s.c = 10000000; range.e.r = range.e.c = 0;
                        ws = opts.dense ? ([]) : ({}); merges = [];
                        rowinfo = [];
                        intable = true;
                    }
                    break;
    
                case 'table-row-group': // 9.1.9 <table:table-row-group>
                    if(Rn[1] === "/") --row_ol; else ++row_ol;
                    break;
                case 'table-row': case 'è¡Œ': // 9.1.3 <table:table-row>
                    if(Rn[1] === '/') { R+=rowpeat; rowpeat = 1; break; }
                    rowtag = parsexmltag(Rn[0], false);
                    if(rowtag['è¡Œå·']) R = rowtag['è¡Œå·'] - 1; else if(R == -1) R = 0;
                    rowpeat = +rowtag['number-rows-repeated'] || 1;
                    /* TODO: remove magic */
                    if(rowpeat < 10) for(i = 0; i < rowpeat; ++i) if(row_ol > 0) rowinfo[R + i] = {level: row_ol};
                    C = -1; break;
                case 'covered-table-cell': // 9.1.5 <table:covered-table-cell>
                    ++C;
                    if(opts.sheetStubs) {
                        if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = {t:'z'}; }
                        else ws[encode_cell({r:R,c:C})] = {t:'z'};
                    }
                    break; /* stub */
                case 'table-cell': case 'æ•°æ®':
                    if(Rn[0].charAt(Rn[0].length-2) === '/') {
                        ++C;
                        ctag = parsexmltag(Rn[0], false);
                        colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
                        q = ({t:'z', v:null});
                        if(ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
                        if((ctag['æ•°æ®ç±»åž‹'] || ctag['value-type']) == "string") {
                            q.t = "s"; q.v = unescapexml(ctag['string-value'] || "");
                            if(opts.dense) {
                                if(!ws[R]) ws[R] = [];
                                ws[R][C] = q;
                            } else {
                                ws[encode_cell({r:R,c:C})] = q;
                            }
                        }
                        C+= colpeat-1;
                    } else if(Rn[1]!=='/') {
                        ++C;
                        colpeat = 1;
                        if(C > range.e.c) range.e.c = C;
                        if(R > range.e.r) range.e.r = R;
                        if(C < range.s.c) range.s.c = C;
                        if(R < range.s.r) range.s.r = R;
                        ctag = parsexmltag(Rn[0], false);
                        comments = []; comment = ({});
                        q = ({t:ctag['æ•°æ®ç±»åž‹'] || ctag['value-type'], v:null});
                        if(opts.cellFormula) {
                            if(ctag.formula) ctag.formula = unescapexml(ctag.formula);
                            if(ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {
                                mR = parseInt(ctag['number-matrix-rows-spanned'],10) || 0;
                                mC = parseInt(ctag['number-matrix-columns-spanned'],10) || 0;
                                mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
                                q.F = encode_range(mrange);
                                arrayf.push([mrange, q.F]);
                            }
                            if(ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
                            else for(i = 0; i < arrayf.length; ++i)
                                if(R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r)
                                    if(C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)
                                        q.F = arrayf[i][1];
                        }
                        if(ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {
                            mR = parseInt(ctag['number-rows-spanned'],10) || 0;
                            mC = parseInt(ctag['number-columns-spanned'],10) || 0;
                            mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
                            merges.push(mrange);
                        }
    
                        /* 19.675.2 table:number-columns-repeated */
                        if(ctag['number-columns-repeated']) colpeat = parseInt(ctag['number-columns-repeated'], 10);
    
                        /* 19.385 office:value-type */
                        switch(q.t) {
                            case 'boolean': q.t = 'b'; q.v = parsexmlbool(ctag['boolean-value']); break;
                            case 'float': q.t = 'n'; q.v = parseFloat(ctag.value); break;
                            case 'percentage': q.t = 'n'; q.v = parseFloat(ctag.value); break;
                            case 'currency': q.t = 'n'; q.v = parseFloat(ctag.value); break;
                            case 'date': q.t = 'd'; q.v = parseDate(ctag['date-value']);
                                if(!opts.cellDates) { q.t = 'n'; q.v = datenum(q.v); }
                                q.z = 'm/d/yy'; break;
                            case 'time': q.t = 'n'; q.v = parse_isodur(ctag['time-value'])/86400; break;
                            case 'number': q.t = 'n'; q.v = parseFloat(ctag['æ•°æ®æ•°å€¼']); break;
                            default:
                                if(q.t === 'string' || q.t === 'text' || !q.t) {
                                    q.t = 's';
                                    if(ctag['string-value'] != null) textp = unescapexml(ctag['string-value']);
                                } else throw new Error('Unsupported value type ' + q.t);
                        }
                    } else {
                        isstub = false;
                        if(q.t === 's') {
                            q.v = textp || '';
                            isstub = textpidx == 0;
                        }
                        if(atag.Target) q.l = atag;
                        if(comments.length > 0) { q.c = comments; comments = []; }
                        if(textp && opts.cellText !== false) q.w = textp;
                        if(!isstub || opts.sheetStubs) {
                            if(!(opts.sheetRows && opts.sheetRows < R)) {
                                for(var rpt = 0; rpt < rowpeat; ++rpt) {
                                    colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
                                    if(opts.dense) {
                                        if(!ws[R + rpt]) ws[R + rpt] = [];
                                        ws[R + rpt][C] = rpt == 0 ? q : dup(q);
                                        while(--colpeat > 0) ws[R + rpt][C + colpeat] = dup(q);
                                    } else {
                                        ws[encode_cell({r:R + rpt,c:C})] = q;
                                        while(--colpeat > 0) ws[encode_cell({r:R + rpt,c:C + colpeat})] = dup(q);
                                    }
                                    if(range.e.c <= C) range.e.c = C;
                                }
                            }
                        }
                        colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
                        C += colpeat-1; colpeat = 0;
                        q = {};
                        textp = "";
                    }
                    atag = ({});
                    break; // 9.1.4 <table:table-cell>
    
                /* pure state */
                case 'document': // TODO: <office:document> is the root for FODS
                case 'document-content': case 'ç”µå­è¡¨æ ¼æ–‡æ¡£': // 3.1.3.2 <office:document-content>
                case 'spreadsheet': case 'ä¸»ä½“': // 3.7 <office:spreadsheet>
                case 'scripts': // 3.12 <office:scripts>
                case 'styles': // TODO <office:styles>
                case 'font-face-decls': // 3.14 <office:font-face-decls>
                    if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
                    else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
                    break;
    
                case 'annotation': // 14.1 <office:annotation>
                    if(Rn[1]==='/'){
                        if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
                        comment.t = textp;
                        comment.a = creator;
                        comments.push(comment);
                    }
                    else if(Rn[0].charAt(Rn[0].length-2) !== '/') {state.push([Rn[3], false]);}
                    creator = ""; creatoridx = 0;
                    textp = ""; textpidx = 0;
                    break;
    
                case 'creator': // 4.3.2.7 <dc:creator>
                    if(Rn[1]==='/') { creator = str.slice(creatoridx,Rn.index); }
                    else creatoridx = Rn.index + Rn[0].length;
                    break;
    
                /* ignore state */
                case 'meta': case 'å…ƒæ•°æ®': // TODO: <office:meta> <uof:å…ƒæ•°æ®> FODS/UOF
                case 'settings': // TODO: <office:settings>
                case 'config-item-set': // TODO: <office:config-item-set>
                case 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>
                case 'config-item-map-entry': // TODO: <office:config-item-map-entry>
                case 'config-item-map-named': // TODO: <office:config-item-map-entry>
                case 'shapes': // 9.2.8 <table:shapes>
                case 'frame': // 10.4.2 <draw:frame>
                case 'text-box': // 10.4.3 <draw:text-box>
                case 'image': // 10.4.4 <draw:image>
                case 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>
                case 'list-style': // 16.30 <text:list-style>
                case 'form': // 13.13 <form:form>
                case 'dde-links': // 9.8 <table:dde-links>
                case 'event-listeners': // TODO
                case 'chart': // TODO
                    if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
                    else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], false]);
                    textp = ""; textpidx = 0;
                    break;
    
                case 'scientific-number': // TODO: <number:scientific-number>
                    break;
                case 'currency-symbol': // TODO: <number:currency-symbol>
                    break;
                case 'currency-style': // TODO: <number:currency-style>
                    break;
                case 'number-style': // 16.27.2 <number:number-style>
                case 'percentage-style': // 16.27.9 <number:percentage-style>
                case 'date-style': // 16.27.10 <number:date-style>
                case 'time-style': // 16.27.18 <number:time-style>
                    if(Rn[1]==='/'){
                        number_format_map[NFtag.name] = NF;
                        if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
                    } else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
                        NF = "";
                        NFtag = parsexmltag(Rn[0], false);
                        state.push([Rn[3], true]);
                    } break;
    
                case 'script': break; // 3.13 <office:script>
                case 'libraries': break; // TODO: <ooo:libraries>
                case 'automatic-styles': break; // 3.15.3 <office:automatic-styles>
                case 'master-styles': break; // TODO: <office:master-styles>
    
                case 'default-style': // TODO: <style:default-style>
                case 'page-layout': break; // TODO: <style:page-layout>
                case 'style': break; // 16.2 <style:style>
                case 'map': break; // 16.3 <style:map>
                case 'font-face': break; // 16.21 <style:font-face>
    
                case 'paragraph-properties': break; // 17.6 <style:paragraph-properties>
                case 'table-properties': break; // 17.15 <style:table-properties>
                case 'table-column-properties': break; // 17.16 <style:table-column-properties>
                case 'table-row-properties': break; // 17.17 <style:table-row-properties>
                case 'table-cell-properties': break; // 17.18 <style:table-cell-properties>
    
                case 'number': // 16.27.3 <number:number>
                    switch(state[state.length-1][0]) {
                        case 'time-style':
                        case 'date-style':
                            tag = parsexmltag(Rn[0], false);
                            NF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;
                    } break;
    
                case 'fraction': break; // TODO 16.27.6 <number:fraction>
    
                case 'day': // 16.27.11 <number:day>
                case 'month': // 16.27.12 <number:month>
                case 'year': // 16.27.13 <number:year>
                case 'era': // 16.27.14 <number:era>
                case 'day-of-week': // 16.27.15 <number:day-of-week>
                case 'week-of-year': // 16.27.16 <number:week-of-year>
                case 'quarter': // 16.27.17 <number:quarter>
                case 'hours': // 16.27.19 <number:hours>
                case 'minutes': // 16.27.20 <number:minutes>
                case 'seconds': // 16.27.21 <number:seconds>
                case 'am-pm': // 16.27.22 <number:am-pm>
                    switch(state[state.length-1][0]) {
                        case 'time-style':
                        case 'date-style':
                            tag = parsexmltag(Rn[0], false);
                            NF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;
                    } break;
    
                case 'boolean-style': break; // 16.27.23 <number:boolean-style>
                case 'boolean': break; // 16.27.24 <number:boolean>
                case 'text-style': break; // 16.27.25 <number:text-style>
                case 'text': // 16.27.26 <number:text>
                    if(Rn[0].slice(-2) === "/>") break;
                    else if(Rn[1]==="/") switch(state[state.length-1][0]) {
                        case 'number-style':
                        case 'date-style':
                        case 'time-style':
                            NF += str.slice(pidx, Rn.index);
                            break;
                    }
                    else pidx = Rn.index + Rn[0].length;
                    break;
    
                case 'named-range': // 9.4.12 <table:named-range>
                    tag = parsexmltag(Rn[0], false);
                    _Ref = ods_to_csf_3D(tag['cell-range-address']);
                    var nrange = ({Name:tag.name, Ref:_Ref[0] + '!' + _Ref[1]});
                    if(intable) nrange.Sheet = SheetNames.length;
                    WB.Names.push(nrange);
                    break;
    
                case 'text-content': break; // 16.27.27 <number:text-content>
                case 'text-properties': break; // 16.27.27 <style:text-properties>
                case 'embedded-text': break; // 16.27.4 <number:embedded-text>
    
                case 'body': case 'ç”µå­è¡¨æ ¼': break; // 3.3 16.9.6 19.726.3
    
                case 'forms': break; // 12.25.2 13.2
                case 'table-column': break; // 9.1.6 <table:table-column>
                case 'table-header-rows': break; // 9.1.7 <table:table-header-rows>
                case 'table-rows': break; // 9.1.12 <table:table-rows>
                /* TODO: outline levels */
                case 'table-column-group': break; // 9.1.10 <table:table-column-group>
                case 'table-header-columns': break; // 9.1.11 <table:table-header-columns>
                case 'table-columns': break; // 9.1.12 <table:table-columns>
    
                case 'null-date': break; // 9.4.2 <table:null-date> TODO: date1904
    
                case 'graphic-properties': break; // 17.21 <style:graphic-properties>
                case 'calculation-settings': break; // 9.4.1 <table:calculation-settings>
                case 'named-expressions': break; // 9.4.11 <table:named-expressions>
                case 'label-range': break; // 9.4.9 <table:label-range>
                case 'label-ranges': break; // 9.4.10 <table:label-ranges>
                case 'named-expression': break; // 9.4.13 <table:named-expression>
                case 'sort': break; // 9.4.19 <table:sort>
                case 'sort-by': break; // 9.4.20 <table:sort-by>
                case 'sort-groups': break; // 9.4.22 <table:sort-groups>
    
                case 'tab': break; // 6.1.4 <text:tab>
                case 'line-break': break; // 6.1.5 <text:line-break>
                case 'span': break; // 6.1.7 <text:span>
                case 'p': case 'æ–‡æœ¬ä¸²': // 5.1.3 <text:p>
                    if(Rn[1]==='/' && (!ctag || !ctag['string-value'])) textp = (textp.length > 0 ? textp + "\n" : "") + parse_text_p(str.slice(textpidx,Rn.index), textptag);
                    else { textptag = parsexmltag(Rn[0], false); textpidx = Rn.index + Rn[0].length; }
                    break; // <text:p>
                case 's': break; // <text:s>
    
                case 'database-range': // 9.4.15 <table:database-range>
                    if(Rn[1]==='/') break;
                    try {
                        _Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);
                        Sheets[_Ref[0]]['!autofilter'] = { ref:_Ref[1] };
                    } catch(e) {/* empty */}
                    break;
    
                case 'date': break; // <*:date>
    
                case 'object': break; // 10.4.6.2 <draw:object>
                case 'title': case 'æ ‡é¢˜': break; // <*:title> OR <uof:æ ‡é¢˜>
                case 'desc': break; // <*:desc>
                case 'binary-data': break; // 10.4.5 TODO: b64 blob
    
                /* 9.2 Advanced Tables */
                case 'table-source': break; // 9.2.6
                case 'scenario': break; // 9.2.6
    
                case 'iteration': break; // 9.4.3 <table:iteration>
                case 'content-validations': break; // 9.4.4 <table:
                case 'content-validation': break; // 9.4.5 <table:
                case 'help-message': break; // 9.4.6 <table:
                case 'error-message': break; // 9.4.7 <table:
                case 'database-ranges': break; // 9.4.14 <table:database-ranges>
                case 'filter': break; // 9.5.2 <table:filter>
                case 'filter-and': break; // 9.5.3 <table:filter-and>
                case 'filter-or': break; // 9.5.4 <table:filter-or>
                case 'filter-condition': break; // 9.5.5 <table:filter-condition>
    
                case 'list-level-style-bullet': break; // 16.31 <text:
                case 'list-level-style-number': break; // 16.32 <text:
                case 'list-level-properties': break; // 17.19 <style:
    
                /* 7.3 Document Fields */
                case 'sender-firstname': // 7.3.6.2
                case 'sender-lastname': // 7.3.6.3
                case 'sender-initials': // 7.3.6.4
                case 'sender-title': // 7.3.6.5
                case 'sender-position': // 7.3.6.6
                case 'sender-email': // 7.3.6.7
                case 'sender-phone-private': // 7.3.6.8
                case 'sender-fax': // 7.3.6.9
                case 'sender-company': // 7.3.6.10
                case 'sender-phone-work': // 7.3.6.11
                case 'sender-street': // 7.3.6.12
                case 'sender-city': // 7.3.6.13
                case 'sender-postal-code': // 7.3.6.14
                case 'sender-country': // 7.3.6.15
                case 'sender-state-or-province': // 7.3.6.16
                case 'author-name': // 7.3.7.1
                case 'author-initials': // 7.3.7.2
                case 'chapter': // 7.3.8
                case 'file-name': // 7.3.9
                case 'template-name': // 7.3.9
                case 'sheet-name': // 7.3.9
                    break;
    
                case 'event-listener':
                    break;
                /* TODO: FODS Properties */
                case 'initial-creator':
                case 'creation-date':
                case 'print-date':
                case 'generator':
                case 'document-statistic':
                case 'user-defined':
                case 'editing-duration':
                case 'editing-cycles':
                    break;
    
                /* TODO: FODS Config */
                case 'config-item':
                    break;
    
                /* TODO: style tokens */
                case 'page-number': break; // TODO <text:page-number>
                case 'page-count': break; // TODO <text:page-count>
                case 'time': break; // TODO <text:time>
    
                /* 9.3 Advanced Table Cells */
                case 'cell-range-source': break; // 9.3.1 <table:
                case 'detective': break; // 9.3.2 <table:
                case 'operation': break; // 9.3.3 <table:
                case 'highlighted-range': break; // 9.3.4 <table:
    
                /* 9.6 Data Pilot Tables <table: */
                case 'data-pilot-table': // 9.6.3
                case 'source-cell-range': // 9.6.5
                case 'source-service': // 9.6.6
                case 'data-pilot-field': // 9.6.7
                case 'data-pilot-level': // 9.6.8
                case 'data-pilot-subtotals': // 9.6.9
                case 'data-pilot-subtotal': // 9.6.10
                case 'data-pilot-members': // 9.6.11
                case 'data-pilot-member': // 9.6.12
                case 'data-pilot-display-info': // 9.6.13
                case 'data-pilot-sort-info': // 9.6.14
                case 'data-pilot-layout-info': // 9.6.15
                case 'data-pilot-field-reference': // 9.6.16
                case 'data-pilot-groups': // 9.6.17
                case 'data-pilot-group': // 9.6.18
                case 'data-pilot-group-member': // 9.6.19
                    break;
    
                /* 10.3 Drawing Shapes */
                case 'rect': // 10.3.2
                    break;
    
                /* 14.6 DDE Connections */
                case 'dde-connection-decls': // 14.6.2 <text:
                case 'dde-connection-decl': // 14.6.3 <text:
                case 'dde-link': // 14.6.4 <table:
                case 'dde-source': // 14.6.5 <office:
                    break;
    
                case 'properties': break; // 13.7 <form:properties>
                case 'property': break; // 13.8 <form:property>
    
                case 'a': // 6.1.8 hyperlink
                    if(Rn[1]!== '/') {
                        atag = parsexmltag(Rn[0], false);
                        if(!atag.href) break;
                        atag.Target = atag.href; delete atag.href;
                        if(atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
                            _Ref = ods_to_csf_3D(atag.Target.slice(1));
                            atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
                        }
                    }
                    break;
    
                /* non-standard */
                case 'table-protection': break;
                case 'data-pilot-grand-total': break; // <table:
                case 'office-document-common-attrs': break; // bare
                default: switch(Rn[2]) {
                    case 'dc:':       // TODO: properties
                    case 'calcext:':  // ignore undocumented extensions
                    case 'loext:':    // ignore undocumented extensions
                    case 'ooo:':      // ignore undocumented extensions
                    case 'chartooo:': // ignore undocumented extensions
                    case 'draw:':     // TODO: drawing
                    case 'style:':    // TODO: styles
                    case 'chart:':    // TODO: charts
                    case 'form:':     // TODO: forms
                    case 'uof:':      // TODO: uof
                    case 'è¡¨:':       // TODO: uof
                    case 'å­—:':       // TODO: uof
                        break;
                    default: if(opts.WTF) throw new Error(Rn);
                }
            }
            var out = ({
                Sheets: Sheets,
                SheetNames: SheetNames,
                Workbook: WB
            });
            if(opts.bookSheets) delete out.Sheets;
            return out;
        };
    })();
    
    function parse_ods(zip, opts) {
        opts = opts || ({});
        var ods = !!safegetzipfile(zip, 'objectdata');
        if(ods) var manifest = parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);
        var content = getzipstr(zip, 'content.xml');
        if(!content) throw new Error("Missing content.xml in " + (ods ? "ODS" : "UOF")+ " file");
        var wb = parse_content_xml(ods ? content : utf8read(content), opts);
        if(safegetzipfile(zip, 'meta.xml')) wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));
        return wb;
    }
    function parse_fods(data, opts) {
        return parse_content_xml(data, opts);
    }
    
    /* OpenDocument */
    var write_styles_ods = (function() {
        var payload = '<office:document-styles ' + wxt_helper({
            'xmlns:office':   "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
            'xmlns:table':    "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
            'xmlns:style':    "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
            'xmlns:text':     "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
            'xmlns:draw':     "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
            'xmlns:fo':       "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
            'xmlns:xlink':    "http://www.w3.org/1999/xlink",
            'xmlns:dc':       "http://purl.org/dc/elements/1.1/",
            'xmlns:number':   "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
            'xmlns:svg':      "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
            'xmlns:of':       "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
            'office:version': "1.2"
        }) + '></office:document-styles>';
        return function wso(wb, opts) {
            return XML_HEADER + payload;
        };
    })();
    var write_content_ods = (function() {
        /* 6.1.2 White Space Characters */
        var write_text_p = function(text) {
            return escapexml(text)
                .replace(/  +/g, function($$){return '<text:s text:c="'+$$.length+'"/>';})
                .replace(/\t/g, "<text:tab/>")
                .replace(/\n/g, "<text:line-break/>")
                .replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
        };
    
        var null_cell_xml = '          <table:table-cell />\n';
        var covered_cell_xml = '          <table:covered-table-cell/>\n';
        var write_ws = function(ws, wb, i, opts) {
            /* Section 9 Tables */
            var o = [];
            o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '">\n');
            var R=0,C=0, range = decode_range(ws['!ref']);
            var marr = ws['!merges'] || [], mi = 0;
            var dense = Array.isArray(ws);
            for(R = 0; R < range.s.r; ++R) o.push('        <table:table-row></table:table-row>\n');
            for(; R <= range.e.r; ++R) {
                o.push('        <table:table-row>\n');
                for(C=0; C < range.s.c; ++C) o.push(null_cell_xml);
                for(; C <= range.e.c; ++C) {
                    var skip = false, ct = {}, textp = "";
                    for(mi = 0; mi != marr.length; ++mi) {
                        if(marr[mi].s.c > C) continue;
                        if(marr[mi].s.r > R) continue;
                        if(marr[mi].e.c < C) continue;
                        if(marr[mi].e.r < R) continue;
                        if(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                        ct['table:number-columns-spanned'] = (marr[mi].e.c - marr[mi].s.c + 1);
                        ct['table:number-rows-spanned'] =    (marr[mi].e.r - marr[mi].s.r + 1);
                        break;
                    }
                    if(skip) { o.push(covered_cell_xml); continue; }
                    var ref = encode_cell({r:R, c:C}), cell = dense ? (ws[R]||[])[C]: ws[ref];
                    if(cell && cell.f) {
                        ct['table:formula'] = escapexml(csf_to_ods_formula(cell.f));
                        if(cell.F) {
                            if(cell.F.substr(0, ref.length) == ref) {
                                var _Fref = decode_range(cell.F);
                                ct['table:number-matrix-columns-spanned'] = (_Fref.e.c - _Fref.s.c + 1);
                                ct['table:number-matrix-rows-spanned'] =    (_Fref.e.r - _Fref.s.r + 1);
                            }
                        }
                    }
                    if(!cell) { o.push(null_cell_xml); continue; }
                    switch(cell.t) {
                        case 'b':
                            textp = (cell.v ? 'TRUE' : 'FALSE');
                            ct['office:value-type'] = "boolean";
                            ct['office:boolean-value'] = (cell.v ? 'true' : 'false');
                            break;
                        case 'n':
                            textp = (cell.w||String(cell.v||0));
                            ct['office:value-type'] = "float";
                            ct['office:value'] = (cell.v||0);
                            break;
                        case 's': case 'str':
                            textp = cell.v;
                            ct['office:value-type'] = "string";
                            break;
                        case 'd':
                            textp = (cell.w||(parseDate(cell.v).toISOString()));
                            ct['office:value-type'] = "date";
                            ct['office:date-value'] = (parseDate(cell.v).toISOString());
                            ct['table:style-name'] = "ce1";
                            break;
                        //case 'e':
                        default: o.push(null_cell_xml); continue;
                    }
                    var text_p = write_text_p(textp);
                    if(cell.l && cell.l.Target) {
                        var _tgt = cell.l.Target; _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
                        text_p = writextag('text:a', text_p, {'xlink:href': _tgt});
                    }
                    o.push('          ' + writextag('table:table-cell', writextag('text:p', text_p, {}), ct) + '\n');
                }
                o.push('        </table:table-row>\n');
            }
            o.push('      </table:table>\n');
            return o.join("");
        };
    
        var write_automatic_styles_ods = function(o) {
            o.push(' <office:automatic-styles>\n');
            o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
            o.push('   <number:month number:style="long"/>\n');
            o.push('   <number:text>/</number:text>\n');
            o.push('   <number:day number:style="long"/>\n');
            o.push('   <number:text>/</number:text>\n');
            o.push('   <number:year/>\n');
            o.push('  </number:date-style>\n');
            o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
            o.push(' </office:automatic-styles>\n');
        };
    
        return function wcx(wb, opts) {
            var o = [XML_HEADER];
            /* 3.1.3.2 */
            var attr = wxt_helper({
                'xmlns:office':       "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
                'xmlns:table':        "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
                'xmlns:style':        "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
                'xmlns:text':         "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
                'xmlns:draw':         "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
                'xmlns:fo':           "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
                'xmlns:xlink':        "http://www.w3.org/1999/xlink",
                'xmlns:dc':           "http://purl.org/dc/elements/1.1/",
                'xmlns:meta':         "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
                'xmlns:number':       "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
                'xmlns:presentation': "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
                'xmlns:svg':          "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
                'xmlns:chart':        "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
                'xmlns:dr3d':         "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
                'xmlns:math':         "http://www.w3.org/1998/Math/MathML",
                'xmlns:form':         "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
                'xmlns:script':       "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
                'xmlns:ooo':          "http://openoffice.org/2004/office",
                'xmlns:ooow':         "http://openoffice.org/2004/writer",
                'xmlns:oooc':         "http://openoffice.org/2004/calc",
                'xmlns:dom':          "http://www.w3.org/2001/xml-events",
                'xmlns:xforms':       "http://www.w3.org/2002/xforms",
                'xmlns:xsd':          "http://www.w3.org/2001/XMLSchema",
                'xmlns:xsi':          "http://www.w3.org/2001/XMLSchema-instance",
                'xmlns:sheet':        "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
                'xmlns:rpt':          "http://openoffice.org/2005/report",
                'xmlns:of':           "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
                'xmlns:xhtml':        "http://www.w3.org/1999/xhtml",
                'xmlns:grddl':        "http://www.w3.org/2003/g/data-view#",
                'xmlns:tableooo':     "http://openoffice.org/2009/table",
                'xmlns:drawooo':      "http://openoffice.org/2010/draw",
                'xmlns:calcext':      "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
                'xmlns:loext':        "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
                'xmlns:field':        "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
                'xmlns:formx':        "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
                'xmlns:css3t':        "http://www.w3.org/TR/css3-text/",
                'office:version':     "1.2"
            });
    
            var fods = wxt_helper({
                'xmlns:config':    "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
                'office:mimetype': "application/vnd.oasis.opendocument.spreadsheet"
            });
    
            if(opts.bookType == "fods") o.push('<office:document' + attr + fods + '>\n');
            else o.push('<office:document-content' + attr  + '>\n');
            write_automatic_styles_ods(o);
            o.push('  <office:body>\n');
            o.push('    <office:spreadsheet>\n');
            for(var i = 0; i != wb.SheetNames.length; ++i) o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts));
            o.push('    </office:spreadsheet>\n');
            o.push('  </office:body>\n');
            if(opts.bookType == "fods") o.push('</office:document>');
            else o.push('</office:document-content>');
            return o.join("");
        };
    })();
    
    function write_ods(wb, opts) {
        if(opts.bookType == "fods") return write_content_ods(wb, opts);
    
    var zip = new jszip();
        var f = "";
    
        var manifest = [];
        var rdf = [];
    
        /* Part 3 Section 3.3 MIME Media Type */
        f = "mimetype";
        zip.file(f, "application/vnd.oasis.opendocument.spreadsheet");
    
        /* Part 1 Section 2.2 Documents */
        f = "content.xml";
        zip.file(f, write_content_ods(wb, opts));
        manifest.push([f, "text/xml"]);
        rdf.push([f, "ContentFile"]);
    
        /* TODO: these are hard-coded styles to satiate excel */
        f = "styles.xml";
        zip.file(f, write_styles_ods(wb, opts));
        manifest.push([f, "text/xml"]);
        rdf.push([f, "StylesFile"]);
    
        /* TODO: this is hard-coded to satiate excel */
        f = "meta.xml";
        zip.file(f, write_meta_ods(wb, opts));
        manifest.push([f, "text/xml"]);
        rdf.push([f, "MetadataFile"]);
    
        /* Part 3 Section 6 Metadata Manifest File */
        f = "manifest.rdf";
        zip.file(f, write_rdf(rdf, opts));
        manifest.push([f, "application/rdf+xml"]);
    
        /* Part 3 Section 4 Manifest File */
        f = "META-INF/manifest.xml";
        zip.file(f, write_manifest(manifest, opts));
    
        return zip;
    }
    
    function write_sheet_index(wb, sheet) {
        if(!sheet) return 0;
        var idx = wb.SheetNames.indexOf(sheet);
        if(idx == -1) throw new Error("Sheet not found: " + sheet);
        return idx;
    }
    
    function write_obj_str(factory) {
        return function write_str(wb, o) {
            var idx = write_sheet_index(wb, o.sheet);
            return factory.from_sheet(wb.Sheets[wb.SheetNames[idx]], o, wb);
        };
    }
    
    var write_htm_str = write_obj_str(HTML_);
    var write_csv_str = write_obj_str({from_sheet:sheet_to_csv});
    var write_slk_str = write_obj_str(SYLK);
    var write_dif_str = write_obj_str(DIF);
    var write_prn_str = write_obj_str(PRN);
    var write_rtf_str = write_obj_str(RTF);
    var write_txt_str = write_obj_str({from_sheet:sheet_to_txt});
    // $FlowIgnore
    var write_dbf_buf = write_obj_str(DBF);
    var write_eth_str = write_obj_str(ETH);
    
    function fix_opts_func(defaults) {
        return function fix_opts(opts) {
            for(var i = 0; i != defaults.length; ++i) {
                var d = defaults[i];
                if(opts[d[0]] === undefined) opts[d[0]] = d[1];
                if(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);
            }
        };
    }
    
    var fix_read_opts = fix_opts_func([
        ['cellNF', false], /* emit cell number format string as .z */
        ['cellHTML', true], /* emit html string as .h */
        ['cellFormula', true], /* emit formulae as .f */
        ['cellStyles', false], /* emits style/theme as .s */
        ['cellText', true], /* emit formatted text as .w */
        ['cellDates', false], /* emit date cells with type `d` */
    
        ['sheetStubs', false], /* emit empty cells */
        ['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */
    
        ['bookDeps', false], /* parse calculation chains */
        ['bookSheets', false], /* only try to get sheet names (no Sheets) */
        ['bookProps', false], /* only try to get properties (no Sheets) */
        ['bookFiles', false], /* include raw file structure (keys, files, cfb) */
        ['bookVBA', false], /* include vba raw data (vbaraw) */
    
        ['password',''], /* password */
        ['WTF', false] /* WTF mode (throws errors) */
    ]);
    
    
    var fix_write_opts = fix_opts_func([
        ['cellDates', false], /* write date cells with type `d` */
    
        ['bookSST', false], /* Generate Shared String Table */
    
        ['bookType', 'xlsx'], /* Type of workbook (xlsx/m/b) */
    
        ['compression', false], /* Use file compression */
    
        ['WTF', false] /* WTF mode (throws errors) */
    ]);
    function get_sheet_type(n) {
        if(RELS.WS.indexOf(n) > -1) return "sheet";
        if(RELS.CS && n == RELS.CS) return "chart";
        if(RELS.DS && n == RELS.DS) return "dialog";
        if(RELS.MS && n == RELS.MS) return "macro";
        return (n && n.length) ? n : "sheet";
    }
    function safe_parse_wbrels(wbrels, sheets) {
        if(!wbrels) return 0;
        try {
            wbrels = sheets.map(function pwbr(w) { if(!w.id) w.id = w.strRelID; return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)]; });
        } catch(e) { return null; }
        return !wbrels || wbrels.length === 0 ? null : wbrels;
    }
    
    function safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
        try {
            sheetRels[sheet]=parse_rels(getzipstr(zip, relsPath, true), path);
            var data = getzipdata(zip, path);
            switch(stype) {
                case 'sheet': sheets[sheet]=parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
                case 'chart':
                    var cs = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                    sheets[sheet] = cs;
                    if(!cs || !cs['!chart']) break;
                    var dfile = resolve_path(cs['!chart'].Target, path);
                    var drelsp = get_rels_path(dfile);
                    var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
                    var chartp = resolve_path(draw, dfile);
                    var crelsp = get_rels_path(chartp);
                    cs = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, cs);
                    break;
                case 'macro': sheets[sheet]=parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
                case 'dialog': sheets[sheet]=parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
            }
        } catch(e) { if(opts.WTF) throw e; }
    }
    
    var nodirs = function nodirs(x){return x.slice(-1) != '/';};
    function strip_front_slash(x) { return x.charAt(0) == '/' ? x.slice(1) : x; }
    
    function parse_zip(zip, opts) {
        make_ssf(SSF);
        opts = opts || {};
        fix_read_opts(opts);
    
        /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */
        if(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);
        /* UOC */
        if(safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);
        /* Numbers */
        if(safegetzipfile(zip, 'Index/Document.iwa')) throw new Error('Unsupported NUMBERS file');
    
        var entries = keys(zip.files).filter(nodirs).sort();
        var dir = parse_ct((getzipstr(zip, '[Content_Types].xml')), opts);
        var xlsb = false;
        var sheets, binname;
        if(dir.workbooks.length === 0) {
            binname = "xl/workbook.xml";
            if(getzipdata(zip,binname, true)) dir.workbooks.push(binname);
        }
        if(dir.workbooks.length === 0) {
            binname = "xl/workbook.bin";
            if(!getzipdata(zip,binname,true)) throw new Error("Could not find workbook");
            dir.workbooks.push(binname);
            xlsb = true;
        }
        if(dir.workbooks[0].slice(-3) == "bin") xlsb = true;
    
        var themes = ({});
        var styles = ({});
        if(!opts.bookSheets && !opts.bookProps) {
            strs = [];
            if(dir.sst) strs=parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
    
            if(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//,''), true)||"",dir.themes[0], opts);
    
            if(dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
        }
    
        var externbooks = dir.links.map(function(link) {
            return parse_xlink(getzipdata(zip, strip_front_slash(link)), link, opts);
        });
    
        var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
    
        var props = {}, propdata = "";
    
        if(dir.coreprops.length) {
            propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
            if(propdata) props = parse_core_props(propdata);
            if(dir.extprops.length !== 0) {
                propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
                if(propdata) parse_ext_props(propdata, props, opts);
            }
        }
    
        var custprops = {};
        if(!opts.bookSheets || opts.bookProps) {
            if (dir.custprops.length !== 0) {
                propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
                if(propdata) custprops = parse_cust_props(propdata, opts);
            }
        }
    
        var out = ({});
        if(opts.bookSheets || opts.bookProps) {
            if(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });
            else if(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;
            if(opts.bookProps) { out.Props = props; out.Custprops = custprops; }
            if(opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;
            if(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
        }
        sheets = {};
    
        var deps = {};
        if(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)),dir.calcchain,opts);
    
        var i=0;
        var sheetRels = ({});
        var path, relsPath;
    
        {
            var wbsheets = wb.Sheets;
            props.Worksheets = wbsheets.length;
            props.SheetNames = [];
            for(var j = 0; j != wbsheets.length; ++j) {
                props.SheetNames[j] = wbsheets[j].name;
            }
        }
    
        var wbext = xlsb ? "bin" : "xml";
        var wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
        var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile);
        if(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
        /* Numbers iOS hack */
        var nmode = (getzipdata(zip,"xl/worksheets/sheet.xml",true))?1:0;
        for(i = 0; i != props.Worksheets; ++i) {
            var stype = "sheet";
            if(wbrels && wbrels[i]) {
                path = 'xl/' + (wbrels[i][1]).replace(/[\/]?xl\//, "");
                stype = wbrels[i][2];
            } else {
                path = 'xl/worksheets/sheet'+(i+1-nmode)+"." + wbext;
                path = path.replace(/sheet0\./,"sheet.");
            }
            relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
            safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
        }
    
        if(dir.comments) parse_comments(zip, dir.comments, sheets, sheetRels, opts);
    
        out = ({
            Directory: dir,
            Workbook: wb,
            Props: props,
            Custprops: custprops,
            Deps: deps,
            Sheets: sheets,
            SheetNames: props.SheetNames,
            Strings: strs,
            Styles: styles,
            Themes: themes,
            SSF: SSF.get_table()
        });
        if(opts.bookFiles) {
            out.keys = entries;
            out.files = zip.files;
        }
        if(opts.bookVBA) {
            if(dir.vba.length > 0) out.vbaraw = getzipdata(zip,strip_front_slash(dir.vba[0]),true);
            else if(dir.defaults && dir.defaults.bin === 'application/vnd.ms-office.vbaProject') out.vbaraw = getzipdata(zip,'xl/vbaProject.bin',true);
        }
        return out;
    }
    
    /* [MS-OFFCRYPTO] 2.1.1 */
    function parse_xlsxcfb(cfb, _opts) {
        var opts = _opts || {};
        var f = '/!DataSpaces/Version';
        var data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var version = parse_DataSpaceVersionInfo(data.content);
    
        /* 2.3.4.1 */
        f = '/!DataSpaces/DataSpaceMap';
        data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var dsm = parse_DataSpaceMap(data.content);
        if(dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
            throw new Error("ECMA-376 Encrypted file bad " + f);
    
        /* 2.3.4.2 */
        f = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';
        data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var seds = parse_DataSpaceDefinition(data.content);
        if(seds.length != 1 || seds[0] != "StrongEncryptionTransform")
            throw new Error("ECMA-376 Encrypted file bad " + f);
    
        /* 2.3.4.3 */
        f = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';
        data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var hdr = parse_Primary(data.content);
    
        f = '/EncryptionInfo';
        data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var einfo = parse_EncryptionInfo(data.content);
    
        /* 2.3.4.4 */
        f = '/EncryptedPackage';
        data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    
    if(einfo[0] == 0x04 && typeof decrypt_agile !== 'undefined') return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
    if(einfo[0] == 0x02 && typeof decrypt_std76 !== 'undefined') return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
        throw new Error("File is password-protected");
    }
    
    function write_zip(wb, opts) {
        _shapeid = 1024;
        if(opts.bookType == "ods") return write_ods(wb, opts);
        if(wb && !wb.SSF) {
            wb.SSF = SSF.get_table();
        }
        if(wb && wb.SSF) {
            make_ssf(SSF); SSF.load_table(wb.SSF);
            // $FlowIgnore
            opts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;
            opts.ssf = wb.SSF;
        }
        opts.rels = {}; opts.wbrels = {};
        opts.Strings = []; opts.Strings.Count = 0; opts.Strings.Unique = 0;
        var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
        var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
        var ct = new_ct();
        fix_write_opts(opts = opts || {});
    var zip = new jszip();
        var f = "", rId = 0;
    
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, {revssf:{"General":0}});
    
        if(!wb.Props) wb.Props = {};
    
        f = "docProps/core.xml";
        zip.file(f, write_core_props(wb.Props, opts));
        ct.coreprops.push(f);
        add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
    
    f = "docProps/app.xml";
        if(wb.Props && wb.Props.SheetNames){/* empty */}
        else if(!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
        // $FlowIgnore
        else wb.Props.SheetNames = wb.SheetNames.map(function(x,i) { return [(wb.Workbook.Sheets[i]||{}).Hidden != 2, x];}).filter(function(x) { return x[0]; }).map(function(x) { return x[1]; });
        wb.Props.Worksheets = wb.Props.SheetNames.length;
        zip.file(f, write_ext_props(wb.Props, opts));
        ct.extprops.push(f);
        add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
    
        if(wb.Custprops !== wb.Props && keys(wb.Custprops||{}).length > 0) {
            f = "docProps/custom.xml";
            zip.file(f, write_cust_props(wb.Custprops, opts));
            ct.custprops.push(f);
            add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
        }
    
        f = "xl/workbook." + wbext;
        zip.file(f, write_wb(wb, f, opts));
        ct.workbooks.push(f);
        add_rels(opts.rels, 1, f, RELS.WB);
    
        for(rId=1;rId <= wb.SheetNames.length; ++rId) {
            var wsrels = {'!id':{}};
            var ws = wb.Sheets[wb.SheetNames[rId-1]];
            var _type = (ws || {})["!type"] || "sheet";
            switch(_type) {
            case "chart": /*
                f = "xl/chartsheets/sheet" + rId + "." + wbext;
                zip.file(f, write_cs(rId-1, f, opts, wb, wsrels));
                ct.charts.push(f);
                add_rels(wsrels, -1, "chartsheets/sheet" + rId + "." + wbext, RELS.CS);
                break; */
                /* falls through */
            default:
                f = "xl/worksheets/sheet" + rId + "." + wbext;
                zip.file(f, write_ws(rId-1, f, opts, wb, wsrels));
                ct.sheets.push(f);
                add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
            }
    
            if(ws) {
                var comments = ws['!comments'];
                if(comments && comments.length > 0) {
                    var cf = "xl/comments" + rId + "." + wbext;
                    zip.file(cf, write_cmnt(comments, cf, opts));
                    ct.comments.push(cf);
                    add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
                }
                if(ws['!legacy']) {
                    zip.file("xl/drawings/vmlDrawing" + (rId) + ".vml", write_comments_vml(rId, ws['!comments']));
                }
                delete ws['!comments'];
                delete ws['!legacy'];
            }
    
            if(wsrels['!id'].rId1) zip.file(get_rels_path(f), write_rels(wsrels));
        }
    
        if(opts.Strings != null && opts.Strings.length > 0) {
            f = "xl/sharedStrings." + wbext;
            zip.file(f, write_sst(opts.Strings, f, opts));
            ct.strs.push(f);
            add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
        }
    
        /* TODO: something more intelligent with themes */
    
        f = "xl/theme/theme1.xml";
        zip.file(f, write_theme(wb.Themes, opts));
        ct.themes.push(f);
        add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
    
        /* TODO: something more intelligent with styles */
    
        f = "xl/styles." + wbext;
        zip.file(f, write_sty(wb, f, opts));
        ct.styles.push(f);
        add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
    
        if(wb.vbaraw && vbafmt) {
            f = "xl/vbaProject.bin";
            zip.file(f, wb.vbaraw);
            ct.vba.push(f);
            add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
        }
    
        zip.file("[Content_Types].xml", write_ct(ct, opts));
        zip.file('_rels/.rels', write_rels(opts.rels));
        zip.file('xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));
    
        delete opts.revssf; delete opts.ssf;
        return zip;
    }
    function firstbyte(f,o) {
        var x = "";
        switch((o||{}).type || "base64") {
            case 'buffer': return [f[0], f[1], f[2], f[3]];
            case 'base64': x = Base64.decode(f.substr(0,24)); break;
            case 'binary': x = f; break;
            case 'array':  return [f[0], f[1], f[2], f[3]];
            default: throw new Error("Unrecognized type " + (o && o.type || "undefined"));
        }
        return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3)];
    }
    
    function read_cfb(cfb, opts) {
        if(CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
        return parse_xlscfb(cfb, opts);
    }
    
    function read_zip(data, opts) {
    var zip, d = data;
        var o = opts||{};
        if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
        switch(o.type) {
            case "base64": zip = new jszip(d, { base64:true }); break;
            case "binary": case "array": zip = new jszip(d, { base64:false }); break;
            case "buffer": zip = new jszip(d); break;
            default: throw new Error("Unrecognized type " + o.type);
        }
        return parse_zip(zip, o);
    }
    
    function read_plaintext(data, o) {
        var i = 0;
        main: while(i < data.length) switch(data.charCodeAt(i)) {
            case 0x0A: case 0x0D: case 0x20: ++i; break;
            case 0x3C: return parse_xlml(data.slice(i),o);
            default: break main;
        }
        return PRN.to_workbook(data, o);
    }
    
    function read_plaintext_raw(data, o) {
        var str = "", bytes = firstbyte(data, o);
        switch(o.type) {
            case 'base64': str = Base64.decode(data); break;
            case 'binary': str = data; break;
            case 'buffer': str = data.toString('binary'); break;
            case 'array': str = cc2str(data); break;
            default: throw new Error("Unrecognized type " + o.type);
        }
        if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
        return read_plaintext(str, o);
    }
    
    function read_utf16(data, o) {
        var d = data;
        if(o.type == 'base64') d = Base64.decode(d);
        d = cptable.utils.decode(1200, d.slice(2), 'str');
        o.type = "binary";
        return read_plaintext(d, o);
    }
    
    function bstrify(data) {
        return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
    }
    
    function read_prn(data, d, o, str) {
        if(str) { o.type = "string"; return PRN.to_workbook(data, o); }
        return PRN.to_workbook(d, o);
    }
    
    function readSync(data, opts) {
        reset_cp();
        if(typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), opts);
        var d = data, n = [0,0,0,0], str = false;
        var o = opts||{};
        _ssfopts = {};
        if(o.dateNF) _ssfopts.dateNF = o.dateNF;
        if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
        if(o.type == "file") { o.type = "buffer"; d = _fs.readFileSync(data); }
        if(o.type == "string") { str = true; o.type = "binary"; d = bstrify(data); }
        switch((n = firstbyte(d, o))[0]) {
            case 0xD0: return read_cfb(CFB.read(d, o), o);
            case 0x09: return parse_xlscfb(d, o);
            case 0x3C: return parse_xlml(d, o);
            case 0x49: if(n[1] === 0x44) return read_wb_ID(d, o); break;
            case 0x54: if(n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o); break;
            case 0x50: if(n[1] === 0x4B && n[2] < 0x20 && n[3] < 0x20) return read_zip(d, o); break;
            case 0xEF: return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);
            case 0xFF: if(n[1] === 0xFE) { return read_utf16(d, o); } break;
            case 0x00: if(n[1] === 0x00 && n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o); break;
            case 0x03: case 0x83: case 0x8B: case 0x8C: return DBF.to_workbook(d, o);
            case 0x7B: if(n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o); break;
            case 0x0A: case 0x0D: case 0x20: return read_plaintext_raw(d, o);
        }
        if(n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
        if(0x20>n[0]||n[0]>0x7F) throw new Error("Unsupported file " + n.join("|"));
        return read_prn(data, d, o, str);
    }
    
    function readFileSync(filename, opts) {
        var o = opts||{}; o.type = 'file';
        return readSync(filename, o);
    }
    function write_zip_type(wb, opts) {
        var o = opts||{};
        var z = write_zip(wb, o);
        var oopts = {};
        if(o.compression) oopts.compression = 'DEFLATE';
        switch(o.type) {
            case "base64": oopts.type = "base64"; break;
            case "binary": oopts.type = "string"; break;
            case "string": throw new Error("'string' output type invalid for '" + o.bookType + ' files');
            case "buffer":
            case "file": oopts.type = "nodebuffer"; break;
            default: throw new Error("Unrecognized type " + o.type);
        }
        if(o.type === "file") return _fs.writeFileSync(o.file, z.generate(oopts));
        var out = z.generate(oopts);
        // $FlowIgnore
        return o.type == "string" ? utf8read(out) : out;
    }
    
    function write_cfb_type(wb, opts) {
        var o = opts||{};
        var cfb = write_xlscfb(wb, o);
        switch(o.type) {
            case "base64": case "binary": break;
            case "buffer": case "array": o.type = ""; break;
            case "file": return _fs.writeFileSync(o.file, CFB.write(cfb, {type:'buffer'}));
            case "string": throw new Error("'string' output type invalid for '" + o.bookType + ' files');
            default: throw new Error("Unrecognized type " + o.type);
        }
        return CFB.write(cfb, o);
    }
    
    function write_string_type(out, opts, bom) {
        if(!bom) bom = "";
        var o = bom + out;
        switch(opts.type) {
            case "base64": return Base64.encode(utf8write(o));
            case "binary": return utf8write(o);
            case "string": return out;
            case "file": return _fs.writeFileSync(opts.file, o, 'utf8');
            case "buffer": {
                if(has_buf) return new Buffer(o, 'utf8');
                else return write_string_type(o, {type:'binary'}).split("").map(function(c) { return c.charCodeAt(0); });
            }
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    
    function write_stxt_type(out, opts) {
        switch(opts.type) {
            case "base64": return Base64.encode(out);
            case "binary": return out;
            case "string": return out; /* override in sheet_to_txt */
            case "file": return _fs.writeFileSync(opts.file, out, 'binary');
            case "buffer": {
                if(has_buf) return new Buffer(out, 'binary');
                else return out.split("").map(function(c) { return c.charCodeAt(0); });
            }
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    
    /* TODO: test consistency */
    function write_binary_type(out, opts) {
        switch(opts.type) {
            case "string":
            case "base64":
            case "binary":
                var bstr = "";
                // $FlowIgnore
                for(var i = 0; i < out.length; ++i) bstr += String.fromCharCode(out[i]);
                return opts.type == 'base64' ? Base64.encode(bstr) : opts.type == 'string' ? utf8read(bstr) : bstr;
            case "file": return _fs.writeFileSync(opts.file, out);
            case "buffer": return out;
            default: throw new Error("Unrecognized type " + opts.type);
        }
    }
    
    function writeSync(wb, opts) {
        check_wb(wb);
        var o = opts||{};
        if(o.type == "array") { o.type = "binary"; var out = (writeSync(wb, o)); o.type = "array"; return s2ab(out); }
        switch(o.bookType || 'xlsb') {
            case 'xml':
            case 'xlml': return write_string_type(write_xlml(wb, o), o);
            case 'slk':
            case 'sylk': return write_string_type(write_slk_str(wb, o), o);
            case 'html': return write_string_type(write_htm_str(wb, o), o);
            case 'txt': return write_stxt_type(write_txt_str(wb, o), o);
            case 'csv': return write_string_type(write_csv_str(wb, o), o, "\ufeff");
            case 'dif': return write_string_type(write_dif_str(wb, o), o);
            // $FlowIgnore
            case 'dbf': return write_binary_type(write_dbf_buf(wb, o), o);
            case 'prn': return write_string_type(write_prn_str(wb, o), o);
            case 'rtf': return write_string_type(write_rtf_str(wb, o), o);
            case 'eth': return write_string_type(write_eth_str(wb, o), o);
            case 'fods': return write_string_type(write_ods(wb, o), o);
            case 'biff2': if(!o.biff) o.biff = 2; /* falls through */
            case 'biff3': if(!o.biff) o.biff = 3; /* falls through */
            case 'biff4': if(!o.biff) o.biff = 4; return write_binary_type(write_biff_buf(wb, o), o);
            case 'biff5': if(!o.biff) o.biff = 5; /* falls through */
            case 'biff8':
            case 'xla':
            case 'xls': if(!o.biff) o.biff = 8; return write_cfb_type(wb, o);
            case 'xlsx':
            case 'xlsm':
            case 'xlam':
            case 'xlsb':
            case 'ods': return write_zip_type(wb, o);
            default: throw new Error ("Unrecognized bookType |" + o.bookType + "|");
        }
    }
    
    function resolve_book_type(o) {
        if(o.bookType) return;
        var _BT = {
            "xls": "biff8",
            "htm": "html",
            "slk": "sylk",
            "socialcalc": "eth",
            "Sh33tJS": "WTF"
        };
        var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
        if(ext.match(/^\.[a-z]+$/)) o.bookType = ext.slice(1);
        o.bookType = _BT[o.bookType] || o.bookType;
    }
    
    function writeFileSync(wb, filename, opts) {
        var o = opts||{}; o.type = 'file';
        o.file = filename;
        resolve_book_type(o);
        return writeSync(wb, o);
    }
    
    function writeFileAsync(filename, wb, opts, cb) {
        var o = opts||{}; o.type = 'file';
        o.file = filename;
        resolve_book_type(o);
        o.type = 'buffer';
        var _cb = cb; if(!(_cb instanceof Function)) _cb = (opts);
        return _fs.writeFile(filename, writeSync(wb, o), _cb);
    }
    function sheet_to_json(sheet, opts) {
        if(sheet == null || sheet["!ref"] == null) return [];
        var val = {t:'n',v:0}, header = 0, offset = 1, hdr = [], isempty = true, v=0, vv="";
        var r = {s:{r:0,c:0},e:{r:0,c:0}};
        var o = opts || {};
        var raw = o.raw;
        var defval = o.defval;
        var range = o.range != null ? o.range : sheet["!ref"];
        if(o.header === 1) header = 1;
        else if(o.header === "A") header = 2;
        else if(Array.isArray(o.header)) header = 3;
        switch(typeof range) {
            case 'string': r = safe_decode_range(range); break;
            case 'number': r = safe_decode_range(sheet["!ref"]); r.s.r = range; break;
            default: r = range;
        }
        if(header > 0) offset = 0;
        var rr = encode_row(r.s.r);
        var cols = [];
        var out = [];
        var outi = 0, counter = 0;
        var dense = Array.isArray(sheet);
        var R = r.s.r, C = 0, CC = 0;
        if(dense && !sheet[R]) sheet[R] = [];
        for(C = r.s.c; C <= r.e.c; ++C) {
            cols[C] = encode_col(C);
            val = dense ? sheet[R][C] : sheet[cols[C] + rr];
            switch(header) {
                case 1: hdr[C] = C - r.s.c; break;
                case 2: hdr[C] = cols[C]; break;
                case 3: hdr[C] = o.header[C - r.s.c]; break;
                default:
                    if(val == null) val = {w: "__EMPTY", t: "s"};
                    vv = v = format_cell(val, null, o);
                    counter = 0;
                    for(CC = 0; CC < hdr.length; ++CC) if(hdr[CC] == vv) vv = v + "_" + (++counter);
                    hdr[C] = vv;
            }
        }
        var row = (header === 1) ? [] : {};
        for (R = r.s.r + offset; R <= r.e.r; ++R) {
            rr = encode_row(R);
            isempty = true;
            if(header === 1) row = [];
            else {
                row = {};
                if(Object.defineProperty) try { Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false}); } catch(e) { row.__rowNum__ = R; }
                else row.__rowNum__ = R;
            }
            if(!dense || sheet[R]) for (C = r.s.c; C <= r.e.c; ++C) {
                val = dense ? sheet[R][C] : sheet[cols[C] + rr];
                if(val === undefined || val.t === undefined) {
                    if(defval === undefined) continue;
                    if(hdr[C] != null) { row[hdr[C]] = defval; isempty = false; }
                    continue;
                }
                v = val.v;
                switch(val.t){
                    case 'z': if(v == null) break; continue;
                    case 'e': continue;
                    case 's': case 'd': case 'b': case 'n': break;
                    default: throw new Error('unrecognized type ' + val.t);
                }
                if(hdr[C] != null) {
                    if(v == null) {
                        if(defval !== undefined) row[hdr[C]] = defval;
                        else if(raw && v === null) row[hdr[C]] = null;
                        else continue;
                    } else {
                        row[hdr[C]] = raw ? v : format_cell(val,v,o);
                    }
                    isempty = false;
                }
            }
            if((isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row;
        }
        out.length = outi;
        return out;
    }
    
    var qreg = /"/g;
    function make_csv_row(sheet, r, R, cols, fs, rs, FS, o) {
        var isempty = true;
        var row = [], txt = "", rr = encode_row(R);
        for(var C = r.s.c; C <= r.e.c; ++C) {
            if (!cols[C]) continue;
            var val = o.dense ? (sheet[R]||[])[C]: sheet[cols[C] + rr];
            if(val == null) txt = "";
            else if(val.v != null) {
                isempty = false;
                txt = ''+format_cell(val, null, o);
                for(var i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) {txt = "\"" + txt.replace(qreg, '""') + "\""; break; }
                if(txt == "ID") txt = '"ID"';
            } else if(val.f != null && !val.F) {
                isempty = false;
                txt = '=' + val.f; if(txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
            } else txt = "";
            /* NOTE: Excel CSV does not support array formulae */
            row.push(txt);
        }
        if(o.blankrows === false && isempty) return null;
        return row.join(FS);
    }
    
    function sheet_to_csv(sheet, opts) {
        var out = [];
        var o = opts == null ? {} : opts;
        if(sheet == null || sheet["!ref"] == null) return "";
        var r = safe_decode_range(sheet["!ref"]);
        var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
        var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
        var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
        var row = "", cols = [];
        o.dense = Array.isArray(sheet);
        var colinfo = o.skipHidden && sheet["!cols"] || [];
        var rowinfo = o.skipHidden && sheet["!rows"] || [];
        for(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);
        for(var R = r.s.r; R <= r.e.r; ++R) {
            if ((rowinfo[R]||{}).hidden) continue;
            row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
            if(row == null) { continue; }
            if(o.strip) row = row.replace(endregex,"");
            out.push(row + RS);
        }
        delete o.dense;
        return out.join("");
    }
    
    function sheet_to_txt(sheet, opts) {
        if(!opts) opts = {}; opts.FS = "\t"; opts.RS = "\n";
        var s = sheet_to_csv(sheet, opts);
        if(typeof cptable == 'undefined' || opts.type == 'string') return s;
        var o = cptable.utils.encode(1200, s, 'str');
        return "\xff\xfe" + o;
    }
    
    function sheet_to_formulae(sheet) {
        var y = "", x, val="";
        if(sheet == null || sheet["!ref"] == null) return [];
        var r = safe_decode_range(sheet['!ref']), rr = "", cols = [], C;
        var cmds = [];
        var dense = Array.isArray(sheet);
        for(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
        for(var R = r.s.r; R <= r.e.r; ++R) {
            rr = encode_row(R);
            for(C = r.s.c; C <= r.e.c; ++C) {
                y = cols[C] + rr;
                x = dense ? (sheet[R]||[])[C] : sheet[y];
                val = "";
                if(x === undefined) continue;
                else if(x.F != null) {
                    y = x.F;
                    if(!x.f) continue;
                    val = x.f;
                    if(y.indexOf(":") == -1) y = y + ":" + y;
                }
                if(x.f != null) val = x.f;
                else if(x.t == 'z') continue;
                else if(x.t == 'n' && x.v != null) val = "" + x.v;
                else if(x.t == 'b') val = x.v ? "TRUE" : "FALSE";
                else if(x.w !== undefined) val = "'" + x.w;
                else if(x.v === undefined) continue;
                else if(x.t == 's') val = "'" + x.v;
                else val = ""+x.v;
                cmds[cmds.length] = y + "=" + val;
            }
        }
        return cmds;
    }
    
    function sheet_add_json(_ws, js, opts) {
        var o = opts || {};
        var offset = +!o.skipHeader;
        var ws = _ws || ({});
        var _R = 0, _C = 0;
        if(ws && o.origin != null) {
            if(typeof o.origin == 'number') _R = o.origin;
            else {
                var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
                _R = _origin.r; _C = _origin.c;
            }
        }
        var cell;
        var range = ({s: {c:0, r:0}, e: {c:_C, r:_R + js.length - 1 + offset}});
        if(ws['!ref']) {
            var _range = safe_decode_range(ws['!ref']);
            range.e.c = Math.max(range.e.c, _range.e.c);
            range.e.r = Math.max(range.e.r, _range.e.r);
            if(_R == -1) { _R = range.e.r + 1; range.e.r = _R + js.length - 1 + offset; }
        }
        var hdr = o.header || [], C = 0;
    
        js.forEach(function (JS, R) {
            keys(JS).filter(function(x) { return JS.hasOwnProperty(x); }).forEach(function(k) {
                if((C=hdr.indexOf(k)) == -1) hdr[C=hdr.length] = k;
                var v = JS[k];
                var t = 'z';
                var z = "";
                if(typeof v == 'number') t = 'n';
                else if(typeof v == 'boolean') t = 'b';
                else if(typeof v == 'string') t = 's';
                else if(v instanceof Date) {
                    t = 'd';
                    if(!o.cellDates) { t = 'n'; v = datenum(v); }
                    z = o.dateNF || SSF._table[14];
                }
                ws[encode_cell({c:_C + C,r:_R + R + offset})] = cell = ({t:t, v:v});
                if(z) cell.z = z;
            });
        });
        range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
        var __R = encode_row(_R);
        if(offset) for(C = 0; C < hdr.length; ++C) ws[encode_col(C + _C) + __R] = {t:'s', v:hdr[C]};
        ws['!ref'] = encode_range(range);
        return ws;
    }
    function json_to_sheet(js, opts) { return sheet_add_json(null, js, opts); }
    
    var utils = {
        encode_col: encode_col,
        encode_row: encode_row,
        encode_cell: encode_cell,
        encode_range: encode_range,
        decode_col: decode_col,
        decode_row: decode_row,
        split_cell: split_cell,
        decode_cell: decode_cell,
        decode_range: decode_range,
        format_cell: format_cell,
        get_formulae: sheet_to_formulae,
        make_csv: sheet_to_csv,
        make_json: sheet_to_json,
        make_formulae: sheet_to_formulae,
        sheet_add_aoa: sheet_add_aoa,
        sheet_add_json: sheet_add_json,
        aoa_to_sheet: aoa_to_sheet,
        json_to_sheet: json_to_sheet,
        table_to_sheet: parse_dom_table,
        table_to_book: table_to_book,
        sheet_to_csv: sheet_to_csv,
        sheet_to_txt: sheet_to_txt,
        sheet_to_json: sheet_to_json,
        sheet_to_html: HTML_.from_sheet,
        sheet_to_dif: DIF.from_sheet,
        sheet_to_slk: SYLK.from_sheet,
        sheet_to_eth: ETH.from_sheet,
        sheet_to_formulae: sheet_to_formulae,
        sheet_to_row_object_array: sheet_to_json
    };
    
    (function(utils) {
    utils.consts = utils.consts || {};
    function add_consts(R/*Array<any>*/) { R.forEach(function(a){ utils.consts[a[0]] = a[1]; }); }
    
    function get_default(x, y, z) { return x[y] != null ? x[y] : (x[y] = z); }
    
    /* get cell, creating a stub if necessary */
    function ws_get_cell_stub(ws, R, C) {
        /* A1 cell address */
        if(typeof R == "string") return ws[R] || (ws[R] = {t:'z'});
        /* cell address object */
        if(typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
        /* R and C are 0-based indices */
        return ws_get_cell_stub(ws, encode_cell({r:R,c:C||0}));
    }
    
    /* find sheet index for given name / validate index */
    function wb_sheet_idx(wb, sh) {
        if(typeof sh == "number") {
            if(sh >= 0 && wb.SheetNames.length > sh) return sh;
            throw new Error("Cannot find sheet # " + sh);
        } else if(typeof sh == "string") {
            var idx = wb.SheetNames.indexOf(sh);
            if(idx > -1) return idx;
            throw new Error("Cannot find sheet name |" + sh + "|");
        } else throw new Error("Cannot find sheet |" + sh + "|");
    }
    
    /* simple blank workbook object */
    utils.book_new = function() {
        return { SheetNames: [], Sheets: {} };
    };
    
    /* add a worksheet to the end of a given workbook */
    utils.book_append_sheet = function(wb, ws, name) {
        if(!name) for(var i = 1; i <= 0xFFFF; ++i) if(wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
        if(!name) throw new Error("Too many worksheets");
        check_ws_name(name);
        if(wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");
    
        wb.SheetNames.push(name);
        wb.Sheets[name] = ws;
    };
    
    /* set sheet visibility (visible/hidden/very hidden) */
    utils.book_set_sheet_visibility = function(wb, sh, vis) {
        get_default(wb,"Workbook",{});
        get_default(wb.Workbook,"Sheets",[]);
    
        var idx = wb_sheet_idx(wb, sh);
        // $FlowIgnore
        get_default(wb.Workbook.Sheets,idx, {});
    
        switch(vis) {
            case 0: case 1: case 2: break;
            default: throw new Error("Bad sheet visibility setting " + vis);
        }
        // $FlowIgnore
        wb.Workbook.Sheets[idx].Hidden = vis;
    };
    add_consts([
        ["SHEET_VISIBLE", 0],
        ["SHEET_HIDDEN", 1],
        ["SHEET_VERY_HIDDEN", 2]
    ]);
    
    /* set number format */
    utils.cell_set_number_format = function(cell, fmt) {
        cell.z = fmt;
        return cell;
    };
    
    /* set cell hyperlink */
    utils.cell_set_hyperlink = function(cell, target, tooltip) {
        if(!target) {
            delete cell.l;
        } else {
            cell.l = ({ Target: target });
            if(tooltip) cell.l.Tooltip = tooltip;
        }
        return cell;
    };
    utils.cell_set_internal_link = function(cell, range, tooltip) { return utils.cell_set_hyperlink(cell, "#" + range, tooltip); };
    
    /* add to cell comments */
    utils.cell_add_comment = function(cell, text, author) {
        if(!cell.c) cell.c = [];
        cell.c.push({t:text, a:author||"SheetJS"});
    };
    
    /* set array formula and flush related cells */
    utils.sheet_set_array_formula = function(ws, range, formula) {
        var rng = typeof range != "string" ? range : safe_decode_range(range);
        var rngstr = typeof range == "string" ? range : encode_range(range);
        for(var R = rng.s.r; R <= rng.e.r; ++R) for(var C = rng.s.c; C <= rng.e.c; ++C) {
            var cell = ws_get_cell_stub(ws, R, C);
            cell.t = 'n';
            cell.F = rngstr;
            delete cell.v;
            if(R == rng.s.r && C == rng.s.c) cell.f = formula;
        }
        return ws;
    };
    
    return utils;
    })(utils);
    
    if(has_buf && typeof require != 'undefined') (function() {
        var Readable = require('stream').Readable;
    
        var write_csv_stream = function(sheet, opts) {
            var stream = Readable();
            var out = "";
            var o = opts == null ? {} : opts;
            if(sheet == null || sheet["!ref"] == null) { stream.push(null); return stream; }
            var r = safe_decode_range(sheet["!ref"]);
            var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
            var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
            var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
            var row = "", cols = [];
            o.dense = Array.isArray(sheet);
            var colinfo = o.skipHidden && sheet["!cols"] || [];
            var rowinfo = o.skipHidden && sheet["!rows"] || [];
            for(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);
            var R = r.s.r;
            stream._read = function() {
                if(R > r.e.r) return stream.push(null);
                while(R <= r.e.r) {
                    ++R;
                    if ((rowinfo[R-1]||{}).hidden) continue;
                    row = make_csv_row(sheet, r, R-1, cols, fs, rs, FS, o);
                    if(row != null) {
                        if(o.strip) row = row.replace(endregex,"");
                        stream.push(row + RS);
                        break;
                    }
                }
            };
            return stream;
        };
    
        var write_html_stream = function(ws, opts) {
            var stream = Readable();
    
            var o = opts || {};
            var header = o.header != null ? o.header : HTML_.BEGIN;
            var footer = o.footer != null ? o.footer : HTML_.END;
            stream.push(header);
            var r = decode_range(ws['!ref']);
            o.dense = Array.isArray(ws);
            stream.push(HTML_._preamble(ws, r, o));
            var R = r.s.r;
            var end = false;
            stream._read = function() {
                if(R > r.e.r) {
                    if(!end) { end = true; stream.push("</table>" + footer); }
                    return stream.push(null);
                }
                while(R <= r.e.r) {
                    stream.push(HTML_._row(ws, r, R, o));
                    ++R;
                    break;
                }
            };
            return stream;
        };
    
        XLSX.stream = {
            to_html: write_html_stream,
            to_csv: write_csv_stream
        };
    })();
    
    XLSX.parse_xlscfb = parse_xlscfb;
    XLSX.parse_ods = parse_ods;
    XLSX.parse_fods = parse_fods;
    XLSX.write_ods = write_ods;
    XLSX.parse_zip = parse_zip;
    XLSX.read = readSync; //xlsread
    XLSX.readFile = readFileSync; //readFile
    XLSX.readFileSync = readFileSync;
    XLSX.write = writeSync;
    XLSX.writeFile = writeFileSync;
    XLSX.writeFileSync = writeFileSync;
    XLSX.writeFileAsync = writeFileAsync;
    XLSX.utils = utils;
    XLSX.SSF = SSF;
    XLSX.CFB = CFB;
    })(typeof exports !== 'undefined' ? exports : XLSX);
    /*exported XLS, ODS */
    var XLS = XLSX, ODS = XLSX;
    
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
    },{"./dist/cpexcel.js":61,"./jszip.js":62,"_process":74,"buffer":72,"crypto":71,"fs":71,"stream":71}],64:[function(require,module,exports){
    /***
    * A web viewer application based on Chartjs for the EPICS archiver.
    *
    * Gustavo Ciotto Pinton
    * LNLS - Brazilian Synchrotron Laboratory
    ***/
    
    /* Module dependencies */
    var $ = require('jquery-browserify');
    require('jquery-mousewheel')($);
    
    var Chart = require ('chart.js');
    
    var ui = require ("./lib/ui.js");
    var chartUtils = require ("./lib/chartUtils.js");
    var archInterface = require ("./lib/archInterface.js");
    var control = require ("./lib/control.js");
    var handlers = require ("./lib/handlers.js");
    
    /* Registers event handler functions */
    
    $(document).click(handlers.refreshScreen);
    
    $("#window_size table tr td").on("click", handlers.updateTimeWindow);
    
    $("#date").on('change', 'input', handlers.onChangeDateHandler);
    $("#date .now").on("click", handlers.updateEndNow);
    $("#date .backward").on("click", handlers.backTimeWindow);
    $("#date .forward").on("click", handlers.forwTimeWindow);
    $("#date .zoom").on("click", handlers.zoomClickHandler);
    $("#date .auto").on("click", handlers.autoRefreshingHandler);
    $("#date .type").on("change", handlers.updateReferenceTime);
    
    $('#data_table_area .enable_table:checkbox').change(handlers.toogleTable);
    $("#undo").on("click", handlers.undoHandler);
    $("#redo").on("click", handlers.redoHandler);
    
    $('#PV').keypress(handlers.queryPVs);
    
    $("#archiver_viewer").on('click', handlers.dataClickHandler);
    $("#archiver_viewer").mousewheel(handlers.scrollChart);
    
    $("#plotSelected").on('click', handlers.plotSelectedPVs);
    $("#selectAll").on('click', ui.selectedAllPVs);
    $("#deselectAll").on('click', ui.deselectedAllPVs);
    
    // Binds handlers to the dragging events
    $("#archiver_viewer").mousedown(handlers.startDragging);
    $("#archiver_viewer").mousemove(handlers.doDragging);
    $("#archiver_viewer").mouseup(handlers.stopDragging);
    
    $("#xlsx").click ({"type" : "xlsx"}, function (event) {
        handlers.exportAs(event.data.type);
    });
    
    $("#ods").click ({"type" : "ods"}, function (event) {
        handlers.exportAs(event.data.type);
    });
    
    $("#csv").click ({"type" : "csv"}, function (event) {
        handlers.exportAs(event.data.type);
    });
    
    $("#print").click (function (event) {
        handlers.printCanvas(document.getElementById("archiver_viewer"));
    });
    
    /******* Initialization function *******/
    /**
    * Instantiates a new chart and global structures
    **/
    $(document).ready(function () {
    
        control.init (new Chart($("#archiver_viewer"), {
    
            type: 'line',
            data: [],
            options: {
    
                animation: {
                    duration: 0,
                },
    
                tooltips: {
                    mode: 'nearest',
                    intersect: false,
                    cornerRadius: 15,
    
                    callbacks: {
                        label: chartUtils.labelCallback,
                    },
                },
    
                hover: {
                    mode: 'nearest',
                    intersect: false,
                    animationDuration: 0,
                },
    
                title: {
                    display: true,
                },
    
                scales: {
                    xAxes: [{
                        // Common x axis
                        id: chartUtils.timeAxisID,
                        type: 'time',
                        time: {
                            unit: 'minute',
                            unitStepSize: 10,
                            displayFormats: {
                                minute: 'HH:mm'
                            },
                            tooltipFormat: 'ddd MMM DD YYYY HH:mm:ss.SSS ZZ',
                        },
                        ticks: {
                            autoSkip : true,
                            autoSkipPadding: 5,
                        }
                    }],
                    yAxes: [{
                        // Useless YAxis
                        type: "linear",
                        display: false,
                        position: "left",
                        id: "y-axis-0"
                    }],
                },
    
                legend : {
    
                    display: false,
                    onClick : chartUtils.legendCallback,
                },
    
                maintainAspectRatio: false,
            }
        }));
    
        // archInterface.updateURL(window.location.origin + window.location.pathname.substring(0, window.location.pathname.indexOf("/retrieval")));
    
        //document.getElementsByClassName('enable_table')[0].checked = false;
    
        $("#home").attr("href", archInterface.url().split(':')[0] + ":" + archInterface.url().split(':')[1]);
    
        ui.hideWarning ();
    
        ui.hideSearchWarning ();
    
        control.loadFromURL (window.location.search);
    });
    
    },{"./lib/archInterface.js":65,"./lib/chartUtils.js":66,"./lib/control.js":67,"./lib/handlers.js":68,"./lib/ui.js":69,"chart.js":1,"jquery-browserify":58,"jquery-mousewheel":59}],65:[function(require,module,exports){
    /******* Fetching data functions *******/
    /**
    * The following functions communicate with the /retrieval appliance and
    * fetch data from the archiver.
    **/
    
    /* Module dependencies */
    var $ = require('jquery-browserify');
    var ui = require ("./ui.js");
    
    module.exports = (function () {
    
        var url = "http://10.0.6.51";
    
        /**
        * Parses the data retrieved from the archiver in a way that it can be understood by the chart controller
        **/
        var parseData = function (data) {
    
            var parsedData = [];
    
            for (var i = 0; i < data.length; i++) {
    
                var timedate = new Date(data[i].secs * 1e3 + data[i].nanos * 1e-6);
    
                if (!isNaN(timedate.getTime())) {
    
                    parsedData.push({
                        x : timedate,
                        y : data[i].val.length > 0 ? data[i].val[0] : data[i].val
                    });
                }
            }
            return parsedData;
        }
    
        /**
        * Gets the metadata associated with a PV.
        **/
        var fetchMetadata = function (pv) {
    
            if (pv == undefined)
                return null;
    
            var jsonurl = url + '/retrieval/bpl/getMetadata?pv=' + pv,
                components = jsonurl.split('?'),
                HTTPMethod = jsonurl.length > 2048 ? 'POST' : 'GET',
                returnData = null;
    
            $.ajax ({
                url: components[0],
                data: components[1],
                type: HTTPMethod,
                dataType: 'json',
                async: false,
                success: function(data, textStatus, jqXHR) {
                    returnData = textStatus == "success" ? data : null;
                },
                error: function(xmlHttpRequest, textStatus, errorThrown) {
                    ui.toogleSearchWarning ("Connection failed with " + xmlHttpRequest + " -- " + textStatus + " -- " + errorThrown);
                }
            });
    
            return returnData;
        }
    
        /**
        * Requests data from the archiver.
        **/
        var fetchData = function (pv, from, to, isOptimized, bins) {
    
            if (from == undefined || to == undefined)
                return null;
    
            var jsonurl = url + '/retrieval/data/getData.json?pv=' + pv + "&from=" + from.toJSON() + "&to=" + to.toJSON();
    
            if (isOptimized) {
                /*if (bins == undefined)
                    bins = TIME_AXIS_PREFERENCES[global_settings.window_time].bins;
                */
                jsonurl = url + '/retrieval/data/getData.json?pv=optimized_' + bins + '(' + pv + ")&from=" + from.toJSON() + "&to=" + to.toJSON();
            }
    
            var components = jsonurl.split('?'),
                HTTPMethod = jsonurl.length > 2048 ? 'POST' : 'GET',
                returnData = null;
    
            $.ajax ({
                url: components[0],
                data: components[1],
                type: HTTPMethod,
                dataType: 'json',
                async: false,
                success: function(data, textStatus, jqXHR) {
                    returnData = textStatus == "success" ? data : null;
                },
                error: function(xmlHttpRequest, textStatus, errorThrown) {
                    ui.toogleSearchWarning ("Connection failed with " + xmlHttpRequest + " -- " + textStatus + " -- " + errorThrown);
                }
            });
    
            return returnData;
        }
    
    
        /**
        * Key event handler which looks for PVs in the archiver
        **/
        var query = function (pvs) {  
    
            var jsonurl = url + '/retrieval/bpl/getMatchingPVs?pv=' + pvs + "&limit=4000",
                components = jsonurl.split('?'),
                querystring = components.length > 1 ? querystring = components[1] : '',
                HTTPMethod = jsonurl.length > 2048 ? 'POST' : 'GET',
                returnData = null;
    
            $.ajax({
                url: components[0],
                data: querystring,
                type: HTTPMethod,
                dataType: 'json',
                async: false,
                timeout: 3000,
                success: function(data, textStatus, jqXHR) {
                    returnData = textStatus == "success" ? data : null;
                },
                error: function(xmlHttpRequest, textStatus, errorThrown) {
                    ui.toogleSearchWarning ("An error occured on the server while disconnected PVs -- " + textStatus + " -- " + errorThrown);
                }
            });
    
            return returnData;
        }
    
        return {
    
            url: function () { return url; },
            updateURL: function (u) { url = u },
    
            parseData: parseData,
            fetchMetadata : fetchMetadata,
            fetchData: fetchData,
            query: query,
        }
    
    })();
    
    },{"./ui.js":69,"jquery-browserify":58}],66:[function(require,module,exports){
    /******* Chart control functions *******/
    
    /* Module dependencies */
    var $ = require('jquery-browserify');
    
    module.exports = (function () {
    
        const TIME_AXIS_ID = "x-axis-0";
        const TIME_AXIS_INDEX = 0;
        const TIME_AXIS_PREFERENCES = [
            { // 1 year
                unit : "month",
                unitStepSize: 2,
                milliseconds: 365 * 24 * 3600 * 1000,
                optimized: true,
                    bins: 2000,
            },
            { // 1 month
                unit : "day",
                unitStepSize: 4,
                milliseconds:  30 * 24 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 2 weeks
                unit : "day",
                unitStepSize: 2,
                milliseconds:  2 * 7 * 24 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 1 week
                unit : "day",
                unitStepSize: 2,
                milliseconds:  7 * 24 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 2.5 days
                unit : "hour",
                unitStepSize: 12,
                milliseconds:  2.5 * 24 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 1 day
                unit : "hour",
                unitStepSize: 3,
                milliseconds:  24 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 18 hours
                unit : "hour",
                unitStepSize: 2,
                milliseconds:  18 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 12 hours
                unit : "hour",
                unitStepSize: 2,
                milliseconds:  12 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 8 hours
                unit : "hour",
                unitStepSize: 2,
                milliseconds:  8 * 3600 * 1000,
                optimized: true,
                    bins: 800,
            },
            { // 4 hours
                unit : "hour",
                unitStepSize: 2,
                milliseconds:  4 * 3600 * 1000,
                optimized: true,
                    bins: 400,
            },
            { // 2 hours
                unit : "minute",
                unitStepSize: 15,
                milliseconds:  2 * 3600 * 1000,
                optimized: true,
                    bins: 400,
            },
            { // 1 hour
                unit : "minute",
                unitStepSize: 15,
                milliseconds:  3600 * 1000,
                optimized: false,
                bins: 200,
            },
            { // 30 minutes
                unit : "minute",
                unitStepSize: 3,
                milliseconds: 30 * 60 * 1000,
                optimized: false,
                bins: 200,
            },
            { // 10 minutes
                unit : "minute",
                unitStepSize: 2,
                milliseconds: 10 * 60 * 1000,
                optimized: false,
                bins: 50,
            },
            { // 5 minutes
                unit : "second",
                unitStepSize: 30,
                milliseconds: 5 * 60 * 1000,
                optimized: false,
                bins: 50,
            },
            { // 1 minute
                unit : "second",
                unitStepSize: 15,
                milliseconds: 60 * 1000,
                optimized: false,
                bins: 50,
            },
            { // 30 seconds
                unit : "second",
                unitStepSize: 3,
                milliseconds: 30 * 1000,
                optimized: false,
                bins: 50,
            }
        ];
        const TIME_IDS = {
            YEAR : 0,
            MONTH : 1,
            WEEK_2: 2,
            WEEK_1: 3,
            DAY_25: 4,
            DAY_1 : 5,
            HOUR_18: 6,
            HOUR_12: 7,
            HOUR_8: 8,
            HOUR_4: 9,
            HOUR_2: 10,
            HOUR_1: 11,
            MIN_30: 12,
            MIN_10: 13,
            MIN_5: 14,
            MIN_1: 15,
            SEG_30: 16
        };
    
        var yAxisUseCounter = [];
    
        var colorStack = [
            "rgba(245, 130, 48, 1.0)",
            "rgba(145, 30, 180, 1.0)",
            "rgba(70, 240, 240, 1.0)",
            "rgba(240, 50, 230 ,1.0)",
            "rgba(210, 245, 60, 1.0)",
            "rgba(250, 190, 190, 1.0)",
            "rgba(0, 128, 128, 1.0)",
            "rgba(230, 190, 255, 1.0)",
            "rgba(170, 110, 40, 1.0)",
            "rgba(128, 0, 0, 1.0)",
            "rgba(170, 255, 195, 1.0)",
            "rgba(255, 225, 25, 1.0)",
            "rgba(0, 130, 200, 1.0)",
            "rgba(128, 128, 128, 1.0)",
            "rgba(0, 0, 0, 1.0)",
            "rgba(230, 25, 75, 1.0)",
            "rgba(60, 180, 75, 1.0)",
            "rgba(0, 0, 128, 1.0)",
        ];
    
        var axisPositionLeft = true;
    
        /**
        * Updates chart's time axes, but does not updates it by calling update(0, false).
        **/
        var updateTimeAxis = function (chart, unit, unitStepSize, from, to) {
    
            chart.options.scales.xAxes[TIME_AXIS_INDEX].time.unit = unit;
            chart.options.scales.xAxes[TIME_AXIS_INDEX].time.stepSize = unitStepSize;
            chart.options.scales.xAxes[TIME_AXIS_INDEX].time.min = from;
            chart.options.scales.xAxes[TIME_AXIS_INDEX].time.max = to;
        };
    
        /**
        * Adds a new vertical axis to the chart.
        **/
        var appendDataAxis = function (chart, n_id, ticks_precision) {
    
            if (n_id in yAxisUseCounter) {
    
                /* Increments the number of times this axis is used by a PV. */
                yAxisUseCounter[n_id]++;
                return ;
            }
    
            /* yAxisUseCounter[n_id] stands for the times this axis is used */
            yAxisUseCounter[n_id] = 1;
    
            /* Extends the default scale options for the axis */
            var scaleOptions = jQuery.extend(true, {}, Chart.defaults.scale);
    
            if (ticks_precision == undefined)
                ticks_precision = 3;
    
            scaleOptions.type = "linear";
            scaleOptions.position = axisPositionLeft ? "left" : "right",
            scaleOptions.id = n_id;
    
            scaleOptions.scaleLabel.display = true;
            scaleOptions.scaleLabel.labelString = n_id;
    
            if (Object.keys(yAxisUseCounter).length > 1)
                scaleOptions.gridLines.borderDash = [5, 5 * Object.keys(yAxisUseCounter).length];
    
            //scaleOptions.ticks.maxTicksLimit = 5;
            scaleOptions.ticks.minor.display = true;
            scaleOptions.ticks.minor.padding = 0;
            scaleOptions.ticks.minor.labelOffset = 0;
    
            // Function which is called when the scale is being drawn.
            scaleOptions.ticks.callback = function (value) {
    
                if (value != 0 && Math.abs(value) < Math.pow(10, -ticks_precision))
                    return value.toExponential (ticks_precision)
    
                /* ticks_precision stands for the number of decimal cases shown by the plot in the vertical axis */
                if (ticks_precision > 4)
                    return value.toExponential(3)
    
                return value.toFixed(ticks_precision);
            };
    
            var scaleClass = Chart.scaleService.getScaleConstructor("linear");
    
            var n_scale = new scaleClass({
                id: n_id,
                options: scaleOptions,
                ctx: chart.ctx,
                chart: chart,
                position: axisPositionLeft ? "left" : "right",
            });
    
            axisPositionLeft = !axisPositionLeft;
    
            /* Stores a reference of the axis */
            chart.scales[n_id] = n_scale;
    
            /* Appends it into the chart */
            Chart.layoutService.addBox(chart, n_scale);
        };
    
        var appendDataset = function (chart, pv_name, data, samplingPeriod, type, unit, bins, precision, desc) {
    
            // Parses the data fetched from the archiver the way that the chart's internal classes can plot
            var color = colorStack.pop ();
    
            if (unit == undefined)
                unit = pv_name;
    
            unit = unit.replace ("?", "o");
    
            // Adds a new vertical axis if no other with the same unit exists
            appendDataAxis(chart, unit, precision)
    
            // Pushes it into the chart
            chart.data.datasets.push({
    
                label : pv_name,
                xAxisID: TIME_AXIS_ID,
                yAxisID: unit,
                borderWidth: 1.5,
                data : data,
                showLine : true,
                steppedLine : true,
                fill : false,
                pointRadius : 0,
                backgroundColor : color,
                borderColor: color,
    
                pv: {
                    precision: precision,
                    type: type,
                    samplingPeriod: samplingPeriod,
                    optimized : bins < 0 ? false : true,
                    desc: desc,
                },
            });
        };
    
        var hidesAxis = function (metadata, chart) {
    
            if (metadata.hidden) {
    
                yAxisUseCounter [metadata.yAxisID]++
                chart.scales [metadata.yAxisID].options.display = true;
    
                metadata.hidden = null;
            }
            else {
    
                metadata.hidden = true;
                yAxisUseCounter[metadata.yAxisID]--;
    
                if (yAxisUseCounter[metadata.yAxisID] <= 0)
                    chart.scales[metadata.yAxisID].options.display = false;
            }
    
        }
    
        /**
        * Decides if a y axis should be displayed or not.
        **/
        var legendCallback = function(e, legendItem) {
    
            var meta = this.chart.getDatasetMeta(legendItem.datasetIndex);
    
            hidesAxis (meta, this.chart);
    
            this.chart.update(0, false);
        };
    
        /**
        * Edits tooltip's label before printing them in the screen.
        **/
        var labelCallback = function (label, chart) {
    
            if (label.yLabel != 0 && Math.abs(label.yLabel) < Math.pow(10, -chart.datasets[label.datasetIndex].pv.precision))
                return chart.datasets[label.datasetIndex].label + ": " + label.yLabel.toExponential (Math.min(3, chart.datasets[label.datasetIndex].pv.precision))
    
            if (chart.datasets[label.datasetIndex].pv.precision > 4)
                return chart.datasets[label.datasetIndex].label + ": " + label.yLabel.toExponential(3) ;
    
            return chart.datasets[label.datasetIndex].label + ": " +  label.yLabel.toFixed(chart.datasets[label.datasetIndex].pv.precision);
        };
    
        return {
    
            /* const references */
            timeAxisID: TIME_AXIS_ID,
            timeAxisPreferences: TIME_AXIS_PREFERENCES,
            timeIDs: TIME_IDS,
    
            /* Getters */
            yAxisUseCounter: function () { return yAxisUseCounter; },
            colorStack: function () { return colorStack; },
            axisPositionLeft: function () { return axisPositionLeft; },
    
            /* Setters */
            updateAxisPositionLeft: function (a) { axisPositionLeft = a; } ,
    
            updateTimeAxis: updateTimeAxis,
            appendDataAxis: appendDataAxis,
            appendDataset: appendDataset,
            hidesAxis: hidesAxis,
            legendCallback: legendCallback,
            labelCallback: labelCallback,
        };
    
    }) ();
    
    },{"jquery-browserify":58}],67:[function(require,module,exports){
    /******* Time window control functions *******/
    /**
    * The following functions control the start and end time that will be plotted on the graph.
    * end stands for the most recent time, meanwhile start
    * stands for the beginning of the window time.
    **/
    /* require archInterface, chartUtils */
    
    /* Module dependencies */
    var $ = require('jquery-browserify');
    var ui = require ("./ui.js");
    var chartUtils = require ("./chartUtils.js");
    var archInterface = require ("./archInterface.js");
    
    module.exports = (function () {
    
        const DATA_VOLUME_MAX = 5000;
    
        const STACK_ACTIONS = {
            REMOVE_PV : 0,
            APPEND_PV : 1,
            CHANGE_WINDOW_TIME : 2,
            CHANGE_END_TIME : 3,
            CHANGE_START_TIME : 4,
            ZOOM : 5,
        };
    
        const REFERENCE = {
            START : 0,
            END : 1,
        };
    
    
        /* chartjs instance reference */
        var chart = null;
    
        /* start and end timedates */
        var start, end, reference = REFERENCE.END;
    
        var window_time = chartUtils.timeIDs.MIN_10;
    
        var timer = null;
    
        /* Control flags */
        var auto_enabled = false;
    
        var scrolling_enabled = true;
    
        var drag_flags = {
            drag_started: false,
            updateOnComplete: true,
        };
    
        var zoom_flags = {
            isZooming: false,
            hasBegan: false,
        };
    
        var undo_stack = [], redo_stack = [];
    
        var init = function (c) {
    
            chart = c;
        };
    
        var updateTimeWindow = function (window) {
    
            ui.toogleWindowButton (window, window_time);
    
            window_time = window;
    
            if (window_time < chartUtils.timeIDs.MIN_30) {
    
                if (auto_enabled) {
    
                    auto_enabled = false;
    
                    clearInterval(timer);
    
                    ui.enableDate();
                    ui.enable ($("#date span.now"));
                    ui.enable ($("#date span.zoom"));
                    ui.enable ($("#date span.forward"));
                    ui.enable ($("#date span.backward"));
    
                    $("#date img").css({"cursor" : "pointer"});
                }
    
                ui.disable ($("#date span.auto"));
            }
            else if (!auto_enabled)
                ui.enable ($("#date span.auto"));
    
            ui.enableLoading();
    
            if (reference == REFERENCE.END)
                start = new Date(end.getTime() - chartUtils.timeAxisPreferences[window_time].milliseconds);
    
            else if (reference == REFERENCE.START) {
    
                var now = new Date ();
    
                if (start.getTime() + chartUtils.timeAxisPreferences[window_time].milliseconds <= now.getTime()) 
                    end = new Date(start.getTime() + chartUtils.timeAxisPreferences[window_time].milliseconds);
                else end = now;
            }
    
            optimizeAllGraphs ();
    
            updateAllPlots(true);
    
            updateURL();
    
            chartUtils.updateTimeAxis (chart, chartUtils.timeAxisPreferences[window_time].unit, chartUtils.timeAxisPreferences[window_time].unitStepSize, start, end);
    
            chart.update(0, false);
    
            ui.disableLoading();
    
            /*
            if (document.getElementsByClassName('enable_table')[0].checked) {
                updateDataTable();
                $('#data_table_area .data_table').show();
            }
            */
        }
    
        /**
        * Appends a new variable into the chart.
        **/
        var appendPV = function (pv, optimized, undo) {
    
            if (chartUtils.colorStack ().length == 0) {
    
                ui.toogleSearchWarning ("Maximum plotted PV number has already been reached.");
                return;
            }
    
            // Asks for the PV's metadata in order to retrieve its unit, type and samping period
            var metadata = archInterface.fetchMetadata(pv),
                unit = metadata["EGU"] != "" || metadata["EGU"] == undefined ? metadata["EGU"] : pv;
    
            var bins = shouldOptimizeRequest(parseFloat(metadata["samplingPeriod"]), metadata["DBRType"]);
    
            if (optimized == false)
                bins = -1;
            else if (optimized && bins == -1)        
                bins = chartUtils.timeAxisPreferences[window_time].bins;
    
            var data = archInterface.fetchData(pv, start, end, bins < 0 ? false : true, bins);
    
            if (data == undefined || data == null || data[0].data.length == 0)
                ui.toogleSearchWarning ("No data was received from server.");
            else
                chartUtils.appendDataset (chart, data[0].meta.name, improveData (archInterface.parseData(data[0].data)), parseFloat(metadata["samplingPeriod"]), metadata["DBRType"], unit, bins, parseInt(data[0].meta.PREC) + 1, metadata["DESC"]);
    
            updateOptimizedWarning();
    
            updateURL();
    
            ui.updatePVInfoTable(chart.data.datasets, hideAxis, optimizeHandler, removeHandler);
    
            if (!undo || undo == undefined)
                undo_stack.push ({action : STACK_ACTIONS.APPEND_PV, pv : pv});
        }
    
        /**
        * Checks if the request must optimized because of the variable's data volume. It returns -1 if no optimization is required or the number of bins otherwise.
        **/
        var shouldOptimizeRequest = function (samplingPeriod, type) {
    
            if (type == "DBR_SCALAR_ENUM")
                return -1;
    
            /*
            var dataEstimative = chartUtils.timeAxisPreferences[window_time].milliseconds / (1000 * samplingPeriod);
    
            if (dataEstimative > DATA_VOLUME_MAX)
                return chartUtils.timeAxisPreferences[window_time].bins;
            */
    
            if (window_time < chartUtils.timeIDs.HOUR_2)
                return chartUtils.timeAxisPreferences[window_time].bins;
    
            return -1;
        }
    
        /******* Update functions *******/
        /**
        * The following functions updates the data plotted by the chart. They are called by
        * the event handlers mostly.
        **/
    
        /**
        * Sets end to date and updates start according
        * to the time window size. Updates HTML elements in the case updateHtml is true.
        **/
        var updateStartAndEnd = function (date, updateHtml, undo) {
    
            if (updateHtml == undefined || updateHtml == null)
                updateHtml = false;
    
            var now = new Date();
    
            if (reference == REFERENCE.END) {
    
                if (!undo || undo == undefined)
                    undo_stack.push ({action: STACK_ACTIONS.CHANGE_END_TIME, end_time: end});
    
                if (date.getTime() <= now.getTime())
                    end = date;
                else end = now;
    
                start = new Date(end.getTime() - chartUtils.timeAxisPreferences[window_time].milliseconds);
    
                if (updateHtml) ui.updateDateComponents (end);
            }
            else {
    
                if (!undo || undo == undefined)
                    undo_stack.push ({action: STACK_ACTIONS.CHANGE_START_TIME, start_time: start});
    
                if (date.getTime() + chartUtils.timeAxisPreferences[window_time].milliseconds <= now.getTime()) {
                    start = date;
                    end = new Date (date.getTime() + chartUtils.timeAxisPreferences[window_time].milliseconds);
                }
                else {
                    start = new Date(now.getTime() - chartUtils.timeAxisPreferences[window_time].milliseconds);
                    end = now;
                }
    
                if (updateHtml) ui.updateDateComponents (start);
            }
        };
    
        var updateOptimizedWarning = function () {
    
            var can_optimize = false;
    
            for (var i = 0; i < chart.data.datasets.length; i++)
                can_optimize |= chart.data.datasets[i].pv.optimized;
    
            // Shows a pleasant warning that the request is fetching optimized data
            if (can_optimize)
                ui.showWarning ();
            else
                ui.hideWarning ();
        }
    
        var improveData = function (data) {
    
            if (data.length > 0)  {
    
                var first = data[0],
                    last  = data[data.length - 1];
    
                if (first.x.getTime() > start.getTime())
                    data.unshift ({
                        x : start,
                        y : first.y
                    });
    
                if (last.x.getTime() < end.getTime())
                    data.push ({
                        x : end,
                        y : last.y
                    });
            }
    
            return data;
        }
    
        /**
        * Updates a plot of index pv_index.
        **/
        var updatePlot = function (pv_index) {
    
            // If the dataset is already empty, no verification is needed. All optimized request must be pass this condition.
            if (chart.data.datasets[pv_index].data.length == 0) {
    
                //var bins = shouldOptimizeRequest(chart.data.datasets[pv_index].pv.samplingPeriod, chart.data.datasets[pv_index].pv.type);
                //chart.data.datasets[pv_index].pv.optimized = bins < 0 ? false : true;
    
                var bins = chartUtils.timeAxisPreferences[window_time].bins;
    
                var fetchedData = archInterface.fetchData (chart.data.datasets[pv_index].label, start, end, chart.data.datasets[pv_index].pv.optimized, bins);
    
                if (fetchedData.length > 0)
                    Array.prototype.push.apply(chart.data.datasets[pv_index].data, improveData (archInterface.parseData(fetchedData[0].data)));
    
            }
            else {
    
                // Gets the time of the first and last element of the dataset
                var first = chart.data.datasets[pv_index].data[0].x,
                    last  = chart.data.datasets[pv_index].data[chart.data.datasets[pv_index].data.length - 1].x;
    
                //chart.data.datasets[pv_index].pv.optimized = false;
    
                // we need to append data to the beginning of the data set
                if (first.getTime() > start.getTime()) {
    
                    // Fetches data from the start to the first measure's time
                    var appendData = archInterface.fetchData(chart.data.datasets[pv_index].label, start, first, false);
    
                    // Appends new data into the dataset
                    if (appendData.length > 0) {
    
                        appendData = appendData[0].data;
    
                        var x = new Date(appendData[appendData.length - 1].secs * 1e3 + appendData[appendData.length - 1].nanos * 1e-6);
    
                        // Verifies if we are not appending redundant data into the dataset
                        while (appendData.length > 0 && x.getTime() >= first.getTime()) {
    
                            appendData.pop(); // remove last element, which is already in the dataset
    
                            if (appendData.length > 0)
                                x.setUTCMilliseconds(appendData[appendData.length - 1].secs * 1e3 + appendData[appendData.length - 1].nanos * 1e-6);
                        }
    
                        Array.prototype.unshift.apply(chart.data.datasets[pv_index].data, archInterface.parseData(appendData));
                    }
                }
                // We can remove unnecessary data from the beginning of the dataset to save memory and improve performance
                else {
                    while (chart.data.datasets[pv_index].data.length > 0 && chart.data.datasets[pv_index].data[0].x.getTime() < start.getTime())
                        chart.data.datasets[pv_index].data.shift();
                }
    
                // we need to append data to the end of the data set
                if (last.getTime() < end.getTime()) {
    
                    // Fetches data from the last measure's time to the end
                    var appendData = archInterface.fetchData(chart.data.datasets[pv_index].label, last, end, false);
    
                    // Appends new data into the dataset
                    if (appendData.length > 0) {
    
                        appendData = appendData[0].data;
    
                        var x = new Date(appendData[0].secs * 1e3 + appendData[0].nanos * 1e-6);
    
                        // Verifies if we are not appending redundant data into the dataset
                        while (appendData.length > 0 && x.getTime() <= last.getTime()) {
    
                            appendData.shift();
    
                            if (appendData.length > 0)
                                x.setUTCMilliseconds(appendData[0].secs * 1e3 + appendData[0].nanos * 1e-6);
                        }
    
                        Array.prototype.push.apply(chart.data.datasets[pv_index].data, archInterface.parseData(appendData));
                    }
                }
                // We can remove unnecessary data from the end of the dataset to save memory and improve performance
                else {
                    var i = chart.data.datasets[pv_index].data.length - 1;
    
                    for (var i = chart.data.datasets[pv_index].data.length - 1;
                         chart.data.datasets[pv_index].data.length > 0 && chart.data.datasets[pv_index].data[i].x.getTime() > end.getTime();
                         i--)
                        chart.data.datasets[pv_index].data.pop();
    
                }
    
                improveData(chart.data.datasets[pv_index].data);
            }
    
            updateOptimizedWarning();
        }
    
        var optimizeAllGraphs = function () {
    
            for (var i = 0; i < chart.data.datasets.length; i++) {
                var bins = shouldOptimizeRequest(chart.data.datasets[i].pv.samplingPeriod, chart.data.datasets[i].pv.type);
                chart.data.datasets[i].pv.optimized = bins < 0 ? false : true;
            }
        }
    
        /**
        * Updates all plots added so far. Resets informs if the user wants to reset the data in the dataset.
        **/
        var updateAllPlots = function (reset) {
    
            if (reset == undefined)
                reset = false;
    
            for (var i = 0; i < chart.data.datasets.length; i++) {
    
                if (chart.data.datasets[i].pv.optimized || reset)
                    chart.data.datasets[i].data.length = 0;
    
                updatePlot(i);
            }
    
            ui.updatePVInfoTable(chart.data.datasets, hideAxis, optimizeHandler, removeHandler);
        };
    
        /**
        * Checks if a PV is already plotted.
        **/
        var getPlotIndex = function (pv_name) {
    
            // Iterates over the dataset to check if a pv named pv_name exists
            for (var i = 0; i < chart.data.datasets.length; i++)
                if (chart.data.datasets[i].label == pv_name || chart.data.datasets[i].label == decodeURIComponent(pv_name))
                    return i;
    
            return null;
        }
    
        var updateURL = function () {
    
            var searchString = "?";
    
            for (var i = 0; i < chart.data.datasets.length; i++) {
                if (chart.data.datasets[i].pv.optimized)
                    searchString += "pv=optimized_" + chartUtils.timeAxisPreferences[window_time].bins + "(" + encodeURIComponent (chart.data.datasets[i].label) + ")&";
                else 
                    searchString += "pv=" + encodeURIComponent (chart.data.datasets[i].label) + "&";
            }
    
            searchString += "from=" + encodeURIComponent (start.toJSON()) + "&";
            searchString += "to=" + encodeURIComponent (end.toJSON());
    
            ui.updateAddress (searchString);
    
        };
    
        var loadFromURL = function (searchPath) {
    
            var pvs = [], urlStart = null, urlEnd = null;
    
            if (searchPath != "") {
    
                var search_paths = searchPath.split('&');
    
                for (var i = 0; i < search_paths.length; i++){
    
                    if (search_paths[i].indexOf("pv=") != -1)
                        pvs.push (decodeURIComponent(search_paths[i].substr(search_paths[i].indexOf("=") + 1)));
                    else if (search_paths[i].indexOf("from=") != -1)
                        urlStart = decodeURIComponent(search_paths[i].substr(search_paths[i].indexOf("=") + 1));
                    else if (search_paths[i].indexOf("to=") != -1)
                        urlEnd = decodeURIComponent(search_paths[i].substr(search_paths[i].indexOf("=") + 1));
                }
            }
    
            if (urlStart != null && urlEnd != null) {
    
                start = new Date (urlStart);
                end = new Date (urlEnd);
    
                window_time = 0;
                while (end.getTime() - start.getTime() < chartUtils.timeAxisPreferences[window_time].milliseconds && window_time < chartUtils.timeIDs.SEG_30)
                    window_time++;
            }
            else
                updateStartAndEnd (new Date (), true);
    
            ui.toogleWindowButton (window_time, undefined);
    
            ui.updateDateComponents (end);
    
            chartUtils.updateTimeAxis (chart, chartUtils.timeAxisPreferences[window_time].unit, chartUtils.timeAxisPreferences[window_time].unitStepSize, start, end);
    
            for (var i = 0; i < pvs.length; i++) {
     
                var optimized = false;
    
                if (pvs[i].indexOf ("optimized_") != -1) {
                    pvs[i] = pvs[i].substr (pvs[i].indexOf ("(") + 1);
                    pvs[i] = pvs[i].substr (0, pvs[i].indexOf (")"));
                    optimized = true;
                }
    
                appendPV (pvs[i], optimized);
            }
    
            chart.update(0, false);
        };
    
        var optimizePlot = function (datasetIndex, optimize) {
    
            chart.data.datasets[datasetIndex].pv.optimized = optimize;
    
            ui.enableLoading ();
    
            chart.data.datasets[datasetIndex].data.length = 0;
    
            updatePlot (datasetIndex);
    
            chart.update (0, false);
    
            ui.disableLoading ();
    
            updateURL ();
        };
    
        var removeDataset = function (datasetIndex, undo) {
    
            chartUtils.yAxisUseCounter () [chart.data.datasets[datasetIndex].yAxisID]--;
    
            chartUtils.colorStack ().push (chart.data.datasets[datasetIndex].backgroundColor);
    
            if (!undo || undo == undefined)
                undo_stack.push ({action : STACK_ACTIONS.REMOVE_PV, pv : chart.data.datasets[datasetIndex].label, optimized : chart.data.datasets[datasetIndex].pv.optimized});
    
            if (chartUtils.yAxisUseCounter () [chart.data.datasets[datasetIndex].yAxisID] == 0) {
    
                delete chartUtils.yAxisUseCounter () [chart.data.datasets[datasetIndex].yAxisID];
    
                chart.scales[chart.data.datasets[datasetIndex].yAxisID].options.display = false;
    
                chartUtils.updateAxisPositionLeft (chart.scales[chart.data.datasets[datasetIndex].yAxisID].position == "left");
    
                delete chart.scales[chart.data.datasets[datasetIndex].yAxisID];
            }
            
            chart.data.datasets.splice (datasetIndex, 1);
    
            chart.update (0, false);
    
            updateURL ();
    
            ui.updatePVInfoTable(chart.data.datasets, hideAxis, optimizeHandler, removeHandler);
    
            updateOptimizedWarning ();
        };
    
        var hideAxis = function (event) {
    
            chartUtils.hidesAxis (chart.getDatasetMeta (event.data.datasetIndex), chart);
            chart.update (0, false);
        };
    
        var optimizeHandler = function (event) {
    
            optimizePlot (event.data.datasetIndex, this.checked);
        };
    
        var removeHandler = function (event) {
    
            removeDataset (event.data.datasetIndex);
        };
    
        return {
    
            /* const references */
            stackActions: STACK_ACTIONS,
            references: REFERENCE,
    
            /* Getters */
            chart: function () { return chart; },
            start: function () { return start; },
            end: function () { return end; },
            reference : function () { return reference; },
            window_time: function () { return window_time; },
            timer: function () { return timer; },
            auto_enabled: function () { return auto_enabled; },
            scrolling_enabled: function () { return scrolling_enabled; },
            drag_flags: function () { return drag_flags; },
            zoom_flags: function () { return zoom_flags; },
            undo_stack: function () { return undo_stack; },
            redo_stack: function () { return redo_stack; },
    
            /* Setters */
            startTimer : function (t) { timer = t; }, 
    
            updateTimeWindow : updateTimeWindow,
            updateTimeWindowOnly : function (t) { window_time = t; },
            updateStartTime : function (s) { start = s; },
            updateEndTime : function (e) { end = e; },
            updateTimeReference : function (r) { reference = r; },
            updateStartAndEnd: updateStartAndEnd,
    
            toggleAuto : function () { auto_enabled = !auto_enabled; },
            disableAuto : function () { auto_enabled = false; },
            enableAuto : function () { auto_enabled = true; },
    
            disableScrolling : function () { scrolling_enabled = false; },
            enableScrolling : function () { scrolling_enabled = true; },
    
            startDrag: function () { drag_flags.drag_started = true; }, 
            stopDrag: function () { drag_flags.drag_started = false; },
            updateDragEndTime : function (t) { drag_flags.end_time = t; },
            updateDragOffsetX : function (x) { drag_flags.x = x; },
    
            enableZoom: function () { zoom_flags.isZooming = true; },
            disableZoom: function () { zoom_flags.isZooming = false;  },
    
            init: init,
            appendPV: appendPV,
            shouldOptimizeRequest: shouldOptimizeRequest,
            updateOptimizedWarning: updateOptimizedWarning,
            improveData: improveData,
            updatePlot: updatePlot,
            optimizeAllGraphs: optimizeAllGraphs,
            updateAllPlots: updateAllPlots,
            getPlotIndex: getPlotIndex,
            updateURL: updateURL,
            loadFromURL: loadFromURL,
            optimizePlot: optimizePlot,
    
            removeDataset: removeDataset,
            hideAxis: hideAxis,
            optimizeHandler: optimizeHandler,
            removeHandler: removeHandler, 
        };
    
    })();
    
    },{"./archInterface.js":65,"./chartUtils.js":66,"./ui.js":69,"jquery-browserify":58}],68:[function(require,module,exports){
    var $ = require('jquery-browserify');
    var XLSX = require('xlsx');
    var FileSaver = require('file-saver');
    
    var ui = require ("./ui.js");
    var chartUtils = require ("./chartUtils.js");
    var archInterface = require ("./archInterface.js");
    var control = require ("./control.js");
    
    module.exports = (function () {
    
        const KEY_ENTER = 13;
        const REFRESH_INTERVAL = 1;
    
        /**
        * Updates the chart after a date is chosen by the user.
        **/
        var onChangeDateHandler = function (date) {
    
            var new_date = ui.getTimedate();
    
            ui.enableLoading();
    
            control.updateStartAndEnd(new_date, true);
    
            control.updateAllPlots(true);
            control.updateURL();
    
            chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
            control.chart ().update(0, false);
    
            ui.disableLoading();
        }
    
        /**
        * updateTimeWindow is called when a button event in one of the time window options is captured.
        * Sets control.start () accoording to this new time window and updates the Chartjs
        * by calling plot-related functions. Chooses whether the next request for the archiver will be optimized
        * (to reduce the big amount of data) or raw.
        **/
        var updateTimeWindow = function (button) {
    
            if (button.target.className == "unpushed") {
    
                control.undo_stack().push ({action : control.stackActions.CHANGE_WINDOW_TIME, window : control.window_time ()});
    
                control.updateTimeWindow (button.target.cellIndex);
            }
        };
    
        /**
        * Updates control.end () to the present instant and redraws all plots
        **/
        var updateEndNow = function (button) {
    
            if (!control.auto_enabled ()) {
    
                ui.enableLoading();
    
                if (control.reference () == control.references.START) {
    
                    control.updateTimeReference (control.references.END);
                    ui.enableReference(control.references.END);
                }
    
                control.updateStartAndEnd(new Date(), true);
    
                chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                control.updateAllPlots(true);
                control.updateURL();
    
                control.chart ().update(0, false);
    
                ui.disableLoading();
            }
        }
    
        /**
        * Sets control.end () to control.start () and redraws all plots. In other
        * other words, it regresses the time window size into the past.
        **/
        var backTimeWindow = function (button) {
    
            if (!control.auto_enabled ()) {
    
                ui.enableLoading();
    
                var date = control.start ();
                if (control.reference () == control.references.END)
                    date = control.end ();
    
                control.updateStartAndEnd(new Date(date.getTime() - chartUtils.timeAxisPreferences[control.window_time ()].milliseconds), true);
    
                chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                control.updateAllPlots(true);
                control.updateURL();
    
                control.chart ().update(0, false);
    
                ui.disableLoading();
            }
        }
    
        /**
        * Sets control.start () to control.end () and redraws all plots.
        **/
        var forwTimeWindow = function (button) {
    
            if (!control.auto_enabled ()) {
    
                ui.enableLoading();
    
                var date = control.start ();
                if (control.reference () == control.references.END)
                    date = control.end ();
    
                control.updateStartAndEnd(new Date(date.getTime() + chartUtils.timeAxisPreferences[control.window_time ()].milliseconds), true);
    
                chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                control.updateAllPlots(true);
                control.updateURL();
    
                control.chart ().update(0, false);
    
                ui.disableLoading();
            }
        }
    
        /**
        * Key event handler which looks for PVs in the archiver
        **/
        var queryPVs = function (key) {
    
            if (key.which == KEY_ENTER) {
                ui.enableLoading ();
                ui.showSearchResults (archInterface.query ($('#PV').val()), appendPVHandler);
                ui.disableLoading ();
            }
        }
    
        /**
        * Closes PV selection area.
        **/
        var refreshScreen = ui.refreshScreen;
    
        /**
        * Event handler which is called when the user clicks over a PV to append it
        **/
        var appendPVHandler = function (e) {
    
            var pv = e.target.innerText,
                pv_index = control.getPlotIndex(pv);
    
            if (pv_index == null)
                control.appendPV(pv);
            else
                control.updatePlot(pv_index);
    
            control.chart ().update(0, false);
    
            ui.hideSearchedPVs();
        }
    
        var plotSelectedPVs = function (e) {
            var pvs = ui.selectedPVs ();
            for (var i = 0; i < pvs.length; i++) {
    
                pv_index = control.getPlotIndex(pvs [i]);
                if (pv_index == null)
                    control.appendPV (pvs [i]);
                else
                    control.updatePlot (pv_index);
            }
    
            ui.hideSearchedPVs();
            control.chart ().update(0, false);
            control.updateOptimizedWarning ();
        }
    
        /******* Scrolling function *******/
        /**
        * The following function manages mouse wheel events in the canvas area
        **/
    
        var scrollChart = function (evt) {
    
            if (control.scrolling_enabled ()) {
    
                ui.enableLoading();
    
                control.disableScrolling ();
    
                var window_time_new = evt.deltaY < 0 ? Math.max(control.window_time () - 1, 0) : Math.min(control.window_time () + 1, chartUtils.timeIDs.SEG_30);
    
                if (window_time_new != control.window_time ())
                    control.updateTimeWindow (window_time_new);
    
                ui.disableLoading();
    
                control.enableScrolling ();
            }
        };
    
        /**
        * Enables or disables plot auto refreshing.
        **/
        var autoRefreshingHandler = function (e) {
    
            if (control.auto_enabled ()) {
    
                $(this).css("background-color", "white");
    
                clearInterval(control.timer ());
    
                ui.enableDate();
                ui.enable ($("#date span.now"));
                ui.enable ($("#date span.zoom"));
                ui.enable ($("#date span.forward"));
                ui.enable ($("#date span.backward"));
    
                $("#date img").css({"cursor" : "pointer"});
    
            }
            else {
    
                control.startTimer (setInterval(function () {
    
                    ui.enableLoading();
    
                    if (control.reference () == control.references.START) {
                        control.updateTimeReference (control.references.END);
                        ui.enableReference(control.references.END);
                    }
    
                    control.updateStartAndEnd(new Date(), true, true);
    
                    chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                    control.updateAllPlots(true);
    
                    control.updateURL();
    
                    control.chart ().update(0, false);
    
                    ui.disableLoading();
    
                }, REFRESH_INTERVAL * 1000));
    
                $(this).css('background-color',"lightgrey");
    
                ui.disableDate();
                ui.disable ($("#date span.now"));
                ui.disable ($("#date span.zoom"));
                ui.disable ($("#date span.forward"));
                ui.disable ($("#date span.backward"));
    
                $("#date img").css ({"cursor" : "not-allowed"});
            }
    
            control.toggleAuto ();
        };
    
        /**
        * Updates the plot after the user clicks on a point.
        **/
        var dataClickHandler = function (evt) {
    
            if (!control.drag_flags ().drag_started && !control.auto_enabled ()) {
    
                var event = control.chart ().getElementsAtEvent(evt);
    
                if (event != undefined && event.length > 0) {
    
                    var event_data = control.chart ().data.datasets[event[0]._datasetIndex].data[event[0]._index].x,
                        middle_data = new Date(event_data.getTime() + chartUtils.timeAxisPreferences[control.window_time ()].milliseconds / 2);
    
                    ui.enableLoading();
    
                    control.updateStartAndEnd(middle_data, true);
    
                    chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                    control.updateAllPlots(true);
    
                    control.updateURL();
    
                    control.chart ().update(0, false);
    
                    ui.disableLoading();
                }
            }
        };
    
        /******* Dragging and zoom functions *******/
        /**
        * The following functions manage the dragging and zoom operations in the chart.
        **/
    
        /**
        * Handles a mouse click event in the chart and prepares for zooming or dragging.
        **/
        var startDragging = function (evt) {
    
            control.startDrag ();
    
            control.updateDragOffsetX (evt.offsetX);
    
            control.updateDragEndTime (control.end ());
    
            if (control.zoom_flags().isZooming) {
    
                control.zoom_flags().begin_x = evt.clientX;
                control.zoom_flags().begin_y = evt.clientY;
    
                control.zoom_flags().hasBegan = true;
    
                $("#canvas_area span.selection_box").css("display", "block");
    
                // Computes zoom initial time
                control.zoom_flags().time_1 = new Date(control.start ().getTime() + evt.offsetX * chartUtils.timeAxisPreferences[control.window_time ()].milliseconds / control.chart ().chart.width );
            }
        }
    
        /**
        * Handles a dragging event in the chart and updates the chart drawing area.
        **/
        var doDragging = function (evt) {
    
            if (!control.zoom_flags().isZooming && !control.auto_enabled () && control.drag_flags ().drag_started) {
    
                var offset_x = control.drag_flags ().x - evt.offsetX,
                    new_date = new Date(control.end ().getTime() + offset_x * chartUtils.timeAxisPreferences[control.window_time ()].milliseconds / control.chart ().chart.width );
    
                if (control.reference () == control.references.START)
                    new_date = new Date(control.start ().getTime() + offset_x * chartUtils.timeAxisPreferences[control.window_time ()].milliseconds / control.chart ().chart.width );
    
                control.updateDragOffsetX (evt.offsetX);
    
                control.updateStartAndEnd (new_date, true, true);
    
                chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                if (!control.drag_flags ().updateOnComplete) {
    
                    control.updateAllPlots(true);
                    control.updateURL();
                }
    
                control.chart ().update(0, false);
            }
    
            // Draws zoom rectangle indicating the area in which this operation will applied
            if (control.zoom_flags().isZooming && control.zoom_flags().hasBegan) {
    
                // x,y,w,h = o retÃ¢ngulo entre os vÃ©rtices
                var x = Math.min(control.zoom_flags().begin_x, evt.clientX);
                var w = Math.abs(control.zoom_flags().begin_x - evt.clientX);
    
                ui.drawZoomBox (x, w, control.chart ().chart.height);
            }
         }
    
        /**
        * Finishes dragging and applies zoom on the chart if this action was previously selected.
        **/
        var stopDragging = function (evt) {
    
            if (control.drag_flags ().drag_started && control.drag_flags ().updateOnComplete) {
    
                ui.enableLoading ();
    
                control.updateAllPlots(true);
                control.updateURL();
                control.chart ().update(0, false);
    
                control.undo_stack().push ({action: control.stackActions.CHANGE_END_TIME, end_time: control.drag_flags ().end_time});
    
                ui.disableLoading ();
            }
    
            // Finishes zoom and updates the chart
            if (control.zoom_flags().isZooming && control.zoom_flags().hasBegan) {
    
                ui.enableLoading ();
    
                control.zoom_flags().time_2 = new Date (control.start ().getTime() + evt.offsetX * chartUtils.timeAxisPreferences[control.window_time ()].milliseconds / control.chart ().chart.width);
    
                if (control.zoom_flags().time_1 != undefined && control.zoom_flags().time_2 != undefined) {
    
                    control.undo_stack().push ({action: control.stackActions.ZOOM, start_time : control.start (), end_time : control.end (), window_time : control.window_time ()});
    
                    // Checks which zoom times should be used as start time or end time
                    if (control.zoom_flags().time_1.getTime() < control.zoom_flags().time_2.getTime()) {
    
                        control.updateStartTime (control.zoom_flags().time_1);
                        control.updateEndTime (control.zoom_flags().time_2);
                    }
                    else {
    
                        control.updateStartTime (control.zoom_flags().time_2);
                        control.updateEndTime (control.zoom_flags().time_1);
                    }
    
                    // Chooses the x axis time scale
                    var i = 0;
                    while (control.end ().getTime() - control.start ().getTime() < chartUtils.timeAxisPreferences[i].milliseconds && i < chartUtils.timeIDs.SEG_30)
                        i++;
    
                    ui.toogleWindowButton (undefined, control.window_time ());
    
                    control.updateTimeWindowOnly (i);
    
                    ui.hideZoomBox ();
    
                    chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[i].unit, chartUtils.timeAxisPreferences[i].unitStepSize, control.start (), control.end ());
    
                    control.optimizeAllGraphs ();
                    control.updateAllPlots(true);
                    control.updateURL();
    
                    ui.updateDateComponents (control.reference () == control.references.END ? control.end () : control.start ());
    
                    // Redraws the chart
                    control.chart ().update(0, false);
    
                    control.updateOptimizedWarning();
    
                    ui.toggleZoomButton (false);
                    ui.disableLoading ();
                }
            }
    
            control.stopDrag ();
            control.zoom_flags().hasBegan = false;
            control.disableZoom ();
        }
    
        /**
        * Adjusts the global variables to perform a zoom in the chart.
        **/
        var zoomClickHandler = function (event) {
    
            if (!control.auto_enabled ()) {
    
                if (control.zoom_flags().isZooming)
                    control.disableZoom ();
                else
                    control.enableZoom ();
    
                ui.toggleZoomButton (control.zoom_flags().isZooming);
            }
        };
    
        /**
        * Shows or erases data table below the chart
        **/
        var toogleTable = function (evt) {
    
            if (this.checked) {
                ui.updateDataTable (control.chart ().data.datasets, control.start (), control.end ());
                ui.showTable ();
            }
            else
                ui.resetTable ();
        };
    
        function s2ab(s) {
            if(typeof ArrayBuffer !== 'undefined') {
                var buf = new ArrayBuffer(s.length);
                var view = new Uint8Array(buf);
                for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                return buf;
            } else {
                var buf = new Array(s.length);
                for (var i=0; i!=s.length; ++i) buf[i] = s.charCodeAt(i) & 0xFF;
                return buf;
            }
        }
    
        var exportAs = function (t) {
    
            if (control.auto_enabled ())
                return undefined;
    
            var book = XLSX.utils.book_new(), sheets = [];
    
            for (var i = 0; i < control.chart ().data.datasets.length; i++) {
    
                var data_array = control.chart ().data.datasets[i].data.map (function(data) {
    
                      return {
                        x: data.x.toLocaleString("br-BR") + '.' + data.x.getMilliseconds(),
                        y: data.y,
                      };
                });
    
                XLSX.utils.book_append_sheet(book, XLSX.utils.json_to_sheet (data_array), control.chart ().data.datasets[i].label.replace(new RegExp(':', 'g'), '_'));
            }
    
            var wbout = XLSX.write(book, {bookType:t, type: 'binary'});
    
            try {
                FileSaver.saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), 'export.' + t);
            } catch(e) { if(typeof console != 'undefined') console.log(e, wbout); }
    
            return wbout;
        };
    
        var printCanvas = function (canvas) {
    
           var dataUrl = canvas.toDataURL(); //attempt to save base64 string to server using this var
    
           var windowContent = '<!DOCTYPE html>';
           windowContent += '<html>'
           windowContent += '<head><title>Print canvas</title></head>';
           windowContent += '<body>'
           windowContent += '<img style="position: relative; width: 110%; height: 500px; margin-top: 50px;" src="' + dataUrl + '">';
    
           for (var i = 0; i < control.chart ().data.datasets.length; i++) {
    
               var datasetMetadata = control.chart ().chart.getDatasetMeta (i);
    
               if (!datasetMetadata.hidden)
                   windowContent += "<span style=\"position: relative; padding: 5px; font-size: 14px; color:" + control.chart ().data.datasets [i].backgroundColor + " \">" + control.chart ().data.datasets [i].label + "</span>";
           }
    
           windowContent += '<br> <span style=\"position: relative; padding: 5px; font-size: 14px;\"> From ' + control.start () + ' to ' + control.end() + '</span>';
           windowContent += '</body>';
           windowContent += '</html>';
    
           var printWin = window.open('','','width=340,height=260');
           printWin.document.open();
           printWin.document.write(windowContent);
           printWin.document.close();
           printWin.focus();
           printWin.print();
           printWin.close();
        };
    
        var undoHandler = function () {
    
            if (control.undo_stack().length > 0 && !control.auto_enabled ()) {
    
                var undo = control.undo_stack().pop ();
    
                switch (undo.action) {
    
                    case control.stackActions.REMOVE_PV:
    
                        control.redo_stack().push ({action : control.stackActions.REMOVE_PV, pv : undo.pv});
                        control.appendPV (undo.pv, undo.optimized, true);
                        break;
    
                    case control.stackActions.APPEND_PV:
    
                        var index = control.getPlotIndex (undo.pv);
    
                        control.redo_stack().push ({action : control.stackActions.APPEND_PV, pv : undo.pv, optimized : control.chart ().data.datasets[index].pv.optimized});
                        control.removeDataset (index, true);
                        break;
    
                    case control.stackActions.CHANGE_WINDOW_TIME:
    
                        control.redo_stack().push ({action : control.stackActions.CHANGE_WINDOW_TIME, window : control.window_time ()});
                        control.updateTimeWindow (undo.window);
                        break;
    
                    case control.stackActions.CHANGE_END_TIME:
    
                        control.redo_stack().push ({action : control.stackActions.CHANGE_END_TIME, end_time : control.end ()});
    
                        control.updateTimeReference (control.references.END);
    
                        control.updateStartAndEnd(undo.end_time, true, true);
    
                        // does not change the time window, only updates all plots
                        control.updateTimeWindow (control.window_time ());
    
                        break;
    
                    case control.stackActions.CHANGE_START_TIME:
    
                        control.redo_stack().push ({action : control.stackActions.CHANGE_START_TIME, start_time : control.start ()});
    
                        control.updateTimeReference (control.references.START);
    
                        control.updateStartAndEnd(undo.start_time, true, true);
    
                        // does not change the time window, only updates all plots
                        control.updateTimeWindow (control.window_time ());
    
                        break;
    
                    case control.stackActions.ZOOM:
    
                        control.redo_stack().push ({action : control.stackActions.ZOOM, start_time: control.start (), end_time : control.end (), window_time: control.window_time ()});
    
                        control.updateStartAndEnd(undo.end_time, true, true);
    
                        control.updateTimeWindow (undo.window_time);
    
                        control.chart ().update(0, false);
    
                        break;
                }
    
                control.chart ().update (0, false);
            }
        };
    
        var redoHandler = function () {
    
            if (control.redo_stack().length > 0 && !control.auto_enabled ()) {
    
                var redo = control.redo_stack().pop ();
    
                switch (redo.action) {
    
                    case control.stackActions.REMOVE_PV:
    
                        control.removeDataset (control.getPlotIndex (redo.pv));
                        break;
    
                    case control.stackActions.APPEND_PV:
    
                        control.appendPV (redo.pv, redo.optimized);
                        break;
    
                    case control.stackActions.CHANGE_WINDOW_TIME:
    
                        control.updateTimeWindow (redo.window);
                        break;
    
                    case control.stackActions.CHANGE_START_TIME:
    
                        ui.enableLoading();
    
                        control.updateTimeReference (control.references.START);
    
                        control.updateStartAndEnd(redo.start_time, true);
                        control.updateAllPlots(true);
                        control.updateURL();
    
                        chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                        control.chart ().update(0, false);
    
                        ui.disableLoading();
    
                        break;
    
                    case control.stackActions.CHANGE_END_TIME:
    
                        ui.enableLoading();
    
                        control.updateTimeReference (control.references.END);
    
                        control.updateStartAndEnd(redo.end_time, true);
                        control.updateAllPlots(true);
                        control.updateURL();
    
                        chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[control.window_time ()].unit, chartUtils.timeAxisPreferences[control.window_time ()].unitStepSize, control.start (), control.end ());
    
                        control.chart ().update(0, false);
    
                        ui.disableLoading();
    
                        break;
    
                    case control.stackActions.ZOOM:
    
                        ui.toogleWindowButton (undefined, control.window_time ());
    
                        // Updates the chart attributes
                        control.updateStartTime (redo.start_time);
                        control.updateEndTime (redo.end_time);
    
                        chartUtils.updateTimeAxis (control.chart (), chartUtils.timeAxisPreferences[redo.window_time].unit, chartUtils.timeAxisPreferences[redo.window_time].unitStepSize, control.start (), control.end ());
    
                        control.optimizeAllGraphs ();
                        control.updateAllPlots(true);
                        control.updateURL();
    
                        ui.updateDateComponents (control.end ());
    
                        // Redraws the chart
                        control.chart ().update(0, false);
    
                        control.updateOptimizedWarning();
    
                        break;
                }
    
                control.chart ().update (0, false);
    
            }
        };
    
        var updateReferenceTime = function () {
    
            if (ui.isEndSelected ()) {
                ui.updateDateComponents (control.end ());
                control.updateTimeReference (control.references.END);
            }
            else {
                ui.updateDateComponents (control.start ());
                control.updateTimeReference (control.references.START);
            }
        };
    
        return {
    
            onChangeDateHandler : onChangeDateHandler,
            updateTimeWindow: updateTimeWindow,
            updateEndNow: updateEndNow,
            backTimeWindow: backTimeWindow,
            forwTimeWindow: forwTimeWindow,
            queryPVs: queryPVs,
            refreshScreen: refreshScreen,
            appendPVHandler: appendPVHandler,
            plotSelectedPVs: plotSelectedPVs,
            scrollChart: scrollChart,
            autoRefreshingHandler: autoRefreshingHandler,
            dataClickHandler: dataClickHandler,
    
            startDragging: startDragging,
            doDragging: doDragging,
            stopDragging: stopDragging,
            zoomClickHandler: zoomClickHandler,
    
            toogleTable: toogleTable,
            exportAs: exportAs,
            printCanvas: printCanvas,
            undoHandler: undoHandler,
            redoHandler: redoHandler,
            updateReferenceTime: updateReferenceTime,
        };
    
    })();
    
    },{"./archInterface.js":65,"./chartUtils.js":66,"./control.js":67,"./ui.js":69,"file-saver":57,"jquery-browserify":58,"xlsx":63}],69:[function(require,module,exports){
    var $ = require('jquery-browserify');
    
    module.exports = (function () {
    
        const PV_PER_ROW = 4;
        const PV_PER_ROW_DATA_TABLE = 8;
        const PV_MAX_ROW_PER_PAGE = 10;
        const PV_PER_ROW_INFO = 4;
    
        var current_page = 0;
        var selectedPVs = [];
    
        /* Miscellaneous functions  */
        function pad_with_zeroes(number, length) {
    
            var my_string = '' + number;
            while (my_string.length < length) {
                my_string = '0' + my_string;
            }
    
            return my_string;
        }
    
        var updateDateComponents = function (date) {
    
            var day   = ("0" + date.getDate()).slice(-2),
                month = ("0" + (date.getMonth() + 1)).slice(-2);
    
            $("#day").val(date.getFullYear() + "-" + month + "-" + day);
            $("#hour").val(pad_with_zeroes(date.getHours(), 2));
            $("#minute").val(pad_with_zeroes(date.getMinutes(), 2));
            $("#second").val(pad_with_zeroes(date.getSeconds(), 2));
        };
    
        var toogleWindowButton = function (toPush, toUnpush) {
    
            /* Untoggled pushed button */
            if (toUnpush != undefined)
                $('#window_table tr').eq(0).find('td').eq(toUnpush)[0].className = "unpushed";
    
            if (toPush != undefined)
                $('#window_table tr').eq(0).find('td').eq(toPush)[0].className = "pushed";
        };
    
        var enableLoading = function (){
    
            $("#date .loading").show();
        };
    
        var disableLoading = function (){
    
            $("#date .loading").hide();
        };
    
        var showWarning = function (){
    
            $("#obs").fadeIn();
        };
    
        var hideWarning = function (){
    
            $("#obs").fadeOut();
        };
    
        var getTimedate = function () {
    
            var date    = $("#day").val().split("-"),
                day     = parseInt(date[2]),
                month   = parseInt(date[1]) - 1,
                year    = parseInt(date[0]),
                hours   = parseInt($("#hour").val()),
                minutes = parseInt($("#minute").val()),
                seconds = parseInt($("#second").val());
    
            return new Date (year, month, day, hours, minutes, seconds, 0);
        };
    
        var disableDate = function () {
    
            $("#day").prop('disabled', true);
            $("#hour").prop('disabled', true);
            $("#minute").prop('disabled', true);
            $("#second").prop('disabled', true);
        };
    
        var enableDate = function () {
    
            $("#day").prop('disabled', false);
            $("#hour").prop('disabled', false);
            $("#minute").prop('disabled', false);
            $("#second").prop('disabled', false);
        };
    
        var toogleSearchWarning = function (warning) {
    
            $("#warning h4").text (warning);
    
            showSearchWarning ();
    
            var timer = setInterval(function () {
    
                hideSearchWarning ();
                clearInterval (timer);
    
            }, 5000);
    
        };
    
        var checkboxes = [];
    
        var showSearchResultsAtPage = function (index, data) {
    
            $("#table_PVs tr").remove();
    
            checkboxes = []
    
            var i;
            for (i = index * PV_MAX_ROW_PER_PAGE * PV_PER_ROW; i < data.length && i < ((index + 1) * PV_MAX_ROW_PER_PAGE * PV_PER_ROW); i++) {
    
                var row;
                if (!( (i - index * PV_MAX_ROW_PER_PAGE * PV_PER_ROW) % PV_PER_ROW )) {
    
                    row = $("<tr></tr>")
                    row.appendTo($("#table_PVs"));
                }
    
                var tdCheckbox = $('<td></td>');
    
                checkboxes.push ($('<input />').attr({"type" : "checkbox", "checked" : selectedPVs.indexOf (data[i]) > -1}).click({"name" : data[i]}, function (event) {
                    if (this.checked)
                      selectedPVs.push (event.data.name)
                    else
                      selectedPVs.splice (selectedPVs.indexOf (event.data.name), 1);
    
                    console.log (selectedPVs)
                }).appendTo (tdCheckbox));
    
                $('<label></label>').text(data[i]).appendTo (tdCheckbox);
    
                tdCheckbox.appendTo (row);
            }
        };
    
        var selectedAllPVs = function (e) {
    
            for (var i = 0; i < checkboxes.length; i++) {
                checkboxes [i].prop('checked', true).triggerHandler("click");
            }
        }
    
        var deselectedAllPVs = function (e) {
    
            for (var i = 0; i < checkboxes.length; i++)
              checkboxes [i].prop('checked', false).triggerHandler("click");
        }
    
        var showSearchResults = function (data) {
    
            if (data != null && data.length > 0) {
    
                if (data.length > 1)
                    $("#archived_PVs h2").text(data.length + " PVs have been found.");
                else
                    $("#archived_PVs h2").text("1 PV has been found.");
    
                current_page = 0;
                selectedPVs = [];
    
                showSearchResultsAtPage (0, data);
    
                $(document.body).children().css ('opacity', '0.3');
                $("#archived_PVs").show ();
                $("#archived_PVs").css ('opacity', '1.0');
    
                $("#previous").hide();
    
                $("#previous").unbind().click ({pvs: data}, function (event) {
    
                    current_page = current_page - 1;
                    showSearchResultsAtPage (current_page, event.data.pvs);
    
                    if (!current_page)
                        $("#previous").hide();
    
                    $("#next").show();
                });
    
                $("#next").unbind().click ({pvs: data}, function (event) {
    
                    current_page = current_page + 1;
                    showSearchResultsAtPage (current_page, event.data.pvs);
    
                    if ((current_page + 1) * PV_MAX_ROW_PER_PAGE * PV_PER_ROW >= event.data.pvs.length )
                        $("#next").hide();
    
                    $("#previous").show();
                });
    
                if (data.length <= PV_MAX_ROW_PER_PAGE * PV_PER_ROW)
                    $("#next").hide();
                else
                    $("#next").show();
            }
            else if (data != null)
                toogleSearchWarning ("No PVs corresponding to the search string have been found.");
        };
    
        var hideSearchedPVs = function () {
    
            $('#archived_PVs').hide();
            $(document.body).children().css('opacity', '1.0');
        }
    
        var refreshScreen = function (event) {
    
            if (event.target.id != 'archived_PVs' && !$('#archived_PVs').find(event.target).length)
                hideSearchedPVs();
        }
    
        var toggleZoomButton = function (enable) {
    
            if (enable)
                $("#date .zoom").css('background-color',"lightgrey");
            else
                $("#date .zoom").css('background-color',"white");
        }
    
        var hideZoomBox = function () {
    
            $("#canvas_area span.selection_box").hide();
            $("#canvas_area span.selection_box").css("width", 0);
            $("#canvas_area span.selection_box").css("height", 0);
        };
    
        var drawZoomBox = function (x, w, h) {
    
            $("#canvas_area span.selection_box").css("left", x + "px");
            $("#canvas_area span.selection_box").css("top", "0");
            $("#canvas_area span.selection_box").css("width", w + "px");
            $("#canvas_area span.selection_box").css("height", h  + "px");
        };
    
        var updateAddress = function (searchString) {
    
            var newurl = window.location.pathname + searchString;
    
            if (history.pushState)
                window.history.pushState({path:newurl}, '', newurl);
        };
    
        /**
        * updateDataTable draws a table below the char containing the data that is
        * currently being rendered.
        **/
        var updateDataTable = function (datasets, start, end) {
    
            // Remove all data before rewriting
            $("#data_table_area .data_table").remove();
            $("#data_table_area h2").remove();
    
            // Draws a table for each variable chosen by the user
            for (var i = 0; i < datasets.length; i++){
    
                var table = $('<table></table>').addClass('data_table'),
                    pv_data = datasets[i].data,
                    count = 0;
    
                $('#data_table_area').append($('<h2></h2>').text(datasets[i].label));
    
                for (var j = 0; j < pv_data.length; j++) {
    
                    var row;
    
                    if ((pv_data[j].x.getTime() >= start.getTime()) &&
                        (pv_data[j].x.getTime() <= end.getTime())) {
    
                        if (!(count % PV_PER_ROW_DATA_TABLE)) {
                            row = $("<tr></tr>")
                            row.appendTo(table);
                        }
    
                        count++;
    
                        $('<td></td>').attr('class', 'pv_time').text(pv_data[j].x.toLocaleDateString() + " " + pv_data[j].x.toLocaleTimeString()).appendTo(row);
                        $('<td></td>').attr('class', 'pv_value').text(pv_data[j].y.toFixed(datasets[i].pv.precision)).appendTo(row);
                    }
                }
    
                $('#data_table_area').append(table);
            }
        };
    
        var showTable = function () {
            $('#data_table_area .data_table').show();
        };
    
        var resetTable = function () {
            $("#data_table_area .data_table").remove();
            $("#data_table_area h2").remove();
            $('#data_table_area .data_table').hide();
        };
    
        var updatePVInfoTable = function (datasets, legendHandler, optimizeHandler, removeHandler) {
    
            // Remove all data before rewriting
            $("#data_pv_info .pv_info_table").remove();
    
            var table = $('<table></table>').addClass('pv_info_table');
    
            // Draws a table for each variable chosen by the user
            for (var i = 0; i < datasets.length; i++){
    
                if (!(i % PV_PER_ROW_INFO)) {
                    row = $("<tr></tr>")
                    row.appendTo(table);
                }
    
                $('<td></td>').css({"background-color": datasets[i].backgroundColor, "width": "30px", "cursor" : "pointer"}).click({"datasetIndex" : i}, legendHandler).appendTo(row);
    
                $('<td></td>').text(datasets[i].label).appendTo(row);
    
                var tdOptimized = $('<td></td>');
    
                $('<input />').attr({"type" : "checkbox", "checked" : datasets[i].pv.optimized, "disabled" : datasets[i].pv.type == "DBR_SCALAR_ENUM"}).click({"datasetIndex" : i}, optimizeHandler).appendTo (tdOptimized);
    
                var div = $('<label></label>').attr('class', 'tooltip').text('Optimize?');
    
                $('<span></span>').attr('class', 'tooltiptext').text('Uncheck it if you want raw data sent from the server.').appendTo(div);
    
                div.appendTo (tdOptimized);
    
                tdOptimized.appendTo(row);
    
                var tdRemove = $('<td></td>');
    
                tdRemove.css({"cursor" : "pointer"}).text("Remove").click ({"datasetIndex" : i}, removeHandler);
    
                tdRemove.appendTo (row);
            }
    
            $('#data_pv_info').append(table);
        };
    
        var showSearchWarning = function (){
    
            $("#warning").fadeIn();
        };
    
        var hideSearchWarning = function (){
    
            $("#warning").fadeOut();
        };
    
        var disable = function (button) {
    
            button.addClass("disabled");
            button.css({"background-color" : "lightblue", "cursor" : "default", "pointerEvents" : "none"});
        };
    
        var enable = function (button) {
    
            button.removeClass("disabled");
            button.css({"background-color" : "white", "cursor" : "pointer", "pointerEvents" : "auto"});
        };
    
        var isEndSelected = function () {
            return ($('#date .type').find(":selected").text() == "END");
        };
    
        var enableReference = function (i) {
            $('#date .type>option:eq(' + (1 - i) + ')').prop('selected', false);
            $('#date .type>option:eq(' + i + ')').prop('selected', true);
        };
    
        return {
    
            selectedPVs: function () { return selectedPVs; },
    
            updateDateComponents : updateDateComponents,
            toogleWindowButton: toogleWindowButton,
            enableLoading: enableLoading,
            disableLoading: disableLoading,
            showWarning: showWarning,
            hideWarning: hideWarning,
            getTimedate: getTimedate,
            enableDate: enableDate,
            disableDate: disableDate,
            showSearchResultsAtPage: showSearchResultsAtPage,
            showSearchResults: showSearchResults,
            hideSearchedPVs: hideSearchedPVs,
            refreshScreen: refreshScreen,
            toggleZoomButton: toggleZoomButton,
            hideZoomBox: hideZoomBox,
            drawZoomBox:drawZoomBox,
            updateAddress: updateAddress,
            updateDataTable: updateDataTable,
            showTable: showTable,
            resetTable: resetTable,
            updatePVInfoTable: updatePVInfoTable,
            showSearchWarning: showSearchWarning,
            hideSearchWarning: hideSearchWarning,
            toogleSearchWarning: toogleSearchWarning,
            disable: disable,
            enable: enable,
            isEndSelected: isEndSelected,
            enableReference: enableReference,
            selectedAllPVs: selectedAllPVs,
            deselectedAllPVs: deselectedAllPVs,
        };
    
    })();
    
    },{"jquery-browserify":58}],70:[function(require,module,exports){
    'use strict'
    
    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray
    
    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
    
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }
    
    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63
    
    function placeHoldersCount (b64) {
      var len = b64.length
      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }
    
      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
    }
    
    function byteLength (b64) {
      // base64 is 4/3 + up to two characters of the original data
      return (b64.length * 3 / 4) - placeHoldersCount(b64)
    }
    
    function toByteArray (b64) {
      var i, l, tmp, placeHolders, arr
      var len = b64.length
      placeHolders = placeHoldersCount(b64)
    
      arr = new Arr((len * 3 / 4) - placeHolders)
    
      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len
    
      var L = 0
    
      for (i = 0; i < l; i += 4) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
        arr[L++] = (tmp >> 16) & 0xFF
        arr[L++] = (tmp >> 8) & 0xFF
        arr[L++] = tmp & 0xFF
      }
    
      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
        arr[L++] = tmp & 0xFF
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
        arr[L++] = (tmp >> 8) & 0xFF
        arr[L++] = tmp & 0xFF
      }
    
      return arr
    }
    
    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }
    
    function encodeChunk (uint8, start, end) {
      var tmp
      var output = []
      for (var i = start; i < end; i += 3) {
        tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)
        output.push(tripletToBase64(tmp))
      }
      return output.join('')
    }
    
    function fromByteArray (uint8) {
      var tmp
      var len = uint8.length
      var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
      var output = ''
      var parts = []
      var maxChunkLength = 16383 // must be multiple of 3
    
      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
      }
    
      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1]
        output += lookup[tmp >> 2]
        output += lookup[(tmp << 4) & 0x3F]
        output += '=='
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
        output += lookup[tmp >> 10]
        output += lookup[(tmp >> 4) & 0x3F]
        output += lookup[(tmp << 2) & 0x3F]
        output += '='
      }
    
      parts.push(output)
    
      return parts.join('')
    }
    
    },{}],71:[function(require,module,exports){
    
    },{}],72:[function(require,module,exports){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */
    
    'use strict'
    
    var base64 = require('base64-js')
    var ieee754 = require('ieee754')
    
    exports.Buffer = Buffer
    exports.SlowBuffer = SlowBuffer
    exports.INSPECT_MAX_BYTES = 50
    
    var K_MAX_LENGTH = 0x7fffffff
    exports.kMaxLength = K_MAX_LENGTH
    
    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
    
    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      )
    }
    
    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        var arr = new Uint8Array(1)
        arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }
    
    Object.defineProperty(Buffer.prototype, 'parent', {
      get: function () {
        if (!(this instanceof Buffer)) {
          return undefined
        }
        return this.buffer
      }
    })
    
    Object.defineProperty(Buffer.prototype, 'offset', {
      get: function () {
        if (!(this instanceof Buffer)) {
          return undefined
        }
        return this.byteOffset
      }
    })
    
    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('Invalid typed array length')
      }
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length)
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */
    
    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }
    
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    if (typeof Symbol !== 'undefined' && Symbol.species &&
        Buffer[Symbol.species] === Buffer) {
      Object.defineProperty(Buffer, Symbol.species, {
        value: null,
        configurable: true,
        enumerable: false,
        writable: false
      })
    }
    
    Buffer.poolSize = 8192 // not used by this implementation
    
    function from (value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }
    
      if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }
    
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }
    
      return fromObject(value)
    }
    
    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    }
    
    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
    
    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }
    
    function alloc (size, fill, encoding) {
      assertSize(size)
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }
    
    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    }
    
    function allocUnsafe (size) {
      assertSize(size)
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }
    
    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    }
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    }
    
    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8'
      }
    
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    
      var length = byteLength(string, encoding) | 0
      var buf = createBuffer(length)
    
      var actual = buf.write(string, encoding)
    
      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual)
      }
    
      return buf
    }
    
    function fromArrayLike (array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0
      var buf = createBuffer(length)
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255
      }
      return buf
    }
    
    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }
    
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }
    
      var buf
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array)
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset)
      } else {
        buf = new Uint8Array(array, byteOffset, length)
      }
    
      // Return an augmented `Uint8Array` instance
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0
        var buf = createBuffer(len)
    
        if (buf.length === 0) {
          return buf
        }
    
        obj.copy(buf, 0, 0, len)
        return buf
      }
    
      if (obj) {
        if (ArrayBuffer.isView(obj) || 'length' in obj) {
          if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
            return createBuffer(0)
          }
          return fromArrayLike(obj)
        }
    
        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data)
        }
      }
    
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
    }
    
    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }
    
    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0
      }
      return Buffer.alloc(+length)
    }
    
    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true
    }
    
    Buffer.compare = function compare (a, b) {
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }
    
      if (a === b) return 0
    
      var x = a.length
      var y = b.length
    
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i]
          y = b[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    }
    
    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
    
      if (list.length === 0) {
        return Buffer.alloc(0)
      }
    
      var i
      if (length === undefined) {
        length = 0
        for (i = 0; i < list.length; ++i) {
          length += list[i].length
        }
      }
    
      var buffer = Buffer.allocUnsafe(length)
      var pos = 0
      for (i = 0; i < list.length; ++i) {
        var buf = list[i]
        if (ArrayBuffer.isView(buf)) {
          buf = Buffer.from(buf)
        }
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos)
        pos += buf.length
      }
      return buffer
    }
    
    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string
      }
    
      var len = string.length
      if (len === 0) return 0
    
      // Use a for loop to avoid recursion
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    Buffer.byteLength = byteLength
    
    function slowToString (encoding, start, end) {
      var loweredCase = false
    
      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.
    
      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }
    
      if (end === undefined || end > this.length) {
        end = this.length
      }
    
      if (end <= 0) {
        return ''
      }
    
      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0
      start >>>= 0
    
      if (end <= start) {
        return ''
      }
    
      if (!encoding) encoding = 'utf8'
    
      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)
    
          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)
    
          case 'ascii':
            return asciiSlice(this, start, end)
    
          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)
    
          case 'base64':
            return base64Slice(this, start, end)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase()
            loweredCase = true
        }
      }
    }
    
    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true
    
    function swap (b, n, m) {
      var i = b[n]
      b[n] = b[m]
      b[m] = i
    }
    
    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1)
      }
      return this
    }
    
    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3)
        swap(this, i + 1, i + 2)
      }
      return this
    }
    
    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7)
        swap(this, i + 1, i + 6)
        swap(this, i + 2, i + 5)
        swap(this, i + 3, i + 4)
      }
      return this
    }
    
    Buffer.prototype.toString = function toString () {
      var length = this.length
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    }
    
    Buffer.prototype.toLocaleString = Buffer.prototype.toString
    
    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    }
    
    Buffer.prototype.inspect = function inspect () {
      var str = ''
      var max = exports.INSPECT_MAX_BYTES
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
        if (this.length > max) str += ' ... '
      }
      return '<Buffer ' + str + '>'
    }
    
    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!Buffer.isBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }
    
      if (start === undefined) {
        start = 0
      }
      if (end === undefined) {
        end = target ? target.length : 0
      }
      if (thisStart === undefined) {
        thisStart = 0
      }
      if (thisEnd === undefined) {
        thisEnd = this.length
      }
    
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }
    
      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }
    
      start >>>= 0
      end >>>= 0
      thisStart >>>= 0
      thisEnd >>>= 0
    
      if (this === target) return 0
    
      var x = thisEnd - thisStart
      var y = end - start
      var len = Math.min(x, y)
    
      var thisCopy = this.slice(thisStart, thisEnd)
      var targetCopy = target.slice(start, end)
    
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i]
          y = targetCopy[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1
    
      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset
        byteOffset = 0
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000
      }
      byteOffset = +byteOffset  // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1)
      }
    
      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0
        else return -1
      }
    
      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding)
      }
    
      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }
    
      throw new TypeError('val must be string, number or Buffer')
    }
    
    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1
      var arrLength = arr.length
      var valLength = val.length
    
      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase()
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2
          arrLength /= 2
          valLength /= 2
          byteOffset /= 2
        }
      }
    
      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }
    
      var i
      if (dir) {
        var foundIndex = -1
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex
            foundIndex = -1
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
        for (i = byteOffset; i >= 0; i--) {
          var found = true
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false
              break
            }
          }
          if (found) return i
        }
      }
    
      return -1
    }
    
    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    }
    
    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    }
    
    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    }
    
    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0
      var remaining = buf.length - offset
      if (!length) {
        length = remaining
      } else {
        length = Number(length)
        if (length > remaining) {
          length = remaining
        }
      }
    
      var strLen = string.length
    
      if (length > strLen / 2) {
        length = strLen / 2
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16)
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed
      }
      return i
    }
    
    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }
    
    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }
    
    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }
    
    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8'
        length = this.length
        offset = 0
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset
        length = this.length
        offset = 0
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0
        if (isFinite(length)) {
          length = length >>> 0
          if (encoding === undefined) encoding = 'utf8'
        } else {
          encoding = length
          length = undefined
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }
    
      var remaining = this.length - offset
      if (length === undefined || length > remaining) length = remaining
    
      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }
    
      if (!encoding) encoding = 'utf8'
    
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)
    
          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)
    
          case 'ascii':
            return asciiWrite(this, string, offset, length)
    
          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)
    
          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    
    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    }
    
    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf)
      } else {
        return base64.fromByteArray(buf.slice(start, end))
      }
    }
    
    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end)
      var res = []
    
      var i = start
      while (i < end) {
        var firstByte = buf[i]
        var codePoint = null
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1
    
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint
    
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte
              }
              break
            case 2:
              secondByte = buf[i + 1]
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 3:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 4:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              fourthByte = buf[i + 3]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint
                }
              }
          }
        }
    
        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD
          bytesPerSequence = 1
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000
          res.push(codePoint >>> 10 & 0x3FF | 0xD800)
          codePoint = 0xDC00 | codePoint & 0x3FF
        }
    
        res.push(codePoint)
        i += bytesPerSequence
      }
    
      return decodeCodePointsArray(res)
    }
    
    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000
    
    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }
    
      // Decode in chunks to avoid "call stack size exceeded".
      var res = ''
      var i = 0
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        )
      }
      return res
    }
    
    function asciiSlice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F)
      }
      return ret
    }
    
    function latin1Slice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i])
      }
      return ret
    }
    
    function hexSlice (buf, start, end) {
      var len = buf.length
    
      if (!start || start < 0) start = 0
      if (!end || end < 0 || end > len) end = len
    
      var out = ''
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i])
      }
      return out
    }
    
    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end)
      var res = ''
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
      }
      return res
    }
    
    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length
      start = ~~start
      end = end === undefined ? len : ~~end
    
      if (start < 0) {
        start += len
        if (start < 0) start = 0
      } else if (start > len) {
        start = len
      }
    
      if (end < 0) {
        end += len
        if (end < 0) end = 0
      } else if (end > len) {
        end = len
      }
    
      if (end < start) end = start
    
      var newBuf = this.subarray(start, end)
      // Return an augmented `Uint8Array` instance
      newBuf.__proto__ = Buffer.prototype
      return newBuf
    }
    
    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }
    
    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length)
      }
    
      var val = this[offset + --byteLength]
      var mul = 1
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      return this[offset]
    }
    
    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return this[offset] | (this[offset + 1] << 8)
    }
    
    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return (this[offset] << 8) | this[offset + 1]
    }
    
    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    }
    
    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    }
    
    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var i = byteLength
      var mul = 1
      var val = this[offset + --i]
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    }
    
    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset] | (this[offset + 1] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset + 1] | (this[offset] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    }
    
    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    }
    
    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, true, 23, 4)
    }
    
    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, false, 23, 4)
    }
    
    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, true, 52, 8)
    }
    
    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, false, 52, 8)
    }
    
    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }
    
    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var mul = 1
      var i = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var i = byteLength - 1
      var mul = 1
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = 0
      var mul = 1
      var sub = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = byteLength - 1
      var mul = 1
      var sub = 0
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
      if (value < 0) value = 0xff + value + 1
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
      return offset + 4
    }
    
    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      if (value < 0) value = 0xffffffff + value + 1
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }
    
    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4)
      return offset + 4
    }
    
    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    }
    
    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8)
      return offset + 8
    }
    
    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    }
    
    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0
      if (!end && end !== 0) end = this.length
      if (targetStart >= target.length) targetStart = target.length
      if (!targetStart) targetStart = 0
      if (end > 0 && end < start) end = start
    
      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0
    
      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')
    
      // Are we oob?
      if (end > this.length) end = this.length
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start
      }
    
      var len = end - start
    
      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end)
      } else if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (var i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start]
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        )
      }
    
      return len
    }
    
    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start
          start = 0
          end = this.length
        } else if (typeof end === 'string') {
          encoding = end
          end = this.length
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0)
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255
      }
    
      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }
    
      if (end <= start) {
        return this
      }
    
      start = start >>> 0
      end = end === undefined ? this.length : end >>> 0
    
      if (!val) val = 0
    
      var i
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : new Buffer(val, encoding)
        var len = bytes.length
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len]
        }
      }
    
      return this
    }
    
    // HELPER FUNCTIONS
    // ================
    
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
    
    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0]
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '')
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '='
      }
      return str
    }
    
    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }
    
    function utf8ToBytes (string, units) {
      units = units || Infinity
      var codePoint
      var length = string.length
      var leadSurrogate = null
      var bytes = []
    
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i)
    
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            }
    
            // valid lead
            leadSurrogate = codePoint
    
            continue
          }
    
          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            leadSurrogate = codePoint
            continue
          }
    
          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        }
    
        leadSurrogate = null
    
        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint)
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else {
          throw new Error('Invalid code point')
        }
      }
    
      return bytes
    }
    
    function asciiToBytes (str) {
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF)
      }
      return byteArray
    }
    
    function utf16leToBytes (str, units) {
      var c, hi, lo
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break
    
        c = str.charCodeAt(i)
        hi = c >> 8
        lo = c % 256
        byteArray.push(lo)
        byteArray.push(hi)
      }
    
      return byteArray
    }
    
    function base64ToBytes (str) {
      return base64.toByteArray(base64clean(str))
    }
    
    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i]
      }
      return i
    }
    
    // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
    // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
    function isArrayBuffer (obj) {
      return obj instanceof ArrayBuffer ||
        (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
          typeof obj.byteLength === 'number')
    }
    
    function numberIsNaN (obj) {
      return obj !== obj // eslint-disable-line no-self-compare
    }
    
    },{"base64-js":70,"ieee754":73}],73:[function(require,module,exports){
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m
      var eLen = nBytes * 8 - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var nBits = -7
      var i = isLE ? (nBytes - 1) : 0
      var d = isLE ? -1 : 1
      var s = buffer[offset + i]
    
      i += d
    
      e = s & ((1 << (-nBits)) - 1)
      s >>= (-nBits)
      nBits += eLen
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    
      m = e & ((1 << (-nBits)) - 1)
      e >>= (-nBits)
      nBits += mLen
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    
      if (e === 0) {
        e = 1 - eBias
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen)
        e = e - eBias
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }
    
    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c
      var eLen = nBytes * 8 - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
      var i = isLE ? 0 : (nBytes - 1)
      var d = isLE ? 1 : -1
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
    
      value = Math.abs(value)
    
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0
        e = eMax
      } else {
        e = Math.floor(Math.log(value) / Math.LN2)
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--
          c *= 2
        }
        if (e + eBias >= 1) {
          value += rt / c
        } else {
          value += rt * Math.pow(2, 1 - eBias)
        }
        if (value * c >= 2) {
          e++
          c /= 2
        }
    
        if (e + eBias >= eMax) {
          m = 0
          e = eMax
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen)
          e = e + eBias
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
          e = 0
        }
      }
    
      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
    
      e = (e << mLen) | m
      eLen += mLen
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
    
      buffer[offset + i - d] |= s * 128
    }
    
    },{}],74:[function(require,module,exports){
    // shim for using process in browser
    var process = module.exports = {};
    
    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.
    
    var cachedSetTimeout;
    var cachedClearTimeout;
    
    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    
    
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    
    
    
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }
    
    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
    
        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    
    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };
    
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};
    
    function noop() {}
    
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    
    process.listeners = function (name) { return [] }
    
    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };
    
    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };
    
    },{}]},{},[64]);